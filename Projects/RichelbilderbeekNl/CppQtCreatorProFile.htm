<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtCreatorProFile</title>
  <meta name="description" content="C++ QtCreatorProFile"/>
  <meta name="keywords" content="C++ QtCreatorProFile code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtCreatorProFile.htm">QtCreatorProFile</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppQtCreatorProFile.htm">QtCreatorProFile</a> is a <a href="CppQtProjectFile.htm">Qt project file (.pro)</a>
<a href="CppClass.htm">class</a>.</p>
<p>&nbsp;</p>
<p><a href="CppQtCreatorProFile.htm">QtCreatorProFile</a> is tested by the <a href="Tools.htm">tool</a> 
<a href="ToolTestQtCreatorProFile.htm">TestQtCreatorProFile</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtcreatorprofile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtcreatorprofile.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtCreator.html">QtCreator</a>ProFile, <b><a href="CppClass.html">class</a></b> to parse <a href="CppQt.htm">Qt</a> Project files<br/>
Copyright (C) 2010-2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtCreatorProFile.html">CppQtCreatorProFile</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> QTCREATORPRO<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>_H<br/>
<a href="CppDefine.html">#define</a> QTCREATORPRO<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIosfwdH.html">iosfwd</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppSetH.html">set</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "<a href="CppAbout.html">about</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQtCreator.html">QtCreator</a>ProFile parses .pro files<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse a .pro file<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename);<br/>
&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFile(<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFile&amp; <b><a href="CppOperator.html">operator</a></b>=(<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppAbout.html">About</a> information<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppAbout.html">About</a> GetAbout();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeConfig.html">CONFIG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetConfig() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_config; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeDefines.html">DEFINES</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetDefines() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_defines; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppFORMS.html">FORMS</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetForms() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_forms; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeHeaders.html">HEADERS</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetHeaders() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_headers; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQ<a href="CppMake.htm">make</a>Includepath.html">INCLUDEPATH</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetIncludepath() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_includepath; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetLibs() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_libs; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the OTHER_<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>S<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetOtherFiles() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_other_files; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the project file its file name<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; Get<a href="CppQtCreator.html">QtCreator</a>ProFilename() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_pro_filename; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeQmake_cxxflags.html">QMAKE_CXXFLAGS</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetQ<a href="CppMake.htm">make</a>Cxxflags() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_q<a href="CppMake.htm">make</a>_cxxflags; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the QT<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; Get<a href="CppQt.htm">Qt</a>() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_qt; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeResources.html">RESOURCES</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetResources() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_resources; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeSources.html">SOURCES</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetSources() <b><a href="CppConst.html">const</a></b>&nbsp;&nbsp;{ <b><a href="CppReturn.html">return</a></b> m_sources; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the TARGET<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetTarget() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_target; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQmakeTemplate.html">TEMPLATE</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetTemplate() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_<b><a href="CppTemplate.html">template</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeConfig.html">CONFIG</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetConfig(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_config <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeDefines.html">DEFINES</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDefines(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_defines <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppFORMS.html">FORMS</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetForms(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_forms <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeHeaders.html">HEADERS</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeaders(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_headers <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQ<a href="CppMake.htm">make</a>Includepath.html">INCLUDEPATH</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIncludepath(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_includepath <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetLibs(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_libs <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the OTHER_<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>S<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOtherFiles(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_other_files <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the project file its file name<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppQtCreator.html">QtCreator</a>ProFilename(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s) { m_pro_filename <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeQmake_cxxflags.html">QMAKE_CXXFLAGS</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetQ<a href="CppMake.htm">make</a>Cxxflags(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_q<a href="CppMake.htm">make</a>_cxxflags <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the QT<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppQt.htm">Qt</a>(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_qt <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeResources.html">RESOURCES</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetResources(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_resources <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeSources.html">SOURCES</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSources(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s)&nbsp;&nbsp;{ m_sources <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the TARGET<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetTarget(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_target <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQmakeTemplate.html">TEMPLATE</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetTemplate(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; s) { m_<b><a href="CppTemplate.html">template</a></b> <a href="CppOperatorAssign.htm">=</a> s; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Be sure the <b><a href="CppClass.html">class</a></b> is correctly deleted<br/>
&nbsp;&nbsp;~<a href="CppQtCreator.html">QtCreator</a>ProFile() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(<a href="CppQtCreator.html">QtCreator</a>ProFile* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeConfig.html">CONFIG</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_config;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeDefines.html">DEFINES</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_defines;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppFORMS.html">FORMS</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_forms;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeHeaders.html">HEADERS</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_headers;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQ<a href="CppMake.htm">make</a>Includepath.html">INCLUDEPATH</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_includepath;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_libs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at OTHER_<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>S<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_other_files;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The .pro file to parse<br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> m_pro_filename;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeQmake_cxxflags.html">QMAKE_CXXFLAGS</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_q<a href="CppMake.htm">make</a>_cxxflags;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at QT<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_qt;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeResources.html">RESOURCES</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_resources;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item at TARGET<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_target;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeTemplate.html">TEMPLATE</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_<b><a href="CppTemplate.html">template</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items at <a href="CppQmakeSources.html">SOURCES</a><br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_sources;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppFileToVector.html">FileToVector</a> reads a file and <a href="CppConvert.html">converts</a> it to a <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.html">FileToVector</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppFileToVector.html">FileToVector</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Determines <b><a href="CppIf.htm">if</a></b> a filename is a regular file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/CppIsRegularFile.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsRegularFile(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename);<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Parse the .pro file its content, split into lines<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Parse(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.html">SeperateString</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppSeperateString.html">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input, <b><a href="CppConst.html">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <a href="CppQtCreator.html">QtCreator</a>ProFile<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; p);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; lhs, <b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; rhs);<br/>
<br/>
};<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; p);<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppQtCreator.html">QtCreator</a>ProFile&gt;&amp; p);<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt;&amp; p);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; lhs, <b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> QTCREATORPRO<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtcreatorprofile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtcreatorprofile.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtCreator.html">QtCreator</a>ProFile, <b><a href="CppClass.html">class</a></b> to parse <a href="CppQt.htm">Qt</a> Project files<br/>
Copyright (C) 2010-2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtCreatorProFile.html">CppQtCreatorProFile</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "qtcreator<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppAlgorithmH.html">algorithm</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCstdlibH.html">cstdlib</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppFstreamH.html">fstream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIteratorH.html">iterator</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppMapH.html">map</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppSstreamH.html">sstream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppAlgorithm.html">algorithm</a>/string/split<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppAlgorithm.html">algorithm</a>/string/trim<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppFunction.html">function</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDir.htm">QDir</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQFile.html">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::<a href="CppQtCreator.html">QtCreator</a>ProFile(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_config{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_defines{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_forms{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_headers{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_includepath{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_libs{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_files{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pro_filename{filename},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_q<a href="CppMake.htm">make</a>_cxxflags{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qt{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_resources{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_target{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<b><a href="CppTemplate.html">template</a></b>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sources{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsRegularFile(filename.c_str()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile(filename.c_str()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.html">FileToVector</a>(filename);<br/>
&nbsp;&nbsp;Parse(v);<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::<a href="CppFileToVector.html">FileToVector</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile(filename.c_str()));<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppIfstream.html">std::ifstream</a> in(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetline.html">std::getline</a>(in,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppAbout.html">About</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::GetAbout()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.html">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQtCreator.html">QtCreator</a>ProFile",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppClass.html">class</a></b> to parse <a href="CppQt.htm">Qt</a> Project files",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 19th of August 2013",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-2013",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="CppQtCreatorProFile.html">CppQtCreatorProFile</a>.html",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>History());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> a;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "2.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-12-19: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-01-06: <a href="CppVersion.html">version</a> 1.1: added GetCommonRoot and GetLibs <a href="CppMemberFunction.html">member functions</a>, added <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-11: <a href="CppVersion.html">version</a> 1.2: fixed <a href="CppBug.htm">bug</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-02-25: <a href="CppVersion.html">version</a> 1.3: added GetAbout <a href="CppMemberFunction.html">member function</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-02-28: <a href="CppVersion.html">version</a> 1.4: added support <b><a href="CppFor.htm">for</a></b> <a href="CppQ<a href="CppMake.htm">make</a>Includepath.html">INCLUDEPATH</a>, <a href="CppFORMS.html">FORMS</a>, OTHER_<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>S, <a href="CppQmakeResources.html">RESOURCES</a> and <a href="CppQmakeQmake_cxxflags.html">QMAKE_CXXFLAGS</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-05-30: <a href="CppVersion.html">version</a> 1.5: added SimplifyPath",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-08-13: <a href="CppVersion.html">version</a> 1.6: modifiers like win32 and unix are ignored, instead of yielding an error",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-12-23: <a href="CppVersion.html">version</a> 1.7: set <a href="CppDestructor.html">destructor</a> to <b><a href="CppPrivate.html">private</a></b>, except <b><a href="CppFor.htm">for</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-12-23: <a href="CppVersion.html">version</a> 1.8: renamed to <a href="CppQtCreator.html">QtCreator</a>ProFile due to naming conflicts when cross-compiling",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-18: <a href="CppVersion.html">version</a> 2.0: simplified architecture by removing file I/O",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-08-19: <a href="CppVersion.html">version</a> 2.1: replaced <a href="CppBoostRegex.html">Boost.Regex</a> by <a href="CppBoostXpressive.html">Boost.Xpressive</a>, removed <a href="CppBoost.html">Boost</a>.Filesystem",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::IsRegularFile(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> !<a href="CppQDir.htm">QDir</a>(filename.c_str()).exists() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> <a href="CppQFile.html">QFile</a>::exists(filename.c_str());<br/>
}<br/>
<a href="CppEndif.html">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::Parse(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; &amp;v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; * p <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.html">nullptr</a></b>; <a href="CppComment.htm">//</a>A set to write to<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.html">enum class</a></b> Prefix { none, plus, minus };<br/>
&nbsp;&nbsp;Prefix prefix <a href="CppOperatorAssign.htm">=</a> Prefix::none;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; dirty_line: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> line <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.html">boost</a>::<a href="CppAlgorithm.html">algorithm</a>::trim_copy(dirty_line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line.empty()) <b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '#') <b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '{') <b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '}') <b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line.size() <a href="CppOperatorGreaterEqual.html">&gt;=</a> 7 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> line.substr(0,7) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("message")) <b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; words <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.html">SeperateString</a>(line,' ');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; dirty_word: words)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> word <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.html">boost</a>::<a href="CppAlgorithm.html">algorithm</a>::trim_copy(dirty_word);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (word.empty()) <b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (word[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '#') <b><a href="CppBreak.html">break</a></b>; <a href="CppComment.htm">//</a>Skip the rest of the line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!word.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> word; <a href="CppComment.htm">//</a>s gets cut into bits<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; conditional_sections<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"unix", "win32", "<b><a href="CppStatic.html">static</a></b>", "<a href="CppDebug.html">debug</a>", "release"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCount.html">std::count</a>(conditional_sections.begin(),conditional_sections.end(),s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.html">nullptr</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppMap.html">std::map</a>&lt;<a href="CppString.html">std::string</a>,<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;* &gt; m<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeConfig.html">CONFIG</a>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&amp;m_config },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeDefines.html">DEFINES</a>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;m_defines },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppFORMS.html">FORMS</a>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;m_forms },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeHeaders.html">HEADERS</a>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;m_headers },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQ<a href="CppMake.htm">make</a>Includepath.html">INCLUDEPATH</a>"&nbsp;&nbsp; ,&amp;m_includepath },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&amp;m_libs },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "OTHER_<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>S"&nbsp;&nbsp; ,&amp;m_other_files },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeQmake_cxxflags.html">QMAKE_CXXFLAGS</a>",&amp;m_q<a href="CppMake.htm">make</a>_cxxflags },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "QT"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&amp;m_qt },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeResources.html">RESOURCES</a>"&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;m_resources },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeSources.html">SOURCES</a>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;m_sources },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "TARGET"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&amp;m_target },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeTemplate.html">TEMPLATE</a>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&amp;m_<b><a href="CppTemplate.html">template</a></b> }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<a href="CppString.html">std::string</a>,<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;* &gt; sub_pair: m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; sub <a href="CppOperatorAssign.htm">=</a> sub_pair.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() <a href="CppOperatorGreaterEqual.html">&gt;=</a> sub.size() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s.substr(0,sub.size()) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sub)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> sub_pair.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> s.substr(sub.size(),s.size() <a href="CppOperatorMinus.htm">-</a> sub.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix <a href="CppOperatorAssign.htm">=</a> Prefix::none;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Determine prefixes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> has_prefixes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.html">while</a></b> (has_prefixes)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has_prefixes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!s.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '+')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix <a href="CppOperatorAssign.htm">=</a> Prefix::plus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> s.substr(1,s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has_prefixes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (!s.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '-')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix <a href="CppOperatorAssign.htm">=</a> Prefix::minus;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> s.substr(1,s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has_prefixes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (!s.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '\\')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> s.substr(1,s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has_prefixes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (!s.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '=')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> s.substr(1,s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has_prefixes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove possible postfix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!s.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[ s.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '\\') s.resize(s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> !s.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;insert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(prefix <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> Prefix::minus ? <a href="CppString.html">std::string</a>("-") : <a href="CppString.html">std::string</a>()) <a href="CppOperatorPlus.htm">+</a> s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::<a href="CppSeperateString.html">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIstringstream.html">std::istringstream</a> is(input);<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.html">std::string</a> sub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetline.html">std::getline</a>(is, sub, seperator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(sub))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Empty <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile::Test()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a project file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> mypath <a href="CppOperatorAssign.htm">=</a> "tmp.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.html">std::ofstream</a> f(mypath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#-------------------------------------------------\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "# Project created by <a href="CppQtCreator.html">QtCreator</a> 2010-12-19T16:24:53\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#-------------------------------------------------\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> core\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppOperatorAssign.htm">=</a> gui\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppWt.html">-lwt</a> <a href="CppRegex.html">-lboost_regex</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "TARGET <a href="CppOperatorAssign.htm">=</a> <a href="ToolTestQtCreatorProFile.html">ToolTestQtCreatorProFile</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeConfig.html">CONFIG</a>&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> console\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeConfig.html">CONFIG</a>&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppOperatorAssign.htm">=</a> app_bundle\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeTemplate.html">TEMPLATE</a> <a href="CppOperatorAssign.htm">=</a> app\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeSources.html">SOURCES</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a><a href="CppImplementationFile.html">.cpp</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProFile.html">profile</a><a href="CppImplementationFile.html">.cpp</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeHeaders.html">HEADERS</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the project file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile p(mypath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetConfig().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetConfig().count("console"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetConfig().count("-app_bundle"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetHeaders().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetHeaders().count("<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetLibs().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetLibs().count("<a href="CppWt.html">-lwt</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetLibs().count("<a href="CppRegex.html">-lboost_regex</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.Get<a href="CppQtCreator.html">QtCreator</a>ProFilename() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> mypath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.Get<a href="CppQt.htm">Qt</a>().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.Get<a href="CppQt.htm">Qt</a>().count("core"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.Get<a href="CppQt.htm">Qt</a>().count("-gui"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetSources().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetSources().count("<a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a><a href="CppImplementationFile.html">.cpp</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetSources().count("<a href="CppProFile.html">profile</a><a href="CppImplementationFile.html">.cpp</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetTarget().count("<a href="ToolTestQtCreatorProFile.html">ToolTestQtCreatorProFile</a>") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetTemplate().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetTemplate().count("app"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> p <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> ss;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss <a href="CppOperatorStreamOut.html">&lt;&lt;</a> p <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorEqual.html">operator==</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFile q(mypath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.html">std::remove</a>(mypath.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Merge<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> mypath1 <a href="CppOperatorAssign.htm">=</a> "tmp1.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> mypath2 <a href="CppOperatorAssign.htm">=</a> "tmp2.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.html">std::ofstream</a> f(mypath1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#-------------------------------------------------\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "# Project created by <a href="CppQtCreator.html">QtCreator</a> 2010-12-19T16:24:53\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#-------------------------------------------------\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> core\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppOperatorAssign.htm">=</a> gui\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppWt.html">-lwt</a> <a href="CppRegex.html">-lboost_regex</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "TARGET <a href="CppOperatorAssign.htm">=</a> <a href="ToolTestQtCreatorProFile.html">ToolTestQtCreatorProFile</a>Website\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeConfig.html">CONFIG</a>&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> console\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeConfig.html">CONFIG</a>&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppOperatorAssign.htm">=</a> app_bundle\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeTemplate.html">TEMPLATE</a> <a href="CppOperatorAssign.htm">=</a> app\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeSources.html">SOURCES</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> wtmain<a href="CppImplementationFile.html">.cpp</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProFile.html">profile</a><a href="CppImplementationFile.html">.cpp</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeHeaders.html">HEADERS</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.html">std::ofstream</a> f(mypath2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#-------------------------------------------------\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "# Project created by <a href="CppQtCreator.html">QtCreator</a> 2010-12-19T16:24:53\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#-------------------------------------------------\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppOperatorAssign.htm">=</a> core\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppOperatorAssign.htm">=</a> gui\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRegex.html">-lboost_regex</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "TARGET <a href="CppOperatorAssign.htm">=</a> <a href="ToolTestQtCreatorProFile.html">ToolTestQtCreatorProFile</a>Console\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeConfig.html">CONFIG</a>&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> console\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeConfig.html">CONFIG</a>&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppOperatorAssign.htm">=</a> app_bundle\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeTemplate.html">TEMPLATE</a> <a href="CppOperatorAssign.htm">=</a> app\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeSources.html">SOURCES</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a><a href="CppImplementationFile.html">.cpp</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProFile.html">profile</a><a href="CppImplementationFile.html">.cpp</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeHeaders.html">HEADERS</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the project file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt; p1(<b><a href="CppNew.htm">new</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile(mypath1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt; p2(<b><a href="CppNew.htm">new</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile(mypath2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.html">std::remove</a>(mypath1.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.html">std::remove</a>(mypath2.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test conditionals<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a project file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> mypath <a href="CppOperatorAssign.htm">=</a> "tmp.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.html">std::ofstream</a> f(mypath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> core\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "unix {\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeSources.html">SOURCES</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;unix_main<a href="CppImplementationFile.html">.cpp</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "win32 {\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "TARGET <a href="CppOperatorAssign.htm">=</a> TestTarget\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeSources.html">SOURCES</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> win_main<a href="CppImplementationFile.html">.cpp</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeSources.html">SOURCES</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppProFile.html">profile</a><a href="CppImplementationFile.html">.cpp</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppQmakeHeaders.html">HEADERS</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> \\\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the project file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile p(mypath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.Get<a href="CppQt.htm">Qt</a>().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.Get<a href="CppQt.htm">Qt</a>().count("core"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetSources().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetSources().count("unix_main<a href="CppImplementationFile.html">.cpp</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetSources().count("win_main<a href="CppImplementationFile.html">.cpp</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetSources().count("<a href="CppProFile.html">profile</a><a href="CppImplementationFile.html">.cpp</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetHeaders().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p.GetHeaders().count("<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> p <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> ss;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss <a href="CppOperatorStreamOut.html">&lt;&lt;</a> p <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppOperatorEqual.html">operator==</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFile q(mypath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.html">std::remove</a>(mypath.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsRegularFile<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.html">std::remove</a>("tmp.txt");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a regular file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!IsRegularFile("tmp.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFstream.html">std::fstream</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.open("tmp.txt",<a href="CppStd.htm">std</a>::ios::out);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "TEMP TEXT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile("tmp.txt"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.html">std::remove</a>("tmp.txt");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!IsRegularFile("tmp.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a folder<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSystem.html">std::system</a>("mkdir tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!IsRegularFile("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSystem.html">std::system</a>("rmdir tmp");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.html">#endif</a><br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppQtCreator.html">QtCreator</a>ProFile&gt;&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p);<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> (*p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt;&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p);<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> (*p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; p)<br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\n";<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPair.html">std::pair</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.html">std::string</a>, <a href="CppBoostFunction.html">boost::function</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; (<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp;)&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt; v <a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeConfig.html">CONFIG</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetConfig },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeDefines.html">DEFINES</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetDefines },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppFORMS.html">FORMS</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetForms },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeHeaders.html">HEADERS</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetHeaders },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQ<a href="CppMake.htm">make</a>Includepath.html">INCLUDEPATH</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetIncludepath },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeLibs<a href="CppHeaderFile.htm">.h</a>tm">LIBS</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetLibs },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "OTHER_<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>S", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetOtherFiles },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeQmake_cxxflags.html">QMAKE_CXXFLAGS</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetQ<a href="CppMake.htm">make</a>Cxxflags },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "QT", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::Get<a href="CppQt.htm">Qt</a>},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeResources.html">RESOURCES</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetResources },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeSources.html">SOURCES</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetSources },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "TARGET", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetTarget },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "<a href="CppQmakeTemplate.html">TEMPLATE</a>", &amp;<a href="CppQtCreator.html">QtCreator</a>ProFile::GetTemplate }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFor_each.html">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os,&amp;p](<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<a href="CppString.html">std::string</a>, <a href="CppBoostFunction.html">boost::function</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; (<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp;)&gt; &gt;&amp; pair)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; w <a href="CppOperatorAssign.htm">=</a> pair.second(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!w.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> pair.first <a href="CppOperatorStreamOut.html">&lt;&lt;</a> " <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> \\\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w.size() &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTransform.html">std::transform</a>(w.begin(),<a href="CppOperatorDecrement.htm">--</a>w.end(),<a href="CppOstream_iterator.html">std::ostream_iterator</a>&lt;<a href="CppString.html">std::string</a>&gt;(os," \\\n"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s) { <b><a href="CppReturn.html">return</a></b> <a href="CppString.html">std::string</a>("&nbsp;&nbsp;&nbsp;&nbsp;") <a href="CppOperatorPlus.htm">+</a> s; } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;" <a href="CppOperatorPlus.htm">+</a> (*(<a href="CppOperatorDecrement.htm">--</a>w.end())) <a href="CppOperatorPlus.htm">+</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a>\n";<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "# This file was created by:\n";<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n";<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> p.GetAbout().Create<a href="CppAbout.html">About</a>Text();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTransform.html">std::transform</a>(v.begin(),v.end(),<a href="CppOstream_iterator.html">std::ostream_iterator</a>&lt;<a href="CppString.html">std::string</a>&gt;(os,"\n"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s) { <b><a href="CppReturn.html">return</a></b> <a href="CppString.html">std::string</a>("# ") <a href="CppOperatorPlus.htm">+</a> s; } );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n";<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n";<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#\n";<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> p.GetAbout().CreateLicenceText();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTransform.html">std::transform</a>(v.begin(),v.end(),<a href="CppOstream_iterator.html">std::ostream_iterator</a>&lt;<a href="CppString.html">std::string</a>&gt;(os,"\n"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s) { <b><a href="CppReturn.html">return</a></b> <a href="CppString.html">std::string</a>("# ") <a href="CppOperatorPlus.htm">+</a> s; } );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a>";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; lhs, <b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.m_config <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_config<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_defines <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_defines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_forms <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_forms<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_headers <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_headers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_includepath <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_includepath<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_libs <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_libs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_other_files <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_other_files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_pro_filename <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_pro_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_q<a href="CppMake.htm">make</a>_cxxflags <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_q<a href="CppMake.htm">make</a>_cxxflags<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_qt <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_qt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_resources <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_resources<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_target <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_target<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_<b><a href="CppTemplate.html">template</a></b> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_<b><a href="CppTemplate.html">template</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.m_sources <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.m_sources;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtcreatorprofilezipscript.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtcreatorprofilezipscript.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtCreator.html">QtCreator</a>ProFile, <b><a href="CppClass.html">class</a></b> to parse <a href="CppQt.htm">Qt</a> Project files<br/>
Copyright (C) 2010-2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtCreatorProFile.html">CppQtCreatorProFile</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> QTCREATORPRO<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>ZIPSCRIPT<br/>
<a href="CppDefine.html">#define</a> QTCREATORPRO<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>ZIPSCRIPT<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppSetH.html">set</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "qtcreator<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Create a shell script to zip a <a href="CppQtCreator.html">Qt Creator</a> .pro file<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile&gt; pro_file<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&amp; <b><a href="CppOperator.html">operator</a></b>=(<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a script to zip all .pro files (and all they refer to) in a folder<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> CreateScript(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; source_folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppAbout.html">About</a> information<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppAbout.html">About</a> GetAbout();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all filenames<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetFilenames() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_filenames; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the .pro file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt; GetProFile() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_pro_file; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; GetProFileName() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_pro_file_name; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; Merge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set all filenames<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFilenames(<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; filenames) { m_filenames <a href="CppOperatorAssign.htm">=</a> filenames; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Used when merging<br/>
&nbsp;&nbsp;<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; filenames,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; pro_file_name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Be sure the <b><a href="CppClass.html">class</a></b> is correctly deleted<br/>
&nbsp;&nbsp;~<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All the files used by the <a href="CppQtCreator.html">QtCreator</a>ProFile<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; m_filenames;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The original .pro file its filename<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> m_pro_file_name;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt; m_pro_file;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppQtCreator.html">QtCreator</a>ProFile from every filename<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppQtCreator.html">QtCreator</a>ProFile&gt; &gt; CreateProFiles(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; pro_files);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Extract a <a href="CppQtCreator.html">QtCreator</a>ProFile its filenames<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; ExtractFilenames(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt; &amp; pro_file) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all the files in a folder<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppGetFilesInFolder.html">GetFilesInFolder</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Returns the path of a filename<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.html">GetPath</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppGetPath.html">GetPath</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all the .pro files in a folder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetProFilesInFolder.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; GetProFilesInFolder(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Determines <b><a href="CppIf.htm">if</a></b> a filename is a regular file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/CppIsRegularFile.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsRegularFile(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os,<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&amp; script);<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Write the script to a stream<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os,<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&amp; script);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> QTCREATORPRO<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>ZIPSCRIPT<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtcreatorprofilezipscript.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtcreatorprofilezipscript.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtCreator.html">QtCreator</a>ProFile, <b><a href="CppClass.html">class</a></b> to parse <a href="CppQt.htm">Qt</a> Project files<br/>
Copyright (C) 2010-2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtCreatorProFile.html">CppQtCreatorProFile</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "qtcreator<a href="CppProFile.html">profile</a>zipscript<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppFstreamH.html">fstream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppFunctionalH.html">functional</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIteratorH.html">iterator</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppSetH.html">set</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppBoostXpressive.html">xpressive</a>/<a href="CppBoostXpressive.html">xpressive</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppAlgorithm.html">algorithm</a>/string/split<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppAlgorithm.html">algorithm</a>/string<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDir.htm">QDir</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppQrcFile.html">qrcfile</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "qtcreator<a href="CppProFile.html">profile</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> PathOrdering<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorFunctionCall.html">operator()</a></b>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; lhs, <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; rhs)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shortest files first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.size() &lt; rhs.size()) <b><a href="CppReturn.html">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Order same-length files alphabetically<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.size() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs &lt; rhs) <b><a href="CppReturn.html">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt; pro_file)<br/>
&nbsp;&nbsp;: m_filenames(ExtractFilenames(pro_file)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pro_file_name(pro_file-&gt;Get<a href="CppQtCreator.html">QtCreator</a>ProFilename())<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(pro_file);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; filenames,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; pro_file_name)<br/>
&nbsp;&nbsp;: m_filenames(filenames),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pro_file_name(pro_file_name)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::CreateProFiles(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; filenames)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile&gt; &gt; pro_files;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename: filenames)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile&gt; pro_file(<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(pro_file);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pro_files.push_back(pro_file);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> pro_files;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::CreateScript(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; source_folder)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; pro_filenames <a href="CppOperatorAssign.htm">=</a> GetProFilesInFolder(source_folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; &gt; scripts;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; pro_filename: pro_filenames)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppQtCreator.html">QtCreator</a>ProFile&gt; pro_file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile(pro_filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(pro_file);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; script(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(pro_file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(script);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;scripts.push_back(script);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; merged_script<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Merge(scripts);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!merged_script)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "Folder does not contain <a href="CppAny.htm">any</a> .pro files";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> script;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;script <a href="CppOperatorStreamOut.html">&lt;&lt;</a> *merged_script;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> script.str();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::ExtractFilenames(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt;&amp; pro_file) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(pro_file);<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(pro_file-&gt;GetForms().begin(),pro_file-&gt;GetForms().end(),<a href="CppBack_inserter.html">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(pro_file-&gt;GetHeaders().begin(),pro_file-&gt;GetHeaders().end(),<a href="CppBack_inserter.html">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(pro_file-&gt;GetOtherFiles().begin(),pro_file-&gt;GetOtherFiles().end(),<a href="CppBack_inserter.html">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(pro_file-&gt;GetResources().begin(),pro_file-&gt;GetResources().end(),<a href="CppBack_inserter.html">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(pro_file-&gt;GetSources().begin(),pro_file-&gt;GetSources().end(),<a href="CppBack_inserter.html">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy all resources<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> qrc_filename_raw: pro_file-&gt;GetResources())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> qrc_filename_full<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> qrc_filename_raw.size() &lt; 7 <a href="CppOperatorLogicalOr.htm">||</a> qrc_filename_raw.substr(0,6) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppString.html">std::string</a>("../../")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppGetPath.html">GetPath</a>(pro_file-&gt;Get<a href="CppQtCreator.html">QtCreator</a>ProFilename())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>? <a href="CppFilesystem.html">boost::filesystem</a>::path(pro_file-&gt;Get<a href="CppQtCreator.html">QtCreator</a>ProFilename()).parent_path().string()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "/" <a href="CppOperatorPlus.htm">+</a> qrc_filename_raw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: qrc_filename_raw;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(qrc_filename_full.size() &gt; 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(qrc_filename_full.substr(0,6) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("../../"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsRegularFile(qrc_filename_full))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "Warning: Resource file \'" <a href="CppOperatorPlus.htm">+</a> qrc_filename_full <a href="CppOperatorPlus.htm">+</a> "\' not found";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile(qrc_filename_full));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(qrc_filename_full.size() &gt; 6 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> qrc_filename_full.substr(0,6) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("../../"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(qrc_filename_full.size() &gt; 7 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> qrc_filename_full.substr(0,7) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppString.html">std::string</a>("../../."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> QrcFile&gt; qrc_file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> QrcFile(qrc_filename_full));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(qrc_file);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>BUG: QrcFile supplies its files without a full path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCopy.html">std::copy</a>(qrc_file-&gt;GetFiles().begin(),qrc_file-&gt;GetFiles().end(),<a href="CppBack_inserter.html">std::back_inserter</a>(v));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename : qrc_file-&gt;GetFiles())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> full_resource_item_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetPath.html">GetPath</a>(qrc_filename_full) <a href="CppOperatorPlus.htm">+</a> "/" <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppFilesystem.html">boost::filesystem</a>::path(qrc_filename_full).parent_path().string() <a href="CppOperatorPlus.htm">+</a> "/" <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile(full_resource_item_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(full_resource_item_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> paths <b><a href="CppIf.htm">if</a></b> needed<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; filenames;<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(pro_file);<br/>
&nbsp;&nbsp;filenames.insert(pro_file-&gt;Get<a href="CppQtCreator.html">QtCreator</a>ProFilename());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> filename: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> (filename[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '/' <a href="CppOperatorLogicalOr.htm">||</a> filename[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '.'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.html">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filenames.insert(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (!filename.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> filename[0] <a href="CppOperatorNotEqual.htm">!=</a> '/' <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> filename[0] <a href="CppOperatorNotEqual.htm">!=</a> '.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> full path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetPath.html">GetPath</a>(pro_file-&gt;Get<a href="CppQtCreator.html">QtCreator</a>ProFilename());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppFilesystem.html">boost::filesystem</a>::path(pro_file-&gt;Get<a href="CppQtCreator.html">QtCreator</a>ProFilename()).parent_path().string();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(s.size() &gt; 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s <a href="CppOperatorPlus.htm">+</a> "/" <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.html">TRACE</a>(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filenames.insert(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> filenames;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppAbout.html">About</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::GetAbout()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.html">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppClass.html">class</a></b> to create a zip file from a .pro file",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 19th of May 2013",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="CppQtCreatorProFile.html">CppQtCreatorProFile</a>ZipScript.html",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>History());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.html">Library</a>("QrcFile <a href="CppVersion.html">version</a>: " <a href="CppOperatorPlus.htm">+</a> QrcFile::Get<a href="CppVersion.html">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.html">Library</a>("<a href="CppQtCreator.html">QtCreator</a>ProFile <a href="CppVersion.html">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtCreator.html">QtCreator</a>ProFile::Get<a href="CppVersion.html">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.html">Library</a>("<a href="CppTrace.html">Trace</a> <a href="CppVersion.html">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.html">Trace</a>::Get<a href="CppVersion.html">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> a;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppGetFilesInFolder.html">GetFilesInFolder</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQDir.htm">QDir</a> dir(folder.c_str());<br/>
&nbsp;&nbsp;dir.setFilter(<a href="CppQDir.htm">QDir</a>::Files);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppQFile.html">QFile</a>InfoList list <a href="CppOperatorAssign.htm">=</a> dir.entryInfoList();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.html">Convert</a> <a href="CppQFile.html">QFile</a>InfoList to <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; of filenames<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> list.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i <a href="CppOperatorNotEqual.htm">!=</a> size; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> file_name <a href="CppOperatorAssign.htm">=</a> list.at(i).fileName().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(file_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppGetPath.html">GetPath</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> filename.rfind("/",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppMax.html">std::max</a>(a,b);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(i &lt; <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(filename.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> filename.substr(0,i);<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::GetProFilesInFolder(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get all filenames<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetFilesInFolder.html">GetFilesInFolder</a>(folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <a href="CppRegex.html">regex</a> <b><a href="CppFor.htm">for</a></b> a correct <a href="CppQtCreator.html">Qt Creator</a> project filename<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostXpressive.html">boost::xpressive</a>::s<a href="CppRegex.html">regex</a> rex <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.html">boost::xpressive</a>::s<a href="CppRegex.html">regex</a>::<a href="CppCompile.html">compile</a>(".*\\.(pro)\\&gt;");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the resulting <a href="CppVector.html">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; w;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy all filenames matching the <a href="CppRegex.html">regex</a> in the resulting <a href="CppVector.html">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppCopy_if.html">std::copy_if</a>(v.begin(),v.end(),<a href="CppBack_inserter.html">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[rex](<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostXpressive.html">boost::xpressive</a>::smatch what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppBoostXpressive.html">boost::xpressive</a>::<a href="CppRegex.html">regex</a>_match(s, what, rex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2013-05-19: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2013-08-19: <a href="CppVersion.html">version</a> 1.1: replaced <a href="CppBoostRegex.html">Boost.Regex</a> by <a href="CppBoostXpressive.html">Boost.Xpressive</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::IsRegularFile(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFstream.html">std::fstream</a> f;<br/>
&nbsp;&nbsp;f.open(filename.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> f.is_open();<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Merge(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; &gt;&amp; scripts)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; p;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (scripts.empty()) <b><a href="CppReturn.html">return</a></b> p;<br/>
<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; all_filenames;<br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> pro_file_name;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt;&amp; script: scripts)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppAuto.htm">auto</a></b> filenames <a href="CppOperatorAssign.htm">=</a> script-&gt;GetFilenames();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;all_filenames.insert(filenames.begin(),filenames.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pro_file_name <a href="CppOperatorAssign.htm">=</a> script-&gt;GetProFileName(); <a href="CppComment.htm">//</a>Just <b><a href="CppFor.htm">for</a></b> having something<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(all_filenames,pro_file_name));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test basic <a href="CppFunction.html">function</a>s on <b><a href="CppThis.htm">this</a></b> project with going two folders down<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; pro_file_names<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"../../<a href="Tools.html">Tools</a>/<a href="ToolCreateQtProjectZipFile.html">ToolCreateQtProjectZipFile</a>/<a href="ToolCreateQtProjectZipFile.html">ToolCreateQtProjectZipFile</a>Desktop.pro",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"../../<a href="Tools.html">Tools</a>/<a href="ToolCodeToHtml.html">ToolCodeToHtml</a>/<a href="ToolCodeToHtml.html">ToolCodeToHtml</a>Desktop.pro",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"../../<a href="Tools.html">Tools</a>/<a href="ToolKalmanFilterer.html">ToolKalmanFilterer</a>/<a href="ToolKalmanFilterer.html">ToolKalmanFilterer</a>Desktop.pro",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"../../<a href="ProjectRichelBilderbeek.html">ProjectRichelBilderbeek</a>/<a href="ProjectRichelBilderbeek.html">ProjectRichelBilderbeek</a>/<a href="ProjectRichelBilderbeek.html">ProjectRichelBilderbeek</a>Desktop.pro"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; pro_file_name: pro_file_names)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsRegularFile(pro_file_name)) <b><a href="CppContinue.html">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile(pro_file_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile&gt; pro_file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFile(pro_file_name) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(pro_file);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&gt; zip_script(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript(pro_file) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(zip_script);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>&gt; filenames <a href="CppOperatorAssign.htm">=</a> zip_script-&gt;GetFilenames();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename: filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsRegularFile(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> warning <a href="CppOperatorAssign.htm">=</a> "Warning: file \'" <a href="CppOperatorPlus.htm">+</a> filename <a href="CppOperatorPlus.htm">+</a> "\' not found";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>(warning);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetProFiles<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> n <a href="CppOperatorAssign.htm">=</a> GetProFilesInFolder("").size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.html">std::ofstream</a> f("tmp23465278.pro");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> p <a href="CppOperatorAssign.htm">=</a> GetProFilesInFolder("").size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(n <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> p <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.html">std::remove</a>("tmp23465278.pro");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> q <a href="CppOperatorAssign.htm">=</a> GetProFilesInFolder("").size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(n <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::Test successfully");<br/>
}<br/>
<a href="CppEndif.html">#endif</a><br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os,<b><a href="CppConst.html">const</a></b> <a href="CppQtCreator.html">QtCreator</a>ProFileZipScript&amp; script)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUsing.html">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppGetPath.html">GetPath</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(script.GetProFileName().size() &gt; 6);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(script.GetProFileName().substr(0,6) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("../../"));<br/>
<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "#!/bin/sh" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "# Created from file '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> script.GetProFileName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\'" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (!m_folder_name_for_sloccount.empty())<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Creating a sloccount file\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "sloccount " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> m_folder_name_for_sloccount <a href="CppOperatorStreamOut.html">&lt;&lt;</a> " &gt; sloccount.txt" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (!m_doxygen_filename.empty())<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Creating <a href="CppDocumentation.html">documentation</a>\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "doxygen \"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> m_doxygen_filename <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Removing user information\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "rm *.user" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Removing possible temp file\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "rm copy.txt" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "rm tmp.txt" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Creating of all folders\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "mkdir <a href="Projects.html">Projects</a>" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>file names with full path<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>,PathOrdering&gt; file_names(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;script.GetFilenames().begin(),script.GetFilenames().end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;<a href="CppString.html">std::string</a>,PathOrdering&gt; folder_names;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the folders added by the .pro file<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> filename: file_names)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppGetPath.html">GetPath</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppFilesystem.html">boost::filesystem</a>::path(filename).parent_path().string();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.html">while</a></b> (!s.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_names.insert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppGetPath.html">GetPath</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppFilesystem.html">boost::filesystem</a>::path(s).parent_path().string();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s: folder_names)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 6 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s.substr(0,6) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("../../"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "mkdir <a href="Projects.html">Projects</a>/" <a href="CppOperatorStreamOut.html">&lt;&lt;</a>&nbsp;&nbsp;s.substr(6,s.size() <a href="CppOperatorMinus.htm">-</a> 6) <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Copying files\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s: file_names)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 6 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s.substr(0,6) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("../../"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "cp " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> " <a href="Projects.html">Projects</a>/" <a href="CppOperatorPlus.htm">+</a> s.substr(6,s.size() <a href="CppOperatorMinus.htm">-</a> 6) <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s.size() &gt; 3 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s.substr(0,1) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppString.html">std::string</a>("."))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A file in the .pro file its folder<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "cp " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> " <a href="Projects.html">Projects</a>/"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppFilesystem.html">boost::filesystem</a>::path(script.GetProFileName()).parent_path().string()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppGetPath.html">GetPath</a>(script.GetProFileName())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>NAME=\""<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::<a href="CppGetPath.html">GetPath</a>( script.GetProFileName() )<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppFilesystem.html">boost::filesystem</a>::path( script.GetProFileName() ).parent_path().string()<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Source\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "ZIP_<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>NAME=$<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>NAME\".zip\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Compressing files\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "zip <a href="CppOperatorMinus.htm">-</a>r $<a href="CppCfile<a href="CppHeaderFile.htm">.h</a>tm">FILE</a>NAME <a href="Projects.html">Projects</a>" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Cleaning up\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Emptying subfolders\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppFor_each.html">std::for_each</a>(folder_names.rbegin(),folder_names.rend(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 6 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s.substr(0,6) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("../../"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "rm <a href="Projects.html">Projects</a>/" <a href="CppOperatorPlus.htm">+</a> s.substr(6,s.size() <a href="CppOperatorMinus.htm">-</a> 6) <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppComment.htm">/*</a>.*" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "rm <a href="Projects.html">Projects</a><a href="CppComment.htm">/*</a>.*" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppFor_each.html">std::for_each</a>(folder_names.rbegin(),folder_names.rend(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 6 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s.substr(0,6) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("../../"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "rmdir <a href="Projects.html">Projects</a>/" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s.substr(6,s.size()-6) <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "rmdir <a href="Projects.html">Projects</a>" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "echo \"Done\"" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtCreator.html">QtCreator</a>ProFileZipScript::GetAbout().Create<a href="CppAbout.html">About</a>Text();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTransform.html">std::transform</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOstream_iterator.html">std::ostream_iterator</a>&lt;<a href="CppString.html">std::string</a>&gt;(os,"\n"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppString.html">std::string</a>("# ") <a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
