<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ extern</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek extern keyword</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>

 </o:DocumentProperties>
</xml><![endif]-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>extern</title>
  <meta name="description" content="C++ extern"/>
  <meta name="keywords" content="C++ extern keyword"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExtern.htm">extern</a></h1>
<p>&nbsp;</p>
<p><a href="CppKeyword.htm">Keyword</a> to make a variable known over multiple units, but 
keeping the <a href="CppDeclaration.htm">declaration</a> and initialization <a href="CppLocal.htm">local</a> to a file (probably an 
<a href="CppImplementationFile.htm">implementation file (.cpp)</a>)</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>In the example below there are two <a href="CppInt.htm">integer</a> <a href="CppGlobal.htm">globals</a> (note: avoid using <a href="CppGlobal.htm">global</a>
data [1,2]). The <a href="CppInt.htm">int</a> x is <a href="CppDeclaration.htm">declared</a> and initialized in unit1.cpp, 
the <a href="CppInt.htm">int</a> y in <a href="CppDeclaration.htm">declared</a> in unit2.cpp and initialized by the 
locally unknown <a href="CppInt.htm">int</a> x. To read the values of both <a href="CppInt.htm">integers</a>, 
two getters are put in the <a href="CppHeaderFile.htm">header files</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMain.cpp</h2>
<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#include &quot;Unit1.h&quot;</p>

<p>#include &quot;Unit2.h&quot;</p>

<p>#include &lt;cassert&gt;</p>

<p>&nbsp;</p>

<p>int main()</p>

<p>{</p>

<p>
 assert(GetX() == 42);</p>

<p>
 assert(GetY() == 42);</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit1.h</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#ifndef Unit1H</p>

<p>#define Unit1H</p>

<p>&nbsp;</p>

<p>const int GetX();</p>

<p>&nbsp;</p>

<p>#endif</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit1.cpp</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#include &quot;Unit1.h&quot;</p>

<p>&nbsp;</p>

<p>int x = 42;</p>

<p>&nbsp;</p>

<p>const int GetX() { return x; }</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit2.h</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#ifndef Unit2H</p>

<p>#define Unit2H</p>

<p>&nbsp;</p>

<p>const int GetY();</p>

<p>&nbsp;</p>

<p>#endif</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit2.cpp</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#include &quot;Unit2.h&quot;</p>

<p>&nbsp;</p>

<p>extern int x;</p>

<p>&nbsp;</p>

<p>int y = x; //Seems risky, dependent on
module process order</p>

<p>&nbsp;</p>

<p>const int GetY() { return y; }</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 10: 'Minimize global and shared data'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 18: 'Declare variables as locally as possible'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
