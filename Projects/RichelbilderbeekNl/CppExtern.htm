 
<title>extern</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ extern</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek extern keyword</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>19</o:Revision>
  <o:TotalTime>170</o:TotalTime>
  <o:Created>2009-05-06T08:35:00Z</o:Created>
  <o:LastSaved>2009-05-06T09:21:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>112</o:Words>
  <o:Characters>644</o:Characters>
  <o:Category>C++ Richel Bilderbeek extern</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>5</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:CharactersWithSpaces>790</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
  
 
 
 
 
 
 /* List Definitions */
@list l0
	{mso-list-id:2019504653;
	mso-list-type:hybrid;
	mso-list-template-ids:-1780080174 1391387404 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-text:"\[%1\]";
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	text-indent:-.25in;}
 
-->
</style>
</head>

 

 

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>(<a href="Cpp.htm">C++</a>)
<a href="CppExtern.htm">extern</a></h1>

<p>&nbsp;</p>

<p><a
href="CppKeyword.htm">Keyword</a> to make a variable known over multiple units, but
keeping the <a href="CppDeclaration.htm">declaration</a> and initialization <a
href="CppLocal.htm">local</a> to a file (probably an <a
href="CppImplementationFile.htm">implementation file (.cpp)</a> )</p>

<p>&nbsp;</p>

<h2>Example</h2>

<p>&nbsp;</p>

<p>In
the example below there are two <a href="CppInt.htm">integer</a> <a
href="CppGlobal.htm">globals</a> (note: avoid using <a href="CppGlobal.htm">global</a>
data <span style='mso-field-code:"REF _Ref229371897 \\r \\h"'>[0]<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003200320039003300370031003800390037000000</w:data>
</xml><![endif]--> <span style='mso-field-code:"REF _Ref229371899 \\r \\h"'>[1]<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003200320039003300370031003800390039000000</w:data>
</xml><![endif]--> ). The <a href="CppInt.htm">int</a> x is <a
href="CppDeclaration.htm">declared</a> and initialized in unit1.cpp, the <a
href="CppInt.htm">int</a> y in <a href="CppDeclaration.htm">declared</a> in unit2.cpp
and initialized by the locally unknown <a href="CppInt.htm">int</a> x. To read
the values of both <a href="CppInt.htm">integers</a>, two getters are put in
the <a href="CppHeaderFile.htm">header files</a>.</p>

<p>&nbsp;</p>

<h2>UnitMain.cpp</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#include &quot;Unit1.h&quot;</p>

<p>#include &quot;Unit2.h&quot;</p>

<p>#include &lt;cassert&gt;</p>

<p>&nbsp;</p>

<p>int main()</p>

<p>{</p>

<p>
 assert(GetX() == 42);</p>

<p>
 assert(GetY() == 42);</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit1.h</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#ifndef Unit1H</p>

<p>#define Unit1H</p>

<p>&nbsp;</p>

<p>const int GetX();</p>

<p>&nbsp;</p>

<p>#endif</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit1.cpp</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#include &quot;Unit1.h&quot;</p>

<p>&nbsp;</p>

<p>int x = 42;</p>

<p>&nbsp;</p>

<p>const int GetX() { return x; }</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit2.h</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#ifndef Unit2H</p>

<p>#define Unit2H</p>

<p>&nbsp;</p>

<p>const int GetY();</p>

<p>&nbsp;</p>

<p>#endif</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h2>Unit2.cpp</h2>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>#include &quot;Unit2.h&quot;</p>

<p>&nbsp;</p>

<p>extern int x;</p>

<p>&nbsp;</p>

<p>int y = x; //Seems risky, dependent on
module process order</p>

<p>&nbsp;</p>

<p>const int GetY() { return y; }</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a href="CppReferences.htm"> References</a></h2>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><a name="_Ref229371897">  [0] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</a><a href="CppHerbSutter.htm"><span style='mso-bookmark:
_Ref229371897'> Herb
Sutter  <span style='mso-bookmark:_Ref229371897'></a><span
style='mso-bookmark:_Ref229371897'> , <a href="CppAndreiAlexandrescu.htm"><span
style='mso-bookmark:_Ref229371897'> Andrei Alexandrescu  <span style='mso-bookmark:_Ref229371897'></a><span
style='mso-bookmark:_Ref229371897'> . C++ coding standards: 101 rules, guidelines, and best
practices. ISBN: 0-32-111358-6. Item 10: 'Minimize global and shared data'.</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo1;
tab-stops:list .5in'><a name="_Ref229371899">  [1] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</a><a href="CppHerbSutter.htm"><span style='mso-bookmark:
_Ref229371899'> Herb
Sutter  <span style='mso-bookmark:_Ref229371899'></a><span
style='mso-bookmark:_Ref229371899'> , <a href="CppAndreiAlexandrescu.htm"><span
style='mso-bookmark:_Ref229371899'> Andrei Alexandrescu  <span style='mso-bookmark:_Ref229371899'></a><span
style='mso-bookmark:_Ref229371899'> . C++ coding standards: 101 rules, guidelines, and best
practices. ISBN: 0-32-111358-6. Item 18: 'Declare variables as locally as
possible'.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
