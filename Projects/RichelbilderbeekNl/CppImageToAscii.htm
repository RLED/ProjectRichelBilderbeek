 
<title>ImageToAscii</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ ImageToAscii</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek ImageToAscii Image To Ascii 2 TImage VCL Builder Turbo</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>20</o:Revision>
  <o:TotalTime>137</o:TotalTime>
  <o:Created>2008-07-22T11:34:00Z</o:Created>
  <o:LastSaved>2008-07-22T11:50:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>456</o:Words>
  <o:Characters>2604</o:Characters>
  <o:Category>C++ Richel Bilderbeek ImageToAscii</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>21</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>3197</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
 
</head>

 

 

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>(<a href="Cpp.htm">C++</a>)
<a href="CppImageToAscii.htm">ImageToAscii</a></h1>

<p>&nbsp;</p>

<p><a href="CppAsciiArt.htm">ASCII art</a> <a
href="CppCodeSnippets.htm"> code
snippet</a> to convert a <a href="CppVcl.htm">VCL</a> <a
href="CppTImage.htm">TImage</a> to a <a href="CppVector.htm">std::vector</a> of
<a href="CppString.htm">std::string</a>.</p>

<p>&nbsp;</p>

<p>The <a href="Tools.htm">tool</a> <a
href="ToolAsciiArter.htm">AsciiArter</a> demonstrates   <a href="CppImageToAscii.htm">ImageToAscii</a>.</p>

<p>&nbsp;</p>

<p><a
href="CppImageToAscii.htm">ImageToAscii</a> uses the <a href="CppFunction.htm">functions</a>
<a href="CppGetAsciiArtGradient.htm">GetAsciiArtGradient</a> and <a
href="CppGetFractionGrey.htm">GetFractionGrey</a>.</p>

<p>&nbsp;</p>

<p>* <a
href="CppImageToAscii.txt">View the code of 'ImageToAscii' in plain text</a></p>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppVectorH.htm">vector</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppStringH.htm">string</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppCassertH.htm">cassert</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;vcl.h&gt;</p>

<p>&nbsp;</p>

<p>//From
http://www.richelbilderbeek.nl/CppImageToAscii.htm</p>

<p><b> <a href="CppConst.htm">const</a> </b>  <a href="CppVector.htm">std::vector</a>&lt;<a
href="CppString.htm">std::string</a>&gt; <a href="CppImageToAscii.htm">ImageToAscii</a>(</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a>
* <b><a href="CppConst.htm">const</a></b> image,</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>
charWidth) //How many chars the ASCII image will be wide</p>

<p>{</p>

<p> 
 <b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;
chars(<a href="CppGetAsciiArtGradient.htm">GetAsciiArtGradient</a>());</p>

<p>&nbsp;</p>

<p> 
 //If the number of chars is below 5,</p>

<p> 
 //the calculation would be more complicated due to a too trivial value
of charWidth</p>

<p> 
 <a href="CppAssert.htm">assert</a>(charWidth &gt;= 5);</p>

<p>&nbsp;</p>

<p> 
 //Check the bitmap</p>

<p> 
 <a href="CppAssert.htm">assert</a>(image!=0 &amp;&amp; &quot;Image must
not be NULL&quot;);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap != 0
&amp;&amp; &quot;Image bitmap must not be NULL&quot;);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat
== pf24bit &amp;&amp; &quot;Image format must be 24-bit&quot;);</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p> 
 //Maxy is in proportion with the bitmap</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>
maxy =</p>

<p>   
 (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(charWidth)</p>

<p><span lang=NL

style='mso-bidi-font-family:"Courier New"'>    
 / <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Width))</p>

<p>   
 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Height);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(charWidth &gt; 0);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(maxy &gt; 0);</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>
dX = <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Width)</p>

<p>   
 / <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(charWidth);</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>
dY = <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Height)</p>

<p>   
 / <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(maxy);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(dX &gt; 0.0);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(dY &gt; 0.0);</p>

<p>&nbsp;</p>

<p>     <a href="CppVector.htm">std::vector</a>&lt;<a
href="CppString.htm">std::string</a>&gt; v;</p>

<p>&nbsp;</p>

<p> 
 <b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b>
y=0; y!=maxy; ++y)</p>

<p> 
 {</p>

<p>   
 <a href="CppString.htm">std::string</a> myLine;</p>

<p>   
 <b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b>
x=0; x!=charWidth; ++x)</p>

<p>   
 {</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppInt.htm">int</a></b> x1 = <a href="CppMin.htm">std::min</a>(</p>

<p>         <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(x) * dX,</p>

<p>         image-&gt;Picture-&gt;Bitmap-&gt;Width    - 1.0) + 0.5;</p>

<p>   
     <b><a href="CppConst.htm">const</a></b>
<b><a href="CppInt.htm">int</a></b> y1 = <a href="CppMin.htm">std::min</a>(</p>

<p>         <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(y) * dY,</p>

<p>         image-&gt;Picture-&gt;Bitmap-&gt;Height - 1.0) + 0.5;</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppInt.htm">int</a></b> x2 = <a href="CppMin.htm">std::min</a>(</p>

<p>         (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(x) * dX) + dX,</p>

<p>         image-&gt;Picture-&gt;Bitmap-&gt;Width    - 1.0) + 0.5;</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppInt.htm">int</a></b> y2 = <a href="CppMin.htm">std::min</a>(</p>

<p>         (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(y) * dY) + dY,</p>

<p>         image-&gt;Picture-&gt;Bitmap-&gt;Height - 1.0) + 0.5;</p>

<p>       <a href="CppAssert.htm">assert</a>(x1 &gt;= 0);</p>

<p>       <a href="CppAssert.htm">assert</a>(x2 &gt;= 0);</p>

<p>       <a href="CppAssert.htm">assert</a>(y1 &gt;= 0);</p>

<p>       <a href="CppAssert.htm">assert</a>(y2 &gt;= 0);</p>

<p>       <a href="CppAssert.htm">assert</a>(x1 &lt;
image-&gt;Picture-&gt;Bitmap-&gt;Width);</p>

<p>       <a href="CppAssert.htm">assert</a>(x2 &lt;
image-&gt;Picture-&gt;Bitmap-&gt;Width);</p>

<p>       <a href="CppAssert.htm">assert</a>(y1 &lt;
image-&gt;Picture-&gt;Bitmap-&gt;Height);</p>

<p>       <a href="CppAssert.htm">assert</a>(y2 &lt;
image-&gt;Picture-&gt;Bitmap-&gt;Height);</p>

<p>&nbsp;</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> fGrey = <a href="CppMin.htm">std::min</a>(</p>

<p>         <a href="CppMax.htm">std::max</a>(0.0, <a
href="CppGetFractionGrey.htm">GetFractionGrey</a>(image,x1,y1,x2,y2)),1.0);</p>

<p>       <a href="CppAssert.htm">assert</a>(fGrey &gt;= 0.0 &amp;&amp;
fGrey &lt;= 1.0);</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> charIndex</p>

<p>         = fGrey * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(chars.size() - 1);</p>

<p>       <a href="CppAssert.htm">assert</a>(charIndex &gt;= 0);</p>

<p>       <a href="CppAssert.htm">assert</a>(charIndex &lt; <b><a
href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(chars.size()));</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppChar.htm">char</a></b> thisChar = chars[charIndex];</p>

<p>       myLine+=thisChar;</p>

<p>   
 }</p>

<p>   
 v.push_back(myLine);</p>

<p> 
 }</p>

<p> 
 <b><a href="CppReturn.htm">return</a></b> v;</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
