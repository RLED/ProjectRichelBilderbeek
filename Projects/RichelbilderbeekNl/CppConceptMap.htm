&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
&lt;head&gt;
&nbsp;&nbsp;&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"/&gt;
&nbsp;&nbsp;&lt;title&gt;ConceptMap&lt;/title&gt;
&nbsp;&nbsp;&lt;meta name="description" content="C++ ConceptMap"/&gt;
&nbsp;&nbsp;&lt;meta name="keywords" content="C++ ConceptMap "/&gt;
&nbsp;&nbsp;&lt;link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/&gt;
&lt;/head&gt;
&lt;!-- End of head, start of body --&gt;
&lt;body&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- Page header --&gt;
&lt;h1&gt;(&lt;a href="Cpp.htm"&gt;C++&lt;/a&gt;) &lt;a href="CppConceptMap.htm"&gt;ConceptMap&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmap.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmap.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmap.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;set&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
#include &amp;lt;functional&amp;gt;&lt;br/&gt;
#include "conceptmapcenternode.h"&lt;br/&gt;
#include "conceptmapcenternodefactory.h"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "conceptmapexamplesfactory.h"&lt;br/&gt;
#include "conceptmapedgefactory.h"&lt;br/&gt;
#include "conceptmapnode.h"&lt;br/&gt;
#include "conceptmapnodefactory.h"&lt;br/&gt;
#include "conceptmapedge.h"&lt;br/&gt;
//#include "conceptmapcluster.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::ConceptMap::ConceptMap(const std::string&amp;amp; question)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_edges( {} ),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes(CreateNodes(question, {} ))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ConceptMap::CanConstruct(m_nodes,m_edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;GetQuestion() == question);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boost::dynamic_pointer_cast&amp;lt;cmap::CenterNode&amp;gt;(this-&amp;gt;GetNodes()[0])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume a CenterNode at the center of ConceptMap");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::ConceptMap::ConceptMap(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt;&amp;amp; edges)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_edges(edges),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes(nodes)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!ConceptMap::CanConstruct(nodes,edges))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_nodes = nodes.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=n_nodes; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; ": " &amp;lt;&amp;lt; cmap::Node::ToXml(nodes[i]) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_edges = edges.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=n_edges; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto edge = edges[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto const_nodes = AddConst(nodes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto from_iter = std::find(nodes.begin(),nodes.end(),edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto to_iter = std::find(nodes.begin(),nodes.end(),edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(from_iter != nodes.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(to_iter != nodes.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; ": " &amp;lt;&amp;lt; cmap::Edge::ToXml(edge,const_nodes) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ConceptMap::CanConstruct(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;GetQuestion() == nodes[0]-&amp;gt;GetConcept()-&amp;gt;GetName());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifdef TO_ADD_TO_PROJECTBRAINWEAVER&lt;br/&gt;
ribi::cmap::ConceptMap::ConceptMap(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; question,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Cluster&amp;gt;&amp;amp; cluster)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_edges{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes(CreateNodes(question, {} ))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; &amp;gt;&amp;amp; v = cluster-&amp;gt;Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n = boost::numeric_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=n; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int y = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node = cmap::NodeFactory::Create(v[i],x,y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes.push_back(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() + 1 == m_nodes.size()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume the ConceptMap has as much nodes as the cluster has concepts + one focal question");&lt;br/&gt;
}&lt;br/&gt;
#endif //TO_ADD_TO_PROJECTBRAINWEAVER&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::ConceptMap::AddEdge(const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count(m_nodes.begin(),m_nodes.end(),edge-&amp;gt;GetFrom()) == 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "First enter the node this edge originates from");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count(m_nodes.begin(),m_nodes.end(),edge-&amp;gt;GetTo()) == 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "First enter the node this edge targets to");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_edges.push_back(edge);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::ConceptMap::AddNode(const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_nodes.push_back(node);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::ConceptMap::CanConstruct(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt;&amp;amp; edges)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//if (question.empty() &amp;amp;&amp;amp; "Cannot construct empty questions") return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test if first node, which is the focal question, does not have examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (nodes.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(nodes[0]-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The center node CAN have examples, when the center node is the focal node of a sub-concept map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///if (!nodes[0]-&amp;gt;GetConcept()-&amp;gt;GetExamples().empty()) { return false; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test if all edges are in range&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_nodes = static_cast&amp;lt;int&amp;gt;(nodes.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_invalid = std::count_if(edges.begin(), edges.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[n_nodes](const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;amp; edge)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return edge-&amp;gt;GetTo() &amp;gt;= n_nodes || edge-&amp;gt;GetFrom() &amp;gt;= n_nodes;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n_invalid)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test if there are 'two-way' edges, that is, one edge going from A to B&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//and another edge going from B to A&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_edges = edges.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_edges; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;amp; a = edges[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a_from = a-&amp;gt;GetFrom();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a_to&amp;nbsp;&amp;nbsp; = a-&amp;gt;GetTo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=i+1; j!=n_edges; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i != j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;lt; n_edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;amp; b = edges[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a.get() != b.get() &amp;amp;&amp;amp; "Assume different pointers");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto b_from = b-&amp;gt;GetFrom();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto b_to&amp;nbsp;&amp;nbsp; = b-&amp;gt;GetTo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (a_from.get() == b_from.get() &amp;amp;&amp;amp; a_to.get() == b_to.get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot have two edges from the same node to the same node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (a_from.get() == b_to.get() &amp;amp;&amp;amp; a_to.get() == b_from.get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot have two edges from the same node to the same node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; ribi::cmap::ConceptMap::CreateNodes(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; question,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;question,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::ExamplesFactory::Create(), //No examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;false, //Is not complex&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1, //No rated complexity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1, //No rated concreteness&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1&amp;nbsp;&amp;nbsp;//No rated specificity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; center_node = cmap::CenterNodeFactory::Create(concept,0,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(center_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(center_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::copy(nodes.begin(),nodes.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == nodes.size() + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; ribi::cmap::ConceptMap::CreateSubs() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_nodes.size() &amp;gt;= 1 &amp;amp;&amp;amp; "Concept map must have a focal question");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; focal_node: m_nodes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//for (int i=0; i!=n_nodes; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(focal_node);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Collect all edges connected top the focal node (which is m_nodes[i])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; nodes;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; edges;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (focal_node == m_nodes[0])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(boost::dynamic_pointer_cast&amp;lt;CenterNode&amp;gt;(focal_node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume the center node is known as the center node");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Center node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;CenterNode&amp;gt; centernode {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::dynamic_pointer_cast&amp;lt;CenterNode&amp;gt;(focal_node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(centernode);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes.push_back(centernode);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add ordinary node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes.push_back(focal_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; focal_edge: m_edges)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (focal_edge-&amp;gt;GetFrom() == focal_node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edges.push_back(focal_edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(focal_edge-&amp;gt;GetTo() != focal_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes.push_back(focal_edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (focal_edge-&amp;gt;GetTo() == focal_node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edges.push_back(focal_edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(focal_edge-&amp;gt;GetFrom() != focal_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes.push_back(focal_edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!nodes.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::cmap::ConceptMap::CanConstruct(nodes,edges) &amp;amp;&amp;amp; "Only construct valid concept maps");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(new ribi::cmap::ConceptMap(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::ConceptMap::DeleteEdge(const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count(m_edges.begin(),m_edges.end(),edge) != 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "The edge must exist");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count(m_edges.begin(),m_edges.end(),edge) == 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Every edge is unique");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_edges_before = m_edges.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Copied from http://www.richelbilderbeek.nl/CppVector.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_edges.erase(std::remove(m_edges.begin(),m_edges.end(),edge),m_edges.end());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_edges_after = m_edges.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n_edges_before - 1 == n_edges_after);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::ConceptMap::DeleteNode(const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count(m_nodes.begin(),m_nodes.end(),node) == 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Every node is unique");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_nodes_before = m_nodes.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Delete all edges going to this node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; to_be_deleted;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::copy_if(m_edges.begin(),m_edges.end(),std::back_inserter(to_be_deleted),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[node](boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return edge-&amp;gt;GetFrom() == node || edge-&amp;gt;GetTo() == node;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge: to_be_deleted)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DeleteEdge(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Delete the node itself&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Copied from http://www.richelbilderbeek.nl/CppVector.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_nodes.erase(std::remove(m_nodes.begin(),m_nodes.end(),node),m_nodes.end());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_nodes_after = m_nodes.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n_nodes_before - 1 == n_nodes_after);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::ConceptMap::Empty() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_nodes.empty() &amp;amp;&amp;amp; m_edges.empty();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::cmap::Edge&amp;gt; &amp;gt; ribi::cmap::ConceptMap::GetEdges() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return AddConst(m_edges);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::cmap::Node&amp;gt; &amp;gt; ribi::cmap::ConceptMap::GetNodes() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return AddConst(m_nodes);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::ConceptMap::GetQuestion() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_nodes.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_nodes[0]-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//A Concept Map CAN have examples at node[0]: when it is a sub-cluster&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(m_nodes[0]-&amp;gt;GetConcept()-&amp;gt;GetExamples().size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_nodes[0]-&amp;gt;GetConcept()-&amp;gt;GetName();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::ConceptMap::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.1";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::cmap::ConceptMap::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-xx-xx: Version 1.0: initial version",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-12-23: Version 1.1: started versioning"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::ConceptMap::HasSameContent(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::cmap::ConceptMap&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::cmap::ConceptMap&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool trace_verbose = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetQuestion() != rhs.GetQuestion())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (trace_verbose) { TRACE("Questions differ"); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetEdges().size() != rhs.GetEdges().size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (trace_verbose) { TRACE("Number of edges differ"); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetNodes().size() != rhs.GetNodes().size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (trace_verbose)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("Number of nodes differ");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(lhs.GetNodes().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(rhs.GetNodes().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Function to compare Concept smart pointers&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; ConstConceptPtr;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::function&amp;lt;bool(const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; rhs)&amp;gt; concept_cmp&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= [](const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; rhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *lhs &amp;lt; *rhs;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Same Concepts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; &amp;gt; nodes_lhs = lhs.GetNodes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::multiset&amp;lt;ConstConceptPtr,decltype(concept_cmp)&amp;gt; concepts_lhs(concept_cmp);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(nodes_lhs.begin(),nodes_lhs.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::inserter(concepts_lhs,concepts_lhs.begin()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConstConceptPtr concept = node-&amp;gt;GetConcept();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return concept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; &amp;gt; nodes_rhs = rhs.GetNodes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::multiset&amp;lt;ConstConceptPtr,decltype(concept_cmp)&amp;gt; concepts_rhs(concept_cmp);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(nodes_rhs.begin(),nodes_rhs.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::inserter(concepts_rhs,concepts_rhs.begin()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt;&amp;amp; node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return node-&amp;gt;GetConcept();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::mismatch(concepts_lhs.begin(),concepts_lhs.end(),concepts_rhs.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const ConstConceptPtr&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const ConstConceptPtr&amp;amp; b)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *a == *b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= std::make_pair(concepts_lhs.end(),concepts_rhs.end()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (trace_verbose) { TRACE("Node concepts differ"); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Same Edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; &amp;gt; edges_lhs = lhs.GetEdges();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::multiset&amp;lt;ConstConceptPtr,decltype(concept_cmp)&amp;gt; concepts_lhs(concept_cmp);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(edges_lhs.begin(),edges_lhs.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::inserter(concepts_lhs,concepts_lhs.begin()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt;&amp;amp; edge)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return edge-&amp;gt;GetConcept();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; &amp;gt; edges_rhs = rhs.GetEdges();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::multiset&amp;lt;ConstConceptPtr,decltype(concept_cmp)&amp;gt; concepts_rhs(concept_cmp);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(edges_rhs.begin(),edges_rhs.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::inserter(concepts_rhs,concepts_rhs.begin()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt;&amp;amp; edge)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return edge-&amp;gt;GetConcept();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::mismatch(concepts_lhs.begin(),concepts_lhs.end(),concepts_rhs.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const ConstConceptPtr&amp;amp; a,const ConstConceptPtr&amp;amp; b)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *a == *b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= std::make_pair(concepts_lhs.end(),concepts_rhs.end()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (trace_verbose) { TRACE("Edge concepts differ"); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if for each edge a same 'from' and 'to' concept can be found&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::tuple&amp;lt;std::string,std::string,std::string&amp;gt; FakeEdge;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;FakeEdge&amp;gt; FakeEdges;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(lhs.GetEdges().size() == rhs.GetEdges().size());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FakeEdges v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = lhs.GetEdges().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto from_node = lhs.GetEdges()[i]-&amp;gt;GetFrom();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string str_from = from_node-&amp;gt;GetConcept()-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string str_mid = lhs.GetEdges()[i]-&amp;gt;GetConcept()-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto to_node = lhs.GetEdges()[i]-&amp;gt;GetTo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string str_to = to_node-&amp;gt;GetConcept()-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only if arrow is reversed, reverse the fake edge&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lhs.GetEdges()[i]-&amp;gt;HasTailArrow() == true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetEdges()[i]-&amp;gt;HasHeadArrow() == false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_tuple(str_to,str_mid,str_from));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (lhs.GetEdges()[i]-&amp;gt;HasTailArrow() == lhs.GetEdges()[i]-&amp;gt;HasHeadArrow())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Two-way or zero-way arrow, add it in both directions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_tuple(str_to,str_mid,str_from));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_tuple(str_from,str_mid,str_to));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Normal arrow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_tuple(str_from,str_mid,str_to));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(boost::numeric_cast&amp;lt;int&amp;gt;(v.size()) &amp;gt;= sz);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FakeEdges w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto from_node = rhs.GetEdges()[i]-&amp;gt;GetFrom();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string str_from = from_node-&amp;gt;GetConcept()-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string str_mid = rhs.GetEdges()[i]-&amp;gt;GetConcept()-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto to_node = rhs.GetEdges()[i]-&amp;gt;GetTo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string str_to = to_node-&amp;gt;GetConcept()-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//w.push_back(std::make_tuple(str_from,str_mid,str_to));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only if arrow is reversed, reverse the fake edge&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rhs.GetEdges()[i]-&amp;gt;HasTailArrow() == true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; rhs.GetEdges()[i]-&amp;gt;HasHeadArrow() == false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(std::make_tuple(str_to,str_mid,str_from));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (rhs.GetEdges()[i]-&amp;gt;HasTailArrow() == rhs.GetEdges()[i]-&amp;gt;HasHeadArrow())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Two-way or zero-way arrow, add it in both directions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(std::make_tuple(str_to,str_mid,str_from));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(std::make_tuple(str_from,str_mid,str_to));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Normal arrow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(std::make_tuple(str_from,str_mid,str_to));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(static_cast&amp;lt;int&amp;gt;(w.size()) &amp;gt;= sz);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v.size() != w.size()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::sort(v.begin(),v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::sort(w.begin(),w.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v != w)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//#define REALLY_SHOW_ME_THIS_7364894385876473475934758934753&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef REALLY_SHOW_ME_THIS_7364894385876473475934758934753&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "[" &amp;lt;&amp;lt; (i+1) &amp;lt;&amp;lt; "/" &amp;lt;&amp;lt; sz &amp;lt;&amp;lt; "]: ("&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; std::get&amp;lt;0&amp;gt;(v[i]) &amp;lt;&amp;lt; "," &amp;lt;&amp;lt; std::get&amp;lt;1&amp;gt;(v[i]) &amp;lt;&amp;lt; "," &amp;lt;&amp;lt; std::get&amp;lt;2&amp;gt;(v[i])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ") , ("&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; std::get&amp;lt;0&amp;gt;(w[i]) &amp;lt;&amp;lt; "," &amp;lt;&amp;lt; std::get&amp;lt;1&amp;gt;(w[i]) &amp;lt;&amp;lt; "," &amp;lt;&amp;lt; std::get&amp;lt;2&amp;gt;(w[i])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
bool ribi::cmap::ConceptMap::IsValid() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node: m_nodes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("Node is nullptr");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge: m_edges)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!edge)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("Edge is nullptr");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!edge-&amp;gt;GetTo())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("edge-&amp;gt;GetTo() is nullptr");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!edge-&amp;gt;GetFrom())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("edge-&amp;gt;GetFrom() is nullptr");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetTo()) != 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("edge-&amp;gt;GetTo() points to node not in the concept map");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_nodes.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetFrom()) != 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("edge-&amp;gt;GetFrom() points to node not in the concept map");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::ConceptMap::ToXml(const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; map)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;concept_map&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;nodes&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes = map-&amp;gt;GetNodes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; node: nodes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; Node::ToXml(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/nodes&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;edges&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; &amp;gt;&amp;amp; edges = map-&amp;gt;GetEdges();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; edge: edges)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; Edge::ToXml(edge,nodes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/edges&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/concept_map&amp;gt;";&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string r = s.str();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.size() &amp;gt;= 27);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(0,13) == std::string("&amp;lt;concept_map&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(r.size() - 14,14) == std::string("&amp;lt;/concept_map&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return r;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator==(const ribi::cmap::ConceptMap&amp;amp; lhs, const ribi::cmap::ConceptMap&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Compare nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; &amp;gt; lhs_nodes = lhs.GetNodes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; &amp;gt; rhs_nodes = rhs.GetNodes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lhs_nodes.size() != rhs_nodes.size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::equal(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::begin(lhs_nodes),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::end(&amp;nbsp;&amp;nbsp;lhs_nodes),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::begin(rhs_nodes),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; lhs_node,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; rhs_node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *lhs_node == *rhs_node;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Compare edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; &amp;gt; lhs_edges = lhs.GetEdges();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; &amp;gt; rhs_edges = rhs.GetEdges();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lhs_edges.size() != rhs_edges.size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::equal(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::begin(lhs_edges),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::end(&amp;nbsp;&amp;nbsp;lhs_edges),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::begin(rhs_edges),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; lhs_edge,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; rhs_edge)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *lhs_edge == *rhs_edge;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator!=(const ribi::cmap::ConceptMap&amp;amp; lhs, const ribi::cmap::ConceptMap&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmap.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmap.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCONCEPTMAP_H&lt;br/&gt;
#define CONCEPTMAPCONCEPTMAP_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct ConceptMapFactory;&lt;br/&gt;
&lt;br/&gt;
///A concept map&lt;br/&gt;
///Its interface is based on nodes and edges&lt;br/&gt;
///Use ConceptMapWidget to work with commands&lt;br/&gt;
struct ConceptMap&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ConceptMap(const ConceptMap&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ConceptMap&amp;amp; operator=(const ConceptMap&amp;amp;) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add an Edge, assumes that the nodes it points to are in the concept map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void AddEdge(const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add a node, always works&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void AddNode(const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test if this ConceptMap can be constructed successfully&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool CanConstruct(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt;&amp;amp; edges);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Prepend the question as a first node, before adding the supplied nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; CreateNodes(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; question,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create all sub-conceptmaps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Note that CreateSubs()[0] is the concept map around the focal question&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; CreateSubs() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Delete an edge&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DeleteEdge(const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Delete a node and all the edges connected to it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DeleteNode(const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if the ConceptMap is empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool Empty() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Edge&amp;gt; &amp;gt;&amp;nbsp;&amp;nbsp;GetEdges() const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Edge&amp;gt; &amp;gt;&amp;amp; GetEdges() { return m_edges; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Node&amp;gt; &amp;gt;&amp;nbsp;&amp;nbsp;GetNodes() const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node&amp;gt; &amp;gt;&amp;amp; GetNodes() { return m_nodes; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the focus question&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetQuestion() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Similar to operator==, except that the GUI member variables aren't checked for equality&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool HasSameContent(const ribi::cmap::ConceptMap&amp;amp; lhs, const ribi::cmap::ConceptMap&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if there are no nulls in the edges and nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsValid() const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a ConceptMap from an XML std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string ToXml(const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; c);&lt;br/&gt;
&lt;br/&gt;
private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; m_edges;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; m_nodes;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block constructor, except for the friend ConceptMapFactory&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ConceptMap(const std::string&amp;amp; question);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Nodes[0] must be the focal question&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ConceptMap(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt;&amp;amp; edges = {});&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a concept map from a cluster&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef TO_ADD_TO_PROJECTBRAINWEAVER&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ConceptMap(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; question,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Cluster&amp;gt;&amp;amp; cluster);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend ConceptMapFactory;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block destructor, except for the friend boost::checked_delete&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~ConceptMap() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(ConceptMap* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const ribi::cmap::ConceptMap&amp;amp; lhs, const ribi::cmap::ConceptMap&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const ribi::cmap::ConceptMap&amp;amp; lhs, const ribi::cmap::ConceptMap&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCONCEPTMAP_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcenternode.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcenternode.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "conceptmapcenternode.h"&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::CenterNode::CenterNode(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Node(concept,x,y)&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcenternode.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcenternode.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCENTERNODE_H&lt;br/&gt;
#define CONCEPTMAPCENTERNODE_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include "conceptmapnode.h"&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct CenterNodeFactory;&lt;br/&gt;
&lt;br/&gt;
///The focal question of a ConceptMap&lt;br/&gt;
///In a full ConceptMap, GetNodes()[0] results in finding a CenterNode&lt;br/&gt;
///In a sub-ConceptMap, GetNodes()[0] will be a regular Node&lt;br/&gt;
struct CenterNode : public cmap::Node&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block destructor, except for the friend boost::checked_delete&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~CenterNode() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(CenterNode* x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block construction, except for NodeFactory&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend CenterNodeFactory;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CenterNode() = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit CenterNode(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x = 0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y = 0.0);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCENTERNODE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcenternodefactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcenternodefactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include "conceptmapcenternodefactory.h"&lt;br/&gt;
#include "conceptmapcenternode.h"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::CenterNode&amp;gt; ribi::cmap::CenterNodeFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new cmap::CenterNode(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept,x,y&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*concept,*node-&amp;gt;GetConcept()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetX() == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetY() == y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return node;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::CenterNode&amp;gt; ribi::cmap::CenterNodeFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new CenterNode(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConceptFactory::Create(name,examples),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;y&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetX() == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetY() == y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return node;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::CenterNode&amp;gt; ribi::cmap::CenterNodeFactory::DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::CenterNode&amp;gt;&amp;amp; node)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; new_concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ConceptFactory::DeepCopy(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(new_concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*node-&amp;gt;GetConcept(),*new_concept));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; new_node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Create(new_concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node-&amp;gt;GetX(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node-&amp;gt;GetY()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(new_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(new_node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*node,*new_node));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return new_node;&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcenternodefactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcenternodefactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCENTERNODEFACTORY_H&lt;br/&gt;
#define CONCEPTMAPCENTERNODEFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct CenterNodeFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x = 0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y = 0.0);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; examples = {},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x = 0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y = 0.0);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::CenterNode&amp;gt;&amp;amp; node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCENTERNODEFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcommand.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcommand.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "conceptmapcommand.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapwidget.h"&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::Command::CanDoCommand(const Widget * const widget) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return CanDoCommandSpecific(widget);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Command::DoCommand(Widget * const widget) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDoCommand(widget));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;DoCommandSpecific(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=2; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Undo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DoCommandSpecific(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::CommandDeleteConceptMap::CanDoCommandSpecific(const Widget * const /* widget */) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_widget;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//return widget-&amp;gt;GetConceptMap().get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::CommandDeleteConceptMap::DoCommandSpecific(Widget * const widget) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDoCommandSpecific(widget));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetConceptMap().get());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Correct pre state&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_deleted_concept_map);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_widget = widget;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_deleted_concept_map = widget-&amp;gt;GetConceptMap();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ConceptMap&amp;gt; m;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;widget-&amp;gt;SetConceptMap(m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Correct post state&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_deleted_concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetConceptMap().get());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_widget-&amp;gt;GetConceptMap().get());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::CommandDeleteConceptMap::Undo() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Correct pre state&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_deleted_concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_widget-&amp;gt;GetConceptMap().get());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_widget-&amp;gt;SetConceptMap(m_deleted_concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ConceptMap&amp;gt; empty_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_deleted_concept_map = empty_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_widget = nullptr;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Correct post state&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_deleted_concept_map);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::CommandStartConceptMap::CanDoCommandSpecific(const Widget * const widget) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !widget-&amp;gt;GetConceptMap();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::CommandStartConceptMap::DoCommandSpecific(Widget * const widget) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_widget);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetConceptMap().get());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_widget = widget;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ConceptMap&amp;gt; new_map {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConceptMapFactory::Create("...")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(new_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_widget-&amp;gt;SetConceptMap(new_map);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_widget-&amp;gt;GetConceptMap().get());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::CommandStartConceptMap::Undo() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_widget-&amp;gt;GetConceptMap().get());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ConceptMap&amp;gt; empty_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_widget-&amp;gt;SetConceptMap(empty_map);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_widget = nullptr;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcommand.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcommand.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCOMMAND_H&lt;br/&gt;
#define CONCEPTMAPCOMMAND_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///Command can be used to do and undo commands to a concept map Widget&lt;br/&gt;
struct Command&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual ~Command() noexcept {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoCommand(const Widget * const widget) const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoCommand(Widget * const widget) noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual const std::string ToStr() const noexcept = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual void Undo() noexcept = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Hook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual bool CanDoCommandSpecific(const Widget * const widget) const noexcept = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Hook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual void DoCommandSpecific(Widget * const widget) noexcept = 0;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
///Delete a concept map&lt;br/&gt;
///-Can be used only when there is an existing concept map&lt;br/&gt;
struct CommandDeleteConceptMap : public Command&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CommandDeleteConceptMap() : m_deleted_concept_map{}, m_widget{} {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CommandDeleteConceptMap(const CommandDeleteConceptMap&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CommandDeleteConceptMap&amp;amp; operator=(const CommandDeleteConceptMap&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~CommandDeleteConceptMap() noexcept {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoCommandSpecific(const Widget * const widget) const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoCommandSpecific(Widget * const widget) noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept { return "delete concept map"; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Undo() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ConceptMap&amp;gt; m_deleted_concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Widget * m_widget;&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
///Start a new concept map&lt;br/&gt;
///-Can be used only when there is no existing concept map&lt;br/&gt;
struct CommandStartConceptMap : public Command&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CommandStartConceptMap() : m_widget{} {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CommandStartConceptMap(const CommandStartConceptMap&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CommandStartConceptMap&amp;amp; operator=(const CommandStartConceptMap&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~CommandStartConceptMap() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoCommandSpecific(const Widget * const widget) const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoCommandSpecific(Widget * const widget) noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept { return "start concept map"; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Undo() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Widget * m_widget;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCOMMAND_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcommandfactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcommandfactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "conceptmapcommandfactory.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapcommand.h"&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Command&amp;gt; &amp;gt; ribi::cmap::CommandFactory::CreateTestCommands() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Command&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Command&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new CommandDeleteConceptMap&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Command&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new CommandStartConceptMap&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcommandfactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcommandfactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCOMMANDFACTORY_H&lt;br/&gt;
#define CONCEPTMAPCOMMANDFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///CommandFactory creates Commands&lt;br/&gt;
struct CommandFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Command&amp;gt; &amp;gt; CreateTestCommands() noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCOMMANDFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcompetency.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcompetency.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::cmap::Competency&amp;gt; ribi::cmap::GetAllCompetencies()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::uninitialized,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::profession,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::organisations,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::social_surroundings,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::target_audience,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::ti_knowledge,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::prof_growth,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Competency::misc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::CompetencyToDutchStr(const ribi::cmap::Competency type)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (type)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::uninitialized: return "[Ongeinitialiseerd]";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::profession: return "Kennis van het beroepsdomein";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::organisations: return "Kennis van de organisatie";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::social_surroundings: return "Kennis van de sociale omgeving";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::target_audience: return "Kennis van de doelgroep";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::ti_knowledge: return "Technisch instrumentele kennis";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::prof_growth: return "Kennis van de eigen persoon";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case ribi::cmap::Competency::misc: return "Overige";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Unknown ribi::cmap::Competency");&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapcompetency.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapcompetency.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCOMPETENCY_H&lt;br/&gt;
#define CONCEPTMAPCOMPETENCY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
enum class Competency&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;uninitialized = 0,&amp;nbsp;&amp;nbsp; //Not yet set&lt;br/&gt;
&amp;nbsp;&amp;nbsp;profession,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//NL: 'Beroepsdomein'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;organisations,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //NL: 'Organisaties'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;social_surroundings, //NL: 'Sociale omgeving'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;target_audience,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //NL 'Doelgroep'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ti_knowledge,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//'Technical Instrumental', NL: 'Technische instrumentele kennis'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;prof_growth,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Professionele groei&lt;br/&gt;
&amp;nbsp;&amp;nbsp;misc&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //NL: 'Overig'&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;Competency&amp;gt; GetAllCompetencies();&lt;br/&gt;
&lt;br/&gt;
const std::string CompetencyToDutchStr(const Competency competency);&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCOMPETENCY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapconcept.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapconcept.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
#include "conceptmapexamples.h"&lt;br/&gt;
#include "conceptmapexamplesfactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "xml.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::Concept::Concept(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_concreteness,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_specificity)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_signal_examples_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_name_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_rating_complexity_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_rating_concreteness_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_rating_specificity_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_examples{examples},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_complex{is_complex},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_name{name},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_rating_complexity{rating_complexity},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_rating_concreteness{rating_concreteness},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_rating_specificity{rating_specificity}&lt;br/&gt;
&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rating_complexity&amp;nbsp;&amp;nbsp; &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rating_complexity&amp;nbsp;&amp;nbsp; &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rating_concreteness &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rating_concreteness &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rating_specificity&amp;nbsp;&amp;nbsp;&amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rating_specificity&amp;nbsp;&amp;nbsp;&amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; ribi::cmap::Concept::FromXml(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() &amp;gt;= 19);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(0,9) == std::string("&amp;lt;concept&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(s.size() - 10,10) == std::string("&amp;lt;/concept&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; examples;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool is_complex = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int rating_complexity&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= -2; //Not even unrated (which has -1 as its value)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int rating_concreteness&amp;nbsp;&amp;nbsp;= -2; //Not even unrated (which has -1 as its value)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int rating_specificity&amp;nbsp;&amp;nbsp; = -2; //Not even unrated (which has -1 as its value)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;name&amp;gt;.*&amp;lt;/name&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name = ribi::xml::StripXmlTag(v[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;examples&amp;gt;.*&amp;lt;/examples&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1 &amp;amp;&amp;amp; "&amp;lt;examples&amp;gt;*.&amp;lt;/examples&amp;gt; must be present once in a Concept");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;examples = Examples::FromXml(v[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_is_complex&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;concept_is_complex&amp;gt;.*&amp;lt;/concept_is_complex&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1 &amp;amp;&amp;amp; "(&amp;lt;is_complex&amp;gt;.*&amp;lt;/is_complex&amp;gt;) must be present once per Concept");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_complex = boost::lexical_cast&amp;lt;bool&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_rating_complexity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;complexity&amp;gt;.*&amp;lt;/complexity&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1 &amp;amp;&amp;amp; "(&amp;lt;complexity&amp;gt;.*&amp;lt;/complexity&amp;gt;) must be present once per Concept");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_complexity = boost::lexical_cast&amp;lt;int&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_rating_concreteness&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;concreteness&amp;gt;.*&amp;lt;/concreteness&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_concreteness = boost::lexical_cast&amp;lt;int&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_rating_specificity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;specificity&amp;gt;.*&amp;lt;/specificity&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_specificity = boost::lexical_cast&amp;lt;int&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ConceptFactory::Create(name,examples,is_complex,rating_complexity,rating_concreteness,rating_specificity);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;const ribi::cmap::Examples&amp;gt; ribi::cmap::Concept::GetExamples() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; p(m_examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Concept::SetExamples(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; examples)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (examples != m_examples)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_examples = examples;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_examples_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Concept::SetName(const std::string&amp;amp; name)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (name != m_name)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_name = name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_name_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Concept::SetRatingComplexity(const int rating_complexity)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_rating_complexity != rating_complexity)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_rating_complexity = rating_complexity;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_rating_complexity &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_rating_complexity &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_rating_complexity_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Concept::SetRatingConcreteness(const int rating_concreteness)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_rating_concreteness != rating_concreteness)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_rating_concreteness = rating_concreteness;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_rating_concreteness &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_rating_concreteness &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_rating_concreteness_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Concept::SetRatingSpecificity(const int rating_specificity)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_rating_specificity != rating_specificity)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_rating_specificity = rating_specificity;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_rating_specificity &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_rating_specificity &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_rating_specificity_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Concept::ToXml(const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; &amp;amp;c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;concept&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;name&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/name&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; Examples::ToXml(c-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;concept_is_complex&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetIsComplex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/concept_is_complex&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;complexity&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetRatingComplexity();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/complexity&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;concreteness&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetRatingConcreteness();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/concreteness&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;specificity&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetRatingSpecificity();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/specificity&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/concept&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string r = s.str();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.size() &amp;gt;= 19);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(0,9) == std::string("&amp;lt;concept&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(r.size() - 10,10) == std::string("&amp;lt;/concept&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return r;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator==(const ribi::cmap::Concept&amp;amp; lhs, const ribi::cmap::Concept&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; lhs_examples = lhs.GetExamples();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs_examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; rhs_examples = rhs.GetExamples();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rhs_examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*lhs_examples&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; == *rhs_examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetIsComplex()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== rhs.GetIsComplex()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetName()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; == rhs.GetName()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetRatingComplexity()&amp;nbsp;&amp;nbsp; == rhs.GetRatingComplexity()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetRatingConcreteness() == rhs.GetRatingConcreteness()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetRatingSpecificity()&amp;nbsp;&amp;nbsp;== rhs.GetRatingSpecificity();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator!=(const ribi::cmap::Concept&amp;amp; lhs, const ribi::cmap::Concept&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator&amp;lt;(const ribi::cmap::Concept&amp;amp; lhs, const ribi::cmap::Concept&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetName() &amp;lt; rhs.GetName()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetName() &amp;gt; rhs.GetName()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetExamples() &amp;lt; *rhs.GetExamples()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetExamples() != *rhs.GetExamples()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*lhs.GetExamples() == *rhs.GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetRatingComplexity() &amp;lt; rhs.GetRatingComplexity()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetRatingComplexity() &amp;gt; rhs.GetRatingComplexity()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetRatingConcreteness() &amp;lt; rhs.GetRatingConcreteness()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetRatingConcreteness() &amp;gt; rhs.GetRatingConcreteness()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.GetRatingSpecificity() &amp;lt; rhs.GetRatingSpecificity();&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
bool ribi::cmap::operator&amp;lt;(const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs); assert(rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetName() &amp;lt; rhs-&amp;gt;GetName()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetName() &amp;gt; rhs-&amp;gt;GetName()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetExamples() &amp;lt; rhs-&amp;gt;GetExamples()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetExamples() != rhs-&amp;gt;GetExamples()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs-&amp;gt;GetExamples() == rhs-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetRatingComplexity() &amp;lt; rhs-&amp;gt;GetRatingComplexity()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetRatingComplexity() &amp;gt; rhs-&amp;gt;GetRatingComplexity()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetRatingConcreteness() &amp;lt; rhs-&amp;gt;GetRatingConcreteness()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetRatingConcreteness() &amp;gt; rhs-&amp;gt;GetRatingConcreteness()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs-&amp;gt;GetRatingSpecificity() &amp;lt; rhs-&amp;gt;GetRatingSpecificity();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator&amp;lt;(const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs); assert(rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;(lhs) &amp;lt; boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;(rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator&amp;lt;(const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs); assert(rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;(lhs) &amp;lt; boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;(rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator&amp;lt;(const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs); assert(rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;(lhs) &amp;lt; boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;(rhs);&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapconcept.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapconcept.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCONCEPT_H&lt;br/&gt;
#define CONCEPTMAPCONCEPT_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/signals2.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;QRegExp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct ConceptFactory;&lt;br/&gt;
&lt;br/&gt;
///A Concept is a class that has a name and examples&lt;br/&gt;
struct Concept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block copying, as signals cannot be copied&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Concept(const Concept&amp;amp; other) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Concept&amp;amp; operator=(const Concept&amp;amp; other) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Read concept from a std::string read from file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Concept&amp;gt; FromXml(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the examples of the concept, e.g. 'Plato', 'Aristotle'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; GetExamples() const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Examples&amp;gt;&amp;amp; GetExamples() { return m_examples; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated the name of this concept as being an addition to the complexity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///This is something different than m_rating_complexity:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_is_complex can be used to help the assessor determine a m_rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///but m_rating_complexity is the final and complete rating&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool GetIsComplex() const { return m_is_complex; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the name of the concept, e.g. 'Philosphy'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetName() const { return m_name; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the rating of this Concept for complexity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetRatingComplexity() const { return m_rating_complexity; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the rating of this Concept for concreteness&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetRatingConcreteness() const { return m_rating_concreteness; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the rating of this Concept for specificity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetRatingSpecificity() const { return m_rating_specificity; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated the name of this concept as being an addition to the complexity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///This is something different than m_rating_complexity:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_is_complex can be used to help the assessor determine a m_rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///but m_rating_complexity is the final and complete rating&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetIsComplex(const bool is_complex) { m_is_complex = is_complex; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when the examples are changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void(const Concept*)&amp;gt; m_signal_examples_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when the name is changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void(const Concept*)&amp;gt; m_signal_name_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when the rating of the complexity is changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void(const Concept*)&amp;gt; m_signal_rating_complexity_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when the rating of the complexity is changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void(const Concept*)&amp;gt; m_signal_rating_concreteness_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when the rating of the specificity is changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void(const Concept*)&amp;gt; m_signal_rating_specificity_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert Concept to a std::string to write to file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string ToXml(const boost::shared_ptr&amp;lt;const Concept&amp;gt;&amp;amp; t);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtConceptMapConceptEditDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtConceptMapDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtRateConceptDialogNewName;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtConceptMapTestConceptItemDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtConceptMapTestEdgeItemDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtConceptMapTestNodeItemDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtEdge;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtNode;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtRateExamplesDialogNewName;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtStudentMenuDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtTestEditConceptMapDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtTestRateConceptMapDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtTestEdgeItemDialog;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class QtTestNodeItemDialog;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetExamples(const boost::shared_ptr&amp;lt;Examples&amp;gt;&amp;amp; examples);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetName(const std::string&amp;amp; name);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the rating of this Concept for complexity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetRatingComplexity(const int rating_complexity);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the rating of this Concept for concreteness&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetRatingConcreteness(const int rating_concreteness);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the rating of this Concept for specificity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetRatingSpecificity(const int rating_specificity);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Examples of the concept, e.g. 'Plato', 'Aristotle'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Examples&amp;gt; m_examples;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated the name of this concept as being an addition to the complexity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///This is something different than m_rating_complexity:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_is_complex can be used to help the assessor determine a m_rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///but m_rating_complexity is the final and complete rating&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_complex;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The name of the concept, e.g. 'Philosphy'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_name;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The rating of this Concept for complexity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_rating_complexity;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The rating of this Concept for concreteness&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_rating_concreteness;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The rating of this Concept for specificity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///-1: not rated, 0: lowest, 2: highest&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_rating_specificity;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Use checked_delete for destructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~Concept() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Concept* x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Let only ConceptFactory construct Concepts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Concept(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Examples&amp;gt;&amp;amp; examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_concreteness,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_specificity);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend ConceptFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Concept&amp;amp; lhs, const Concept&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Concept&amp;amp; lhs, const Concept&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
///Two Concept instances are ordered as follows:&lt;br/&gt;
///(1) Alphabetically on the name&lt;br/&gt;
///(2) (if the names are equal) On their Examples&lt;br/&gt;
bool operator&amp;lt;(const Concept&amp;amp; lhs, const Concept&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Concept&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Concept&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Concept&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Concept&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Concept&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Concept&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Concept&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Concept&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCONCEPT_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapconceptfactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapconceptfactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
#include "conceptmapexamples.h"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
#include "conceptmapexamplesfactory.h"&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; ribi::cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_concreteness,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_specificity)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Concept(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_concreteness,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_specificity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return concept;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; ribi::cmap::ConceptFactory::DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; concept)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ExamplesFactory::Create(concept-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*examples,*concept-&amp;gt;GetExamples()));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept-&amp;gt;GetRatingComplexity() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept-&amp;gt;GetRatingComplexity() &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; q&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept-&amp;gt;GetName(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept-&amp;gt;GetIsComplex(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept-&amp;gt;GetRatingComplexity(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept-&amp;gt;GetRatingConcreteness(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept-&amp;gt;GetRatingSpecificity());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(q-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*concept,*q));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return q;&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
//Do not create this version: it will lead to ambiguities&lt;br/&gt;
//static const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; ribi::cmap::ConceptFactory::Create(&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt;&amp;amp; examples)&lt;br/&gt;
//{&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;return Create(name,ExamplesFactory::Create(examples));&lt;br/&gt;
//}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; ribi::cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_concreteness,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int rating_specificity)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rating_complexity &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::pair&amp;lt;std::string,Competency&amp;gt;&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; q&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ExampleFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.first,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.second);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return q;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ExamplesFactory::Create(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(examples);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_concreteness,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rating_specificity);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return concept;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; &amp;gt; ribi::cmap::ConceptFactory::GetTests()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; &amp;gt; v(6);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; examples = ExamplesFactory::Create();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; p = Create("Concept without examples", examples, false, 0, 1, 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[0] = p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; p = Create("Concept with one example", { { "Only example", cmap::Competency::profession } }, 1, 2, 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[1] = p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; p = Create("Concept with two examples", { { "First example", cmap::Competency::organisations }, { "Second example", cmap::Competency::social_surroundings } }, 2, 0, 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[2] = p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; p = Create("Concept with three examples", { { "Example 1 of 3", cmap::Competency::target_audience }, { "Example 2 of 3", cmap::Competency::ti_knowledge }, { "Example 3 of 3", cmap::Competency::prof_growth } }, 0, 1, 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[3] = p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; p = Create("Concept with four Roman examples", { { "Example I/IV", cmap::Competency::misc }, { "Example II/IV", cmap::Competency::uninitialized }, { "Example III/IV", cmap::Competency::profession }, { "Example III/IV", cmap::Competency::social_surroundings } }, 1, 2, 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[4] = p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; p = Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Very long multi-line concept with four Roman examples that also each span multiple lines, that is, eighty characters",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "Example I/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::misc", cmap::Competency::misc },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "Example II/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::uninitialized", cmap::Competency::uninitialized },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "Example III/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::profession", cmap::Competency::profession },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "Example III/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::social_surroundings", cmap::Competency::social_surroundings }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}, 1, 2, 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetRatingComplexity() &amp;lt;=&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[5] = p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count_if(v.begin(),v.end(),[](const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; p) { return !p; } ) == 0); //FIX 2012-01-02&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(std::all_of(v.begin(),v.end(),[](const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; p) { return p; } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[0]-&amp;gt;GetExamples());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Version below appears to work differently in cross compiler&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Concept without examples", ExamplesFactory::Create(), 0, 1, 2),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Concept with one example", { { "Only example", cmap::Competency::profession } }, 1, 2, 0),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Concept with two examples", { { "First example", cmap::Competency::organisations }, { "Second example", cmap::Competency::social_surroundings } }, 2, 0, 1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Concept with three examples", { { "Example 1 of 3", cmap::Competency::target_audience }, { "Example 2 of 3", cmap::Competency::ti_knowledge }, { "Example 3 of 3", cmap::Competency::prof_growth } }, 0, 1, 2),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Concept with four Roman examples", { { "Example I/IV", cmap::Competency::misc }, { "Example II/IV", cmap::Competency::uninitialized }, { "Example III/IV", cmap::Competency::profession }, { "Example III/IV", cmap::Competency::social_surroundings } }, 1, 2, 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}; //Double braces not needed in future GCC version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapconceptfactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapconceptfactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCONCEPTFACTORY_H&lt;br/&gt;
#define CONCEPTMAPCONCEPTFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;array&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/array.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///Creates ribi::cmap::Concepts&lt;br/&gt;
struct ConceptFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Default and complete Create method&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_complexity,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_concreteness,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_specificity);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name = "...", //2013-09-18&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; examples = {},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_complex = true,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_complexity = -1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_concreteness = -1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int rating_specificity = -1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Like a Concept deep-copy constructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///DeepCopy is only used for debugging&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain some testing concepts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; &amp;gt; GetTests();&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCONCEPTFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapedge.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapedge.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapedge.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;QRegExp&amp;gt;&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapedgefactory.h"&lt;br/&gt;
#include "conceptmapnode.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::Edge::Edge(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; &amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double concept_x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double concept_y,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool tail_arrow,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool head_arrow)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_signal_edge_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_concept(concept),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_from(from),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_head_arrow(head_arrow),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_tail_arrow(tail_arrow),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_to(to),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_x(concept_x),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_y(concept_y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from != to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_concept);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Subscribe to all Concept signals to re-emit m_signal_edge_changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;this-&amp;gt;m_concept-&amp;gt;m_signal_name_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&amp;amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;this-&amp;gt;m_concept-&amp;gt;m_signal_examples_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&amp;amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;this-&amp;gt;m_concept-&amp;gt;m_signal_rating_complexity_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&amp;amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;this-&amp;gt;m_concept-&amp;gt;m_signal_rating_concreteness_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&amp;amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;this-&amp;gt;m_concept-&amp;gt;m_signal_rating_specificity_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&amp;amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Edge::EmitSignalEdgeChanged()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_signal_edge_changed(this);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Edge::SetFrom(const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_from != from)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_from = from;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_edge_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Edge::SetHeadArrow(const bool has_head_arrow)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_head_arrow != has_head_arrow)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_head_arrow = has_head_arrow;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_edge_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Edge::SetTailArrow(const bool has_tail_arrow)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_tail_arrow != has_tail_arrow)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_tail_arrow = has_tail_arrow;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_edge_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Edge::SetTo(const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_to != to)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_to = to;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_edge_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Edge::SetX(const double x)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_x != x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_x = x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_edge_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Edge::SetY(const double y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_y != y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_y = y;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_edge_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::cmap::Edge::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test member variables&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Started ribi::cmap::Edge::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto nodes = Node::GetTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(nodes.size() &amp;gt;= 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto node_from = nodes[0];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto node_to&amp;nbsp;&amp;nbsp; = nodes[1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt;&amp;amp; edge: EdgeFactory::GetTests(node_from,node_to))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test copy constructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; c = cmap::EdgeFactory::DeepCopy(edge,node_from,node_to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*edge,*c)); assert(operator==(*c,*edge));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c-&amp;gt;GetFrom(),*node_from));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c-&amp;gt;GetFrom(),*nodes[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c-&amp;gt;GetTo(),*node_to));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c-&amp;gt;GetTo(),*nodes[1]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ToXml(c,AddConst(nodes));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; d = cmap::EdgeFactory::FromXml(s,nodes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!operator==(*c,*d))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("BREAK");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(ToXml(c,AddConst(nodes)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(ToXml(d,AddConst(nodes)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d)); //HIERO&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Edge::Test finished successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Edge::ToXml(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt;&amp;amp; edge,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;edge&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; Concept::ToXml(edge-&amp;gt;GetConcept());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto from_iter = std::find(nodes.begin(),nodes.end(),edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto to_iter = std::find(nodes.begin(),nodes.end(),edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from_iter != nodes.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to_iter != nodes.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int from_index = std::distance(nodes.begin(),from_iter);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int to_index = std::distance(nodes.begin(),to_iter);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from_index &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from_index &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(nodes.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to_index &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to_index &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(nodes.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from_index != to_index);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;from&amp;gt;" &amp;lt;&amp;lt; from_index &amp;lt;&amp;lt; "&amp;lt;/from&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;head_arrow&amp;gt;" &amp;lt;&amp;lt; edge-&amp;gt;HasHeadArrow() &amp;lt;&amp;lt; "&amp;lt;/head_arrow&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;tail_arrow&amp;gt;" &amp;lt;&amp;lt; edge-&amp;gt;HasTailArrow() &amp;lt;&amp;lt; "&amp;lt;/tail_arrow&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;to&amp;gt;" &amp;lt;&amp;lt; to_index &amp;lt;&amp;lt; "&amp;lt;/to&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;x&amp;gt;" &amp;lt;&amp;lt; edge-&amp;gt;GetX() &amp;lt;&amp;lt; "&amp;lt;/x&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;y&amp;gt;" &amp;lt;&amp;lt; edge-&amp;gt;GetY() &amp;lt;&amp;lt; "&amp;lt;/y&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/edge&amp;gt;";&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string r = s.str();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.size() &amp;gt;= 13);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(0,6) == std::string("&amp;lt;edge&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(r.size() - 7,7) == std::string("&amp;lt;/edge&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return r;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator==(const ribi::cmap::Edge&amp;amp; lhs, const ribi::cmap::Edge&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs.GetConcept()); assert(rhs.GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetConcept()&amp;nbsp;&amp;nbsp; != *rhs.GetConcept()) TRACE("Concept differs");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetFrom()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= *rhs.GetFrom()) TRACE("From node differs");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetTo()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= *rhs.GetTo()) TRACE("To node differs");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( lhs.GetX()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; != rhs.GetX()) TRACE("X differs");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( lhs.GetY()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; != rhs.GetY()) TRACE("Y differs");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( lhs.HasHeadArrow() != rhs.HasHeadArrow()) TRACE("Has head arrow differs");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( lhs.HasTailArrow() != rhs.HasTailArrow()) TRACE("Has tail arrow differs");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *lhs.GetConcept()&amp;nbsp;&amp;nbsp; == *rhs.GetConcept()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; *lhs.GetFrom()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== *rhs.GetFrom()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; *lhs.GetTo()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== *rhs.GetTo()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;lhs.GetX()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; == rhs.GetX()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;lhs.GetY()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; == rhs.GetY()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;lhs.HasHeadArrow() == rhs.HasHeadArrow()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;lhs.HasTailArrow() == rhs.HasTailArrow();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator!=(const cmap::Edge&amp;amp; lhs, const cmap::Edge&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapedge.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapedge.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPEDGE_H&lt;br/&gt;
#define CONCEPTMAPEDGE_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/signals2.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#include "conceptmapelement.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct EdgeFactory;&lt;br/&gt;
&lt;br/&gt;
///An Edge is the GUI-independent part of the edges used in QtConceptMap.&lt;br/&gt;
///An Edge goes from one Node to another, which must a different Node&lt;br/&gt;
struct Edge : public Element&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Edge(const Edge&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Edge&amp;amp; operator=(const Edge&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Concept&amp;gt; GetConcept() const { return m_concept; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Concept&amp;gt; GetConcept()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { return m_concept; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the Node this edge originates from&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Node&amp;gt; GetFrom() const { return m_from; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node&amp;gt; GetFrom()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { return m_from; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the Node index this edge goes to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Node&amp;gt; GetTo() const { return m_to; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node&amp;gt; GetTo()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { return m_to; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the x coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double GetX() const { return m_x; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the y coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double GetY() const { return m_y; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Does the edge have an arrow at the head?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool HasHeadArrow() const { return m_head_arrow; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Similar to operator==, except that the coordinats are not checked&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool HasSameContent(const boost::shared_ptr&amp;lt;const Edge&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const Edge&amp;gt;&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Does the edge have an arrow at the tail?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool HasTailArrow() const { return m_tail_arrow; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetConcept(const boost::shared_ptr&amp;lt;Concept&amp;gt; concept) { m_concept = concept; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the Node index this edge originates from&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetFrom(const boost::shared_ptr&amp;lt;Node&amp;gt; from);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set if the head has an arrow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetHeadArrow(const bool has_head_arrow);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the coordinat of the concept at the center of the node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetPos(const double x, const double y) { SetX(x); SetY(y); }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set if the tail has an arrow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetTailArrow(const bool has_tail_arrow);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the Node index this edge goes to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetTo(const boost::shared_ptr&amp;lt;Node&amp;gt; to);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the x coordinat of the concept at the center of the node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetX(const double x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the y coordinat of the concept at the center of the node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetY(const double y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert an Edge from an XML std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The container of nodes is needed to convert the 'to' and 'from'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///field to indices&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string ToXml(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Edge&amp;gt;&amp;amp; c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Node&amp;gt; &amp;gt;&amp;amp; nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when an Edge attribute has changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::signals2::signal&amp;lt;void (const Edge*)&amp;gt; m_signal_edge_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Concept on the Edge&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Concept&amp;gt; m_concept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Node index this edge originates from&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Cannot be an index, see [1] below&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Node&amp;gt; m_from;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is there an arrowhead at the 'to' node?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_head_arrow;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is there an arrowhead at the 'from' node?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_tail_arrow;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Node index this edge goes to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Cannot be an index, see [1] below&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Node&amp;gt; m_to;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The x-coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double m_x;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The y-coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double m_y;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void EmitSignalEdgeChanged();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Edge() = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block destructor, except for the friend boost::checked_delete&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~Edge() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Edge* x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block constructor, except for EdgeFactory&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend EdgeFactory;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Edge(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Concept&amp;gt; &amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double concept_x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double concept_y,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool tail_arrow,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Node&amp;gt; to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool head_arrow);&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Edge&amp;amp; lhs, const Edge&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Edge&amp;amp; lhs, const Edge&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Edge&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Edge&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Edge&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Edge&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Edge&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Edge&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Edge&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Edge&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
&lt;br/&gt;
///Notes:&lt;br/&gt;
/// [1] Node::m_from and Node::m_to cannot be indices, because of the desired copying behavior&lt;br/&gt;
/// of Edge: when copying an edge, it is natural that it keeps pointing to the same nodes.&lt;br/&gt;
/// When using pointers, this will work. Indices, on the other hand, are context-specific:&lt;br/&gt;
/// Example: imagine a concept map like this:&lt;br/&gt;
///&lt;br/&gt;
/// NodeA Edge1 NodeB Edge2 NodeC&lt;br/&gt;
/// [0] [1] [2]&lt;br/&gt;
///&lt;br/&gt;
/// In this example, Edge2 goes from [1] to [2]&lt;br/&gt;
///&lt;br/&gt;
/// A sub-concept map will be (when NodeC is the focal node):&lt;br/&gt;
///&lt;br/&gt;
/// NodeB Edge2 NodeC&lt;br/&gt;
/// [0] [1]&lt;br/&gt;
///&lt;br/&gt;
/// In this example, Edge2 goes from [0] to [1]! Due to this, the same Edge2 cannot behave identical in the different contexts&lt;br/&gt;
///&lt;br/&gt;
/// Indices are only used when saving and loading&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPEDGE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapedgefactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapedgefactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapedgefactory.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "conceptmapedge.h"&lt;br/&gt;
#include "conceptmapedgefactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "xml.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; ribi::cmap::EdgeFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double concept_x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double concept_y,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool tail_arrow,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool head_arrow)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from != to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; p(new Edge(concept,concept_x,concept_y,from,tail_arrow,to,head_arrow));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; ribi::cmap::EdgeFactory::DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; edge,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetConcept()-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from != to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept = ribi::cmap::ConceptFactory::DeepCopy(edge-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; p = ribi::cmap::EdgeFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetX(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetY(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;HasTailArrow(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;HasHeadArrow()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*edge,*p));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; ribi::cmap::EdgeFactory::FromXml(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() &amp;gt;= 13);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(0,6) == std::string("&amp;lt;edge&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(s.size() - 7,7) == std::string("&amp;lt;/edge&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;concept&amp;gt;.*&amp;lt;/concept&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept = Concept::FromXml(v[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_from&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int from = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;from&amp;gt;.*&amp;lt;/from&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from = boost::lexical_cast&amp;lt;int&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_head_arrow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool head_arrow = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;head_arrow&amp;gt;.*&amp;lt;/head_arrow&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;head_arrow = boost::lexical_cast&amp;lt;bool&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_tail_arrow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool tail_arrow = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;tail_arrow&amp;gt;.*&amp;lt;/tail_arrow&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tail_arrow = boost::lexical_cast&amp;lt;bool&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int to = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;to&amp;gt;.*&amp;lt;/to&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to = boost::lexical_cast&amp;lt;int&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double x = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;x&amp;gt;.*&amp;lt;/x&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x = boost::lexical_cast&amp;lt;double&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_y&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double y = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;y&amp;gt;.*&amp;lt;/y&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;y = boost::lexical_cast&amp;lt;double&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from != to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(nodes.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to&amp;nbsp;&amp;nbsp; &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(nodes.size()));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge(new Edge(concept,x,y,nodes[from],tail_arrow,nodes[to],head_arrow));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return edge;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; ribi::cmap::EdgeFactory::GetTests(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto test_concepts = ConceptFactory::GetTests();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; result;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept: test_concepts)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge(new Edge(concept,1.2,3.4,from,false,to,true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge(new Edge(concept,0,2,true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge(new Edge(concept,0,3,true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge(new Edge(concept,1,2,false));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge(new Edge(concept,1,3,false));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge(new Edge(concept,2,3,false));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return result;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapedgefactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapedgefactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPEDGEFACTORY_H&lt;br/&gt;
#define CONCEPTMAPEDGEFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct EdgeFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double concept_x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double concept_y,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool tail_arrow,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool head_arrow);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///DeepCopy is only used for debugging&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The nodes need to be the deepcopied ones&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; edge,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain an Edge from an XML std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///You need the real nodes to connect the edge to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; FromXml(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get testing edges connecting the two supplied nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; GetTests(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPEDGEFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapelement.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapelement.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "conceptmapelement.h"&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapelement.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapelement.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPELEMENT_H&lt;br/&gt;
#define CONCEPTMAPELEMENT_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///A focusable element of a concept map, which is either a Node or an Edge&lt;br/&gt;
struct Element&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Element() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual ~Element() noexcept {}&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPELEMENT_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexample.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexample.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;QRegExp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "xml.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::Example::Example(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; text,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const cmap::Competency competency,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_concrete,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_specific&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_signal_competency_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_text_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_competency(competency),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_complex(is_complex),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_concrete(is_concrete),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_specific(is_specific),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_text(text)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Example::CompetencyToStr(const cmap::Competency competency)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (competency)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::uninitialized: return "uninitialized";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::profession: return "profession";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::organisations: return "organisations";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::social_surroundings: return "social_surroundings";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::target_audience: return "target_audience";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::ti_knowledge: return "ti_knowledge";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::prof_growth: return "prof_growth";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case cmap::Competency::misc: return "misc";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("ribi::cmap::Example::CompetencyToStr: unknown Competency");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Example&amp;gt; ribi::cmap::Example::FromXml(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() &amp;gt;= 17);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(0,9) == std::string("&amp;lt;example&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(s.size() - 10,10) == std::string("&amp;lt;/example&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::Competency competency = cmap::Competency::uninitialized;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool is_complex = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool is_concrete = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool is_specific = false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//competency&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;competency&amp;gt;.*&amp;lt;/competency&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;competency = StrToCompetency(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//is_complex&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;is_complex&amp;gt;.*&amp;lt;/is_complex&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_complex = boost::lexical_cast&amp;lt;bool&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//is_concrete&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;is_concrete&amp;gt;.*&amp;lt;/is_concrete&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_concrete = boost::lexical_cast&amp;lt;bool&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//is_specific&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;is_specific&amp;gt;.*&amp;lt;/is_specific&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_specific = boost::lexical_cast&amp;lt;bool&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//text&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;text&amp;gt;.*&amp;lt;/text&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1 &amp;amp;&amp;amp; "&amp;lt;text&amp;gt;.*&amp;lt;/text&amp;gt; must be present once in an Example");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text = ribi::xml::StripXmlTag(v[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return cmap::ExampleFactory::Create(text,competency,is_complex,is_concrete,is_specific);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Example::SetCompetency(const cmap::Competency competency)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_competency != competency)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_competency = competency;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_competency_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Example::SetText(const std::string&amp;amp; text)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_text != text)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_text = text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_text_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::Competency ribi::cmap::Example::StrToCompetency(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "uninitialized") return cmap::Competency::uninitialized;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "profession") return cmap::Competency::profession;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "organisations") return cmap::Competency::organisations;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "social_surroundings") return cmap::Competency::social_surroundings;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "target_audience") return cmap::Competency::target_audience;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "ti_knowledge") return cmap::Competency::ti_knowledge;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "prof_growth") return cmap::Competency::prof_growth;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s == "misc") return cmap::Competency::misc;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("ribi::cmap::Example::StrToCompetency: unknown string");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Example::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::cmap::Example::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test of operator== and operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(cmap::ExampleFactory::GetTests().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; a = cmap::ExampleFactory::GetTests().at(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;gt; b = cmap::ExampleFactory::GetTests().at(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; c = cmap::ExampleFactory::GetTests().at(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;gt; d = cmap::ExampleFactory::GetTests().at(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*d,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*d,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i==j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*c)); assert(operator==(*a,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*c)); assert(operator==(*b,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*a)); assert(operator==(*c,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*d,*a)); assert(operator==(*d,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*a,*c)); assert(!operator==(*a,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*b,*c)); assert(!operator==(*b,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*a)); assert(!operator==(*c,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*d,*a)); assert(!operator==(*d,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test if unrated and rated examples are noticed as different&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; a = ExampleFactory::Create("1",Competency::misc);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; b = ExampleFactory::Create("1",Competency::misc);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; c = ExampleFactory::Create("1",Competency::uninitialized);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( operator==(*a,*a)); assert( operator==(*a,*b)); assert(!operator==(*a,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( operator==(*b,*a)); assert( operator==(*b,*b)); assert(!operator==(*b,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*a)); assert(!operator==(*c,*b)); assert( operator==(*c,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Conversion between std::string and competency&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Competency&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::uninitialized,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::profession,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::organisations,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::social_surroundings,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::target_audience,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::ti_knowledge,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::prof_growth,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::Competency::misc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const cmap::Competency&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return ribi::cmap::Example::CompetencyToStr(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Competency&amp;gt; x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(w.begin(),w.end(),std::back_inserter(x),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return ribi::cmap::Example::StrToCompetency(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Conversion between class and XML, test for equality&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; v = AddConst(ribi::cmap::ExampleFactory::GetTests());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ribi::cmap::Example::ToXml(e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; f(Example::FromXml(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*e,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; v = AddConst(ribi::cmap::ExampleFactory::GetTests());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = boost::numeric_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; e = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ribi::cmap::Example::ToXml(e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; f = v[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string t = ribi::cmap::Example::ToXml(f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*e,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s == t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*e,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s != t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Example::Test finished successfully");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Example::ToXml(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;example&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;text&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetText();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/text&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;competency&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; CompetencyToStr(c-&amp;gt;GetCompetency());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/competency&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;is_complex&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetIsComplex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/is_complex&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;is_concrete&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetIsConcrete();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/is_concrete&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;is_specific&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c-&amp;gt;GetIsSpecific();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt;&amp;nbsp;&amp;nbsp; "&amp;lt;/is_specific&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/example&amp;gt;";&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string r = s.str();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.size() &amp;gt;= 17);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(0,9) == std::string("&amp;lt;example&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(r.size() - 10,10) == std::string("&amp;lt;/example&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return r;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator==(const cmap::Example&amp;amp; lhs, const cmap::Example&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lhs.GetText() == rhs.GetText()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetCompetency() == rhs.GetCompetency();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator&amp;lt;(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs &amp;amp;&amp;amp; rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetText() &amp;lt; rhs-&amp;gt;GetText()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetText() &amp;gt; rhs-&amp;gt;GetText()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs-&amp;gt;GetCompetency() &amp;lt; rhs-&amp;gt;GetCompetency();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator&amp;gt;(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs &amp;amp;&amp;amp; rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetText() &amp;gt; rhs-&amp;gt;GetText()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs-&amp;gt;GetText() &amp;lt; rhs-&amp;gt;GetText()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs-&amp;gt;GetCompetency() &amp;gt; rhs-&amp;gt;GetCompetency();&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexample.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexample.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPEXAMPLE_H&lt;br/&gt;
#define CONCEPTMAPEXAMPLE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/signals2.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct ExampleFactory;&lt;br/&gt;
&lt;br/&gt;
///A concept (on a node or an edge) can have examples&lt;br/&gt;
struct Example&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Example(const Example&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Example&amp;amp; operator=(const Example&amp;amp;) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a cmap::Competency to a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string CompetencyToStr(const cmap::Competency competency);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create an example from XML&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; FromXml(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the competency, as might be judged by an assessor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::Competency GetCompetency() const { return m_competency; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the complexity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool GetIsComplex() const { return m_is_complex; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the concreteness?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool GetIsConcrete() const { return m_is_concrete; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the specificity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool GetIsSpecific() const { return m_is_specific; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the text of the example&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetText() const { return m_text; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the competency&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetCompetency(const cmap::Competency competency);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the complexity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetIsComplex(const bool is_complex) { m_is_complex = is_complex; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the concreteness?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetIsConcrete(const bool is_concrete) { m_is_concrete = is_concrete; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the specificity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetIsSpecific(const bool is_specific) { m_is_specific = is_specific; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the text&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetText(const std::string&amp;amp; text);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a std::string to a cmap::Competency&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static cmap::Competency StrToCompetency(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert Example to a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string ToXml(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; t);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when SetCompetency changes the competency&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::signals2::signal&amp;lt;void(Example*)&amp;gt; m_signal_competency_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emitted when SetText changes the text&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::signals2::signal&amp;lt;void(Example*)&amp;gt; m_signal_text_changed;&lt;br/&gt;
&lt;br/&gt;
private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The competency, as might be judged by an assessor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::Competency m_competency;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the complexity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_complex;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the concreteness?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_concrete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Has an assessor rated this example as being an addition to the specificity?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_specific;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The text of the example&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example: 'Plato', 'When I was a kid', 'As I did on holiday'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_text;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the competency with a string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetCompetencyAsStr(const std::string&amp;amp; s) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Use checked_delete only&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~Example() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Example* x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Only let ExampleFactory create Example instances&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Example(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; text,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const cmap::Competency competency = cmap::Competency::uninitialized,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_complex = true,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_concrete = true,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_specific = true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class ExampleFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const cmap::Example&amp;amp; lhs, const cmap::Example&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; lhs,const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPEXAMPLE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexamplefactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexamplefactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Example&amp;gt; ribi::cmap::ExampleFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; text,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const cmap::Competency&amp;amp; competency,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_concrete,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool is_specific)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; example(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Example(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;competency,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_complex,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_concrete,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_specific&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(example);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return example;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Example&amp;gt; &amp;gt; ribi::cmap::ExampleFactory::GetTests()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Test example 0",Competency::profession),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Test example 1",Competency::organisations),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Test example 2",Competency::social_surroundings),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Test example 3",Competency::target_audience),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Test example 4",Competency::ti_knowledge),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Test example 5",Competency::prof_growth),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("Test example 6",Competency::misc),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create("",Competency::uninitialized),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexamplefactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexamplefactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPEXAMPLEFACTORY_H&lt;br/&gt;
#define CONCEPTMAPEXAMPLEFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
#include "conceptmapexamples.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct ExampleFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create an example from string and enum&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; text,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const cmap::Competency&amp;amp; competency,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_complex = true,&amp;nbsp;&amp;nbsp; //DEFAULT&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_concrete = true,&amp;nbsp;&amp;nbsp;//DEFAULT&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool is_specific = true); //DEFAULT&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create examples for strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Note that all cmap::Competency values are set to uninitialized&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//static const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; CreateExamples(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; GetTests();&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPEXAMPLEFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexamples.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexamples.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapexamples.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/bind.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lambda/lambda.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;QRegExp&amp;gt;&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
#include "conceptmapexamplesfactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::Examples::Examples(const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt;&amp;amp; v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_signal_examples_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_v(v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(m_v.begin(),m_v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; example)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(example);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;example-&amp;gt;m_signal_competency_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;Examples::OnExampleChanged,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;example-&amp;gt;m_signal_text_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;Examples::OnExampleChanged,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count_if(m_v.begin(),m_v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; e) { return !e; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) == 0 &amp;amp;&amp;amp; "All Example instances must be initialized");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Examples::Add(const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; example)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(example);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Connect the example&lt;br/&gt;
&amp;nbsp;&amp;nbsp;example-&amp;gt;m_signal_competency_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;Examples::OnExampleChanged,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;example-&amp;gt;m_signal_text_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;Examples::OnExampleChanged,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add the example and notify this change&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_v.push_back(example);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_signal_examples_changed(this);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; ribi::cmap::Examples::FromXml(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() &amp;gt;= 20);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(0,10) == std::string("&amp;lt;examples&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(s.size() - 11,11) == std::string("&amp;lt;/examples&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; examples;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_questions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;example&amp;gt;.*&amp;lt;/example&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),std::back_inserter(examples),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Example::FromXml(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ExamplesFactory::Create(examples);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::cmap::Example&amp;gt; &amp;gt; ribi::cmap::Examples::Get() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return AddConst(m_v);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Examples::OnExampleChanged()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_signal_examples_changed(this);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Examples::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Started ribi::cmap::Examples::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test of operator== and operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(ExamplesFactory::GetTests().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; a = ExamplesFactory::GetTests().at(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples&amp;gt; b = ExamplesFactory::GetTests().at(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; c = ExamplesFactory::GetTests().at(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples&amp;gt; d = ExamplesFactory::GetTests().at(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*d,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*d,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i==j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*c)); assert(operator==(*a,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*c)); assert(operator==(*b,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*a)); assert(operator==(*c,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*d,*a)); assert(operator==(*d,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*a,*c)); assert(!operator==(*a,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*b,*c)); assert(!operator==(*b,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*a)); assert(!operator==(*c,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*d,*a)); assert(!operator==(*d,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Conversion between class and XML, test for equality&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; &amp;gt; v = AddConst(ExamplesFactory::GetTests());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ribi::cmap::Examples::ToXml(e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; f(Examples::FromXml(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*e,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; &amp;gt; v = AddConst(ExamplesFactory::GetTests());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = boost::numeric_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; e = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ribi::cmap::Examples::ToXml(e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; f = v[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string t = ribi::cmap::Examples::ToXml(f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*e,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s == t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*e,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s != t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test if unrated and rated examples are noticed as different&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; a = ExampleFactory::Create("1",Competency::misc);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; b = ExampleFactory::Create("1",Competency::misc);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; c = ExampleFactory::Create("1",Competency::uninitialized);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( operator==(*a,*a)); assert( operator==(*a,*b)); assert(!operator==(*a,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( operator==(*b,*a)); assert( operator==(*b,*b)); assert(!operator==(*b,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*a)); assert(!operator==(*c,*b)); assert( operator==(*c,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; v; v.push_back(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; w; w.push_back(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; x; x.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; d = ExamplesFactory::Create(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; e = ExamplesFactory::Create(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; f = ExamplesFactory::Create(x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( operator==(*d,*d)); assert( operator==(*d,*e)); assert(!operator==(*d,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( operator==(*e,*d)); assert( operator==(*e,*e)); assert(!operator==(*e,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*f,*d)); assert(!operator==(*f,*e)); assert( operator==(*f,*f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Examples::Test finished successfully");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Examples::ToXml(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; &amp;amp;c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;examples&amp;gt;";&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; examples = c-&amp;gt;GetExamples();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto example = c-&amp;gt;Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(example.begin(),example.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;s](const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; t)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; Example::ToXml(t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/examples&amp;gt;";&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string r = s.str();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.size() &amp;gt;= 20);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(0,10) == std::string("&amp;lt;examples&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(r.size() - 11,11) == std::string("&amp;lt;/examples&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return r;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator==(const cmap::Examples&amp;amp; lhs, const cmap::Examples&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.Get().size() != rhs.Get().size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.Get().empty()) { assert(rhs.Get().empty()); return true; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; v = lhs.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; w = rhs.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(v.begin(),v.end(),w.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; a, const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; b)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return operator==(*a,*b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator!=(const cmap::Examples&amp;amp; lhs, const cmap::Examples&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator&amp;lt;(const cmap::Examples&amp;amp; lhs, const cmap::Examples&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.Get().size() &amp;lt; rhs.Get().size()) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.Get().size() &amp;gt; rhs.Get().size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs.Get().size() == rhs.Get().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = lhs.Get().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i = 0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lhs.Get()[i] &amp;lt; rhs.Get()[i]) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lhs.Get()[i] &amp;gt; rhs.Get()[i]) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexamples.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexamples.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPEXAMPLES_H&lt;br/&gt;
#define CONCEPTMAPEXAMPLES_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/signals2.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///Container of Example instances&lt;br/&gt;
struct Examples&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Examples(const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt;&amp;amp; v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Examples(const Example&amp;amp; rhs) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Examples&amp;amp; operator=(const Example&amp;amp; rhs) = delete;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt;&amp;amp; Get() { return m_v; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt; Get() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; FromXml(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string ToXml(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt; &amp;amp;c);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Something of one of the examples was changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void(const Examples*)&amp;gt; m_signal_examples_changed;&lt;br/&gt;
private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~Examples() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; m_v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Add(const boost::shared_ptr&amp;lt;cmap::Example&amp;gt;&amp;amp; example); //?not used&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///All signals emitted from the examples are connected to this member function&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void OnExampleChanged();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Correct befriending, from http://richelbilderbeek.nl/CppChecked_delete.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Examples* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
bool operator==(const cmap::Examples&amp;amp; lhs, const cmap::Examples&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const cmap::Examples&amp;amp; lhs, const cmap::Examples&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
///Two cmap::Examples instances are sorted as follows:&lt;br/&gt;
///(1) By their number of examples&lt;br/&gt;
///(2) (if the sizes are equal) Alphabetically on the first different example&lt;br/&gt;
bool operator&amp;lt;(const cmap::Examples&amp;amp; lhs, const cmap::Examples&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;lt;(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs);&lt;br/&gt;
bool operator&amp;lt;=(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;=(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;=(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;=(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;=(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;=(const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;=(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;gt;=(const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt;&amp;amp; lhs, boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPEXAMPLES_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexamplesfactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexamplesfactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "conceptmapexamplesfactory.h"&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapexample.h"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
#include "conceptmapexamples.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; ribi::cmap::ExamplesFactory::Create()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; examples(new Examples( {} ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return examples;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; ribi::cmap::ExamplesFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; examples)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; p = Create(examples-&amp;gt;Get());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; ribi::cmap::ExamplesFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; p(new Examples(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; ribi::cmap::ExamplesFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const cmap::Example&amp;gt;&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; q&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ExampleFactory::Create(p-&amp;gt;GetText(),p-&amp;gt;GetCompetency());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return q;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; examples(new Examples(w));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(examples);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return examples;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; ribi::cmap::ExamplesFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::pair&amp;lt;std::string,Competency&amp;gt;&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; q&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ExampleFactory::Create(p.first,p.second);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return q;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; q = Create(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return q;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; &amp;gt; ribi::cmap::ExamplesFactory::GetTests()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; is = { {0}, {1}, {0,1,2,3}, {} };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(is.begin(),is.end(),std::back_inserter(v),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::vector&amp;lt;int&amp;gt;&amp;amp; js)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(js.begin(),js.end(),std::back_inserter(w),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const int&amp;amp; j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::Example&amp;gt; p&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ExampleFactory::GetTests().at(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; q&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ExamplesFactory::Create(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return q;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapexamplesfactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapexamplesfactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPEXAMPLESFACTORY_H&lt;br/&gt;
#define CONCEPTMAPEXAMPLESFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct ExamplesFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Constructor like&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; Create();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Copy-constructor like&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Examples&amp;gt;&amp;amp; examples);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Example&amp;gt; &amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Example&amp;gt; &amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Examples&amp;gt; &amp;gt; GetTests();&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPEXAMPLESFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapfactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapfactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapfactory.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
//#include "fileio.h"&lt;br/&gt;
#include "conceptmapcenternodefactory.h"&lt;br/&gt;
#include "conceptmapcenternode.h"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "conceptmap.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
#include "conceptmapedge.h"&lt;br/&gt;
#include "conceptmapedgefactory.h"&lt;br/&gt;
#include "conceptmapnode.h"&lt;br/&gt;
#include "conceptmapnodefactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "xml.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt;&amp;amp; edges)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!nodes.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::dynamic_pointer_cast&amp;lt;cmap::CenterNode&amp;gt;(nodes[0])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| !boost::dynamic_pointer_cast&amp;lt;cmap::CenterNode&amp;gt;(nodes[0])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "The first node in a (sub)ConceptMap can be, but does not have to be a CenterNode");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; p(new ConceptMap(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; focal_question)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//A single-node ConceptMap contains only the focal question&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;CenterNode&amp;gt; focal_node {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CenterNodeFactory::Create(focal_question)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(focal_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Node&amp;gt; &amp;gt; nodes = { focal_node };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(nodes.at(0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ConceptMap&amp;gt; p = Create(nodes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;GetNodes().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boost::dynamic_pointer_cast&amp;lt;CenterNode&amp;gt;(p-&amp;gt;GetNodes()[0])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "The first node in a ConceptMap created from a question must be a CenterNode");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; ribi::cmap::ConceptMapFactory::DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; map)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!map) return boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt;();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(map-&amp;gt;IsValid() &amp;amp;&amp;amp; "Must be a valid original");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Deep-copy the center node if present&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Deep-copy the non-center nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; &amp;gt; nodes = map-&amp;gt;GetNodes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; new_nodes;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; node: nodes)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; new_node;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (const boost::shared_ptr&amp;lt;const cmap::CenterNode&amp;gt; center_node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = boost::dynamic_pointer_cast&amp;lt;const cmap::CenterNode&amp;gt;(node))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(center_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_node = cmap::CenterNodeFactory::DeepCopy(center_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_node = cmap::NodeFactory::DeepCopy(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(new_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*new_node,*node));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_nodes.push_back(new_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Deep-copy the edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; &amp;gt; edges = map-&amp;gt;GetEdges();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; new_edges;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;const cmap::Edge&amp;gt; edge: edges)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find the new from node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto from_iter = std::find(nodes.begin(),nodes.end(),edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(from_iter != nodes.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int from_index = std::distance(nodes.begin(),from_iter);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(from_index &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(new_nodes.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; from = new_nodes[from_index];&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find the new to node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto to_iter = std::find(nodes.begin(),nodes.end(),edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(to_iter != nodes.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int to_index = std::distance(nodes.begin(),to_iter);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(to_index &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(new_nodes.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; to = new_nodes[to_index];&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(from_index != to_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(from != to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; new_edge = cmap::EdgeFactory::DeepCopy(edge,from,to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(new_edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*new_edge,*edge));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_edges.push_back(new_edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; p = Create(new_nodes,new_edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*p == *map &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( p !=&amp;nbsp;&amp;nbsp;map &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;IsValid() &amp;amp;&amp;amp; "Must be a valid copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; ribi::cmap::ConceptMapFactory::FromXml(const std::string &amp;amp;s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() &amp;gt;= 27);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(0,13) == std::string("&amp;lt;concept_map&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(s.size() - 14,14) == std::string("&amp;lt;/concept_map&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Obtain the &amp;lt;concept_map&amp;gt; ... &amp;lt;/concept_map&amp;gt; string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= cmap::GetRegexMatches(s,QRegExp("(&amp;lt;concept_map&amp;gt;.*&amp;lt;/concept_map&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Strip the &amp;lt;concept_map&amp;gt; tags&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string concept_map_str = ribi::xml::StripXmlTag(v[0]);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; nodes;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Obtain the &amp;lt;nodes&amp;gt; ... &amp;lt;/nodes&amp;gt; strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; w&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= cmap::GetRegexMatches(concept_map_str,QRegExp("(&amp;lt;nodes&amp;gt;.*&amp;lt;/nodes&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Strip the &amp;lt;nodes&amp;gt; tags&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string nodes_str = ribi::xml::StripXmlTag(w[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Obtain the &amp;lt;concept&amp;gt; ... &amp;lt;/concept&amp;gt; strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= cmap::GetRegexMatches(nodes_str,QRegExp("(&amp;lt;node&amp;gt;.*&amp;lt;/node&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(x.begin(),x.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;nodes](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes.push_back( Node::FromXml(s) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!nodes.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Replace the first node by its CenterNode equivalent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; old_node = nodes[0];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept = old_node-&amp;gt;GetConcept();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x = old_node-&amp;gt;GetX();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y = old_node-&amp;gt;GetY();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;cmap::CenterNode&amp;gt; center_node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new cmap::CenterNode(concept,x,y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nodes[0] = center_node;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*old_node,*center_node));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; edges;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Obtain the &amp;lt;edges&amp;gt; ... &amp;lt;/edges&amp;gt; strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; w&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= cmap::GetRegexMatches(concept_map_str,QRegExp("(&amp;lt;edges&amp;gt;.*&amp;lt;/edges&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Strip the &amp;lt;edges&amp;gt; tags&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string nodes_str = ribi::xml::StripXmlTag(w[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Obtain the &amp;lt;edge&amp;gt; ... &amp;lt;/edge&amp;gt; strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= cmap::GetRegexMatches(nodes_str,QRegExp("(&amp;lt;edge&amp;gt;.*&amp;lt;/edge&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const std::string&amp;amp; s: x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge = EdgeFactory::FromXml(s,nodes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edges.push_back(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(new ConceptMap(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;IsValid());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( !concept_map-&amp;gt;GetNodes().empty()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A file's ConceptMap has at least one node");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( boost::dynamic_pointer_cast&amp;lt;cmap::CenterNode&amp;gt;(concept_map-&amp;gt;GetNodes()[0])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A file's ConceptMap is be a CenterNode");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return concept_map;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; ribi::cmap::ConceptMapFactory::GetAllTests()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto w = ribi::cmap::ConceptMapFactory::GetSimpleHomomorphousTestConceptMaps();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; w = ribi::cmap::ConceptMapFactory::GetComplexHomomorphousTestConceptMaps();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto w = ribi::cmap::ConceptMapFactory::GetHeteromorphousTestConceptMaps();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const auto concept_map: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto node: concept_map-&amp;gt;GetNodes())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto edge: concept_map-&amp;gt;GetEdges())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetTo()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetFrom()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add empty concept map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; ribi::cmap::ConceptMapFactory::GetHeteromorphousTestConceptMaps()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; Edges;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; Nodes;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; v(19);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count_if(v.begin(),v.end(),[](const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt;&amp;amp; p) { return p; } ) == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[0]: as-empty-as-can-get concept map (X = focal question_&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[0]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[1]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[1]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[2]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[2]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[3]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("edge_a concept"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(1),false,nodes.at(2),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[3]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[4]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("edge_a concept"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(2),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[4]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[5]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(1),false,nodes.at(2),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[5]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[6]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(2),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[6]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[7]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[7]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[8]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_a(cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true));&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge_a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[8]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[9]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_a(cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(3),true));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge_a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[9]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[10]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(3),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[10]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[11]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[11]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[12]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(3),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[12]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[13]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[13]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[14]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(3),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[14]=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[15]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create("B", { {"B-1",cmap::Competency::uninitialized} },0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("C", { {"C-1",cmap::Competency::uninitialized},{"C-2",cmap::Competency::misc}},-1,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("D", { {"D-1",cmap::Competency::misc},{"D-2",cmap::Competency::misc},{"D-3",cmap::Competency::misc}},-1,-1,-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::Create(concept_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::NodeFactory::Create(concept_d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_e(cmap::NodeFactory::Create(concept_e));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_d,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_e&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_h(cmap::ConceptFactory::Create("2",{{"2-I",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3",{{"3-I",cmap::Competency::misc},{"3-II",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_i(cmap::ConceptFactory::Create("4",{{"4-I",cmap::Competency::misc},{"4-II",cmap::Competency::misc},{"4-III",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_j(cmap::ConceptFactory::Create("5",{{"5-I",cmap::Competency::misc},{"5-II",cmap::Competency::misc},{"5-III",cmap::Competency::misc},{"5-IV",cmap::Competency::misc} } ));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.at(15)=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[16]: complex rated concept map&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create("B", { {"B-1: profession",cmap::Competency::profession} },0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("C", { {"C-1: organisations",cmap::Competency::organisations},{"C-2: social_surroundings",cmap::Competency::social_surroundings}},2,1,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("D", { {"D-1: target_audience",cmap::Competency::target_audience},{"D-2: ti_knowledge",cmap::Competency::ti_knowledge},{"D-3: prof_growth",cmap::Competency::prof_growth},{"D-4: misc",cmap::Competency::misc}},0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::Create(concept_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::NodeFactory::Create(concept_d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_e(cmap::NodeFactory::Create(concept_e));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_d,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_e&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_h(cmap::ConceptFactory::Create("2",{{"2-I",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3",{{"3-I",cmap::Competency::misc},{"3-II",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_i(cmap::ConceptFactory::Create("4",{{"4-I",cmap::Competency::misc},{"4-II",cmap::Competency::misc},{"4-III",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_j(cmap::ConceptFactory::Create("5",{{"5-I",cmap::Competency::misc},{"5-II",cmap::Competency::misc},{"5-III",cmap::Competency::misc},{"5-IV",cmap::Competency::misc} } ));&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.at(16)=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[17]: complex rated concept map with many examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create("B",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-P",cmap::Competency::profession},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-O",cmap::Competency::organisations},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-S",cmap::Competency::social_surroundings},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-TA",cmap::Competency::target_audience},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-TK",cmap::Competency::ti_knowledge},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-PG",cmap::Competency::prof_growth},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-M",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("C",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ {"C-1: organisations",cmap::Competency::organisations},{"C-2: social_surroundings",cmap::Competency::social_surroundings}},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2,1,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("D",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ {"D-1: target_audience",cmap::Competency::target_audience},{"D-2: ti_knowledge",cmap::Competency::ti_knowledge},{"D-3: prof_growth",cmap::Competency::prof_growth},{"D-4: misc",cmap::Competency::misc}},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::Create(concept_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::NodeFactory::Create(concept_d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_e(cmap::NodeFactory::Create(concept_e));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_d,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_e&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("1",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{{"2-I",cmap::Competency::misc}}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_h(cmap::ConceptFactory::Create("2",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{{"2-I",cmap::Competency::misc} }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{{"3-I",cmap::Competency::misc},{"3-II",cmap::Competency::misc} }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_i(cmap::ConceptFactory::Create("4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{{"4-I",cmap::Competency::misc},{"4-II",cmap::Competency::misc},{"4-III",cmap::Competency::misc} }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_j(cmap::ConceptFactory::Create("5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{{"5-I",cmap::Competency::misc},{"5-II",cmap::Competency::misc},{"5-III",cmap::Competency::misc},{"5-IV",cmap::Competency::misc} }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.at(17)=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[18]: complex rated concept map with many long concept names and examples&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"B: This is a concept that has all types of competencies as its examples, each example name being multiple lines as well",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-P: this is B its first example (out of seven) and it is categorized as a competency in the profession domain",cmap::Competency::profession},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-O: this is B its second example (out of seven) and it is categorized as a competency in the organisation domain",cmap::Competency::organisations},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-S: this is B its third example (out of seven) and it is categorized as a competency in the social surroundings domain",cmap::Competency::social_surroundings},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-TA: this is B its fourth example (out of seven) and it is categorized as a competency in the target audience domain",cmap::Competency::target_audience},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-TK: this is B its fifth example (out of seven) and it is categorized as a competency in the technical instrumental knowledge domain",cmap::Competency::ti_knowledge},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-PG: this is B its sixth example (out of seven) and it is categorized as a competency in the professional growth domain",cmap::Competency::prof_growth},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"B-M: this is B its seventh example (out of seven) and it is categorized as a competency in the misc domain",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"C: This is a concept that has only two of the seven types of competencies as its examples, each example name being multiple lines as well",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"C-O: this is C its first example (out of two) and it is categorized as a competency in the organisation domain",cmap::Competency::organisations},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"C-S: this is C its second example (out of two) and it is categorized as a competency in the social surroundings domain",cmap::Competency::social_surroundings}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2,1,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"D: This is a concept that has only four of the seven types of competencies as its examples, each example name being multiple lines as well",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"D-TA: this is D its first example (out of four) and it is categorized as a competency in the target audience domain",cmap::Competency::target_audience},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"D-TK: this is D its second example (out of four) and it is categorized as a competency in the technical instrumental knowledge domain",cmap::Competency::ti_knowledge},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"D-PG: this is D its third example (out of four) and it is categorized as a competency in the professional growth domain",cmap::Competency::prof_growth},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"D-M: this is D its fourth example (out of four) and it is categorized as a competency in the misc domain",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::Create(concept_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::NodeFactory::Create(concept_d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_e(cmap::NodeFactory::Create(concept_e));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X: This is the center node concept that can have no examples, oterwise each of its example name would be multiple lines"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A: This is a concept that has none of all types of competencies as its examples, oterwise each of its example name would be multiple lines"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_d,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node_e&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1: the first description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//{"2-I: this misc example ",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_h(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2: the second description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"2-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"3: the third description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"3-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"3-II: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_i(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"4: the fourth description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"4-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"4-II: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"4-III: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_j(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::ConceptFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"5: the fifth description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"5-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"5-II: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"5-III: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{"5-IV: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.at(18)=concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const auto concept_map: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto node: concept_map-&amp;gt;GetNodes())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto edge: concept_map-&amp;gt;GetEdges())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetTo()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetFrom()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; ribi::cmap::ConceptMapFactory::GetComplexHomomorphousTestConceptMaps()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; Edges;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; Nodes;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[0] (note: same as heteromorphous[11])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[1]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),false,nodes.at(1),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[2]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(2),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[3]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),false,nodes.at(3),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[4]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(3),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(2),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[5]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),false,nodes.at(2),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(1),true),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(3),true)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[6] (note: same as heteromorphous[11], yet arrows reversed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),true,nodes.at(1),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),true,nodes.at(2),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),true,nodes.at(3),false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[7]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),true,nodes.at(1),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),true,nodes.at(3),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),true,nodes.at(2),false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[8]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_a(cmap::ConceptFactory::Create("X"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_b(cmap::ConceptFactory::Create("B"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create("A"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("C"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_a(cmap::NodeFactory::Create(concept_a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_b(cmap::NodeFactory::Create(concept_b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::Create(concept_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::NodeFactory::Create(concept_d));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),true,nodes.at(2),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),true,nodes.at(1),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),true,nodes.at(3),false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[9]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_a(cmap::ConceptFactory::Create("X"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_b(cmap::ConceptFactory::Create("B"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create("C"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("A"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_a(cmap::NodeFactory::Create(concept_a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_b(cmap::NodeFactory::Create(concept_b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::Create(concept_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::NodeFactory::Create(concept_d));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),true,nodes.at(3),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),true,nodes.at(1),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),true,nodes.at(2),false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[10]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),true,nodes.at(2),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),true,nodes.at(3),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),true,nodes.at(1),false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[11]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),true,nodes.at(3),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),true,nodes.at(2),false),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),true,nodes.at(1),false)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 12);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const auto concept_map: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto node: concept_map-&amp;gt;GetNodes())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto edge: concept_map-&amp;gt;GetEdges())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetTo()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetFrom()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; ribi::cmap::ConceptMapFactory::GetSimpleHomomorphousTestConceptMaps()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; Edges;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; Nodes;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; v(6);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count_if(v.begin(),v.end(),[](const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt;&amp;amp; p) { return p; } ) == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[0] = concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[1]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[1] = concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[2]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[2] = concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[3]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[3] = concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[4]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[4] = concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[5]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("X"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("C"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("B"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("A")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Edges edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[5] = concept_map;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const auto concept_map: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto node: concept_map-&amp;gt;GetNodes())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto edge: concept_map-&amp;gt;GetEdges())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetTo());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(edge-&amp;gt;GetFrom());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetTo()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;GetNodes().end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;edge-&amp;gt;GetFrom()) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapfactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapfactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPCONCEPTMAPFACTORY_H&lt;br/&gt;
#define CONCEPTMAPCONCEPTMAPFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;array&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///Factory class to create ConceptMaps&lt;br/&gt;
///ConceptMapFactory is the only class using the ConceptMap constructor&lt;br/&gt;
struct ConceptMapFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Create an empty-as-can-get ConceptMap&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; focal_question);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt;&amp;amp; nodes,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt;&amp;amp; edges = {});&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///DeepCopy is only used for debugging&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain a ConceptMap from an XML std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; FromXml(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get all the other tests as one vector&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; GetAllTests();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the documented heteromorphous test concept maps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; GetHeteromorphousTestConceptMaps();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the documented complex homomorphous test concept maps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; GetComplexHomomorphousTestConceptMaps();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the documented simple homomorphous test concept maps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; GetSimpleHomomorphousTestConceptMaps();&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPCONCEPTMAPFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapfwd.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapfwd.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPFWD_H&lt;br/&gt;
#define CONCEPTMAPFWD_H&lt;br/&gt;
&lt;br/&gt;
//struct QRegExp;&lt;br/&gt;
//struct QTimer;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct CenterNode;&lt;br/&gt;
//struct Cluster; //Remove for now, must be added at ProjectBrainweaver later&lt;br/&gt;
struct Command;&lt;br/&gt;
struct Concept;&lt;br/&gt;
struct ConceptFactory;&lt;br/&gt;
struct ConceptMap;&lt;br/&gt;
struct ConceptMapFactory;&lt;br/&gt;
struct Edge;&lt;br/&gt;
struct EdgeFactory;&lt;br/&gt;
struct Element;&lt;br/&gt;
struct Example;&lt;br/&gt;
struct Examples;&lt;br/&gt;
//struct File;&lt;br/&gt;
struct Node;&lt;br/&gt;
struct Widget;&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPFWD_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmaphelper.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmaphelper.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;fstream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/algorithm/string.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;QFile&amp;gt;&lt;br/&gt;
#include &amp;lt;QRegExp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
double ribi::cmap::GetDistance(const double delta_x, const double delta_y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::TestHelperFunctions();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::sqrt( (delta_x * delta_x) + (delta_y * delta_y) );&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
double ribi::cmap::GetDistance(const double x1, const double y1, const double x2, const double y2)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::TestHelperFunctions();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return GetDistance(x1-x2,y1-y2);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::cmap::GetRegexMatches(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const QRegExp&amp;amp; r_original)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::TestHelperFunctions();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;QRegExp r(r_original);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;r.setMinimal(true); //QRegExp must be non-greedy&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int pos = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while ((pos = r.indexIn(s.c_str(), pos)) != -1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const QString q = r.cap(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (q.isEmpty()) break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(q.toStdString());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pos += r.matchedLength();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::cmap::SafeFileToVector(const std::string&amp;amp; filename)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v = ribi::fileio::FileToVector(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!v.empty() &amp;amp;&amp;amp; v.back().empty()) v.pop_back();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::cmap::SplitXml(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::TestHelperFunctions();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string::const_iterator i = s.begin();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string::const_iterator j = s.begin();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string::const_iterator end = s.end();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (j!=end)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((*j=='&amp;gt;' || *j == '&amp;lt;') &amp;amp;&amp;amp; std::distance(i,j) &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*i=='&amp;lt;' ? i&amp;nbsp;&amp;nbsp; : i+1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*j=='&amp;gt;' ? j+1 : j,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(t));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i = j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::cmap::TestHelperFunctions()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Started TestHelperFunctions");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//GetRegexMatches&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = "In the Netherlands, 1234 AB and 2345 BC are valid zip codes";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; expected;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expected.push_back("1234 AB");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expected.push_back("2345 BC");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string r = "(\\d{4} [A-Z]{2})";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::GetRegexMatches(s,QRegExp(r.c_str())) == expected);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = "&amp;lt;concept&amp;gt;&amp;lt;name&amp;gt;Concept with examples&amp;lt;/name&amp;gt;&amp;lt;example&amp;gt;Example 1&amp;lt;/example&amp;gt;&amp;lt;example&amp;gt;Example 2&amp;lt;/example&amp;gt;&amp;lt;example&amp;gt;Example 3&amp;lt;/example&amp;gt;&amp;lt;/concept&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(s.begin(),s.end(),'\b') == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; expected;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expected.push_back("&amp;lt;example&amp;gt;Example 1&amp;lt;/example&amp;gt;");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expected.push_back("&amp;lt;example&amp;gt;Example 2&amp;lt;/example&amp;gt;");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expected.push_back("&amp;lt;example&amp;gt;Example 3&amp;lt;/example&amp;gt;");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string r = "(&amp;lt;example&amp;gt;.*&amp;lt;/example&amp;gt;)";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::GetRegexMatches(s,QRegExp(r.c_str())) == expected);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//GetCombinations&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Assume the number of elements is correct&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetCombinations(std::vector&amp;lt;int&amp;gt;( {&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } ) ).size() ==&amp;nbsp;&amp;nbsp;1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetCombinations(std::vector&amp;lt;int&amp;gt;( {1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} ) ).size() ==&amp;nbsp;&amp;nbsp;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetCombinations(std::vector&amp;lt;int&amp;gt;( {1,2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} ) ).size() ==&amp;nbsp;&amp;nbsp;4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetCombinations(std::vector&amp;lt;int&amp;gt;( {1,2,3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} ) ).size() ==&amp;nbsp;&amp;nbsp;8);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetCombinations(std::vector&amp;lt;int&amp;gt;( {1,2,3,4&amp;nbsp;&amp;nbsp;} ) ).size() == 16);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetCombinations(std::vector&amp;lt;int&amp;gt;( {1,2,3,4,5} ) ).size() == 32);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Assume the elements are correct&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = GetCombinations(std::vector&amp;lt;int&amp;gt;( { 1 } ) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_0 = {};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_1 = {1};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = GetCombinations(std::vector&amp;lt;int&amp;gt;( { 1,2 } ) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_0 = {};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_1 = {1};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_2 = {2};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_3 = {1,2};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_3));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = GetCombinations(std::vector&amp;lt;int&amp;gt;( { 1,2,3 } ) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_0 = {};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_1 = {1};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_2 = {2};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_3 = {3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_4 = {1,2};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_5 = {1,3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_6 = {2,3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_7 = {1,2,3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_3));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_4));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_5));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_6));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_7));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = GetCombinations(std::vector&amp;lt;int&amp;gt;( { 1,2,3,4 } ) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_0 = {};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_1 = {1};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_2 = {2};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_3 = {3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_4 = {4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_5 = {1,2};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_6 = {1,3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_7 = {1,4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_8 = {2,3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_9 = {2,4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_10 = {3,4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_11 = {1,2,3};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_12 = {1,2,4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_13 = {1,3,4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_14 = {2,3,4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; expected_15 = {1,2,3,4};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_3));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_4));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_5));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_6));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_7));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_8));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_9));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_10));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_11));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_12));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_13));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_14));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),expected_15));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Wordwrap&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto v {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678901",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789012",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567890123",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678901234",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789012345",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567890123456",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678901234567",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789012345678",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567890123456789",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678901234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789012345678901",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567890123456789012",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678901234567890123",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789012345678901234",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567890123456789012345",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678901234567890123456",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789012345678901234567",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678901234567890123456789012345678",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789012345678901234567890123456789",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890123456789012345678901234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1 1",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12 12",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123 123",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234 1234",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345 12345",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456 123456",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567 1234567",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"12345678 8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"123456789 9",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 0",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" 1",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;1",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;1 ",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;1 2 ",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;1 23 ",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;12 34&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;12&amp;nbsp;&amp;nbsp;34&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp; 12&amp;nbsp;&amp;nbsp; 34&amp;nbsp;&amp;nbsp; ",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp; 12&amp;nbsp;&amp;nbsp; 34&amp;nbsp;&amp;nbsp; 5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp; 12&amp;nbsp;&amp;nbsp; 34&amp;nbsp;&amp;nbsp; 5 ",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp; 12&amp;nbsp;&amp;nbsp; 34&amp;nbsp;&amp;nbsp; 5 6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0&amp;nbsp;&amp;nbsp; 12&amp;nbsp;&amp;nbsp; 34&amp;nbsp;&amp;nbsp; 5 6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0&amp;nbsp;&amp;nbsp; 12&amp;nbsp;&amp;nbsp; 34&amp;nbsp;&amp;nbsp; 5 6&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int len=1; len!=1000; ++len)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Wordwrap calls Unwordwrap&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Wordwrap(s,len);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("TestHelperFunctions finished successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Unwordwrap(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt;&amp;amp; v) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Simply concatenate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const std::string&amp;amp; s: v) { t += s; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return t;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::cmap::Wordwrap(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s_original, const std::size_t max_len) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (max_len == 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("Cannot wordwrap for a max_len of zero");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "Wordwrap \'" &amp;lt;&amp;lt; s_original &amp;lt;&amp;lt; '\'' &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s{s_original};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() == s_original.size());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Replace multiple spaces with '\b ', where x is a char not in the string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string::value_type x = '\b'; //Bell&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t sz = s.size();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///Replace spaces at beginning&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s[i] == ' ')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s[i] = x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Replace spaces at end&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (sz &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//i!=0, because if s[0] is a space, it is already converted to bell&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=sz-1; i!=0; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s[i] == ' ')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s[i] = x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///Replace "&amp;nbsp;&amp;nbsp;" by "\b "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=sz-1; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s[i] == ' ' &amp;amp;&amp;amp; s[i+1] == ' ')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s[i] = x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Start the actual wordwrapping&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (!s.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is the word short enough?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s.size() &amp;lt; max_len)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Copy entire word&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s = {};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No spaces, or space beyond max_len: cut word&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s.find(' ') == std::string::npos || s.find(' ') &amp;gt; max_len)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s.substr(0,max_len));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s = s.substr(max_len,s.size() - max_len);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find last space before max_len&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::size_t len = s.find(' ');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(len != std::string::npos);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(len &amp;lt; s.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t new_len = s.find(' ',len + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (new_len &amp;gt; max_len || new_len == std::string::npos) break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;len = new_len;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(len + 0 &amp;lt; s.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(len + 1 &amp;lt; s.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//cut s, put cut part in vector&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string line = s.substr(0,len+1); //Keep space&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!line.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(line);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t new_index = len+1; //After the space found&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(new_index &amp;lt; s.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string new_s = s.substr(new_index,s.size() - new_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s != new_s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s = new_s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Replace bell characters by spaces again&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(x != ' ');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::size_t pos = s.find(x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (pos != std::string::npos)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(pos != std::string::npos);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(pos &amp;lt; s.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(pos == s.find(x)); //To prevent infinite while loop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s[pos] = ' ';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s[pos] == ' ');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(pos != s.find(x)); //To prevent infinite while loop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pos = s.find(x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.find(x) == std::string::npos);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test if Unwordwrap the result produces the original input&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Unwordwrap(v) != s_original)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; v.size() &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(v.begin(),v.end(),std::ostream_iterator&amp;lt;std::string&amp;gt;(std::cerr,"\n"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; Unwordwrap(v) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; s_original &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Unwordwrap(v) == s_original);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::cmap::XmlToPretty(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::TestHelperFunctions();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v = cmap::SplitXml(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n = -2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;n](std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!s.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s[0] == '&amp;lt;' &amp;amp;&amp;amp; s[1] != '/')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n+=2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s = std::string(n,' ') + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s[n+0] == '&amp;lt;' &amp;amp;&amp;amp; s[n+1] == '/')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n-=2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmaphelper.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmaphelper.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPHELPER_H&lt;br/&gt;
#define CONCEPTMAPHELPER_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;array&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/array.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/conversion/cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
struct QRegExp;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
///Help adding constness a bit&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const T&amp;gt; &amp;gt; AddConst(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;T&amp;gt; &amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const T&amp;gt; &amp;gt; w(v.begin(),v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == w.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=sz; ++i) { assert(v[i] == w[i]); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return w;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///Help adding constness a bit&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
const std::vector&amp;lt;const T *&amp;gt; AddConst(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;T *&amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;const T *&amp;gt; w(v.begin(),v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == w.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=sz; ++i) { assert(v[i] == w[i]); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return w;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///Obtain all possible selections of a std::vector, preserving the ordering of its elements&lt;br/&gt;
///Examples:&lt;br/&gt;
/// {&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } -&amp;gt; { {}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
/// {1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} -&amp;gt; { {}, {1}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;
/// {1,2&amp;nbsp;&amp;nbsp;} -&amp;gt; { {}, {1}, {2},&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{1,2}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
/// {1,2,3} -&amp;gt; { {}, {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3} }&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppGetCombinations.htm&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;T&amp;gt; &amp;gt; GetCombinations(const std::vector&amp;lt;T&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::vector&amp;lt;T&amp;gt; &amp;gt; result;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = boost::numeric_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_combinations = (1 &amp;lt;&amp;lt; sz);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_combinations; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;T&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((1 &amp;lt;&amp;lt; j) &amp;amp; i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(v[j]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return result;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///Obtain the Pythagorian distance from two delta's&lt;br/&gt;
//From www.richelbilderbeek.nl/CppGetDistance.htm&lt;br/&gt;
double GetDistance(const double delta_x, const double delta_y);&lt;br/&gt;
&lt;br/&gt;
///Obtain the Pythagorian distance from two coordinats&lt;br/&gt;
//From www.richelbilderbeek.nl/CppGetDistance.htm&lt;br/&gt;
double GetDistance(const double x1, const double y1, const double x2, const double y2);&lt;br/&gt;
&lt;br/&gt;
///From http://www.richelbilderbeek.nl/CppGetRegexMatches.htm&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; GetRegexMatches(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const QRegExp&amp;amp; r);&lt;br/&gt;
&lt;br/&gt;
///SafeFileToVector calls FileToVector and&lt;br/&gt;
///removes an empty trailing line that can be created under&lt;br/&gt;
///the Windows operating system, due to different line endings&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; SafeFileToVector(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
///Split an XML std::string into its parts&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppSplitXml.htm&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; SplitXml(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
///Test the helper functions&lt;br/&gt;
void TestHelperFunctions();&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
///Undo a Wordwrap&lt;br/&gt;
const std::string Unwordwrap(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; v) noexcept;&lt;br/&gt;
&lt;br/&gt;
///Wordwrap the text to obtain lines of max_len characters&lt;br/&gt;
///If the string _must_ be seperable by spaces; a word can have a maximum length of max_len&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; Wordwrap(const std::string&amp;amp; s, const std::size_t max_len) noexcept;&lt;br/&gt;
&lt;br/&gt;
///Pretty-print an XML std::string by indenting its elements&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppXmlToPretty.htm&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; XmlToPretty(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPHELPER_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapnode.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapnode.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "conceptmapnode.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;QRegExp&amp;gt;&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "conceptmapnodefactory.h"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "xml.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::Node::Node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_signal_node_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_concept(concept),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_x(x),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_y(y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; ribi::cmap::Node::FromXml(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() &amp;gt;= 13);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(0,6) == std::string("&amp;lt;node&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.substr(s.size() - 7,7) == std::string("&amp;lt;/node&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;concept&amp;gt;.*&amp;lt;/concept&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept = Concept::FromXml(v[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double x = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;x&amp;gt;.*&amp;lt;/x&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x = boost::lexical_cast&amp;lt;double&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double y = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = cmap::GetRegexMatches(s,QRegExp("(&amp;lt;y&amp;gt;.*&amp;lt;/y&amp;gt;)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;y = boost::lexical_cast&amp;lt;double&amp;gt;(ribi::xml::StripXmlTag(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node(new Node(concept,x,y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return node;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; ribi::cmap::Node::GetTests()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto test_concepts = ConceptFactory::GetTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; result;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(test_concepts.begin(),test_concepts.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;result](const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = (std::rand() % 256) - 128;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int y = (std::rand() % 256) - 128;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node(new Node(concept,x,y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.push_back(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return result;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::Node::HasSameContent(const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt;&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return operator==(*lhs-&amp;gt;GetConcept(),*rhs-&amp;gt;GetConcept());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Node::SetConcept(const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_concept != concept)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_concept = concept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_node_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Node::SetX(const double x)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_x != x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_x = x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_node_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Node::SetY(const double y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_y != y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_y = y;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_node_changed(this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::cmap::Node::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Started ribi::cmap::Node::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; v = ribi::cmap::Node::GetTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test copy constructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt; c = NodeFactory::DeepCopy(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*node,*c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ToXml(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; d = FromXml(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test HasSameContent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(ConceptFactory::GetTests().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c != d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot shuffle Concept its examples. No need to as well: the order is important&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c != d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot shuffle Concept its examples. No need to as well: the order is important&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("1", { {"3", cmap::Competency::uninitialized},{"2", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c != d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(a,b) &amp;amp;&amp;amp; "Order in examples is important and cannot be shuffled");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot shuffle Concept its examples. No need to as well: the order is important&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c != d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test ConceptFactory reproductions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(ConceptFactory::GetTests().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c = ConceptFactory::GetTests()[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d = ConceptFactory::GetTests()[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c != d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test ConceptFactory reproductions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(ConceptFactory::GetTests().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c = ConceptFactory::GetTests()[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d = ConceptFactory::GetTests()[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c != d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i!=j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; a(new Node(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; b(new Node(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Node::Test finished successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Node::ToXml(const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt;&amp;amp; node)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;node&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; Concept::ToXml(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;x&amp;gt;" &amp;lt;&amp;lt; node-&amp;gt;GetX() &amp;lt;&amp;lt; "&amp;lt;/x&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;y&amp;gt;" &amp;lt;&amp;lt; node-&amp;gt;GetY() &amp;lt;&amp;lt; "&amp;lt;/y&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "&amp;lt;/node&amp;gt;";&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string r = s.str();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.size() &amp;gt;= 13);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(0,6) == std::string("&amp;lt;node&amp;gt;"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(r.substr(r.size() - 7,7) == std::string("&amp;lt;/node&amp;gt;"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return r;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator==(const cmap::Node&amp;amp; lhs, const cmap::Node&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs.GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(rhs.GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *lhs.GetConcept() == *rhs.GetConcept()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetX() == rhs.GetX()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetY() == rhs.GetY();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator!=(const cmap::Node&amp;amp; lhs, const cmap::Node&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapnode.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapnode.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPNODE_H&lt;br/&gt;
#define CONCEPTMAPNODE_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/signals2.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#include "conceptmapelement.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct NodeFactory;&lt;br/&gt;
&lt;br/&gt;
///A Node is the GUI independent part as used in QtConceptMapItem&lt;br/&gt;
struct Node : public Element&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node(const Node&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node&amp;amp; operator=(const Node&amp;amp;) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain a Node from an XML std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Node&amp;gt; FromXml(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the Concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Concept&amp;gt;&amp;nbsp;&amp;nbsp;GetConcept() const noexcept { return m_concept; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Concept&amp;gt;&amp;amp; GetConcept()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; noexcept { return m_concept; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get boost::shared_ptr::use_count&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetConceptUseCount() const { return m_concept.use_count(); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get some test nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Node&amp;gt; &amp;gt; GetTests();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Similar to operator==, except that GUI elements are not tested for equality&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool HasSameContent(const boost::shared_ptr&amp;lt;const Node&amp;gt;&amp;amp; lhs, const boost::shared_ptr&amp;lt;const Node&amp;gt;&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the x coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double GetX() const { return m_x; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the y coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double GetY() const { return m_y; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetConcept(const boost::shared_ptr&amp;lt;Concept&amp;gt; concept);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetPos(const double x, const double y) { SetX(x); SetY(y); }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the x coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetX(const double x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the y coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetY(const double y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Node from an XML std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string ToXml(const boost::shared_ptr&amp;lt;const Node&amp;gt;&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::signals2::signal&amp;lt;void(const Node *)&amp;gt; m_signal_node_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;protected:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block construction, except for NodeFactory and derived classes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Node() = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend NodeFactory;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x = 0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y = 0.0);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Block destructor, except for the friend boost::checked_delete&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual ~Node() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Node* x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Concept&amp;gt; m_concept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The x-coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double m_x;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The y-coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double m_y;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Node&amp;amp; lhs, const Node&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Node&amp;amp; lhs, const Node&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Node&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Node&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Node&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Node&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
bool operator&amp;lt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Node&amp;gt;&amp;amp; lhs,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Node&amp;gt;&amp;amp; rhs) = delete;&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPNODE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapnodefactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapnodefactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "conceptmapnodefactory.h"&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapnode.h"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; ribi::cmap::NodeFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new cmap::Node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept,x,y&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*concept,*node-&amp;gt;GetConcept()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetX() == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetY() == y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return node;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; ribi::cmap::NodeFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; examples,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Node(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConceptFactory::Create(name,examples),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;y&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetX() == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetY() == y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return node;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; ribi::cmap::NodeFactory::DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt;&amp;amp; node)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; new_concept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ConceptFactory::DeepCopy(node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(new_concept);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*node-&amp;gt;GetConcept(),*new_concept));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; new_node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Create(new_concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node-&amp;gt;GetX(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node-&amp;gt;GetY()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(new_node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(new_node-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(operator==(*node,*new_node));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return new_node;&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; ribi::cmap::NodeFactory::GetTests()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; nodes;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto v = ConceptFactory::GetTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),std::back_inserter(nodes),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static int x = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static int y = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; p(new Node(c,x,y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++y;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return nodes;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapnodefactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapnodefactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPNODEFACTORY_H&lt;br/&gt;
#define CONCEPTMAPNODEFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
struct Node;&lt;br/&gt;
&lt;br/&gt;
///Factory for creating Node instances&lt;br/&gt;
struct NodeFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt;&amp;amp; concept,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x = 0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y = 0.0);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::string,Competency&amp;gt; &amp;gt;&amp;amp; examples = {},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x = 0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double y = 0.0);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///DeepCopy is only used for debugging&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const cmap::Node&amp;gt;&amp;amp; node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain testing nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; GetTests();&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPNODEFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmaptestconcept.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmaptestconcept.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
#include &amp;lt;thread&amp;gt;&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::cmap::Concept::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmap::TestHelperFunctions();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Started ribi::cmap::Concept::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test operator== and operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(ConceptFactory::GetTests().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(sz &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto tmp_a = ConceptFactory::GetTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto tmp_b = ConceptFactory::GetTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; a = tmp_a.at(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; b = tmp_b.at(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b); //FAILS AT CROSSCOMPILER&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a!=b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b == *a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; c = ConceptFactory::GetTests().at(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; d = ConceptFactory::GetTests().at(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c); assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*c == *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*d == *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*c == *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*d == *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i==j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *c); assert(*a == *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b == *c); assert(*b == *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*c == *a); assert(*c == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*d == *a); assert(*d == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c); assert(*a != *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b != *c); assert(*b != *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*c != *a); assert(*c != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*d != *a); assert(*d != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test operator&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check correct ordering by name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; a = ConceptFactory::Create("1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; b = ConceptFactory::Create("1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a); assert(b); assert(c); assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a &amp;lt; *c); assert(*a &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b &amp;lt; *c); assert(*b &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check correct ordering by examples' size, sizes 0 versus 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; a = ConceptFactory::Create("1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; b = ConceptFactory::Create("1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("1", { {"2",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("1", { {"2",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a); assert(b); assert(c); assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a &amp;lt; *c); assert(*a &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b &amp;lt; *c); assert(*b &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check correct ordering by examples' size, sizes 1 versus 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; a = ConceptFactory::Create("1", { {"2",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; b = ConceptFactory::Create("1", { {"2",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a); assert(b); assert(c); assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a &amp;lt; *c); assert(*a &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b &amp;lt; *c); assert(*b &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check correct ordering for equal examples' size, lexicographically in the 2nd text&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; a = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; b = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt; c = ConceptFactory::Create("1", { {"2",Competency::misc},{"4",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Concept&amp;gt; d = ConceptFactory::Create("1", { {"2",Competency::misc},{"4",Competency::misc} } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a); assert(b); assert(c); assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a &amp;lt; *c); assert(*a &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b &amp;lt; *c); assert(*b &amp;lt; *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test XML conversion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto v = AddConst(ConceptFactory::GetTests());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const ribi::cmap::Concept&amp;gt;&amp;amp; original)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test copy constructor and operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; c = ConceptFactory::DeepCopy(original);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*original));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c-&amp;gt;m_name = c-&amp;gt;m_name + " (modified)";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!operator==(*c,*original));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test ToXml and FromXml&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ToXml(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; d = FromXml(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*c == *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Concept::Test finished successfully");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmaptestconceptmap.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmaptestconceptmap.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include "conceptmap.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
#include &amp;lt;set&amp;gt;&lt;br/&gt;
#include &amp;lt;iterator&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
#include &amp;lt;thread&amp;gt;&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;QRegExp&amp;gt;&lt;br/&gt;
#include "conceptmapcenternode.h"&lt;br/&gt;
#include "conceptmapcenternodefactory.h"&lt;br/&gt;
#include "conceptmapconcept.h"&lt;br/&gt;
#include "conceptmapconceptfactory.h"&lt;br/&gt;
#include "conceptmapfactory.h"&lt;br/&gt;
//#include "conceptmapclusterfactory.h"&lt;br/&gt;
#include "conceptmapcompetency.h"&lt;br/&gt;
#include "conceptmapedgefactory.h"&lt;br/&gt;
#include "conceptmapexamplefactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "conceptmapexamplesfactory.h"&lt;br/&gt;
#include "conceptmapnodefactory.h"&lt;br/&gt;
#include "conceptmaphelper.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "conceptmapnode.h"&lt;br/&gt;
#include "conceptmapedge.h"&lt;br/&gt;
//#include "conceptmapcluster.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::cmap::ConceptMap::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Started ribi::cmap::ConceptMap::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; &amp;gt; Edges;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; &amp;gt; Nodes;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Brute force tests&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; &amp;gt; v = AddConst(cmap::ConceptMapFactory::GetAllTests());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test copy constructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; c(cmap::ConceptMapFactory::DeepCopy(m));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*m));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test XML conversions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ToXml(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; d = ribi::cmap::ConceptMapFactory::FromXml(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*c,*d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//CanConstruct&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept(cmap::ConceptFactory::Create("FOCAL QUESTION"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node = NodeFactory::Create(concept,123,234);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanConstruct( { node }, {} ) &amp;amp;&amp;amp; "Assume focal question without examples can be constructed");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept(cmap::ConceptFactory::Create("FOCAL QUESTION", { {"No",cmap::Competency::misc},{"examples",cmap::Competency::misc},{"allowed",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node = NodeFactory::Create(concept,123,234);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanConstruct( { node }, {} )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume focal question with examples can be constructed"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "for example, when creating a sub-concept map");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//HasSameContent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_a(cmap::NodeFactory::Create("FOCAL QUESTION"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node_a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_b(cmap::NodeFactory::GetTests().at(1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node_b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::GetTests().at(2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(node_c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_a(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a-&amp;gt;GetNodes().size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a-&amp;gt;GetNodes().at(0)-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a-&amp;gt;GetNodes().at(0)-&amp;gt;GetConcept()-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a-&amp;gt;GetNodes().at(0)-&amp;gt;GetConcept()-&amp;gt;GetExamples()-&amp;gt;Get().size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_b(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b-&amp;gt;GetNodes().size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b-&amp;gt;GetNodes().at(0)-&amp;gt;GetConcept());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b-&amp;gt;GetNodes().at(0)-&amp;gt;GetConcept()-&amp;gt;GetExamples());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b-&amp;gt;GetNodes().at(0)-&amp;gt;GetConcept()-&amp;gt;GetExamples()-&amp;gt;Get().size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(*map_a,*map_b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_b);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_c(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(2),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_a,*map_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_b,*map_c));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_a(cmap::ConceptFactory::Create("FOCAL QUESTION"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_b(cmap::ConceptFactory::Create("1", { {"2",cmap::Competency::misc},{"3",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("FOCAL QUESTION"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("4", { {"5",cmap::Competency::misc},{"6",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("1", { {"2",cmap::Competency::misc},{"3",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_a(cmap::NodeFactory::Create(concept_a,123,234));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_b(cmap::NodeFactory::Create(concept_b,321,432));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::NodeFactory::Create(concept_d,567,678));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_e(cmap::NodeFactory::Create(concept_e,789,890));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_a(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("4", { {"5",cmap::Competency::misc},{"6",cmap::Competency::misc} },345,456)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_b(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::GetTests().at(1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::NodeFactory::Create("4", { {"5",cmap::Competency::misc},{"6",cmap::Competency::misc} },901,012)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(*map_a,*map_b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_b);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_g(cmap::ConceptFactory::Create("7",{ {"8",cmap::Competency::misc},{"9",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_g = NodeFactory::Create(concept_f,901,012);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_c(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"), node_b, node_g&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b != map_c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_a,*map_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_b,*map_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_a(cmap::ConceptFactory::Create("FOCAL QUESTION"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_b(cmap::ConceptFactory::Create("1",{{"2",cmap::Competency::misc},{"3",cmap::Competency::misc}}));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_c(cmap::ConceptFactory::Create("4",{{"5",cmap::Competency::misc},{"6",cmap::Competency::misc}}));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_d(cmap::ConceptFactory::Create("FOCAL QUESTION"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e(cmap::ConceptFactory::Create("4",{{"5",cmap::Competency::misc},{"6",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_f(cmap::ConceptFactory::Create("1",{{"2",cmap::Competency::misc},{"3",cmap::Competency::misc} } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_a(cmap::CenterNodeFactory::Create(concept_a,123,234));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_b(cmap::NodeFactory::Create(concept_b,123,234));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_c(cmap::NodeFactory::Create(concept_c,345,456));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_d(cmap::CenterNodeFactory::Create(concept_d,567,678));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_e(cmap::NodeFactory::Create(concept_e,789,890));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_f(cmap::NodeFactory::Create(concept_f,901,012));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_a(cmap::ConceptMapFactory::Create( { node_a, node_b, node_c } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_b(cmap::ConceptMapFactory::Create( { node_d, node_f, node_e } )); //Swap e and f&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(*map_a,*map_b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_b);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_c(cmap::ConceptMapFactory::Create( { node_d, node_d, node_d } ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_a,*map_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_b,*map_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b != map_c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n11(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n12(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n13(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n21(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n22(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n23(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_11(cmap::CenterNodeFactory::Create(concept_n11,123,234));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_12(cmap::NodeFactory::Create(concept_n12,321,432));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_13(cmap::NodeFactory::Create(concept_n13,345,456));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_21(cmap::CenterNodeFactory::Create(concept_n21,567,678));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_22(cmap::NodeFactory::Create(concept_n22,789,890));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_23(cmap::NodeFactory::Create(concept_n23,901,012));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e11(cmap::ConceptFactory::Create("9"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e12(cmap::ConceptFactory::Create("8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e13(cmap::ConceptFactory::Create("7"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e21(cmap::ConceptFactory::Create("9"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e22(cmap::ConceptFactory::Create("8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e23(cmap::ConceptFactory::Create("7"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes_1 = { node_11, node_12, node_13 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes_2 = { node_21, node_22, node_23 };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_11(cmap::EdgeFactory::Create(concept_e11,1.2,3.4,nodes_1.at(0),false,nodes_1.at(1),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_12(cmap::EdgeFactory::Create(concept_e12,2.3,4.5,nodes_1.at(0),false,nodes_1.at(2),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_13(cmap::EdgeFactory::Create(concept_e13,3.4,5.6,nodes_1.at(1),false,nodes_1.at(2),true));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_21(cmap::EdgeFactory::Create(concept_e21,4.5,6.7,nodes_2.at(0),false,nodes_2.at(1),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_22(cmap::EdgeFactory::Create(concept_e22,5.6,7.8,nodes_2.at(0),false,nodes_2.at(2),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_23(cmap::EdgeFactory::Create(concept_e23,6.7,8.9,nodes_2.at(1),false,nodes_2.at(2),true));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_a(cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ node_11, node_12, node_13 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ edge_11, edge_12, edge_13 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_b(cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ node_21, node_22, node_23 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ edge_21, edge_22, edge_23 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(*map_a,*map_b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_b);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_c(cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ node_21, node_22, node_23 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ edge_21, edge_22 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_a,*map_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!HasSameContent(*map_b,*map_c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_b != map_c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n11(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n12(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n13(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_11(cmap::CenterNodeFactory::Create(concept_n11,123,234));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_12(cmap::NodeFactory::Create(concept_n12,321,432));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_13(cmap::NodeFactory::Create(concept_n13,345,456));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e11(cmap::ConceptFactory::Create("1-&amp;gt;2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e12(cmap::ConceptFactory::Create("1-&amp;gt;3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e13(cmap::ConceptFactory::Create("2-&amp;gt;3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n21(cmap::ConceptFactory::Create("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n22(cmap::ConceptFactory::Create("3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_n23(cmap::ConceptFactory::Create("2"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_21(cmap::CenterNodeFactory::Create(concept_n21,123,234));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_22(cmap::NodeFactory::Create(concept_n22,321,432));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_23(cmap::NodeFactory::Create(concept_n23,345,456));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e21(cmap::ConceptFactory::Create("2-&amp;gt;3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e22(cmap::ConceptFactory::Create("1-&amp;gt;2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Concept&amp;gt; concept_e23(cmap::ConceptFactory::Create("1-&amp;gt;3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes_1 = { node_11, node_12, node_13 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Nodes nodes_2 = { node_21, node_22, node_23 };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_21(cmap::EdgeFactory::Create(concept_e21,1.2,3.4,nodes_2.at(2),false,nodes_2.at(1),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_22(cmap::EdgeFactory::Create(concept_e22,2.3,4.5,nodes_2.at(0),false,nodes_2.at(2),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_23(cmap::EdgeFactory::Create(concept_e23,3.4,4.5,nodes_2.at(0),false,nodes_2.at(1),true));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_11(cmap::EdgeFactory::Create(concept_e11,1.2,3.4,nodes_1.at(0),false,nodes_1.at(1),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_12(cmap::EdgeFactory::Create(concept_e12,2.3,4.5,nodes_1.at(0),false,nodes_1.at(2),true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge_13(cmap::EdgeFactory::Create(concept_e13,3.4,5.6,nodes_1.at(1),false,nodes_1.at(2),true));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_a(cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ node_11, node_12, node_13 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ edge_11, edge_12, edge_13 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map_b(cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ node_21, node_22, node_23 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ edge_21, edge_22, edge_23 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(HasSameContent(*map_a,*map_b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map_a != map_b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto v = AddConst(cmap::ConceptMapFactory::GetHeteromorphousTestConceptMaps());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j = 0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; a(cmap::ConceptMapFactory::DeepCopy(v[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*v[i])); assert(operator==(*v[i],*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; b(cmap::ConceptMapFactory::DeepCopy(v[j]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*v[j]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cmap::ConceptMap::HasSameContent(*a,*b))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Testing concept maps #" &amp;lt;&amp;lt; i &amp;lt;&amp;lt; " and #" &amp;lt;&amp;lt; j &amp;lt;&amp;lt; " must not be the same";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!cmap::ConceptMap::HasSameContent(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("ConceptMap::Test: heteromorphous testing concept maps are successfully identified as being different");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test simple homomorphous maps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto v = AddConst(cmap::ConceptMapFactory::GetSimpleHomomorphousTestConceptMaps());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j = 0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; a(cmap::ConceptMapFactory::DeepCopy(v[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*v[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; b(cmap::ConceptMapFactory::DeepCopy(v[j]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*v[j]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!cmap::ConceptMap::HasSameContent(*a,*b))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Testing simple concept maps #" &amp;lt;&amp;lt; i &amp;lt;&amp;lt; " and #" &amp;lt;&amp;lt; j &amp;lt;&amp;lt; " must be homomorphous";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("ConceptMap::Test: simple homomorphous testing concept maps are successfully identified as being different, yet homomorphous");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test complex homomorphous maps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; &amp;gt; v = AddConst(cmap::ConceptMapFactory::GetComplexHomomorphousTestConceptMaps());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j = 0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; a(cmap::ConceptMapFactory::DeepCopy(v[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*a,*v[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::cmap::ConceptMap&amp;gt; b(cmap::ConceptMapFactory::DeepCopy(v[j]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(operator==(*b,*v[j]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i != j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!cmap::ConceptMap::HasSameContent(*a,*b))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Testing complex concept maps #" &amp;lt;&amp;lt; i &amp;lt;&amp;lt; " and #" &amp;lt;&amp;lt; j &amp;lt;&amp;lt; " must be homomorphous";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("ConceptMap::Test: complex homomorphous testing concept maps are successfully identified as being different, yet homomorphous");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OLD NOTE: There is no perfect check for shuffled, yet homomorphous concept maps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//LATER NOTE: Yet, I cannot think of an example that wouldn't get caught&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;so perhaps the check _is_ perfect?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef TO_ADD_TO_PROJECTBRAINWEAVER&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Conversion from Cluster&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;cmap::Cluster&amp;gt; &amp;gt; clusters = cmap::ClusterFactory::GetTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(clusters.begin(),clusters.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;cmap::Cluster&amp;gt; &amp;amp; cluster)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cluster)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; m(cmap::ConceptMapFactory::CreateFromCluster("Focal question",cluster));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = ribi::cmap::ConceptMap::ToXml(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; n = ribi::cmap::ConceptMapFactory::FromXml(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsEqual(*m,*n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//CreateSubs&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; maps&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= ConceptMapFactory::GetHeteromorphousTestConceptMaps();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_heteromorphous_concept_maps = 19;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_heteromorphous_concept_maps == static_cast&amp;lt;int&amp;gt;(maps.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n_subs_expected = { 1,2,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5 } ;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_heteromorphous_concept_maps == static_cast&amp;lt;int&amp;gt;(n_subs_expected.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_subs_expected[ 0] == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_subs_expected[ 1] == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_subs_expected[ 2] == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_subs_expected[ 6] == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_subs_expected[ 7] == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_subs_expected[14] == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_subs_expected[15] == 5);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(n_subs_expected[16] == 5);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(maps.size() == n_subs_expected.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(n_subs_expected.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!maps[i]) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt;&amp;amp; map = maps[i];&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; subs = map-&amp;gt;CreateSubs();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;int&amp;gt;(subs.size()) != n_subs_expected[i])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(subs.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(n_subs_expected[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(static_cast&amp;lt;int&amp;gt;(subs.size()) == n_subs_expected[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Just test all&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; maps = ConceptMapFactory::GetAllTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = boost::numeric_cast&amp;lt;int&amp;gt;(maps.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!maps[i]) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt;&amp;amp; map = maps[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; &amp;gt; subs = map-&amp;gt;CreateSubs();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!subs.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test IsValid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node_a = cmap::CenterNodeFactory::Create("...");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map = ribi::cmap::ConceptMapFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ node_a } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node = cmap::NodeFactory::Create("...");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;AddNode(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add nodes and edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const auto concept_map: concept_maps)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!concept_map) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_nodes_before = concept_map-&amp;gt;GetNodes().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_edges_before = concept_map-&amp;gt;GetEdges().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto node_a = cmap::NodeFactory::GetTests().at(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto node_b = cmap::NodeFactory::GetTests().at(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto concept = ribi::cmap::ConceptFactory::GetTests().at(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto edge = cmap::EdgeFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept,123.456,456.789,node_a,true,node_b,true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;AddNode(node_a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;AddNode(node_b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;AddEdge(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_nodes_after = concept_map-&amp;gt;GetNodes().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_edges_after = concept_map-&amp;gt;GetEdges().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_nodes_after == n_nodes_before + 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_edges_after == n_edges_before + 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Deletion of nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=n_concept_maps; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!cmap::ConceptMapFactory::GetAllTests()[i]) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMapFactory::GetAllTests()[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_nodes = ribi::cmap::ConceptMapFactory::GetAllTests()[i]-&amp;gt;GetNodes().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t j=0; j!=n_nodes; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map = ribi::cmap::ConceptMapFactory::GetAllTests()[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!concept_map) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;GetNodes().size() == n_nodes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;lt; concept_map-&amp;gt;GetNodes().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Node&amp;gt; node = concept_map-&amp;gt;GetNodes()[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;DeleteNode(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;GetNodes().size() == n_nodes - 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Node must really be gone");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Deletion of edges&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=n_concept_maps; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!cmap::ConceptMapFactory::GetAllTests()[i]) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMapFactory::GetAllTests()[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_edges = ribi::cmap::ConceptMapFactory::GetAllTests()[i]-&amp;gt;GetEdges().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t j=0; j!=n_edges; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map = ribi::cmap::ConceptMapFactory::GetAllTests()[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!concept_map) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;GetEdges().size() == n_edges);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;lt; concept_map-&amp;gt;GetEdges().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::cmap::Edge&amp;gt; edge = concept_map-&amp;gt;GetEdges()[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;concept_map-&amp;gt;DeleteEdge(edge);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map-&amp;gt;GetEdges().size() == n_edges - 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Edge must really be gone");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Is GetNode()[0] a CenterNode?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=n_concept_maps; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!cmap::ConceptMapFactory::GetAllTests()[i]) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cmap::ConceptMapFactory::GetAllTests()[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; concept_map = ribi::cmap::ConceptMapFactory::GetAllTests()[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!concept_map) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(concept_map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!concept_map-&amp;gt;GetNodes().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(boost::dynamic_pointer_cast&amp;lt;cmap::CenterNode&amp;gt;(concept_map-&amp;gt;GetNodes()[0])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume a CenterNode at the center of ConceptMap");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("ConceptMap::Test finished successfully");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapwidget.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapwidget.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "conceptmapwidget.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include "conceptmap.h"&lt;br/&gt;
#include "conceptmapfactory.h"&lt;br/&gt;
#include "conceptmapcommand.h"&lt;br/&gt;
#include "conceptmapcommandfactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::cmap::Widget::Widget(const boost::shared_ptr&amp;lt;ConceptMap&amp;gt; conceptmap)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_conceptmap(conceptmap),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_focus{nullptr},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_undo{}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (m_conceptmap || !m_conceptmap )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Allow a widget with and without an actual concept map");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
ribi::cmap::Widget::Widget(const Widget&amp;amp; other)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_conceptmap(ConceptMapFactory::DeepCopy(other.m_conceptmap)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_focus{nullptr},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_undo{}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(static_cast&amp;lt;bool&amp;gt;(m_conceptmap) == static_cast&amp;lt;bool&amp;gt;(other.m_conceptmap));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (!m_conceptmap || *m_conceptmap == *other.m_conceptmap) &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (!m_conceptmap || m_conceptmap != other.m_conceptmap) &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (m_focus == other.m_focus || m_focus != other.m_focus)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Cannot copy focus");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (m_undo == other.m_undo || m_undo != other.m_undo)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Cannot copy undo");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::Widget::CanDoCommand(const boost::shared_ptr&amp;lt;Command&amp;gt; command) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return command-&amp;gt;CanDoCommand(this);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Widget::DoCommand(const boost::shared_ptr&amp;lt;Command&amp;gt; command) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDoCommand(command));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Undo&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_undo.push_back(command);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Actually do the move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;command-&amp;gt;DoCommand(this);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::cmap::Widget::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.1";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::cmap::Widget::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-12-xx: Version 1.0: initial version",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-12-23: Version 1.1: started versioning"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::cmap::Widget::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::cmap::Widget::Test()");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test all commands do and undo&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;ribi::cmap::ConceptMap&amp;gt; map:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::ConceptMapFactory::GetAllTests())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(map || !map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::cmap::Widget widget(map);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget == widget);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Command&amp;gt; command: CommandFactory::CreateTestCommands())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(command);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (widget.CanDoCommand(command))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::cmap::Widget prev_widget(widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(prev_widget == widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget.DoCommand(command);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(prev_widget != widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget.Undo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(prev_widget == widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::cmap::Widget::Test()");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
void ribi::cmap::Widget::Undo()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_undo.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_undo.back());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_undo.back()-&amp;gt;Undo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_undo.pop_back();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator==(const Widget&amp;amp; lhs, const Widget&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;bool&amp;gt;(lhs.m_conceptmap.get()) != static_cast&amp;lt;bool&amp;gt;(rhs.m_conceptmap.get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(static_cast&amp;lt;bool&amp;gt;(nullptr) == static_cast&amp;lt;bool&amp;gt;(nullptr));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_conceptmap &amp;amp;&amp;amp; *lhs.m_conceptmap != *rhs.m_conceptmap) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_focus != rhs.m_focus) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_undo.size() != rhs.m_undo.size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::begin(lhs.m_undo),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::end(lhs.m_undo),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::begin(rhs.m_undo),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](boost::shared_ptr&amp;lt;const Command&amp;gt; p,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boost::shared_ptr&amp;lt;const Command&amp;gt; q)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p-&amp;gt;ToStr() == q-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::cmap::operator!=(const Widget&amp;amp; lhs, const Widget&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/conceptmapwidget.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/conceptmapwidget.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CONCEPTMAPWIDGET_H&lt;br/&gt;
#define CONCEPTMAPWIDGET_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "conceptmapfwd.h"&lt;br/&gt;
#include "conceptmapfactory.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace cmap {&lt;br/&gt;
&lt;br/&gt;
///Widget does the Command-driven communication with ConceptMap&lt;br/&gt;
struct Widget&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Widget(const boost::shared_ptr&amp;lt;ConceptMap&amp;gt; conceptmap = boost::shared_ptr&amp;lt;ConceptMap&amp;gt;());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Widget(const Widget&amp;amp; other); //Only to be used in debugging&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Widget(const Widget&amp;amp; other) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Widget&amp;amp; operator=(const Widget&amp;amp; rhs) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoCommand(const boost::shared_ptr&amp;lt;Command&amp;gt; command) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoCommand(const boost::shared_ptr&amp;lt;Command&amp;gt; command) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ConceptMap&amp;gt; GetConceptMap() const noexcept { return m_conceptmap; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConceptMap&amp;gt; GetConceptMap()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; noexcept { return m_conceptmap; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all commands possible&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const std::vector&amp;lt;boost::shared_ptr&amp;lt;Command&amp;gt;&amp;gt; GetAllCommands() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Undo();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ConceptMap&amp;gt; m_conceptmap;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The element (either a Node or Edge) having focus&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///nullptr denotes no Element has focus&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Element * m_focus;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The undo stack (use std::vector because it is a true STL container)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The Commands aren't const, because Command::Undo changes their state&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Command&amp;gt;&amp;gt; m_undo;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetConceptMap(const boost::shared_ptr&amp;lt;ConceptMap&amp;gt; conceptmap) noexcept { m_conceptmap = conceptmap; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//friend class Command;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class CommandDeleteConceptMap;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class CommandStartConceptMap;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend bool operator==(const Widget&amp;amp; lhs, const Widget&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Widget&amp;amp; lhs, const Widget&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Widget&amp;amp; lhs, const Widget&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Widget&amp;amp; w);&lt;br/&gt;
&lt;br/&gt;
} //~namespace cmap&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CONCEPTMAPWIDGET_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/CppConceptMap.pri&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/CppConceptMap.pri" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
INCLUDEPATH += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
OTHER_FILES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/Licence.txt&lt;br/&gt;
&lt;br/&gt;
HEADERS += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapfwd.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcenternode.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcenternodefactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcompetency.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapconcept.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapconceptfactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmap.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapfactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapedgefactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexample.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexamplefactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexamples.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexamplesfactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapnode.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapnodefactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmaphelper.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapedge.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapwidget.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcommand.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapelement.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcommandfactory.h&lt;br/&gt;
&lt;br/&gt;
SOURCES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcenternode.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcenternodefactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcompetency.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapconcept.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapconceptfactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmap.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapfactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapedge.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapedgefactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexample.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexamplefactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexamples.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapexamplesfactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapnode.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapnodefactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmaphelper.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmaptestconceptmap.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmaptestconcept.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapwidget.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcommand.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapelement.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppConceptMap/conceptmapcommandfactory.cpp&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppConceptMap/Licence.txt&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppConceptMap/Licence.txt" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU GENERAL PUBLIC LICENSE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Version 3, 29 June 2007&lt;br/&gt;
&lt;br/&gt;
 Copyright (C) 2007 Free Software Foundation, Inc. &amp;lt;http://fsf.org/&amp;gt;&lt;br/&gt;
 Everyone is permitted to copy and distribute verbatim copies&lt;br/&gt;
 of this license document, but changing it is not allowed.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Preamble&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License is a free, copyleft license for&lt;br/&gt;
software and other kinds of works.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The licenses for most software and other practical works are designed&lt;br/&gt;
to take away your freedom to share and change the works.&amp;nbsp;&amp;nbsp;By contrast,&lt;br/&gt;
the GNU General Public License is intended to guarantee your freedom to&lt;br/&gt;
share and change all versions of a program--to make sure it remains free&lt;br/&gt;
software for all its users.&amp;nbsp;&amp;nbsp;We, the Free Software Foundation, use the&lt;br/&gt;
GNU General Public License for most of our software; it applies also to&lt;br/&gt;
any other work released this way by its authors.&amp;nbsp;&amp;nbsp;You can apply it to&lt;br/&gt;
your programs, too.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When we speak of free software, we are referring to freedom, not&lt;br/&gt;
price.&amp;nbsp;&amp;nbsp;Our General Public Licenses are designed to make sure that you&lt;br/&gt;
have the freedom to distribute copies of free software (and charge for&lt;br/&gt;
them if you wish), that you receive source code or can get it if you&lt;br/&gt;
want it, that you can change the software or use pieces of it in new&lt;br/&gt;
free programs, and that you know you can do these things.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To protect your rights, we need to prevent others from denying you&lt;br/&gt;
these rights or asking you to surrender the rights.&amp;nbsp;&amp;nbsp;Therefore, you have&lt;br/&gt;
certain responsibilities if you distribute copies of the software, or if&lt;br/&gt;
you modify it: responsibilities to respect the freedom of others.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For example, if you distribute copies of such a program, whether&lt;br/&gt;
gratis or for a fee, you must pass on to the recipients the same&lt;br/&gt;
freedoms that you received.&amp;nbsp;&amp;nbsp;You must make sure that they, too, receive&lt;br/&gt;
or can get the source code.&amp;nbsp;&amp;nbsp;And you must show them these terms so they&lt;br/&gt;
know their rights.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Developers that use the GNU GPL protect your rights with two steps:&lt;br/&gt;
(1) assert copyright on the software, and (2) offer you this License&lt;br/&gt;
giving you legal permission to copy, distribute and/or modify it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For the developers' and authors' protection, the GPL clearly explains&lt;br/&gt;
that there is no warranty for this free software.&amp;nbsp;&amp;nbsp;For both users' and&lt;br/&gt;
authors' sake, the GPL requires that modified versions be marked as&lt;br/&gt;
changed, so that their problems will not be attributed erroneously to&lt;br/&gt;
authors of previous versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Some devices are designed to deny users access to install or run&lt;br/&gt;
modified versions of the software inside them, although the manufacturer&lt;br/&gt;
can do so.&amp;nbsp;&amp;nbsp;This is fundamentally incompatible with the aim of&lt;br/&gt;
protecting users' freedom to change the software.&amp;nbsp;&amp;nbsp;The systematic&lt;br/&gt;
pattern of such abuse occurs in the area of products for individuals to&lt;br/&gt;
use, which is precisely where it is most unacceptable.&amp;nbsp;&amp;nbsp;Therefore, we&lt;br/&gt;
have designed this version of the GPL to prohibit the practice for those&lt;br/&gt;
products.&amp;nbsp;&amp;nbsp;If such problems arise substantially in other domains, we&lt;br/&gt;
stand ready to extend this provision to those domains in future versions&lt;br/&gt;
of the GPL, as needed to protect the freedom of users.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Finally, every program is threatened constantly by software patents.&lt;br/&gt;
States should not allow patents to restrict development and use of&lt;br/&gt;
software on general-purpose computers, but in those that do, we wish to&lt;br/&gt;
avoid the special danger that patents applied to a free program could&lt;br/&gt;
make it effectively proprietary.&amp;nbsp;&amp;nbsp;To prevent this, the GPL assures that&lt;br/&gt;
patents cannot be used to render the program non-free.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The precise terms and conditions for copying, distribution and&lt;br/&gt;
modification follow.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0. Definitions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"This License" refers to version 3 of the GNU General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Copyright" also means copyright-like laws that apply to other kinds of&lt;br/&gt;
works, such as semiconductor masks.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"The Program" refers to any copyrightable work licensed under this&lt;br/&gt;
License.&amp;nbsp;&amp;nbsp;Each licensee is addressed as "you".&amp;nbsp;&amp;nbsp;"Licensees" and&lt;br/&gt;
"recipients" may be individuals or organizations.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "modify" a work means to copy from or adapt all or part of the work&lt;br/&gt;
in a fashion requiring copyright permission, other than the making of an&lt;br/&gt;
exact copy.&amp;nbsp;&amp;nbsp;The resulting work is called a "modified version" of the&lt;br/&gt;
earlier work or a work "based on" the earlier work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "covered work" means either the unmodified Program or a work based&lt;br/&gt;
on the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "propagate" a work means to do anything with it that, without&lt;br/&gt;
permission, would make you directly or secondarily liable for&lt;br/&gt;
infringement under applicable copyright law, except executing it on a&lt;br/&gt;
computer or modifying a private copy.&amp;nbsp;&amp;nbsp;Propagation includes copying,&lt;br/&gt;
distribution (with or without modification), making available to the&lt;br/&gt;
public, and in some countries other activities as well.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "convey" a work means any kind of propagation that enables other&lt;br/&gt;
parties to make or receive copies.&amp;nbsp;&amp;nbsp;Mere interaction with a user through&lt;br/&gt;
a computer network, with no transfer of a copy, is not conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An interactive user interface displays "Appropriate Legal Notices"&lt;br/&gt;
to the extent that it includes a convenient and prominently visible&lt;br/&gt;
feature that (1) displays an appropriate copyright notice, and (2)&lt;br/&gt;
tells the user that there is no warranty for the work (except to the&lt;br/&gt;
extent that warranties are provided), that licensees may convey the&lt;br/&gt;
work under this License, and how to view a copy of this License.&amp;nbsp;&amp;nbsp;If&lt;br/&gt;
the interface presents a list of user commands or options, such as a&lt;br/&gt;
menu, a prominent item in the list meets this criterion.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;1. Source Code.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "source code" for a work means the preferred form of the work&lt;br/&gt;
for making modifications to it.&amp;nbsp;&amp;nbsp;"Object code" means any non-source&lt;br/&gt;
form of a work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "Standard Interface" means an interface that either is an official&lt;br/&gt;
standard defined by a recognized standards body, or, in the case of&lt;br/&gt;
interfaces specified for a particular programming language, one that&lt;br/&gt;
is widely used among developers working in that language.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "System Libraries" of an executable work include anything, other&lt;br/&gt;
than the work as a whole, that (a) is included in the normal form of&lt;br/&gt;
packaging a Major Component, but which is not part of that Major&lt;br/&gt;
Component, and (b) serves only to enable use of the work with that&lt;br/&gt;
Major Component, or to implement a Standard Interface for which an&lt;br/&gt;
implementation is available to the public in source code form.&amp;nbsp;&amp;nbsp;A&lt;br/&gt;
"Major Component", in this context, means a major essential component&lt;br/&gt;
(kernel, window system, and so on) of the specific operating system&lt;br/&gt;
(if any) on which the executable work runs, or a compiler used to&lt;br/&gt;
produce the work, or an object code interpreter used to run it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "Corresponding Source" for a work in object code form means all&lt;br/&gt;
the source code needed to generate, install, and (for an executable&lt;br/&gt;
work) run the object code and to modify the work, including scripts to&lt;br/&gt;
control those activities.&amp;nbsp;&amp;nbsp;However, it does not include the work's&lt;br/&gt;
System Libraries, or general-purpose tools or generally available free&lt;br/&gt;
programs which are used unmodified in performing those activities but&lt;br/&gt;
which are not part of the work.&amp;nbsp;&amp;nbsp;For example, Corresponding Source&lt;br/&gt;
includes interface definition files associated with source files for&lt;br/&gt;
the work, and the source code for shared libraries and dynamically&lt;br/&gt;
linked subprograms that the work is specifically designed to require,&lt;br/&gt;
such as by intimate data communication or control flow between those&lt;br/&gt;
subprograms and other parts of the work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source need not include anything that users&lt;br/&gt;
can regenerate automatically from other parts of the Corresponding&lt;br/&gt;
Source.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source for a work in source code form is that&lt;br/&gt;
same work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;2. Basic Permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All rights granted under this License are granted for the term of&lt;br/&gt;
copyright on the Program, and are irrevocable provided the stated&lt;br/&gt;
conditions are met.&amp;nbsp;&amp;nbsp;This License explicitly affirms your unlimited&lt;br/&gt;
permission to run the unmodified Program.&amp;nbsp;&amp;nbsp;The output from running a&lt;br/&gt;
covered work is covered by this License only if the output, given its&lt;br/&gt;
content, constitutes a covered work.&amp;nbsp;&amp;nbsp;This License acknowledges your&lt;br/&gt;
rights of fair use or other equivalent, as provided by copyright law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may make, run and propagate covered works that you do not&lt;br/&gt;
convey, without conditions so long as your license otherwise remains&lt;br/&gt;
in force.&amp;nbsp;&amp;nbsp;You may convey covered works to others for the sole purpose&lt;br/&gt;
of having them make modifications exclusively for you, or provide you&lt;br/&gt;
with facilities for running those works, provided that you comply with&lt;br/&gt;
the terms of this License in conveying all material for which you do&lt;br/&gt;
not control copyright.&amp;nbsp;&amp;nbsp;Those thus making or running the covered works&lt;br/&gt;
for you must do so exclusively on your behalf, under your direction&lt;br/&gt;
and control, on terms that prohibit them from making any copies of&lt;br/&gt;
your copyrighted material outside their relationship with you.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Conveying under any other circumstances is permitted solely under&lt;br/&gt;
the conditions stated below.&amp;nbsp;&amp;nbsp;Sublicensing is not allowed; section 10&lt;br/&gt;
makes it unnecessary.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;No covered work shall be deemed part of an effective technological&lt;br/&gt;
measure under any applicable law fulfilling obligations under article&lt;br/&gt;
11 of the WIPO copyright treaty adopted on 20 December 1996, or&lt;br/&gt;
similar laws prohibiting or restricting circumvention of such&lt;br/&gt;
measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a covered work, you waive any legal power to forbid&lt;br/&gt;
circumvention of technological measures to the extent such circumvention&lt;br/&gt;
is effected by exercising rights under this License with respect to&lt;br/&gt;
the covered work, and you disclaim any intention to limit operation or&lt;br/&gt;
modification of the work as a means of enforcing, against the work's&lt;br/&gt;
users, your or third parties' legal rights to forbid circumvention of&lt;br/&gt;
technological measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;4. Conveying Verbatim Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey verbatim copies of the Program's source code as you&lt;br/&gt;
receive it, in any medium, provided that you conspicuously and&lt;br/&gt;
appropriately publish on each copy an appropriate copyright notice;&lt;br/&gt;
keep intact all notices stating that this License and any&lt;br/&gt;
non-permissive terms added in accord with section 7 apply to the code;&lt;br/&gt;
keep intact all notices of the absence of any warranty; and give all&lt;br/&gt;
recipients a copy of this License along with the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may charge any price or no price for each copy that you convey,&lt;br/&gt;
and you may offer support or warranty protection for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;5. Conveying Modified Source Versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a work based on the Program, or the modifications to&lt;br/&gt;
produce it from the Program, in the form of source code under the&lt;br/&gt;
terms of section 4, provided that you also meet all of these conditions:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) The work must carry prominent notices stating that you modified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it, and giving a relevant date.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) The work must carry prominent notices stating that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;released under this License and any conditions added under section&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.&amp;nbsp;&amp;nbsp;This requirement modifies the requirement in section 4 to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"keep intact all notices".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) You must license the entire work, as a whole, under this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License to anyone who comes into possession of a copy.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License will therefore apply, along with any applicable section 7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;additional terms, to the whole of the work, and all its parts,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;regardless of how they are packaged.&amp;nbsp;&amp;nbsp;This License gives no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;permission to license the work in any other way, but it does not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;invalidate such permission if you have separately received it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) If the work has interactive user interfaces, each must display&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Appropriate Legal Notices; however, if the Program has interactive&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interfaces that do not display Appropriate Legal Notices, your&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;work need not make them do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A compilation of a covered work with other separate and independent&lt;br/&gt;
works, which are not by their nature extensions of the covered work,&lt;br/&gt;
and which are not combined with it such as to form a larger program,&lt;br/&gt;
in or on a volume of a storage or distribution medium, is called an&lt;br/&gt;
"aggregate" if the compilation and its resulting copyright are not&lt;br/&gt;
used to limit the access or legal rights of the compilation's users&lt;br/&gt;
beyond what the individual works permit.&amp;nbsp;&amp;nbsp;Inclusion of a covered work&lt;br/&gt;
in an aggregate does not cause this License to apply to the other&lt;br/&gt;
parts of the aggregate.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;6. Conveying Non-Source Forms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a covered work in object code form under the terms&lt;br/&gt;
of sections 4 and 5, provided that you also convey the&lt;br/&gt;
machine-readable Corresponding Source under the terms of this License,&lt;br/&gt;
in one of these ways:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source fixed on a durable physical medium&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;customarily used for software interchange.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer, valid for at least three years and valid for as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long as you offer spare parts or customer support for that product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;model, to give anyone who possesses the object code either (1) a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy of the Corresponding Source for all the software in the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;product that is covered by this License, on a durable physical&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;medium customarily used for software interchange, for a price no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;more than your reasonable cost of physically performing this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;conveying of source, or (2) access to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source from a network server at no charge.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Convey individual copies of the object code with a copy of the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer to provide the Corresponding Source.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alternative is allowed only occasionally and noncommercially, and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;only if you received the object code with such an offer, in accord&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with subsection 6b.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Convey the object code by offering access from a designated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;place (gratis or for a charge), and offer equivalent access to the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source in the same way through the same place at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;further charge.&amp;nbsp;&amp;nbsp;You need not require recipients to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source along with the object code.&amp;nbsp;&amp;nbsp;If the place to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy the object code is a network server, the Corresponding Source&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;may be on a different server (operated by you or a third party)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that supports equivalent copying facilities, provided you maintain&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clear directions next to the object code saying where to find the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source.&amp;nbsp;&amp;nbsp;Regardless of what server hosts the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source, you remain obligated to ensure that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;available for as long as needed to satisfy these requirements.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Convey the object code using peer-to-peer transmission, provided&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you inform other peers where the object code and Corresponding&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Source of the work are being offered to the general public at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;charge under subsection 6d.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A separable portion of the object code, whose source code is excluded&lt;br/&gt;
from the Corresponding Source as a System Library, need not be&lt;br/&gt;
included in conveying the object code work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "User Product" is either (1) a "consumer product", which means any&lt;br/&gt;
tangible personal property which is normally used for personal, family,&lt;br/&gt;
or household purposes, or (2) anything designed or sold for incorporation&lt;br/&gt;
into a dwelling.&amp;nbsp;&amp;nbsp;In determining whether a product is a consumer product,&lt;br/&gt;
doubtful cases shall be resolved in favor of coverage.&amp;nbsp;&amp;nbsp;For a particular&lt;br/&gt;
product received by a particular user, "normally used" refers to a&lt;br/&gt;
typical or common use of that class of product, regardless of the status&lt;br/&gt;
of the particular user or of the way in which the particular user&lt;br/&gt;
actually uses, or expects or is expected to use, the product.&amp;nbsp;&amp;nbsp;A product&lt;br/&gt;
is a consumer product regardless of whether the product has substantial&lt;br/&gt;
commercial, industrial or non-consumer uses, unless such uses represent&lt;br/&gt;
the only significant mode of use of the product.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Installation Information" for a User Product means any methods,&lt;br/&gt;
procedures, authorization keys, or other information required to install&lt;br/&gt;
and execute modified versions of a covered work in that User Product from&lt;br/&gt;
a modified version of its Corresponding Source.&amp;nbsp;&amp;nbsp;The information must&lt;br/&gt;
suffice to ensure that the continued functioning of the modified object&lt;br/&gt;
code is in no case prevented or interfered with solely because&lt;br/&gt;
modification has been made.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey an object code work under this section in, or with, or&lt;br/&gt;
specifically for use in, a User Product, and the conveying occurs as&lt;br/&gt;
part of a transaction in which the right of possession and use of the&lt;br/&gt;
User Product is transferred to the recipient in perpetuity or for a&lt;br/&gt;
fixed term (regardless of how the transaction is characterized), the&lt;br/&gt;
Corresponding Source conveyed under this section must be accompanied&lt;br/&gt;
by the Installation Information.&amp;nbsp;&amp;nbsp;But this requirement does not apply&lt;br/&gt;
if neither you nor any third party retains the ability to install&lt;br/&gt;
modified object code on the User Product (for example, the work has&lt;br/&gt;
been installed in ROM).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The requirement to provide Installation Information does not include a&lt;br/&gt;
requirement to continue to provide support service, warranty, or updates&lt;br/&gt;
for a work that has been modified or installed by the recipient, or for&lt;br/&gt;
the User Product in which it has been modified or installed.&amp;nbsp;&amp;nbsp;Access to a&lt;br/&gt;
network may be denied when the modification itself materially and&lt;br/&gt;
adversely affects the operation of the network or violates the rules and&lt;br/&gt;
protocols for communication across the network.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Corresponding Source conveyed, and Installation Information provided,&lt;br/&gt;
in accord with this section must be in a format that is publicly&lt;br/&gt;
documented (and with an implementation available to the public in&lt;br/&gt;
source code form), and must require no special password or key for&lt;br/&gt;
unpacking, reading or copying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;7. Additional Terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Additional permissions" are terms that supplement the terms of this&lt;br/&gt;
License by making exceptions from one or more of its conditions.&lt;br/&gt;
Additional permissions that are applicable to the entire Program shall&lt;br/&gt;
be treated as though they were included in this License, to the extent&lt;br/&gt;
that they are valid under applicable law.&amp;nbsp;&amp;nbsp;If additional permissions&lt;br/&gt;
apply only to part of the Program, that part may be used separately&lt;br/&gt;
under those permissions, but the entire Program remains governed by&lt;br/&gt;
this License without regard to the additional permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a copy of a covered work, you may at your option&lt;br/&gt;
remove any additional permissions from that copy, or from any part of&lt;br/&gt;
it.&amp;nbsp;&amp;nbsp;(Additional permissions may be written to require their own&lt;br/&gt;
removal in certain cases when you modify the work.)&amp;nbsp;&amp;nbsp;You may place&lt;br/&gt;
additional permissions on material, added by you to a covered work,&lt;br/&gt;
for which you have or can give appropriate copyright permission.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, for material you&lt;br/&gt;
add to a covered work, you may (if authorized by the copyright holders of&lt;br/&gt;
that material) supplement the terms of this License with terms:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Disclaiming warranty or limiting liability differently from the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;terms of sections 15 and 16 of this License; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Requiring preservation of specified reasonable legal notices or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;author attributions in that material or in the Appropriate Legal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Notices displayed by works containing it; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Prohibiting misrepresentation of the origin of that material, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requiring that modified versions of such material be marked in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reasonable ways as different from the original version; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Limiting the use for publicity purposes of names of licensors or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authors of the material; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Declining to grant rights under trademark law for use of some&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;trade names, trademarks, or service marks; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f) Requiring indemnification of licensors and authors of that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;material by anyone who conveys the material (or modified versions of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it) with contractual assumptions of liability to the recipient, for&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;any liability that these contractual assumptions directly impose on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;those licensors and authors.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All other non-permissive additional terms are considered "further&lt;br/&gt;
restrictions" within the meaning of section 10.&amp;nbsp;&amp;nbsp;If the Program as you&lt;br/&gt;
received it, or any part of it, contains a notice stating that it is&lt;br/&gt;
governed by this License along with a term that is a further&lt;br/&gt;
restriction, you may remove that term.&amp;nbsp;&amp;nbsp;If a license document contains&lt;br/&gt;
a further restriction but permits relicensing or conveying under this&lt;br/&gt;
License, you may add to a covered work material governed by the terms&lt;br/&gt;
of that license document, provided that the further restriction does&lt;br/&gt;
not survive such relicensing or conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you add terms to a covered work in accord with this section, you&lt;br/&gt;
must place, in the relevant source files, a statement of the&lt;br/&gt;
additional terms that apply to those files, or a notice indicating&lt;br/&gt;
where to find the applicable terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Additional terms, permissive or non-permissive, may be stated in the&lt;br/&gt;
form of a separately written license, or stated as exceptions;&lt;br/&gt;
the above requirements apply either way.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;8. Termination.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not propagate or modify a covered work except as expressly&lt;br/&gt;
provided under this License.&amp;nbsp;&amp;nbsp;Any attempt otherwise to propagate or&lt;br/&gt;
modify it is void, and will automatically terminate your rights under&lt;br/&gt;
this License (including any patent licenses granted under the third&lt;br/&gt;
paragraph of section 11).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;However, if you cease all violation of this License, then your&lt;br/&gt;
license from a particular copyright holder is reinstated (a)&lt;br/&gt;
provisionally, unless and until the copyright holder explicitly and&lt;br/&gt;
finally terminates your license, and (b) permanently, if the copyright&lt;br/&gt;
holder fails to notify you of the violation by some reasonable means&lt;br/&gt;
prior to 60 days after the cessation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Moreover, your license from a particular copyright holder is&lt;br/&gt;
reinstated permanently if the copyright holder notifies you of the&lt;br/&gt;
violation by some reasonable means, this is the first time you have&lt;br/&gt;
received notice of violation of this License (for any work) from that&lt;br/&gt;
copyright holder, and you cure the violation prior to 30 days after&lt;br/&gt;
your receipt of the notice.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Termination of your rights under this section does not terminate the&lt;br/&gt;
licenses of parties who have received copies or rights from you under&lt;br/&gt;
this License.&amp;nbsp;&amp;nbsp;If your rights have been terminated and not permanently&lt;br/&gt;
reinstated, you do not qualify to receive new licenses for the same&lt;br/&gt;
material under section 10.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;9. Acceptance Not Required for Having Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You are not required to accept this License in order to receive or&lt;br/&gt;
run a copy of the Program.&amp;nbsp;&amp;nbsp;Ancillary propagation of a covered work&lt;br/&gt;
occurring solely as a consequence of using peer-to-peer transmission&lt;br/&gt;
to receive a copy likewise does not require acceptance.&amp;nbsp;&amp;nbsp;However,&lt;br/&gt;
nothing other than this License grants you permission to propagate or&lt;br/&gt;
modify any covered work.&amp;nbsp;&amp;nbsp;These actions infringe copyright if you do&lt;br/&gt;
not accept this License.&amp;nbsp;&amp;nbsp;Therefore, by modifying or propagating a&lt;br/&gt;
covered work, you indicate your acceptance of this License to do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;10. Automatic Licensing of Downstream Recipients.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each time you convey a covered work, the recipient automatically&lt;br/&gt;
receives a license from the original licensors, to run, modify and&lt;br/&gt;
propagate that work, subject to this License.&amp;nbsp;&amp;nbsp;You are not responsible&lt;br/&gt;
for enforcing compliance by third parties with this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An "entity transaction" is a transaction transferring control of an&lt;br/&gt;
organization, or substantially all assets of one, or subdividing an&lt;br/&gt;
organization, or merging organizations.&amp;nbsp;&amp;nbsp;If propagation of a covered&lt;br/&gt;
work results from an entity transaction, each party to that&lt;br/&gt;
transaction who receives a copy of the work also receives whatever&lt;br/&gt;
licenses to the work the party's predecessor in interest had or could&lt;br/&gt;
give under the previous paragraph, plus a right to possession of the&lt;br/&gt;
Corresponding Source of the work from the predecessor in interest, if&lt;br/&gt;
the predecessor has it or can get it with reasonable efforts.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not impose any further restrictions on the exercise of the&lt;br/&gt;
rights granted or affirmed under this License.&amp;nbsp;&amp;nbsp;For example, you may&lt;br/&gt;
not impose a license fee, royalty, or other charge for exercise of&lt;br/&gt;
rights granted under this License, and you may not initiate litigation&lt;br/&gt;
(including a cross-claim or counterclaim in a lawsuit) alleging that&lt;br/&gt;
any patent claim is infringed by making, using, selling, offering for&lt;br/&gt;
sale, or importing the Program or any portion of it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;11. Patents.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "contributor" is a copyright holder who authorizes use under this&lt;br/&gt;
License of the Program or a work on which the Program is based.&amp;nbsp;&amp;nbsp;The&lt;br/&gt;
work thus licensed is called the contributor's "contributor version".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A contributor's "essential patent claims" are all patent claims&lt;br/&gt;
owned or controlled by the contributor, whether already acquired or&lt;br/&gt;
hereafter acquired, that would be infringed by some manner, permitted&lt;br/&gt;
by this License, of making, using, or selling its contributor version,&lt;br/&gt;
but do not include claims that would be infringed only as a&lt;br/&gt;
consequence of further modification of the contributor version.&amp;nbsp;&amp;nbsp;For&lt;br/&gt;
purposes of this definition, "control" includes the right to grant&lt;br/&gt;
patent sublicenses in a manner consistent with the requirements of&lt;br/&gt;
this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free&lt;br/&gt;
patent license under the contributor's essential patent claims, to&lt;br/&gt;
make, use, sell, offer for sale, import and otherwise run, modify and&lt;br/&gt;
propagate the contents of its contributor version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;In the following three paragraphs, a "patent license" is any express&lt;br/&gt;
agreement or commitment, however denominated, not to enforce a patent&lt;br/&gt;
(such as an express permission to practice a patent or covenant not to&lt;br/&gt;
sue for patent infringement).&amp;nbsp;&amp;nbsp;To "grant" such a patent license to a&lt;br/&gt;
party means to make such an agreement or commitment not to enforce a&lt;br/&gt;
patent against the party.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey a covered work, knowingly relying on a patent license,&lt;br/&gt;
and the Corresponding Source of the work is not available for anyone&lt;br/&gt;
to copy, free of charge and under the terms of this License, through a&lt;br/&gt;
publicly available network server or other readily accessible means,&lt;br/&gt;
then you must either (1) cause the Corresponding Source to be so&lt;br/&gt;
available, or (2) arrange to deprive yourself of the benefit of the&lt;br/&gt;
patent license for this particular work, or (3) arrange, in a manner&lt;br/&gt;
consistent with the requirements of this License, to extend the patent&lt;br/&gt;
license to downstream recipients.&amp;nbsp;&amp;nbsp;"Knowingly relying" means you have&lt;br/&gt;
actual knowledge that, but for the patent license, your conveying the&lt;br/&gt;
covered work in a country, or your recipient's use of the covered work&lt;br/&gt;
in a country, would infringe one or more identifiable patents in that&lt;br/&gt;
country that you have reason to believe are valid.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If, pursuant to or in connection with a single transaction or&lt;br/&gt;
arrangement, you convey, or propagate by procuring conveyance of, a&lt;br/&gt;
covered work, and grant a patent license to some of the parties&lt;br/&gt;
receiving the covered work authorizing them to use, propagate, modify&lt;br/&gt;
or convey a specific copy of the covered work, then the patent license&lt;br/&gt;
you grant is automatically extended to all recipients of the covered&lt;br/&gt;
work and works based on it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A patent license is "discriminatory" if it does not include within&lt;br/&gt;
the scope of its coverage, prohibits the exercise of, or is&lt;br/&gt;
conditioned on the non-exercise of one or more of the rights that are&lt;br/&gt;
specifically granted under this License.&amp;nbsp;&amp;nbsp;You may not convey a covered&lt;br/&gt;
work if you are a party to an arrangement with a third party that is&lt;br/&gt;
in the business of distributing software, under which you make payment&lt;br/&gt;
to the third party based on the extent of your activity of conveying&lt;br/&gt;
the work, and under which the third party grants, to any of the&lt;br/&gt;
parties who would receive the covered work from you, a discriminatory&lt;br/&gt;
patent license (a) in connection with copies of the covered work&lt;br/&gt;
conveyed by you (or copies made from those copies), or (b) primarily&lt;br/&gt;
for and in connection with specific products or compilations that&lt;br/&gt;
contain the covered work, unless you entered into that arrangement,&lt;br/&gt;
or that patent license was granted, prior to 28 March 2007.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Nothing in this License shall be construed as excluding or limiting&lt;br/&gt;
any implied license or other defenses to infringement that may&lt;br/&gt;
otherwise be available to you under applicable patent law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;12. No Surrender of Others' Freedom.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If conditions are imposed on you (whether by court order, agreement or&lt;br/&gt;
otherwise) that contradict the conditions of this License, they do not&lt;br/&gt;
excuse you from the conditions of this License.&amp;nbsp;&amp;nbsp;If you cannot convey a&lt;br/&gt;
covered work so as to satisfy simultaneously your obligations under this&lt;br/&gt;
License and any other pertinent obligations, then as a consequence you may&lt;br/&gt;
not convey it at all.&amp;nbsp;&amp;nbsp;For example, if you agree to terms that obligate you&lt;br/&gt;
to collect a royalty for further conveying from those to whom you convey&lt;br/&gt;
the Program, the only way you could satisfy both those terms and this&lt;br/&gt;
License would be to refrain entirely from conveying the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;13. Use with the GNU Affero General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, you have&lt;br/&gt;
permission to link or combine any covered work with a work licensed&lt;br/&gt;
under version 3 of the GNU Affero General Public License into a single&lt;br/&gt;
combined work, and to convey the resulting work.&amp;nbsp;&amp;nbsp;The terms of this&lt;br/&gt;
License will continue to apply to the part which is the covered work,&lt;br/&gt;
but the special requirements of the GNU Affero General Public License,&lt;br/&gt;
section 13, concerning interaction through a network will apply to the&lt;br/&gt;
combination as such.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14. Revised Versions of this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Free Software Foundation may publish revised and/or new versions of&lt;br/&gt;
the GNU General Public License from time to time.&amp;nbsp;&amp;nbsp;Such new versions will&lt;br/&gt;
be similar in spirit to the present version, but may differ in detail to&lt;br/&gt;
address new problems or concerns.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each version is given a distinguishing version number.&amp;nbsp;&amp;nbsp;If the&lt;br/&gt;
Program specifies that a certain numbered version of the GNU General&lt;br/&gt;
Public License "or any later version" applies to it, you have the&lt;br/&gt;
option of following the terms and conditions either of that numbered&lt;br/&gt;
version or of any later version published by the Free Software&lt;br/&gt;
Foundation.&amp;nbsp;&amp;nbsp;If the Program does not specify a version number of the&lt;br/&gt;
GNU General Public License, you may choose any version ever published&lt;br/&gt;
by the Free Software Foundation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the Program specifies that a proxy can decide which future&lt;br/&gt;
versions of the GNU General Public License can be used, that proxy's&lt;br/&gt;
public statement of acceptance of a version permanently authorizes you&lt;br/&gt;
to choose that version for the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Later license versions may give you additional or different&lt;br/&gt;
permissions.&amp;nbsp;&amp;nbsp;However, no additional obligations are imposed on any&lt;br/&gt;
author or copyright holder as a result of your choosing to follow a&lt;br/&gt;
later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;15. Disclaimer of Warranty.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY&lt;br/&gt;
APPLICABLE LAW.&amp;nbsp;&amp;nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT&lt;br/&gt;
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY&lt;br/&gt;
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,&lt;br/&gt;
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR&lt;br/&gt;
PURPOSE.&amp;nbsp;&amp;nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM&lt;br/&gt;
IS WITH YOU.&amp;nbsp;&amp;nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF&lt;br/&gt;
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;16. Limitation of Liability.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING&lt;br/&gt;
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS&lt;br/&gt;
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY&lt;br/&gt;
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE&lt;br/&gt;
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF&lt;br/&gt;
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD&lt;br/&gt;
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),&lt;br/&gt;
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF&lt;br/&gt;
SUCH DAMAGES.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;17. Interpretation of Sections 15 and 16.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the disclaimer of warranty and limitation of liability provided&lt;br/&gt;
above cannot be given local legal effect according to their terms,&lt;br/&gt;
reviewing courts shall apply local law that most closely approximates&lt;br/&gt;
an absolute waiver of all civil liability in connection with the&lt;br/&gt;
Program, unless a warranty or assumption of liability accompanies a&lt;br/&gt;
copy of the Program in return for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; END OF TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How to Apply These Terms to Your New Programs&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you develop a new program, and you want it to be of the greatest&lt;br/&gt;
possible use to the public, the best way to achieve this is to make it&lt;br/&gt;
free software which everyone can redistribute and change under these terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To do so, attach the following notices to the program.&amp;nbsp;&amp;nbsp;It is safest&lt;br/&gt;
to attach them to the start of each source file to most effectively&lt;br/&gt;
state the exclusion of warranty; and each file should have at least&lt;br/&gt;
the "copyright" line and a pointer to where the full notice is found.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;one line to give the program's name and a brief idea of what it does.&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is free software: you can redistribute it and/or modify&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it under the terms of the GNU General Public License as published by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is distributed in the hope that it will be useful,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&amp;nbsp;&amp;nbsp;See the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU General Public License for more details.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You should have received a copy of the GNU General Public License&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;along with this program.&amp;nbsp;&amp;nbsp;If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
Also add information on how to contact you by electronic and paper mail.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the program does terminal interaction, make it output a short&lt;br/&gt;
notice like this when it starts in an interactive mode:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;program&amp;gt;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is free software, and you are welcome to redistribute it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;under certain conditions; type `show c' for details.&lt;br/&gt;
&lt;br/&gt;
The hypothetical commands `show w' and `show c' should show the appropriate&lt;br/&gt;
parts of the General Public License.&amp;nbsp;&amp;nbsp;Of course, your program's commands&lt;br/&gt;
might be different; for a GUI interface, you would use an "about box".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You should also get your employer (if you work as a programmer) or school,&lt;br/&gt;
if any, to sign a "copyright disclaimer" for the program, if necessary.&lt;br/&gt;
For more information on this, and how to apply and follow the GNU GPL, see&lt;br/&gt;
&amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License does not permit incorporating your program&lt;br/&gt;
into proprietary programs.&amp;nbsp;&amp;nbsp;If your program is a subroutine library, you&lt;br/&gt;
may consider it more useful to permit linking proprietary applications with&lt;br/&gt;
the library.&amp;nbsp;&amp;nbsp;If this is what you want to do, use the GNU Lesser General&lt;br/&gt;
Public License instead of this License.&amp;nbsp;&amp;nbsp;But first, please read&lt;br/&gt;
&amp;lt;http://www.gnu.org/philosophy/why-not-lgpl.html&amp;gt;.&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://validator.w3.org/check?uri=referer"&gt;&lt;img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This page has been created by the &lt;a href="Tools.htm"&gt;tool&lt;/a&gt; &lt;a href="ToolCodeToHtml.htm"&gt;CodeToHtml&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
