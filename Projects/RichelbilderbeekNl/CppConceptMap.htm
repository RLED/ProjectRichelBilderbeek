<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ConceptMap</title>
  <meta name="description" content="C++ ConceptMap"/>
  <meta name="keywords" content="C++ ConceptMap "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppConceptMap.htm">ConceptMap</a></h1>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmap.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmap.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmap.h"<br/>
<br/>
#include &lt;set&gt;<br/>
#include &lt;sstream&gt;<br/>
<br/>
#include "conceptmapcenternode.h"<br/>
#include "conceptmapcenternodefactory.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "trace.h"<br/>
#include "conceptmapexamplesfactory.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "conceptmapedge.h"<br/>
//#include "conceptmapcluster.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::ConceptMap::ConceptMap(const std::string&amp; question)<br/>
&nbsp;&nbsp;: m_edges( {} ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes(CreateNodes(question, {} ))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;assert(ConceptMap::CanConstruct(m_nodes,m_edges));<br/>
&nbsp;&nbsp;assert(this-&gt;GetQuestion() == question);<br/>
<br/>
&nbsp;&nbsp;assert(boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(this-&gt;GetNodes()[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume a CenterNode at the center of ConceptMap");<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
ribi::cmap::ConceptMap::ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt;&amp; edges)<br/>
&nbsp;&nbsp;: m_edges(edges),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes(nodes)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;if (!ConceptMap::CanConstruct(nodes,edges))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_nodes = nodes.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=0; i!=n_nodes; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; i &lt;&lt; ": " &lt;&lt; cmap::Node::ToXml(nodes[i]) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_edges = edges.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=0; i!=n_edges; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto edge = edges[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto const_nodes = AddConst(nodes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto from_iter = std::find(nodes.begin(),nodes.end(),edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto to_iter = std::find(nodes.begin(),nodes.end(),edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(from_iter != nodes.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(to_iter != nodes.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; i &lt;&lt; ": " &lt;&lt; cmap::Edge::ToXml(edge,const_nodes) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(ConceptMap::CanConstruct(nodes,edges));<br/>
&nbsp;&nbsp;assert(this-&gt;GetQuestion() == nodes[0]-&gt;GetConcept()-&gt;GetName());<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
#ifdef TO_ADD_TO_PROJECTBRAINWEAVER<br/>
ribi::cmap::ConceptMap::ConceptMap(<br/>
&nbsp;&nbsp;const std::string&amp; question,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Cluster&gt;&amp; cluster)<br/>
&nbsp;&nbsp;: m_edges{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes(CreateNodes(question, {} ))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Concept&gt; &gt;&amp; v = cluster-&gt;Get();<br/>
&nbsp;&nbsp;const int n = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;for (int i=0; i!=n; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int y = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node = cmap::NodeFactory::Create(v[i],x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes.push_back(node);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(v.size() + 1 == m_nodes.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume the ConceptMap has as much nodes as the cluster has concepts + one focal question");<br/>
}<br/>
#endif //TO_ADD_TO_PROJECTBRAINWEAVER<br/>
<br/>
void ribi::cmap::ConceptMap::AddEdge(const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge)<br/>
{<br/>
&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;assert(std::count(m_nodes.begin(),m_nodes.end(),edge-&gt;GetFrom()) == 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "First enter the node this edge originates from");<br/>
&nbsp;&nbsp;assert(std::count(m_nodes.begin(),m_nodes.end(),edge-&gt;GetTo()) == 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "First enter the node this edge targets to");<br/>
&nbsp;&nbsp;m_edges.push_back(edge);<br/>
}<br/>
<br/>
void ribi::cmap::ConceptMap::AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
{<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;m_nodes.push_back(node);<br/>
}<br/>
<br/>
<br/>
bool ribi::cmap::ConceptMap::CanConstruct(<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt;&amp; edges)<br/>
{<br/>
&nbsp;&nbsp;//if (question.empty() &amp;&amp; "Cannot construct empty questions") return false;<br/>
&nbsp;&nbsp;//Test if first node, which is the focal question, does not have examples<br/>
&nbsp;&nbsp;if (nodes.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(nodes[0]-&gt;GetConcept());<br/>
&nbsp;&nbsp;//The center node CAN have examples, when the center node is the focal node of a sub-concept map<br/>
&nbsp;&nbsp;///if (!nodes[0]-&gt;GetConcept()-&gt;GetExamples().empty()) { return false; }<br/>
&nbsp;&nbsp;//Test if all edges are in range<br/>
&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_nodes = static_cast&lt;int&gt;(nodes.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_invalid = std::count_if(edges.begin(), edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[n_nodes](const boost::shared_ptr&lt;ribi::cmap::Edge&gt; &amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return edge-&gt;GetTo() &gt;= n_nodes || edge-&gt;GetFrom() &gt;= n_nodes;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n_invalid)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;//Test if there are 'two-way' edges, that is, one edge going from A to B<br/>
&nbsp;&nbsp;//and another edge going from B to A<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_edges = edges.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=n_edges; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; &amp; a = edges[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a_from = a-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a_to&nbsp;&nbsp; = a-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=i+1; j!=n_edges; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i != j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &lt; n_edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; &amp; b = edges[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a.get() != b.get() &amp;&amp; "Assume different pointers");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto b_from = b-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto b_to&nbsp;&nbsp; = b-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a_from.get() == b_from.get() &amp;&amp; a_to.get() == b_to.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot have two edges from the same node to the same node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a_from.get() == b_to.get() &amp;&amp; a_to.get() == b_from.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot have two edges from the same node to the same node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; ribi::cmap::ConceptMap::CreateNodes(<br/>
&nbsp;&nbsp;const std::string&amp; question,<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; v;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;question,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::ExamplesFactory::Create(), //No examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;false, //Is not complex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1, //No rated complexity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1, //No rated concreteness<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;//No rated specificity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::CenterNode&gt; center_node = cmap::CenterNodeFactory::Create(concept,0,0);<br/>
&nbsp;&nbsp;assert(center_node);<br/>
&nbsp;&nbsp;v.push_back(center_node);<br/>
&nbsp;&nbsp;std::copy(nodes.begin(),nodes.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;assert(v.size() == nodes.size() + 1);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; ribi::cmap::ConceptMap::CreateSubs() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_nodes.size() &gt;= 1 &amp;&amp; "Concept map must have a focal question");<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; v;<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;ribi::cmap::Node&gt; focal_node: m_nodes)<br/>
&nbsp;&nbsp;//for (int i=0; i!=n_nodes; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(focal_node);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Collect all edges connected top the focal node (which is m_nodes[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; edges;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back(focal_node);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const boost::shared_ptr&lt;ribi::cmap::Edge&gt; focal_edge: m_edges)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (focal_edge-&gt;GetFrom() == focal_node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back(focal_edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(focal_edge-&gt;GetTo() != focal_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back(focal_edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (focal_edge-&gt;GetTo() == focal_node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back(focal_edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(focal_edge-&gt;GetFrom() != focal_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back(focal_edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!nodes.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::cmap::ConceptMap::CanConstruct(nodes,edges) &amp;&amp; "Only construct valid concept maps");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(new ribi::cmap::ConceptMap(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
void ribi::cmap::ConceptMap::DeleteEdge(const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;assert(std::count(m_edges.begin(),m_edges.end(),edge) != 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The edge must exist");<br/>
&nbsp;&nbsp;assert(std::count(m_edges.begin(),m_edges.end(),edge) == 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Every edge is unique");<br/>
&nbsp;&nbsp;const std::size_t n_edges_before = m_edges.size();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Copied from http://www.richelbilderbeek.nl/CppVector.htm<br/>
&nbsp;&nbsp;m_edges.erase(std::remove(m_edges.begin(),m_edges.end(),edge),m_edges.end());<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const std::size_t n_edges_after = m_edges.size();<br/>
&nbsp;&nbsp;assert(n_edges_before - 1 == n_edges_after);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::cmap::ConceptMap::DeleteNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(std::count(m_nodes.begin(),m_nodes.end(),node) == 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Every node is unique");<br/>
&nbsp;&nbsp;const std::size_t n_nodes_before = m_nodes.size();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Delete all edges going to this node<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; to_be_deleted;<br/>
&nbsp;&nbsp;std::copy_if(m_edges.begin(),m_edges.end(),std::back_inserter(to_be_deleted),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[node](boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return edge-&gt;GetFrom() == node || edge-&gt;GetTo() == node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;for (boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge: to_be_deleted)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteEdge(edge);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Delete the node itself<br/>
&nbsp;&nbsp;//Copied from http://www.richelbilderbeek.nl/CppVector.htm<br/>
&nbsp;&nbsp;m_nodes.erase(std::remove(m_nodes.begin(),m_nodes.end(),node),m_nodes.end());<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const std::size_t n_nodes_after = m_nodes.size();<br/>
&nbsp;&nbsp;assert(n_nodes_before - 1 == n_nodes_after);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
<br/>
bool ribi::cmap::ConceptMap::Empty() const<br/>
{<br/>
&nbsp;&nbsp;return m_nodes.empty() &amp;&amp; m_edges.empty();<br/>
}<br/>
<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;const ribi::cmap::Edge&gt; &gt; ribi::cmap::ConceptMap::GetEdges() const<br/>
{<br/>
&nbsp;&nbsp;return AddConst(m_edges);<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;const ribi::cmap::Node&gt; &gt; ribi::cmap::ConceptMap::GetNodes() const<br/>
{<br/>
&nbsp;&nbsp;return AddConst(m_nodes);<br/>
}<br/>
<br/>
const std::string ribi::cmap::ConceptMap::GetQuestion() const<br/>
{<br/>
&nbsp;&nbsp;assert(!m_nodes.empty());<br/>
&nbsp;&nbsp;assert(m_nodes[0]-&gt;GetConcept());<br/>
&nbsp;&nbsp;//A Concept Map CAN have examples at node[0]: when it is a sub-cluster<br/>
&nbsp;&nbsp;//assert(m_nodes[0]-&gt;GetConcept()-&gt;GetExamples().size() == 0);<br/>
&nbsp;&nbsp;return m_nodes[0]-&gt;GetConcept()-&gt;GetName();<br/>
}<br/>
<br/>
bool ribi::cmap::ConceptMap::HasSameContent(<br/>
&nbsp;&nbsp;const ribi::cmap::ConceptMap&amp; lhs,<br/>
&nbsp;&nbsp;const ribi::cmap::ConceptMap&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;if (lhs.GetQuestion() != rhs.GetQuestion())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (lhs.GetEdges().size() != rhs.GetEdges().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (lhs.GetNodes().size() != rhs.GetNodes().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Same Concepts<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt; nodes_lhs = lhs.GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::multiset&lt;boost::shared_ptr&lt;const ribi::cmap::Concept&gt; &gt; concepts_lhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(nodes_lhs.begin(),nodes_lhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::inserter(concepts_lhs,concepts_lhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return node-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt; nodes_rhs = rhs.GetNodes();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::multiset&lt;boost::shared_ptr&lt;const ribi::cmap::Concept&gt; &gt; concepts_rhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(nodes_rhs.begin(),nodes_rhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::inserter(concepts_rhs,concepts_rhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return node-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::mismatch(concepts_lhs.begin(),concepts_lhs.end(),concepts_rhs.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return IsEqual(*a,*b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= std::make_pair(concepts_lhs.end(),concepts_rhs.end()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Same Edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt; edges_lhs = lhs.GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::multiset&lt;boost::shared_ptr&lt;const ribi::cmap::Concept&gt; &gt; concepts_lhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(edges_lhs.begin(),edges_lhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::inserter(concepts_lhs,concepts_lhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt; edges_rhs = rhs.GetEdges();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::multiset&lt;boost::shared_ptr&lt;const ribi::cmap::Concept&gt; &gt; concepts_rhs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(edges_rhs.begin(),edges_rhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::inserter(concepts_rhs,concepts_rhs.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Edge&gt;&amp; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::mismatch(concepts_lhs.begin(),concepts_lhs.end(),concepts_rhs.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return IsEqual(*a,*b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= std::make_pair(concepts_lhs.end(),concepts_rhs.end()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if for each edge a same 'from' and 'to' concept can be found<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::tuple&lt;std::string,std::string,std::string&gt; FakeEdge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::vector&lt;FakeEdge&gt; FakeEdges;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(lhs.GetEdges().size() == rhs.GetEdges().size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FakeEdges v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = lhs.GetEdges().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto from_node = lhs.GetEdges()[i]-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string str_from = from_node-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string str_mid = lhs.GetEdges()[i]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto to_node = lhs.GetEdges()[i]-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string str_to = to_node-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Only if arrow is reversed, reverse the fake edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetEdges()[i]-&gt;HasTailArrow() == true<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetEdges()[i]-&gt;HasHeadArrow() == false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_tuple(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lhs.GetEdges()[i]-&gt;HasTailArrow() == lhs.GetEdges()[i]-&gt;HasHeadArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Two-way or zero-way arrow, add it in both directions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_tuple(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_tuple(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Normal arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_tuple(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(boost::numeric_cast&lt;int&gt;(v.size()) &gt;= sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FakeEdges w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto from_node = rhs.GetEdges()[i]-&gt;GetFrom();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string str_from = from_node-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string str_mid = rhs.GetEdges()[i]-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto to_node = rhs.GetEdges()[i]-&gt;GetTo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string str_to = to_node-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//w.push_back(std::make_tuple(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Only if arrow is reversed, reverse the fake edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rhs.GetEdges()[i]-&gt;HasTailArrow() == true<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rhs.GetEdges()[i]-&gt;HasHeadArrow() == false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(std::make_tuple(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (rhs.GetEdges()[i]-&gt;HasTailArrow() == rhs.GetEdges()[i]-&gt;HasHeadArrow())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Two-way or zero-way arrow, add it in both directions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(std::make_tuple(str_to,str_mid,str_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(std::make_tuple(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Normal arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(std::make_tuple(str_from,str_mid,str_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(static_cast&lt;int&gt;(w.size()) &gt;= sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v.size() != w.size()) return false;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::sort(v.begin(),v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::sort(w.begin(),w.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v != w)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef REALLY_SHOW_ME_THIS_7364894385876473475934758934753<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; "[" &lt;&lt; (i+1) &lt;&lt; "/" &lt;&lt; sz &lt;&lt; "]: ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::get&lt;0&gt;(v[i]) &lt;&lt; "," &lt;&lt; std::get&lt;1&gt;(v[i]) &lt;&lt; "," &lt;&lt; std::get&lt;2&gt;(v[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; ") , ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::get&lt;0&gt;(w[i]) &lt;&lt; "," &lt;&lt; std::get&lt;1&gt;(w[i]) &lt;&lt; "," &lt;&lt; std::get&lt;2&gt;(w[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; ")";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
bool ribi::cmap::ConceptMap::IsValid() const<br/>
{<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;ribi::cmap::Node&gt; node: m_nodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("Node is nullptr");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge: m_edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("Edge is nullptr");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!edge-&gt;GetTo())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("edge-&gt;GetTo() is nullptr");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!edge-&gt;GetFrom())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("edge-&gt;GetFrom() is nullptr");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_nodes.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo()) != 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("edge-&gt;GetTo() points to node not in the concept map");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_nodes.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()) != 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("edge-&gt;GetFrom() points to node not in the concept map");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::cmap::ConceptMap::ToXml(const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; map)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;concept_map&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;nodes&gt;";<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt;&amp; nodes = map-&gt;GetNodes();<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;const cmap::Node&gt; node: nodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; Node::ToXml(node);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/nodes&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;edges&gt;";<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt;&amp; edges = map-&gt;GetEdges();<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;const cmap::Edge&gt; edge: edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; Edge::ToXml(edge,nodes);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/edges&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/concept_map&gt;";<br/>
<br/>
&nbsp;&nbsp;const std::string r = s.str();<br/>
&nbsp;&nbsp;assert(r.size() &gt;= 27);<br/>
&nbsp;&nbsp;assert(r.substr(0,13) == std::string("&lt;concept_map&gt;"));<br/>
&nbsp;&nbsp;assert(r.substr(r.size() - 14,14) == std::string("&lt;/concept_map&gt;"));<br/>
<br/>
&nbsp;&nbsp;return r;<br/>
}<br/>
<br/>
bool ribi::cmap::IsEqual(const ribi::cmap::ConceptMap&amp; lhs, const ribi::cmap::ConceptMap&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;//Compare nodes<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt; lhs_nodes = lhs.GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt; rhs_nodes = rhs.GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (lhs_nodes.size() != rhs_nodes.size()) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_nodes = static_cast&lt;int&gt;(lhs_nodes.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=n_nodes; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsEqual(*lhs_nodes[i],*rhs_nodes[i])) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Compare edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt; lhs_edges = lhs.GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt; rhs_edges = rhs.GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (lhs_edges.size() != rhs_edges.size()) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_edges = static_cast&lt;int&gt;(lhs_edges.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=n_edges; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsEqual(*lhs_edges[i],*rhs_edges[i])) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmap.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmap.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPCONCEPTMAP_H<br/>
#define CONCEPTMAPCONCEPTMAP_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct ConceptMapFactory;<br/>
<br/>
struct ConceptMap<br/>
{<br/>
&nbsp;&nbsp;ConceptMap(const ConceptMap&amp;) = delete;<br/>
&nbsp;&nbsp;ConceptMap&amp; operator=(const ConceptMap&amp;) = delete;<br/>
<br/>
&nbsp;&nbsp;//Add an Edge, assumes that the nodes it points to are in the concept map<br/>
&nbsp;&nbsp;void AddEdge(const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge);<br/>
<br/>
&nbsp;&nbsp;//Add a node, always works<br/>
&nbsp;&nbsp;void AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node);<br/>
<br/>
&nbsp;&nbsp;///Test if this ConceptMap can be constructed successfully<br/>
&nbsp;&nbsp;static bool CanConstruct(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt;&amp; edges);<br/>
<br/>
&nbsp;&nbsp;///Create all sub-conceptmaps<br/>
&nbsp;&nbsp;///Note that CreateSubs()[0] is the concept map around the focal question<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; CreateSubs() const;<br/>
<br/>
&nbsp;&nbsp;///Delete an edge<br/>
&nbsp;&nbsp;void DeleteEdge(const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge);<br/>
<br/>
&nbsp;&nbsp;///Delete a node and all the edges connected to it<br/>
&nbsp;&nbsp;void DeleteNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node);<br/>
<br/>
&nbsp;&nbsp;///Check if the ConceptMap is empty<br/>
&nbsp;&nbsp;bool Empty() const;<br/>
<br/>
&nbsp;&nbsp;///Get the edges<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt;&nbsp;&nbsp;GetEdges() const;<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Edge&gt; &gt;&amp; GetEdges() { return m_edges; }<br/>
<br/>
&nbsp;&nbsp;///Get the nodes<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt;&nbsp;&nbsp;GetNodes() const;<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&gt; &gt;&amp; GetNodes() { return m_nodes; }<br/>
<br/>
&nbsp;&nbsp;///Get the focus question<br/>
&nbsp;&nbsp;const std::string GetQuestion() const;<br/>
<br/>
&nbsp;&nbsp;///Similar to operator==, except that the GUI member variables aren't checked for equality<br/>
&nbsp;&nbsp;static bool HasSameContent(const ribi::cmap::ConceptMap&amp; lhs, const ribi::cmap::ConceptMap&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Check if there are no nulls in the edges and nodes<br/>
&nbsp;&nbsp;bool IsValid() const;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a ConceptMap from an XML std::string<br/>
&nbsp;&nbsp;static const std::string ToXml(const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; c);<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///The edges<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; m_edges;<br/>
<br/>
&nbsp;&nbsp;///The nodes<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; m_nodes;<br/>
<br/>
&nbsp;&nbsp;///Prepend the question as a first node, before adding the supplied nodes<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; CreateNodes(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; question,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Block constructor, except for the friend ConceptMapFactory<br/>
&nbsp;&nbsp;ConceptMap(const std::string&amp; question);<br/>
&nbsp;&nbsp;//Nodes[0] must be the focal question<br/>
&nbsp;&nbsp;ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt;&amp; edges = {});<br/>
&nbsp;&nbsp;///Create a concept map from a cluster<br/>
&nbsp;&nbsp;#ifdef TO_ADD_TO_PROJECTBRAINWEAVER<br/>
&nbsp;&nbsp;ConceptMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; question,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Cluster&gt;&amp; cluster);<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;friend ConceptMapFactory;<br/>
<br/>
&nbsp;&nbsp;///Block destructor, except for the friend boost::checked_delete<br/>
&nbsp;&nbsp;~ConceptMap() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(ConceptMap* x);<br/>
};<br/>
<br/>
bool IsEqual(const ribi::cmap::ConceptMap&amp; lhs, const ribi::cmap::ConceptMap&amp; rhs);<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPCONCEPTMAP_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapcenternode.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapcenternode.cpp" border = "1"><tr><td><code>
#include "conceptmapcenternode.h"<br/>
<br/>
ribi::cmap::CenterNode::CenterNode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y)<br/>
&nbsp;&nbsp;: Node(concept,x,y)<br/>
{<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapcenternode.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapcenternode.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPCENTERNODE_H<br/>
#define CONCEPTMAPCENTERNODE_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
struct CenterNodeFactory;<br/>
<br/>
///The focal question of a ConceptMap<br/>
///In a full ConceptMap, GetNodes()[0] results in finding a CenterNode<br/>
///In a sub-ConceptMap, GetNodes()[0] will be a regular Node<br/>
struct CenterNode : public cmap::Node<br/>
{<br/>
&nbsp;&nbsp;///Block destructor, except for the friend boost::checked_delete<br/>
&nbsp;&nbsp;~CenterNode() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(CenterNode* x);<br/>
<br/>
&nbsp;&nbsp;///Block construction, except for NodeFactory<br/>
&nbsp;&nbsp;friend CenterNodeFactory;<br/>
&nbsp;&nbsp;CenterNode() = delete;<br/>
&nbsp;&nbsp;explicit CenterNode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double x = 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y = 0.0);<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPCENTERNODE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapcenternodefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapcenternodefactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "conceptmapcenternodefactory.h"<br/>
#include "conceptmapcenternode.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::CenterNode&gt; ribi::cmap::CenterNodeFactory::Create(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;const double x,<br/>
&nbsp;&nbsp;const double y)<br/>
{<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;cmap::CenterNode&gt; node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new cmap::CenterNode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept,x,y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(IsEqual(*concept,*node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(node-&gt;GetX() == x);<br/>
&nbsp;&nbsp;assert(node-&gt;GetY() == y);<br/>
&nbsp;&nbsp;return node;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::CenterNode&gt; ribi::cmap::CenterNodeFactory::Create(<br/>
&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; examples,<br/>
&nbsp;&nbsp;const double x,<br/>
&nbsp;&nbsp;const double y)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;cmap::CenterNode&gt; node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new CenterNode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConceptFactory::Create(name,examples),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(node-&gt;GetX() == x);<br/>
&nbsp;&nbsp;assert(node-&gt;GetY() == y);<br/>
&nbsp;&nbsp;return node;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
const boost::shared_ptr&lt;ribi::cmap::CenterNode&gt; ribi::cmap::CenterNodeFactory::DeepCopy(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::CenterNode&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; new_concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= ConceptFactory::DeepCopy(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(new_concept);<br/>
&nbsp;&nbsp;assert(IsEqual(*node-&gt;GetConcept(),*new_concept));<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::CenterNode&gt; new_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Create(new_concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(new_node);<br/>
&nbsp;&nbsp;assert(new_node-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(IsEqual(*node,*new_node));<br/>
&nbsp;&nbsp;return new_node;<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapcenternodefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapcenternodefactory.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPCENTERNODEFACTORY_H<br/>
#define CONCEPTMAPCENTERNODEFACTORY_H<br/>
<br/>
#include &lt;string&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "conceptmapfwd.h"<br/>
#include "conceptmapcompetency.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct CenterNodeFactory<br/>
{<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;cmap::CenterNode&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double x = 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y = 0.0);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;cmap::CenterNode&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; examples = {},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double x = 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y = 0.0);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;cmap::CenterNode&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::CenterNode&gt;&amp; node);<br/>
&nbsp;&nbsp;#endif<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPCENTERNODEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapcompetency.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapcompetency.cpp" border = "1"><tr><td><code>
#include "conceptmapcompetency.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
const std::vector&lt;ribi::cmap::Competency&gt; ribi::cmap::GetAllCompetencies()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::uninitialized,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::profession,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::organisations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::social_surroundings,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::target_audience,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::ti_knowledge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::prof_growth,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Competency::misc<br/>
&nbsp;&nbsp;};<br/>
<br/>
}<br/>
<br/>
const std::string ribi::cmap::CompetencyToDutchStr(const ribi::cmap::Competency type)<br/>
{<br/>
&nbsp;&nbsp;switch (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::uninitialized: return "[Ongeinitialiseerd]";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::profession: return "Kennis van het beroepsdomein";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::organisations: return "Kennis van de organisatie";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::social_surroundings: return "Kennis van de sociale omgeving";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::target_audience: return "Kennis van de doelgroep";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::ti_knowledge: return "Technisch instrumentele kennis";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::prof_growth: return "Kennis van de eigen persoon";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ribi::cmap::Competency::misc: return "Overige";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Unknown ribi::cmap::Competency");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapcompetency.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapcompetency.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPCOMPETENCY_H<br/>
#define CONCEPTMAPCOMPETENCY_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
enum class Competency<br/>
{<br/>
&nbsp;&nbsp;uninitialized = 0,&nbsp;&nbsp; //Not yet set<br/>
&nbsp;&nbsp;profession,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//NL: 'Beroepsdomein'<br/>
&nbsp;&nbsp;organisations,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //NL: 'Organisaties'<br/>
&nbsp;&nbsp;social_surroundings, //NL: 'Sociale omgeving'<br/>
&nbsp;&nbsp;target_audience,&nbsp;&nbsp;&nbsp;&nbsp; //NL 'Doelgroep'<br/>
&nbsp;&nbsp;ti_knowledge,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//'Technical Instrumental', NL: 'Technische instrumentele kennis'<br/>
&nbsp;&nbsp;prof_growth,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Professionele groei<br/>
&nbsp;&nbsp;misc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //NL: 'Overig'<br/>
};<br/>
<br/>
const std::vector&lt;Competency&gt; GetAllCompetencies();<br/>
<br/>
const std::string CompetencyToDutchStr(const Competency competency);<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPCOMPETENCY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapconcept.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapconcept.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapconcept.h"<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapcompetency.h"<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "conceptmapexamplesfactory.h"<br/>
#include "trace.h"<br/>
#include "xml.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::Concept::Concept(<br/>
&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;const bool is_complex,<br/>
&nbsp;&nbsp;const int rating_complexity,<br/>
&nbsp;&nbsp;const int rating_concreteness,<br/>
&nbsp;&nbsp;const int rating_specificity)<br/>
&nbsp;&nbsp;: m_signal_examples_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_name_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_rating_complexity_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_rating_concreteness_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_rating_specificity_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples{examples},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_complex{is_complex},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_name{name},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_complexity{rating_complexity},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_concreteness{rating_concreteness},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_specificity{rating_specificity}<br/>
<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;assert(m_examples);<br/>
&nbsp;&nbsp;assert(m_rating_complexity&nbsp;&nbsp; &gt;= -1);<br/>
&nbsp;&nbsp;assert(m_rating_complexity&nbsp;&nbsp; &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;assert(m_rating_concreteness &gt;= -1);<br/>
&nbsp;&nbsp;assert(m_rating_concreteness &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;assert(m_rating_specificity&nbsp;&nbsp;&gt;= -1);<br/>
&nbsp;&nbsp;assert(m_rating_specificity&nbsp;&nbsp;&lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Concept&gt; ribi::cmap::Concept::FromXml(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;assert(s.size() &gt;= 19);<br/>
&nbsp;&nbsp;assert(s.substr(0,9) == std::string("&lt;concept&gt;"));<br/>
&nbsp;&nbsp;assert(s.substr(s.size() - 10,10) == std::string("&lt;/concept&gt;"));<br/>
<br/>
&nbsp;&nbsp;std::string name;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Examples&gt; examples;<br/>
&nbsp;&nbsp;bool is_complex = false;<br/>
&nbsp;&nbsp;int rating_complexity&nbsp;&nbsp;&nbsp;&nbsp;= -2; //Not even unrated (which has -1 as its value)<br/>
&nbsp;&nbsp;int rating_concreteness&nbsp;&nbsp;= -2; //Not even unrated (which has -1 as its value)<br/>
&nbsp;&nbsp;int rating_specificity&nbsp;&nbsp; = -2; //Not even unrated (which has -1 as its value)<br/>
&nbsp;&nbsp;//m_name<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;name&gt;.*&lt;/name&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name = ribi::xml::StripXmlTag(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_examples<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;examples&gt;.*&lt;/examples&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1 &amp;&amp; "&lt;examples&gt;*.&lt;/examples&gt; must be present once in a Concept");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;examples = Examples::FromXml(v[0]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//m_is_complex<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;concept_is_complex&gt;.*&lt;/concept_is_complex&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1 &amp;&amp; "(&lt;is_complex&gt;.*&lt;/is_complex&gt;) must be present once per Concept");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_complex = boost::lexical_cast&lt;bool&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//m_rating_complexity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;complexity&gt;.*&lt;/complexity&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1 &amp;&amp; "(&lt;complexity&gt;.*&lt;/complexity&gt;) must be present once per Concept");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_complexity = boost::lexical_cast&lt;int&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rating_complexity &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rating_complexity &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_rating_concreteness<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;concreteness&gt;.*&lt;/concreteness&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_concreteness = boost::lexical_cast&lt;int&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_rating_specificity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;specificity&gt;.*&lt;/specificity&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_specificity = boost::lexical_cast&lt;int&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return ConceptFactory::Create(name,examples,is_complex,rating_complexity,rating_concreteness,rating_specificity);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;const ribi::cmap::Examples&gt; ribi::cmap::Concept::GetExamples() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_examples);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt; p(m_examples);<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
void ribi::cmap::Concept::SetExamples(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; examples)<br/>
{<br/>
&nbsp;&nbsp;if (examples != m_examples)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples = examples;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_examples_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Concept::SetName(const std::string&amp; name)<br/>
{<br/>
&nbsp;&nbsp;assert(this);<br/>
&nbsp;&nbsp;assert(this-&gt;GetExamples());<br/>
&nbsp;&nbsp;if (name != m_name)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_name = name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_name_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Concept::SetRatingComplexity(const int rating_complexity)<br/>
{<br/>
&nbsp;&nbsp;assert(rating_complexity &gt;= -1);<br/>
&nbsp;&nbsp;assert(rating_complexity &lt;=&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;if (m_rating_complexity != rating_complexity)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_complexity = rating_complexity;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_rating_complexity &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_rating_complexity &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_rating_complexity_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Concept::SetRatingConcreteness(const int rating_concreteness)<br/>
{<br/>
&nbsp;&nbsp;if (m_rating_concreteness != rating_concreteness)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_concreteness = rating_concreteness;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_rating_concreteness &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_rating_concreteness &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_rating_concreteness_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Concept::SetRatingSpecificity(const int rating_specificity)<br/>
{<br/>
&nbsp;&nbsp;if (m_rating_specificity != rating_specificity)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rating_specificity = rating_specificity;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_rating_specificity &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_rating_specificity &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_rating_specificity_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::string ribi::cmap::Concept::ToXml(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; &amp;c)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;concept&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;name&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetName();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/name&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; Examples::ToXml(c-&gt;GetExamples());<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;concept_is_complex&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetIsComplex();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/concept_is_complex&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;complexity&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetRatingComplexity();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/complexity&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;concreteness&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetRatingConcreteness();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/concreteness&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;specificity&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetRatingSpecificity();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/specificity&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/concept&gt;";<br/>
&nbsp;&nbsp;const std::string r = s.str();<br/>
<br/>
&nbsp;&nbsp;assert(r.size() &gt;= 19);<br/>
&nbsp;&nbsp;assert(r.substr(0,9) == std::string("&lt;concept&gt;"));<br/>
&nbsp;&nbsp;assert(r.substr(r.size() - 10,10) == std::string("&lt;/concept&gt;"));<br/>
&nbsp;&nbsp;return r;<br/>
}<br/>
<br/>
bool ribi::cmap::IsEqual(const ribi::cmap::Concept&amp; lhs, const ribi::cmap::Concept&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt; lhs_examples = lhs.GetExamples();<br/>
&nbsp;&nbsp;assert(lhs_examples);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt; rhs_examples = rhs.GetExamples();<br/>
&nbsp;&nbsp;assert(rhs_examples);<br/>
&nbsp;&nbsp;return IsEqual(*lhs_examples,*rhs_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetIsComplex()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== rhs.GetIsComplex()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetName()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == rhs.GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetRatingComplexity()&nbsp;&nbsp; == rhs.GetRatingComplexity()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetRatingConcreteness() == rhs.GetRatingConcreteness()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetRatingSpecificity()&nbsp;&nbsp;== rhs.GetRatingSpecificity();<br/>
}<br/>
<br/>
bool ribi::cmap::operator&lt;(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs); assert(rhs);<br/>
&nbsp;&nbsp;if (lhs-&gt;GetName() &lt; rhs-&gt;GetName()) return true;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetName() &gt; rhs-&gt;GetName()) return false;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetExamples() &lt; rhs-&gt;GetExamples()) return true;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetExamples() != rhs-&gt;GetExamples()) return false;<br/>
&nbsp;&nbsp;assert(lhs-&gt;GetExamples() == rhs-&gt;GetExamples());<br/>
&nbsp;&nbsp;if (lhs-&gt;GetRatingComplexity() &lt; rhs-&gt;GetRatingComplexity()) return true;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetRatingComplexity() &gt; rhs-&gt;GetRatingComplexity()) return false;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetRatingConcreteness() &lt; rhs-&gt;GetRatingConcreteness()) return true;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetRatingConcreteness() &gt; rhs-&gt;GetRatingConcreteness()) return false;<br/>
&nbsp;&nbsp;return lhs-&gt;GetRatingSpecificity() &lt; rhs-&gt;GetRatingSpecificity();<br/>
}<br/>
<br/>
bool ribi::cmap::operator&lt;(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs); assert(rhs);<br/>
&nbsp;&nbsp;return boost::shared_ptr&lt;const ribi::cmap::Concept&gt;(lhs) &lt; boost::shared_ptr&lt;const ribi::cmap::Concept&gt;(rhs);<br/>
}<br/>
<br/>
bool ribi::cmap::operator&lt;(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs); assert(rhs);<br/>
&nbsp;&nbsp;return boost::shared_ptr&lt;const ribi::cmap::Concept&gt;(lhs) &lt; boost::shared_ptr&lt;const ribi::cmap::Concept&gt;(rhs);<br/>
}<br/>
<br/>
bool ribi::cmap::operator&lt;(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs); assert(rhs);<br/>
&nbsp;&nbsp;return boost::shared_ptr&lt;const ribi::cmap::Concept&gt;(lhs) &lt; boost::shared_ptr&lt;const ribi::cmap::Concept&gt;(rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapconcept.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapconcept.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPCONCEPT_H<br/>
#define CONCEPTMAPCONCEPT_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include &lt;QRegExp&gt;<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct ConceptFactory;<br/>
<br/>
///A Concept is a class that has a name and examples<br/>
struct Concept<br/>
{<br/>
&nbsp;&nbsp;///Block copying, as signals cannot be copied<br/>
&nbsp;&nbsp;Concept(const ribi::cmap::Concept&amp; other) = delete;<br/>
&nbsp;&nbsp;Concept&amp; operator=(const ribi::cmap::Concept&amp; other) = delete;<br/>
<br/>
&nbsp;&nbsp;///Read concept from a std::string read from file<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Concept&gt; FromXml(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Get the examples of the concept, e.g. 'Plato', 'Aristotle'<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt; GetExamples() const;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; GetExamples() { return m_examples; }<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated the name of this concept as being an addition to the complexity?<br/>
&nbsp;&nbsp;///This is something different than m_rating_complexity:<br/>
&nbsp;&nbsp;///m_is_complex can be used to help the assessor determine a m_rating_complexity,<br/>
&nbsp;&nbsp;///but m_rating_complexity is the final and complete rating<br/>
&nbsp;&nbsp;bool GetIsComplex() const { return m_is_complex; }<br/>
<br/>
&nbsp;&nbsp;///Get the name of the concept, e.g. 'Philosphy'<br/>
&nbsp;&nbsp;const std::string&amp; GetName() const { return m_name; }<br/>
<br/>
&nbsp;&nbsp;///Get the rating of this Concept for complexity<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;int GetRatingComplexity() const { return m_rating_complexity; }<br/>
<br/>
&nbsp;&nbsp;///Get the rating of this Concept for concreteness<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;int GetRatingConcreteness() const { return m_rating_concreteness; }<br/>
<br/>
&nbsp;&nbsp;///Get the rating of this Concept for specificity<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;int GetRatingSpecificity() const { return m_rating_specificity; }<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated the name of this concept as being an addition to the complexity?<br/>
&nbsp;&nbsp;///This is something different than m_rating_complexity:<br/>
&nbsp;&nbsp;///m_is_complex can be used to help the assessor determine a m_rating_complexity,<br/>
&nbsp;&nbsp;///but m_rating_complexity is the final and complete rating<br/>
&nbsp;&nbsp;void SetIsComplex(const bool is_complex) { m_is_complex = is_complex; }<br/>
<br/>
&nbsp;&nbsp;///Emitted when the examples are changed<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void(const ribi::cmap::Concept*)&gt; m_signal_examples_changed;<br/>
<br/>
&nbsp;&nbsp;///Emitted when the name is changed<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void(const ribi::cmap::Concept*)&gt; m_signal_name_changed;<br/>
<br/>
&nbsp;&nbsp;///Emitted when the rating of the complexity is changed<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void(const ribi::cmap::Concept*)&gt; m_signal_rating_complexity_changed;<br/>
<br/>
&nbsp;&nbsp;///Emitted when the rating of the complexity is changed<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void(const ribi::cmap::Concept*)&gt; m_signal_rating_concreteness_changed;<br/>
<br/>
&nbsp;&nbsp;///Emitted when the rating of the specificity is changed<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void(const ribi::cmap::Concept*)&gt; m_signal_rating_specificity_changed;<br/>
<br/>
&nbsp;&nbsp;///Convert Concept to a std::string to write to file<br/>
&nbsp;&nbsp;static const std::string ToXml(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; t);<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;friend class QtConceptMapDialog;<br/>
&nbsp;&nbsp;friend class QtStudentMenuDialog;<br/>
&nbsp;&nbsp;friend class QtTestConceptItemDialog;<br/>
&nbsp;&nbsp;friend class QtTestConceptMapEditWidgetDialog;<br/>
&nbsp;&nbsp;friend class QtTestConceptMapRateWidgetDialog;<br/>
&nbsp;&nbsp;friend class QtTestEdgeItemDialog;<br/>
&nbsp;&nbsp;friend class QtTestNodeItemDialog;<br/>
&nbsp;&nbsp;friend class QtEdgeItem;<br/>
&nbsp;&nbsp;friend class QtNodeItem;<br/>
&nbsp;&nbsp;friend class QtConceptEditDialog;<br/>
&nbsp;&nbsp;friend class QtRateConceptDialog;<br/>
&nbsp;&nbsp;friend class QtRateExamplesDialog;<br/>
&nbsp;&nbsp;///Set the examples<br/>
&nbsp;&nbsp;void SetExamples(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; examples);<br/>
<br/>
&nbsp;&nbsp;///Set the name<br/>
&nbsp;&nbsp;void SetName(const std::string&amp; name);<br/>
<br/>
&nbsp;&nbsp;///Set the rating of this Concept for complexity<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;void SetRatingComplexity(const int rating_complexity);<br/>
<br/>
&nbsp;&nbsp;///Set the rating of this Concept for concreteness<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;void SetRatingConcreteness(const int rating_concreteness);<br/>
<br/>
&nbsp;&nbsp;///Set the rating of this Concept for specificity<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;void SetRatingSpecificity(const int rating_specificity);<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;///Examples of the concept, e.g. 'Plato', 'Aristotle'<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Examples&gt; m_examples;<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated the name of this concept as being an addition to the complexity?<br/>
&nbsp;&nbsp;///This is something different than m_rating_complexity:<br/>
&nbsp;&nbsp;///m_is_complex can be used to help the assessor determine a m_rating_complexity,<br/>
&nbsp;&nbsp;///but m_rating_complexity is the final and complete rating<br/>
&nbsp;&nbsp;bool m_is_complex;<br/>
<br/>
&nbsp;&nbsp;///The name of the concept, e.g. 'Philosphy'<br/>
&nbsp;&nbsp;std::string m_name;<br/>
<br/>
&nbsp;&nbsp;///The rating of this Concept for complexity<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;int m_rating_complexity;<br/>
<br/>
&nbsp;&nbsp;///The rating of this Concept for concreteness<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;int m_rating_concreteness;<br/>
<br/>
&nbsp;&nbsp;///The rating of this Concept for specificity<br/>
&nbsp;&nbsp;///-1: not rated, 0: lowest, 2: highest<br/>
&nbsp;&nbsp;int m_rating_specificity;<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
<br/>
&nbsp;&nbsp;///Use checked_delete for destructor<br/>
&nbsp;&nbsp;~Concept() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(ribi::cmap::Concept* x);<br/>
<br/>
&nbsp;&nbsp;///Let only ConceptFactory construct Concepts<br/>
&nbsp;&nbsp;Concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_complex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_specificity);<br/>
&nbsp;&nbsp;friend ConceptFactory;<br/>
<br/>
};<br/>
<br/>
<br/>
bool IsEqual(const ribi::cmap::Concept&amp; lhs, const ribi::cmap::Concept&amp; rhs);<br/>
<br/>
///Two Concept instances are ordered as follows:<br/>
///(1) Alphabetically on the name<br/>
///(2) (if the names are equal) On their Examples<br/>
bool operator&lt;(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs);<br/>
<br/>
bool operator&lt;=(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&lt;=(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&lt;=(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&lt;=(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; lhs, const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; rhs) = delete;<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPCONCEPT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapconceptfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapconceptfactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapconceptfactory.h"<br/>
<br/>
#include "conceptmapcompetency.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "conceptmapexamplefactory.h"<br/>
#include "conceptmapexamplesfactory.h"<br/>
#pragma GCC diagnostic push<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Concept&gt; ribi::cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;const bool is_complex,<br/>
&nbsp;&nbsp;const int rating_complexity,<br/>
&nbsp;&nbsp;const int rating_concreteness,<br/>
&nbsp;&nbsp;const int rating_specificity)<br/>
{<br/>
&nbsp;&nbsp;assert(examples);<br/>
&nbsp;&nbsp;assert(rating_complexity &gt;= -1);<br/>
&nbsp;&nbsp;assert(rating_complexity &lt;=&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_complex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating_specificity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;return concept;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
const boost::shared_ptr&lt;ribi::cmap::Concept&gt; ribi::cmap::ConceptFactory::DeepCopy(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; concept)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= ExamplesFactory::Create(concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;assert(examples);<br/>
&nbsp;&nbsp;assert(IsEqual(*examples,*concept-&gt;GetExamples()));<br/>
<br/>
&nbsp;&nbsp;assert(concept-&gt;GetRatingComplexity() &gt;= -1);<br/>
&nbsp;&nbsp;assert(concept-&gt;GetRatingComplexity() &lt;=&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetName(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetIsComplex(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingComplexity(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingConcreteness(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept-&gt;GetRatingSpecificity());<br/>
&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;assert(q-&gt;GetExamples());<br/>
&nbsp;&nbsp;assert(IsEqual(*concept,*q));<br/>
&nbsp;&nbsp;return q;<br/>
}<br/>
#endif<br/>
<br/>
//Do not create this version: it will lead to ambiguities<br/>
//static const boost::shared_ptr&lt;ribi::cmap::Concept&gt; ribi::cmap::ConceptFactory::Create(<br/>
//&nbsp;&nbsp;const std::string&amp; name,<br/>
//&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt;&amp; examples)<br/>
//{<br/>
//&nbsp;&nbsp;return Create(name,ExamplesFactory::Create(examples));<br/>
//}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Concept&gt; ribi::cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; v,<br/>
&nbsp;&nbsp;const bool is_complex,<br/>
&nbsp;&nbsp;const int rating_complexity,<br/>
&nbsp;&nbsp;const int rating_concreteness,<br/>
&nbsp;&nbsp;const int rating_specificity)<br/>
{<br/>
&nbsp;&nbsp;assert(rating_complexity &gt;= -1);<br/>
&nbsp;&nbsp;assert(rating_complexity &lt;=&nbsp;&nbsp;2);<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const std::pair&lt;std::string,Competency&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ExampleFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.first,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= ExamplesFactory::Create(w);<br/>
&nbsp;&nbsp;assert(examples);<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_complex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rating_specificity);<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;return concept;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Concept&gt; &gt; ribi::cmap::ConceptFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Concept&gt; &gt; v(6);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; examples = ExamplesFactory::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = Create("Concept without examples", examples, false, 0, 1, 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] = p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = Create("Concept with one example", { { "Only example", cmap::Competency::profession } }, 1, 2, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] = p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = Create("Concept with two examples", { { "First example", cmap::Competency::organisations }, { "Second example", cmap::Competency::social_surroundings } }, 2, 0, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[2] = p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = Create("Concept with three examples", { { "Example 1 of 3", cmap::Competency::target_audience }, { "Example 2 of 3", cmap::Competency::ti_knowledge }, { "Example 3 of 3", cmap::Competency::prof_growth } }, 0, 1, 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[3] = p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = Create("Concept with four Roman examples", { { "Example I/IV", cmap::Competency::misc }, { "Example II/IV", cmap::Competency::uninitialized }, { "Example III/IV", cmap::Competency::profession }, { "Example III/IV", cmap::Competency::social_surroundings } }, 1, 2, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[4] = p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Very long multi-line concept with four Roman examples that also each span multiple lines, that is, eighty characters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "Example I/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::misc", cmap::Competency::misc },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "Example II/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::uninitialized", cmap::Competency::uninitialized },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "Example III/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::profession", cmap::Competency::profession },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "Example III/IV, spanning multiple lines (that is, having at least eight characters) and is rated as cmap::Competency::social_surroundings", cmap::Competency::social_surroundings }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 1, 2, 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &gt;= -1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetRatingComplexity() &lt;=&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[5] = p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(std::count_if(v.begin(),v.end(),[](const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; p) { return !p; } ) == 0); //FIX 2012-01-02<br/>
&nbsp;&nbsp;//assert(std::all_of(v.begin(),v.end(),[](const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; p) { return p; } ));<br/>
&nbsp;&nbsp;assert(v[0]-&gt;GetExamples());<br/>
<br/>
&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;//Version below appears to work differently in cross compiler<br/>
&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept without examples", ExamplesFactory::Create(), 0, 1, 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with one example", { { "Only example", cmap::Competency::profession } }, 1, 2, 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with two examples", { { "First example", cmap::Competency::organisations }, { "Second example", cmap::Competency::social_surroundings } }, 2, 0, 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with three examples", { { "Example 1 of 3", cmap::Competency::target_audience }, { "Example 2 of 3", cmap::Competency::ti_knowledge }, { "Example 3 of 3", cmap::Competency::prof_growth } }, 0, 1, 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create("Concept with four Roman examples", { { "Example I/IV", cmap::Competency::misc }, { "Example II/IV", cmap::Competency::uninitialized }, { "Example III/IV", cmap::Competency::profession }, { "Example III/IV", cmap::Competency::social_surroundings } }, 1, 2, 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}; //Double braces not needed in future GCC version<br/>
&nbsp;&nbsp;*/<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapconceptfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapconceptfactory.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPCONCEPTFACTORY_H<br/>
#define CONCEPTMAPCONCEPTFACTORY_H<br/>
<br/>
#include &lt;array&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/array.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "conceptmapcompetency.h"<br/>
<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///Creates ribi::cmap::Concepts<br/>
struct ConceptFactory<br/>
{<br/>
&nbsp;&nbsp;//Default and complete Create method<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Concept&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; examples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_complex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_concreteness,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_specificity);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Concept&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; name = "...", //2013-09-18<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; examples = {},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_complex = true,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_complexity = -1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_concreteness = -1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int rating_specificity = -1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Like a Concept deep-copy constructor<br/>
&nbsp;&nbsp;///DeepCopy is only used for debugging<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Concept&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; concept);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Obtain some testing concepts<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Concept&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPCONCEPTFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapedge.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapedge.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapedge.h"<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;QRegExp&gt;<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::Edge::Edge(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; &amp; concept,<br/>
&nbsp;&nbsp;const double concept_x,<br/>
&nbsp;&nbsp;const double concept_y,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;const bool tail_arrow,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to,<br/>
&nbsp;&nbsp;const bool head_arrow)<br/>
&nbsp;&nbsp;: m_signal_edge_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept(concept),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from(from),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head_arrow(head_arrow),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail_arrow(tail_arrow),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to(to),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(concept_x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(concept_y)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;assert(m_concept);<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;//Subscribe to all Concept signals to re-emit m_signal_edge_changed<br/>
&nbsp;&nbsp;this-&gt;m_concept-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));<br/>
<br/>
&nbsp;&nbsp;this-&gt;m_concept-&gt;m_signal_examples_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));<br/>
<br/>
&nbsp;&nbsp;this-&gt;m_concept-&gt;m_signal_rating_complexity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));<br/>
<br/>
&nbsp;&nbsp;this-&gt;m_concept-&gt;m_signal_rating_concreteness_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));<br/>
<br/>
&nbsp;&nbsp;this-&gt;m_concept-&gt;m_signal_rating_specificity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::Edge::EmitSignalEdgeChanged,this));<br/>
}<br/>
<br/>
void ribi::cmap::Edge::EmitSignalEdgeChanged()<br/>
{<br/>
&nbsp;&nbsp;m_signal_edge_changed(this);<br/>
}<br/>
<br/>
void ribi::cmap::Edge::SetFrom(const boost::shared_ptr&lt;ribi::cmap::Node&gt; from)<br/>
{<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;if (m_from != from)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from = from;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_edge_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Edge::SetHeadArrow(const bool has_head_arrow)<br/>
{<br/>
&nbsp;&nbsp;if (m_head_arrow != has_head_arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head_arrow = has_head_arrow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_edge_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Edge::SetTailArrow(const bool has_tail_arrow)<br/>
{<br/>
&nbsp;&nbsp;if (m_tail_arrow != has_tail_arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail_arrow = has_tail_arrow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_edge_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Edge::SetTo(const boost::shared_ptr&lt;ribi::cmap::Node&gt; to)<br/>
{<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;if (m_to != to)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to = to;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_edge_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Edge::SetX(const double x)<br/>
{<br/>
&nbsp;&nbsp;if (m_x != x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x = x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_edge_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Edge::SetY(const double y)<br/>
{<br/>
&nbsp;&nbsp;if (m_y != y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y = y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_edge_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::Edge::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test member variables<br/>
&nbsp;&nbsp;TRACE("Started ribi::cmap::Edge::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto nodes = Node::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(nodes.size() &gt;= 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto node_from = nodes[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto node_to&nbsp;&nbsp; = nodes[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const boost::shared_ptr&lt;const cmap::Edge&gt;&amp; edge: EdgeFactory::GetTests(node_from,node_to))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test copy constructor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Edge&gt; c = cmap::EdgeFactory::DeepCopy(edge,node_from,node_to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*edge,*c)); assert(IsEqual(*c,*edge));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c-&gt;GetFrom(),*node_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c-&gt;GetFrom(),*nodes[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c-&gt;GetTo(),*node_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c-&gt;GetTo(),*nodes[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ToXml(c,AddConst(nodes));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; d = cmap::EdgeFactory::FromXml(s,nodes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsEqual(*c,*d))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(ToXml(c,AddConst(nodes)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(ToXml(d,AddConst(nodes)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d)); //HIERO<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Edge::Test finished successfully");<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::cmap::Edge::ToXml(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Edge&gt;&amp; edge,<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt;&amp; nodes)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;edge&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; Concept::ToXml(edge-&gt;GetConcept());<br/>
<br/>
&nbsp;&nbsp;const auto from_iter = std::find(nodes.begin(),nodes.end(),edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;const auto to_iter = std::find(nodes.begin(),nodes.end(),edge-&gt;GetTo());<br/>
&nbsp;&nbsp;assert(from_iter != nodes.end());<br/>
&nbsp;&nbsp;assert(to_iter != nodes.end());<br/>
&nbsp;&nbsp;const int from_index = std::distance(nodes.begin(),from_iter);<br/>
&nbsp;&nbsp;const int to_index = std::distance(nodes.begin(),to_iter);<br/>
&nbsp;&nbsp;assert(from_index &gt;= 0);<br/>
&nbsp;&nbsp;assert(from_index &lt; boost::numeric_cast&lt;int&gt;(nodes.size()));<br/>
&nbsp;&nbsp;assert(to_index &gt;= 0);<br/>
&nbsp;&nbsp;assert(to_index &lt; boost::numeric_cast&lt;int&gt;(nodes.size()));<br/>
&nbsp;&nbsp;assert(from_index != to_index);<br/>
<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;from&gt;" &lt;&lt; from_index &lt;&lt; "&lt;/from&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;head_arrow&gt;" &lt;&lt; edge-&gt;HasHeadArrow() &lt;&lt; "&lt;/head_arrow&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;tail_arrow&gt;" &lt;&lt; edge-&gt;HasTailArrow() &lt;&lt; "&lt;/tail_arrow&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;to&gt;" &lt;&lt; to_index &lt;&lt; "&lt;/to&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;x&gt;" &lt;&lt; edge-&gt;GetX() &lt;&lt; "&lt;/x&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;y&gt;" &lt;&lt; edge-&gt;GetY() &lt;&lt; "&lt;/y&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/edge&gt;";<br/>
<br/>
&nbsp;&nbsp;const std::string r = s.str();<br/>
&nbsp;&nbsp;assert(r.size() &gt;= 13);<br/>
&nbsp;&nbsp;assert(r.substr(0,6) == std::string("&lt;edge&gt;"));<br/>
&nbsp;&nbsp;assert(r.substr(r.size() - 7,7) == std::string("&lt;/edge&gt;"));<br/>
<br/>
&nbsp;&nbsp;return r;<br/>
}<br/>
<br/>
bool ribi::cmap::IsEqual(const ribi::cmap::Edge&amp; lhs, const ribi::cmap::Edge&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs.GetConcept()); assert(rhs.GetConcept());<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!IsEqual(*lhs.GetConcept(),*rhs.GetConcept())) TRACE("Concept differs");<br/>
&nbsp;&nbsp;if (!IsEqual(*lhs.GetFrom(),*rhs.GetFrom())) TRACE("From node differs");<br/>
&nbsp;&nbsp;if (!IsEqual(*lhs.GetTo(),*rhs.GetTo())) TRACE("To node differs");<br/>
&nbsp;&nbsp;if (!lhs.GetX()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == rhs.GetX()) TRACE("X differs");<br/>
&nbsp;&nbsp;if (!lhs.GetY()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == rhs.GetY()) TRACE("Y differs");<br/>
&nbsp;&nbsp;if (!lhs.HasHeadArrow() == rhs.HasHeadArrow()) TRACE("Has head arrow differs");<br/>
&nbsp;&nbsp;if (!lhs.HasTailArrow() == rhs.HasTailArrow()) TRACE("Has tail arrow differs");<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsEqual(*lhs.GetConcept(),*rhs.GetConcept())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; IsEqual(*lhs.GetFrom(),*rhs.GetFrom())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; IsEqual(*lhs.GetTo(),*rhs.GetTo())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetX()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetY()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == rhs.GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.HasHeadArrow() == rhs.HasHeadArrow()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.HasTailArrow() == rhs.HasTailArrow();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapedge.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapedge.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPEDGE_H<br/>
#define CONCEPTMAPEDGE_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct EdgeFactory;<br/>
<br/>
///An Edge is the GUI-independent part of the edges used in QtConceptMap.<br/>
///An Edge goes from one Node to another, which must a different Node<br/>
struct Edge<br/>
{<br/>
&nbsp;&nbsp;Edge(const Edge&amp;) = delete;<br/>
&nbsp;&nbsp;Edge&amp; operator=(const Edge&amp;) = delete;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; GetConcept() const { return m_concept; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt; ribi::cmap::Concept&gt; GetConcept() { return m_concept; }<br/>
<br/>
&nbsp;&nbsp;///Get the Node this edge originates from<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Node&gt; GetFrom() const { return m_from; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt; cmap::Node&gt; GetFrom() { return m_from; }<br/>
<br/>
&nbsp;&nbsp;///Get the Node index this edge goes to<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Node&gt; GetTo() const { return m_to; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt; cmap::Node&gt; GetTo() { return m_to; }<br/>
<br/>
&nbsp;&nbsp;///Get the x coordinat<br/>
&nbsp;&nbsp;double GetX() const { return m_x; }<br/>
<br/>
&nbsp;&nbsp;///Get the y coordinat<br/>
&nbsp;&nbsp;double GetY() const { return m_y; }<br/>
<br/>
&nbsp;&nbsp;///Does the edge have an arrow at the head?<br/>
&nbsp;&nbsp;bool HasHeadArrow() const { return m_head_arrow; }<br/>
<br/>
&nbsp;&nbsp;//Similar to operator==, except that the coordinats are not checked<br/>
&nbsp;&nbsp;static bool HasSameContent(const boost::shared_ptr&lt;const cmap::Edge&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Edge&gt;&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;///Does the edge have an arrow at the tail?<br/>
&nbsp;&nbsp;bool HasTailArrow() const { return m_tail_arrow; }<br/>
<br/>
&nbsp;&nbsp;///Set the concept<br/>
&nbsp;&nbsp;void SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept) { m_concept = concept; }<br/>
<br/>
&nbsp;&nbsp;///Set the Node index this edge originates from<br/>
&nbsp;&nbsp;void SetFrom(const boost::shared_ptr&lt;ribi::cmap::Node&gt; from);<br/>
<br/>
&nbsp;&nbsp;///Set if the head has an arrow<br/>
&nbsp;&nbsp;void SetHeadArrow(const bool has_head_arrow);<br/>
<br/>
&nbsp;&nbsp;///Set the coordinat of the concept at the center of the node<br/>
&nbsp;&nbsp;void SetPos(const double x, const double y) { SetX(x); SetY(y); }<br/>
<br/>
&nbsp;&nbsp;///Set if the tail has an arrow<br/>
&nbsp;&nbsp;void SetTailArrow(const bool has_tail_arrow);<br/>
<br/>
&nbsp;&nbsp;///Set the Node index this edge goes to<br/>
&nbsp;&nbsp;void SetTo(const boost::shared_ptr&lt;ribi::cmap::Node&gt; to);<br/>
<br/>
&nbsp;&nbsp;///Set the x coordinat of the concept at the center of the node<br/>
&nbsp;&nbsp;void SetX(const double x);<br/>
<br/>
&nbsp;&nbsp;///Set the y coordinat of the concept at the center of the node<br/>
&nbsp;&nbsp;void SetY(const double y);<br/>
<br/>
&nbsp;&nbsp;///Convert an Edge from an XML std::string<br/>
&nbsp;&nbsp;///The container of nodes is needed to convert the 'to' and 'from'<br/>
&nbsp;&nbsp;///field to indices<br/>
&nbsp;&nbsp;static const std::string ToXml(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Edge&gt;&amp; c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt;&amp; nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;///Emitted when an Edge attribute has changed<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void (const Edge*)&gt; m_signal_edge_changed;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;///The Concept on the Edge<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Concept&gt; m_concept;<br/>
<br/>
&nbsp;&nbsp;///The Node index this edge originates from<br/>
&nbsp;&nbsp;///Cannot be an index, see [1] below<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; m_from;<br/>
<br/>
&nbsp;&nbsp;///Is there an arrowhead at the 'to' node?<br/>
&nbsp;&nbsp;bool m_head_arrow;<br/>
<br/>
&nbsp;&nbsp;///Is there an arrowhead at the 'from' node?<br/>
&nbsp;&nbsp;bool m_tail_arrow;<br/>
<br/>
&nbsp;&nbsp;///The Node index this edge goes to<br/>
&nbsp;&nbsp;///Cannot be an index, see [1] below<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; m_to;<br/>
<br/>
&nbsp;&nbsp;///The x-coordinat<br/>
&nbsp;&nbsp;double m_x;<br/>
<br/>
&nbsp;&nbsp;///The y-coordinat<br/>
&nbsp;&nbsp;double m_y;<br/>
<br/>
&nbsp;&nbsp;void EmitSignalEdgeChanged();<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;Edge() = delete;<br/>
<br/>
&nbsp;&nbsp;///Block destructor, except for the friend boost::checked_delete<br/>
&nbsp;&nbsp;~Edge() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Edge* x);<br/>
<br/>
&nbsp;&nbsp;///Block constructor, except for EdgeFactory<br/>
&nbsp;&nbsp;friend EdgeFactory;<br/>
&nbsp;&nbsp;Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; &amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double concept_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double concept_y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool tail_arrow,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool head_arrow);<br/>
<br/>
};<br/>
<br/>
bool IsEqual(const cmap::Edge&amp; lhs, const cmap::Edge&amp; rhs);<br/>
<br/>
///Notes:<br/>
/// [1] Node::m_from and Node::m_to cannot be indices, because of the desired copying behavior<br/>
/// of Edge: when copying an edge, it is natural that it keeps pointing to the same nodes.<br/>
/// When using pointers, this will work. Indices, on the other hand, are context-specific:<br/>
/// Example: imagine a concept map like this:<br/>
///<br/>
/// NodeA Edge1 NodeB Edge2 NodeC<br/>
/// [0] [1] [2]<br/>
///<br/>
/// In this example, Edge2 goes from [1] to [2]<br/>
///<br/>
/// A sub-concept map will be (when NodeC is the focal node):<br/>
///<br/>
/// NodeB Edge2 NodeC<br/>
/// [0] [1]<br/>
///<br/>
/// In this example, Edge2 goes from [0] to [1]! Due to this, the same Edge2 cannot behave identical in the different contexts<br/>
///<br/>
/// Indices are only used when saving and loading<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPEDGE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapedgefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapedgefactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapedgefactory.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmapedge.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "trace.h"<br/>
#include "xml.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Edge&gt; ribi::cmap::EdgeFactory::Create(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;const double concept_x,<br/>
&nbsp;&nbsp;const double concept_y,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;const bool tail_arrow,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to,<br/>
&nbsp;&nbsp;const bool head_arrow)<br/>
{<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;assert(concept-&gt;GetExamples());<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Edge&gt; p(new Edge(concept,concept_x,concept_y,from,tail_arrow,to,head_arrow));<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
const boost::shared_ptr&lt;ribi::cmap::Edge&gt; ribi::cmap::EdgeFactory::DeepCopy(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Edge&gt; edge,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to)<br/>
{<br/>
&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;assert(edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(edge-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept = ribi::cmap::ConceptFactory::DeepCopy(edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; p = ribi::cmap::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;HasTailArrow(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;HasHeadArrow()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;assert(IsEqual(*edge,*p));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
#endif<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Edge&gt; ribi::cmap::EdgeFactory::FromXml(<br/>
&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes)<br/>
{<br/>
&nbsp;&nbsp;assert(s.size() &gt;= 13);<br/>
&nbsp;&nbsp;assert(s.substr(0,6) == std::string("&lt;edge&gt;"));<br/>
&nbsp;&nbsp;assert(s.substr(s.size() - 7,7) == std::string("&lt;/edge&gt;"));<br/>
&nbsp;&nbsp;//m_concept<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;concept&gt;.*&lt;/concept&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept = Concept::FromXml(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_from<br/>
&nbsp;&nbsp;int from = -1;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;from&gt;.*&lt;/from&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;from = boost::lexical_cast&lt;int&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_head_arrow<br/>
&nbsp;&nbsp;bool head_arrow = false;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;head_arrow&gt;.*&lt;/head_arrow&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;head_arrow = boost::lexical_cast&lt;bool&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_tail_arrow<br/>
&nbsp;&nbsp;bool tail_arrow = false;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;tail_arrow&gt;.*&lt;/tail_arrow&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tail_arrow = boost::lexical_cast&lt;bool&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_to<br/>
&nbsp;&nbsp;int to = -1;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;to&gt;.*&lt;/to&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to = boost::lexical_cast&lt;int&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_x<br/>
&nbsp;&nbsp;double x = 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;x&gt;.*&lt;/x&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x = boost::lexical_cast&lt;double&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_y<br/>
&nbsp;&nbsp;double y = 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;y&gt;.*&lt;/y&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y = boost::lexical_cast&lt;double&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;assert(from &lt; boost::numeric_cast&lt;int&gt;(nodes.size()));<br/>
&nbsp;&nbsp;assert(to&nbsp;&nbsp; &lt; boost::numeric_cast&lt;int&gt;(nodes.size()));<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(new Edge(concept,x,y,nodes[from],tail_arrow,nodes[to],head_arrow));<br/>
&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;return edge;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; ribi::cmap::EdgeFactory::GetTests(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to)<br/>
{<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;const auto test_concepts = ConceptFactory::GetTests();<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; result;<br/>
<br/>
&nbsp;&nbsp;for(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept: test_concepts)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(new Edge(concept,1.2,3.4,from,false,to,true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(new Edge(concept,0,2,true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(new Edge(concept,0,3,true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(new Edge(concept,1,2,false));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(new Edge(concept,1,3,false));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(new Edge(concept,2,3,false));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return result;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapedgefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapedgefactory.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPEDGEFACTORY_H<br/>
#define CONCEPTMAPEDGEFACTORY_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct EdgeFactory<br/>
{<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Edge&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double concept_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double concept_y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool tail_arrow,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool head_arrow);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///DeepCopy is only used for debugging<br/>
&nbsp;&nbsp;///The nodes need to be the deepcopied ones<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Edge&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Edge&gt; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Obtain an Edge from an XML std::string<br/>
&nbsp;&nbsp;///You need the real nodes to connect the edge to<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Edge&gt; FromXml(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes);<br/>
<br/>
&nbsp;&nbsp;///Get testing edges connecting the two supplied nodes<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; GetTests(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to);<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPEDGEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexample.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexample.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapexample.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
#include &lt;sstream&gt;<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;QRegExp&gt;<br/>
<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamplefactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "trace.h"<br/>
#include "xml.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::Example::Example(<br/>
&nbsp;&nbsp;const std::string&amp; text,<br/>
&nbsp;&nbsp;const cmap::Competency competency,<br/>
&nbsp;&nbsp;const bool is_complex,<br/>
&nbsp;&nbsp;const bool is_concrete,<br/>
&nbsp;&nbsp;const bool is_specific<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_signal_competency_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_text_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_competency(competency),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_complex(is_complex),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_concrete(is_concrete),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_specific(is_specific),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_text(text)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const std::string ribi::cmap::Example::CompetencyToStr(const cmap::Competency competency)<br/>
{<br/>
&nbsp;&nbsp;switch (competency)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::uninitialized: return "uninitialized";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::profession: return "profession";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::organisations: return "organisations";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::social_surroundings: return "social_surroundings";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::target_audience: return "target_audience";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::ti_knowledge: return "ti_knowledge";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::prof_growth: return "prof_growth";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case cmap::Competency::misc: return "misc";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("ribi::cmap::Example::CompetencyToStr: unknown Competency");<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Example&gt; ribi::cmap::Example::FromXml(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;assert(s.size() &gt;= 17);<br/>
&nbsp;&nbsp;assert(s.substr(0,9) == std::string("&lt;example&gt;"));<br/>
&nbsp;&nbsp;assert(s.substr(s.size() - 10,10) == std::string("&lt;/example&gt;"));<br/>
<br/>
&nbsp;&nbsp;std::string text;<br/>
&nbsp;&nbsp;cmap::Competency competency = cmap::Competency::uninitialized;<br/>
&nbsp;&nbsp;bool is_complex = false;<br/>
&nbsp;&nbsp;bool is_concrete = false;<br/>
&nbsp;&nbsp;bool is_specific = false;<br/>
<br/>
&nbsp;&nbsp;//competency<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;competency&gt;.*&lt;/competency&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;competency = StrToCompetency(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//is_complex<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;is_complex&gt;.*&lt;/is_complex&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_complex = boost::lexical_cast&lt;bool&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//is_concrete<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;is_concrete&gt;.*&lt;/is_concrete&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_concrete = boost::lexical_cast&lt;bool&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//is_specific<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;is_specific&gt;.*&lt;/is_specific&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_specific = boost::lexical_cast&lt;bool&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//text<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;text&gt;.*&lt;/text&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1 &amp;&amp; "&lt;text&gt;.*&lt;/text&gt; must be present once in an Example");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text = ribi::xml::StripXmlTag(v[0]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return cmap::ExampleFactory::Create(text,competency,is_complex,is_concrete,is_specific);<br/>
}<br/>
<br/>
void ribi::cmap::Example::SetCompetency(const cmap::Competency competency)<br/>
{<br/>
&nbsp;&nbsp;if (m_competency != competency)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_competency = competency;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_competency_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Example::SetText(const std::string&amp; text)<br/>
{<br/>
&nbsp;&nbsp;if (m_text != text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_text = text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_text_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
ribi::cmap::Competency ribi::cmap::Example::StrToCompetency(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s == "uninitialized") return cmap::Competency::uninitialized;<br/>
&nbsp;&nbsp;if (s == "profession") return cmap::Competency::profession;<br/>
&nbsp;&nbsp;if (s == "organisations") return cmap::Competency::organisations;<br/>
&nbsp;&nbsp;if (s == "social_surroundings") return cmap::Competency::social_surroundings;<br/>
&nbsp;&nbsp;if (s == "target_audience") return cmap::Competency::target_audience;<br/>
&nbsp;&nbsp;if (s == "ti_knowledge") return cmap::Competency::ti_knowledge;<br/>
&nbsp;&nbsp;if (s == "prof_growth") return cmap::Competency::prof_growth;<br/>
&nbsp;&nbsp;if (s == "misc") return cmap::Competency::misc;<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("ribi::cmap::Example::StrToCompetency: unknown string");<br/>
}<br/>
<br/>
void ribi::cmap::Example::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Starting ribi::cmap::Example::Test");<br/>
&nbsp;&nbsp;//Test of operator== and operator!=<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(cmap::ExampleFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;const cmap::Example&gt; a = cmap::ExampleFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Example&gt; b = cmap::ExampleFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;const cmap::Example&gt; c = cmap::ExampleFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Example&gt; d = cmap::ExampleFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i==j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*c)); assert(IsEqual(*a,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*c)); assert(IsEqual(*b,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*a)); assert(IsEqual(*c,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*a)); assert(IsEqual(*d,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*a,*c)); assert(!IsEqual(*a,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*b,*c)); assert(!IsEqual(*b,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*a)); assert(!IsEqual(*c,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*d,*a)); assert(!IsEqual(*d,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test if unrated and rated examples are noticed as different<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; a = ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; b = ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; c = ExampleFactory::Create("1",Competency::uninitialized);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsEqual(*a,*a)); assert( IsEqual(*a,*b)); assert(!IsEqual(*a,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsEqual(*b,*a)); assert( IsEqual(*b,*b)); assert(!IsEqual(*b,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*a)); assert(!IsEqual(*c,*b)); assert( IsEqual(*c,*c));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Conversion between std::string and competency<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Competency&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::uninitialized,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::profession,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::organisations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::social_surroundings,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::target_audience,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::ti_knowledge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::prof_growth,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Competency::misc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const cmap::Competency&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ribi::cmap::Example::CompetencyToStr(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;Competency&gt; x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(w.begin(),w.end(),std::back_inserter(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ribi::cmap::Example::StrToCompetency(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == x);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Conversion between class and XML, test for equality<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; v = AddConst(ribi::cmap::ExampleFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Example&gt;&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ribi::cmap::Example::ToXml(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Example&gt; f(Example::FromXml(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; v = AddConst(ribi::cmap::ExampleFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Example&gt;&amp; e = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ribi::cmap::Example::ToXml(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Example&gt;&amp; f = v[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string t = ribi::cmap::Example::ToXml(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s == t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s != t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Example::Test finished successfully");<br/>
}<br/>
<br/>
const std::string ribi::cmap::Example::ToXml(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; c)<br/>
{<br/>
&nbsp;&nbsp;assert(c);<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;example&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;text&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetText();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/text&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;competency&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; CompetencyToStr(c-&gt;GetCompetency());<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/competency&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;is_complex&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetIsComplex();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/is_complex&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;is_concrete&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetIsConcrete();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/is_concrete&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;is_specific&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp; c-&gt;GetIsSpecific();<br/>
&nbsp;&nbsp;s &lt;&lt;&nbsp;&nbsp; "&lt;/is_specific&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/example&gt;";<br/>
<br/>
&nbsp;&nbsp;const std::string r = s.str();<br/>
&nbsp;&nbsp;assert(r.size() &gt;= 17);<br/>
&nbsp;&nbsp;assert(r.substr(0,9) == std::string("&lt;example&gt;"));<br/>
&nbsp;&nbsp;assert(r.substr(r.size() - 10,10) == std::string("&lt;/example&gt;"));<br/>
&nbsp;&nbsp;return r;<br/>
}<br/>
<br/>
bool ribi::cmap::IsEqual(const cmap::Example&amp; lhs, const cmap::Example&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetText() == rhs.GetText()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetCompetency() == rhs.GetCompetency();<br/>
}<br/>
<br/>
bool ribi::cmap::operator&lt;(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;const cmap::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs &amp;&amp; rhs);<br/>
&nbsp;&nbsp;if (lhs-&gt;GetText() &lt; rhs-&gt;GetText()) return true;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetText() &gt; rhs-&gt;GetText()) return false;<br/>
&nbsp;&nbsp;return lhs-&gt;GetCompetency() &lt; rhs-&gt;GetCompetency();<br/>
}<br/>
<br/>
bool ribi::cmap::operator&gt;(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;const cmap::Example&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs &amp;&amp; rhs);<br/>
&nbsp;&nbsp;if (lhs-&gt;GetText() &gt; rhs-&gt;GetText()) return true;<br/>
&nbsp;&nbsp;if (lhs-&gt;GetText() &lt; rhs-&gt;GetText()) return false;<br/>
&nbsp;&nbsp;return lhs-&gt;GetCompetency() &gt; rhs-&gt;GetCompetency();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexample.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexample.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPEXAMPLE_H<br/>
#define CONCEPTMAPEXAMPLE_H<br/>
<br/>
#include &lt;string&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include "conceptmapcompetency.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct ExampleFactory;<br/>
<br/>
///A concept (on a node or an edge) can have examples<br/>
struct Example<br/>
{<br/>
&nbsp;&nbsp;Example(const Example&amp;) = delete;<br/>
&nbsp;&nbsp;Example&amp; operator=(const Example&amp;) = delete;<br/>
<br/>
&nbsp;&nbsp;///Convert a cmap::Competency to a std::string<br/>
&nbsp;&nbsp;static const std::string CompetencyToStr(const cmap::Competency competency);<br/>
<br/>
&nbsp;&nbsp;///Create an example from XML<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;cmap::Example&gt; FromXml(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Get the competency, as might be judged by an assessor<br/>
&nbsp;&nbsp;cmap::Competency GetCompetency() const { return m_competency; }<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the complexity?<br/>
&nbsp;&nbsp;bool GetIsComplex() const { return m_is_complex; }<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the concreteness?<br/>
&nbsp;&nbsp;bool GetIsConcrete() const { return m_is_concrete; }<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the specificity?<br/>
&nbsp;&nbsp;bool GetIsSpecific() const { return m_is_specific; }<br/>
<br/>
&nbsp;&nbsp;///Get the text of the example<br/>
&nbsp;&nbsp;const std::string&amp; GetText() const { return m_text; }<br/>
<br/>
&nbsp;&nbsp;///Set the competency<br/>
&nbsp;&nbsp;void SetCompetency(const cmap::Competency competency);<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the complexity?<br/>
&nbsp;&nbsp;void SetIsComplex(const bool is_complex) { m_is_complex = is_complex; }<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the concreteness?<br/>
&nbsp;&nbsp;void SetIsConcrete(const bool is_concrete) { m_is_concrete = is_concrete; }<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the specificity?<br/>
&nbsp;&nbsp;void SetIsSpecific(const bool is_specific) { m_is_specific = is_specific; }<br/>
<br/>
&nbsp;&nbsp;///Set the text<br/>
&nbsp;&nbsp;void SetText(const std::string&amp; text);<br/>
<br/>
&nbsp;&nbsp;///Convert a std::string to a cmap::Competency<br/>
&nbsp;&nbsp;static cmap::Competency StrToCompetency(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
<br/>
&nbsp;&nbsp;///Convert Example to a std::string<br/>
&nbsp;&nbsp;static const std::string ToXml(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; t);<br/>
<br/>
&nbsp;&nbsp;///Emitted when SetCompetency changes the competency<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void(Example*)&gt; m_signal_competency_changed;<br/>
<br/>
&nbsp;&nbsp;///Emitted when SetText changes the text<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void(Example*)&gt; m_signal_text_changed;<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///The competency, as might be judged by an assessor<br/>
&nbsp;&nbsp;cmap::Competency m_competency;<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the complexity?<br/>
&nbsp;&nbsp;bool m_is_complex;<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the concreteness?<br/>
&nbsp;&nbsp;bool m_is_concrete;<br/>
<br/>
&nbsp;&nbsp;///Has an assessor rated this example as being an addition to the specificity?<br/>
&nbsp;&nbsp;bool m_is_specific;<br/>
<br/>
&nbsp;&nbsp;///The text of the example<br/>
&nbsp;&nbsp;///For example: 'Plato', 'When I was a kid', 'As I did on holiday'<br/>
&nbsp;&nbsp;std::string m_text;<br/>
<br/>
&nbsp;&nbsp;///Set the competency with a string<br/>
&nbsp;&nbsp;void SetCompetencyAsStr(const std::string&amp; s) const;<br/>
<br/>
&nbsp;&nbsp;///Use checked_delete only<br/>
&nbsp;&nbsp;~Example() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Example* x);<br/>
<br/>
&nbsp;&nbsp;///Only let ExampleFactory create Example instances<br/>
&nbsp;&nbsp;Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; text,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const cmap::Competency competency = cmap::Competency::uninitialized,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_complex = true,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_concrete = true,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_specific = true<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;friend class ExampleFactory;<br/>
};<br/>
<br/>
bool IsEqual(const cmap::Example&amp; lhs, const cmap::Example&amp; rhs);<br/>
<br/>
bool operator&lt;(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;const cmap::Example&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;cmap::Example&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;cmap::Example&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;const cmap::Example&gt;&amp; rhs);<br/>
bool operator&gt;(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;const cmap::Example&gt;&amp; rhs);<br/>
bool operator&gt;(const boost::shared_ptr&lt;const cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;cmap::Example&gt;&amp; rhs);<br/>
bool operator&gt;(const boost::shared_ptr&lt;cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;const cmap::Example&gt;&amp; rhs);<br/>
bool operator&gt;(const boost::shared_ptr&lt;cmap::Example&gt;&amp; lhs,const boost::shared_ptr&lt;const cmap::Example&gt;&amp; rhs);<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPEXAMPLE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexamplefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexamplefactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "conceptmapexamplefactory.h"<br/>
<br/>
#include "conceptmapexample.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Example&gt; ribi::cmap::ExampleFactory::Create(<br/>
&nbsp;&nbsp;const std::string&amp; text,<br/>
&nbsp;&nbsp;const cmap::Competency&amp; competency,<br/>
&nbsp;&nbsp;const bool is_complex,<br/>
&nbsp;&nbsp;const bool is_concrete,<br/>
&nbsp;&nbsp;const bool is_specific)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;cmap::Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;competency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_complex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_concrete,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_specific<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(example);<br/>
&nbsp;&nbsp;return example;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Example&gt; &gt; ribi::cmap::ExampleFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 0",Competency::profession),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 1",Competency::organisations),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 2",Competency::social_surroundings),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 3",Competency::target_audience),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 4",Competency::ti_knowledge),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 5",Competency::prof_growth),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("Test example 6",Competency::misc),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create("",Competency::uninitialized),<br/>
&nbsp;&nbsp;};<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexamplefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexamplefactory.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPEXAMPLEFACTORY_H<br/>
#define CONCEPTMAPEXAMPLEFACTORY_H<br/>
<br/>
#include &lt;vector&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "conceptmapcompetency.h"<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamples.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct ExampleFactory<br/>
{<br/>
&nbsp;&nbsp;///Create an example from string and enum<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;cmap::Example&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; text,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const cmap::Competency&amp; competency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_complex = true,&nbsp;&nbsp; //DEFAULT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_concrete = true,&nbsp;&nbsp;//DEFAULT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool is_specific = true); //DEFAULT<br/>
<br/>
&nbsp;&nbsp;///Create examples for strings<br/>
&nbsp;&nbsp;///Note that all cmap::Competency values are set to uninitialized<br/>
&nbsp;&nbsp;//static const std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; CreateExamples(const std::vector&lt;std::string&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; GetTests();<br/>
<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPEXAMPLEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexamples.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexamples.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapexamples.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;sstream&gt;<br/>
<br/>
#include &lt;boost/bind.hpp&gt;<br/>
#include &lt;boost/lambda/lambda.hpp&gt;<br/>
#include &lt;QRegExp&gt;<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamplefactory.h"<br/>
#include "conceptmapexamplesfactory.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::Examples::Examples(const std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt;&amp; v)<br/>
&nbsp;&nbsp;: m_signal_examples_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v(v)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;std::for_each(m_v.begin(),m_v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const boost::shared_ptr&lt;cmap::Example&gt;&amp; example)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(example);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;m_signal_competency_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;m_signal_text_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;assert(std::count_if(m_v.begin(),m_v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;cmap::Example&gt;&amp; e) { return !e; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) == 0 &amp;&amp; "All Example instances must be initialized");<br/>
}<br/>
<br/>
void ribi::cmap::Examples::Add(const boost::shared_ptr&lt;cmap::Example&gt;&amp; example)<br/>
{<br/>
&nbsp;&nbsp;assert(example);<br/>
&nbsp;&nbsp;//Connect the example<br/>
&nbsp;&nbsp;example-&gt;m_signal_competency_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;example-&gt;m_signal_text_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Examples::OnExampleChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//Add the example and notify this change<br/>
&nbsp;&nbsp;m_v.push_back(example);<br/>
&nbsp;&nbsp;m_signal_examples_changed(this);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Examples&gt; ribi::cmap::Examples::FromXml(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;assert(s.size() &gt;= 20);<br/>
&nbsp;&nbsp;assert(s.substr(0,10) == std::string("&lt;examples&gt;"));<br/>
&nbsp;&nbsp;assert(s.substr(s.size() - 11,11) == std::string("&lt;/examples&gt;"));<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; examples;<br/>
&nbsp;&nbsp;//m_questions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;example&gt;.*&lt;/example&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::back_inserter(examples),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Example::FromXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return ExamplesFactory::Create(examples);<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;const ribi::cmap::Example&gt; &gt; ribi::cmap::Examples::Get() const<br/>
{<br/>
&nbsp;&nbsp;return AddConst(m_v);<br/>
}<br/>
<br/>
void ribi::cmap::Examples::OnExampleChanged()<br/>
{<br/>
&nbsp;&nbsp;m_signal_examples_changed(this);<br/>
}<br/>
<br/>
void ribi::cmap::Examples::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Started ribi::cmap::Examples::Test");<br/>
&nbsp;&nbsp;//Test of operator== and operator!=<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(ExamplesFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;const cmap::Examples&gt; a = ExamplesFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Examples&gt; b = ExamplesFactory::GetTests().at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;const cmap::Examples&gt; c = ExamplesFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Examples&gt; d = ExamplesFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i==j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*c)); assert(IsEqual(*a,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*c)); assert(IsEqual(*b,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*a)); assert(IsEqual(*c,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*a)); assert(IsEqual(*d,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*a,*c)); assert(!IsEqual(*a,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*b,*c)); assert(!IsEqual(*b,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*a)); assert(!IsEqual(*c,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*d,*a)); assert(!IsEqual(*d,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Conversion between class and XML, test for equality<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Examples&gt; &gt; v = AddConst(ExamplesFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ribi::cmap::Examples::ToXml(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt; f(Examples::FromXml(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Examples&gt; &gt; v = AddConst(ExamplesFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; e = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ribi::cmap::Examples::ToXml(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; f = v[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string t = ribi::cmap::Examples::ToXml(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s == t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s != t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test if unrated and rated examples are noticed as different<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; a = ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; b = ExampleFactory::Create("1",Competency::misc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; c = ExampleFactory::Create("1",Competency::uninitialized);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsEqual(*a,*a)); assert( IsEqual(*a,*b)); assert(!IsEqual(*a,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsEqual(*b,*a)); assert( IsEqual(*b,*b)); assert(!IsEqual(*b,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*a)); assert(!IsEqual(*c,*b)); assert( IsEqual(*c,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; v; v.push_back(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; w; w.push_back(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; x; x.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; d = ExamplesFactory::Create(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; e = ExamplesFactory::Create(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; f = ExamplesFactory::Create(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsEqual(*d,*d)); assert( IsEqual(*d,*e)); assert(!IsEqual(*d,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsEqual(*e,*d)); assert( IsEqual(*e,*e)); assert(!IsEqual(*e,*f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*f,*d)); assert(!IsEqual(*f,*e)); assert( IsEqual(*f,*f));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Examples::Test finished successfully");<br/>
}<br/>
<br/>
const std::string ribi::cmap::Examples::ToXml(const boost::shared_ptr&lt;const cmap::Examples&gt; &amp;c)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;examples&gt;";<br/>
<br/>
&nbsp;&nbsp;//const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; examples = c-&gt;GetExamples();<br/>
&nbsp;&nbsp;const auto example = c-&gt;Get();<br/>
&nbsp;&nbsp;std::for_each(example.begin(),example.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;s](const boost::shared_ptr&lt;const cmap::Example&gt;&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; Example::ToXml(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/examples&gt;";<br/>
<br/>
&nbsp;&nbsp;const std::string r = s.str();<br/>
&nbsp;&nbsp;assert(r.size() &gt;= 20);<br/>
&nbsp;&nbsp;assert(r.substr(0,10) == std::string("&lt;examples&gt;"));<br/>
&nbsp;&nbsp;assert(r.substr(r.size() - 11,11) == std::string("&lt;/examples&gt;"));<br/>
&nbsp;&nbsp;return r;<br/>
}<br/>
<br/>
bool ribi::cmap::IsEqual(const cmap::Examples&amp; lhs, const cmap::Examples&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;if (lhs.Get().size() != rhs.Get().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (lhs.Get().empty()) { assert(rhs.Get().empty()); return true; }<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; v = lhs.Get();<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; w = rhs.Get();<br/>
&nbsp;&nbsp;return std::equal(v.begin(),v.end(),w.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Example&gt;&amp; a, const boost::shared_ptr&lt;const cmap::Example&gt;&amp; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return IsEqual(*a,*b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
bool ribi::cmap::operator&lt;(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs &amp;&amp; rhs);<br/>
&nbsp;&nbsp;if (lhs-&gt;Get().size() &lt; rhs-&gt;Get().size()) return true;<br/>
&nbsp;&nbsp;if (lhs-&gt;Get().size() &gt; rhs-&gt;Get().size()) return false;<br/>
&nbsp;&nbsp;assert(lhs-&gt;Get().size() == rhs-&gt;Get().size());<br/>
&nbsp;&nbsp;const int sz = lhs-&gt;Get().size();<br/>
&nbsp;&nbsp;for (int i = 0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (lhs-&gt;Get()[i] &lt; rhs-&gt;Get()[i]) return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (lhs-&gt;Get()[i] &gt; rhs-&gt;Get()[i]) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return false;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexamples.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexamples.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPEXAMPLES_H<br/>
#define CONCEPTMAPEXAMPLES_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///Container of Example instances<br/>
struct Examples<br/>
{<br/>
&nbsp;&nbsp;Examples(const std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt;&amp; v);<br/>
&nbsp;&nbsp;Examples(const Example&amp; rhs) = delete;<br/>
&nbsp;&nbsp;Examples&amp; operator=(const Example&amp; rhs) = delete;<br/>
<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt;&amp; Get() { return m_v; }<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; Get() const;<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Examples&gt; FromXml(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;static const std::string ToXml(const boost::shared_ptr&lt;const cmap::Examples&gt; &amp;c);<br/>
<br/>
&nbsp;&nbsp;///Something of one of the examples was changed<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void(const Examples*)&gt; m_signal_examples_changed;<br/>
private:<br/>
&nbsp;&nbsp;~Examples() noexcept {}<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; m_v;<br/>
<br/>
&nbsp;&nbsp;void Add(const boost::shared_ptr&lt;cmap::Example&gt;&amp; example); //?not used<br/>
<br/>
&nbsp;&nbsp;///All signals emitted from the examples are connected to this member function<br/>
&nbsp;&nbsp;void OnExampleChanged();<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
<br/>
&nbsp;&nbsp;///Correct befriending, from http://richelbilderbeek.nl/CppChecked_delete.htm<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Examples* x);<br/>
};<br/>
<br/>
<br/>
bool IsEqual(const cmap::Examples&amp; lhs, const cmap::Examples&amp; rhs);<br/>
<br/>
///Two cmap::Examples instances are sorted as follows:<br/>
///(1) By their number of examples<br/>
///(2) (if the sizes are equal) Alphabetically on the first different example<br/>
bool operator&lt;(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs);<br/>
bool operator&lt;(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs);<br/>
bool operator&lt;=(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&lt;=(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&lt;=(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&lt;=(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
bool operator&gt;=(const boost::shared_ptr&lt;ribi::cmap::Examples&gt;&amp; lhs, boost::shared_ptr&lt;const cmap::Examples&gt;&amp; rhs) = delete;<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPEXAMPLES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexamplesfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexamplesfactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "conceptmapexamplesfactory.h"<br/>
<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamplefactory.h"<br/>
#include "conceptmapexamples.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Examples&gt; ribi::cmap::ExamplesFactory::Create()<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Examples&gt; examples(new Examples( {} ));<br/>
&nbsp;&nbsp;assert(examples);<br/>
&nbsp;&nbsp;return examples;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Examples&gt; ribi::cmap::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; examples)<br/>
{<br/>
&nbsp;&nbsp;assert(examples);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; p = Create(examples-&gt;Get());<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Examples&gt; ribi::cmap::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Examples&gt; p(new Examples(v));<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Examples&gt; ribi::cmap::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Example&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;cmap::Example&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ExampleFactory::Create(p-&gt;GetText(),p-&gt;GetCompetency());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; examples(new Examples(w));<br/>
&nbsp;&nbsp;assert(examples);<br/>
&nbsp;&nbsp;return examples;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Examples&gt; ribi::cmap::ExamplesFactory::Create(<br/>
&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const std::pair&lt;std::string,Competency&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ExampleFactory::Create(p.first,p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; q = Create(w);<br/>
&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;return q;<br/>
}<br/>
<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Examples&gt; &gt; ribi::cmap::ExamplesFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; is = { {0}, {1}, {0,1,2,3}, {} };<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Examples&gt; &gt; v;<br/>
&nbsp;&nbsp;std::transform(is.begin(),is.end(),std::back_inserter(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const std::vector&lt;int&gt;&amp; js)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::transform(js.begin(),js.end(),std::back_inserter(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const int&amp; j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Example&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ExampleFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Examples&gt; q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ExamplesFactory::Create(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;return v;<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapexamplesfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapexamplesfactory.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPEXAMPLESFACTORY_H<br/>
#define CONCEPTMAPEXAMPLESFACTORY_H<br/>
<br/>
#include &lt;vector&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "conceptmapcompetency.h"<br/>
<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
struct ExamplesFactory<br/>
{<br/>
&nbsp;&nbsp;///Constructor like<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Examples&gt; Create();<br/>
<br/>
&nbsp;&nbsp;///Copy-constructor like<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; examples);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;cmap::Example&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Examples&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Examples&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPEXAMPLESFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapfactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapfactory.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
//#include "fileio.h"<br/>
#include "conceptmapcenternodefactory.h"<br/>
#include "conceptmapcenternode.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmap.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapexamplefactory.h"<br/>
#include "conceptmapedge.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "trace.h"<br/>
#include "xml.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt;&amp; edges)<br/>
{<br/>
&nbsp;&nbsp;assert(!nodes.empty());<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(nodes[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| !boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(nodes[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The first node in a (sub)ConceptMap can be, but does not have to be a CenterNode");<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; p(new ConceptMap(nodes,edges));<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;assert(p-&gt;IsValid());<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
#ifdef TO_ADD_TO_PROJECTBRAINWEAVER<br/>
const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; ribi::cmap::ConceptMapFactory::CreateFromCluster(<br/>
&nbsp;&nbsp;const std::string&amp; question,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Cluster&gt;&amp; cluster)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; p(new ConceptMap(question,cluster));<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;assert(p-&gt;IsValid());<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
#endif<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;const std::string&amp; focal_question)<br/>
{<br/>
&nbsp;&nbsp;//A single-node ConceptMap contains only the focal question<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; focal_node = cmap::CenterNodeFactory::Create(focal_question);<br/>
&nbsp;&nbsp;assert(focal_node);<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; nodes = { focal_node };<br/>
&nbsp;&nbsp;assert(nodes.at(0));<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; p = Create(nodes);<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;assert(p-&gt;IsValid());<br/>
&nbsp;&nbsp;assert(!p-&gt;GetNodes().empty());<br/>
&nbsp;&nbsp;assert(boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(p-&gt;GetNodes()[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The first node in a ConceptMap created from a question must be a CenterNode");<br/>
<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; ribi::cmap::ConceptMapFactory::DeepCopy(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; map)<br/>
{<br/>
&nbsp;&nbsp;if (!map) return boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt;();<br/>
&nbsp;&nbsp;assert(map-&gt;IsValid() &amp;&amp; "Must be a valid original");<br/>
<br/>
&nbsp;&nbsp;//Deep-copy the center node if present<br/>
&nbsp;&nbsp;//Deep-copy the non-center nodes<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt; nodes = map-&gt;GetNodes();<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; new_nodes;<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;const cmap::Node&gt; node: nodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; new_node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (const boost::shared_ptr&lt;const cmap::CenterNode&gt; center_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp; = boost::dynamic_pointer_cast&lt;const cmap::CenterNode&gt;(node))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(center_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_node = cmap::CenterNodeFactory::DeepCopy(center_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_node = cmap::NodeFactory::DeepCopy(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(new_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*new_node,*node));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_nodes.push_back(new_node);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;//Deep-copy the edges<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt; edges = map-&gt;GetEdges();<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; new_edges;<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;const cmap::Edge&gt; edge: edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find the new from node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto from_iter = std::find(nodes.begin(),nodes.end(),edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(from_iter != nodes.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int from_index = std::distance(nodes.begin(),from_iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(from_index &lt; boost::numeric_cast&lt;int&gt;(new_nodes.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from = new_nodes[from_index];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find the new to node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto to_iter = std::find(nodes.begin(),nodes.end(),edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(to_iter != nodes.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int to_index = std::distance(nodes.begin(),to_iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(to_index &lt; boost::numeric_cast&lt;int&gt;(new_nodes.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to = new_nodes[to_index];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(from_index != to_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; new_edge = cmap::EdgeFactory::DeepCopy(edge,from,to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(new_edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*new_edge,*edge));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_edges.push_back(new_edge);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; p = Create(new_nodes,new_edges);<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;assert(p!=map &amp;&amp; "Must be a DEEP copy");<br/>
&nbsp;&nbsp;assert(IsEqual(*p,*map) &amp;&amp; "Must be a deep COPY");<br/>
&nbsp;&nbsp;assert(p-&gt;IsValid() &amp;&amp; "Must be a valid copy");<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
#endif<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; ribi::cmap::ConceptMapFactory::FromXml(const std::string &amp;s)<br/>
{<br/>
&nbsp;&nbsp;assert(s.size() &gt;= 27);<br/>
&nbsp;&nbsp;assert(s.substr(0,13) == std::string("&lt;concept_map&gt;"));<br/>
&nbsp;&nbsp;assert(s.substr(s.size() - 14,14) == std::string("&lt;/concept_map&gt;"));<br/>
<br/>
<br/>
&nbsp;&nbsp;//Obtain the &lt;concept_map&gt; ... &lt;/concept_map&gt; string<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= cmap::GetRegexMatches(s,QRegExp("(&lt;concept_map&gt;.*&lt;/concept_map&gt;)"));<br/>
&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;//Strip the &lt;concept_map&gt; tags<br/>
&nbsp;&nbsp;const std::string concept_map_str = ribi::xml::StripXmlTag(v[0]);<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Obtain the &lt;nodes&gt; ... &lt;/nodes&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= cmap::GetRegexMatches(concept_map_str,QRegExp("(&lt;nodes&gt;.*&lt;/nodes&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Strip the &lt;nodes&gt; tags<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string nodes_str = ribi::xml::StripXmlTag(w[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Obtain the &lt;concept&gt; ... &lt;/concept&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= cmap::GetRegexMatches(nodes_str,QRegExp("(&lt;node&gt;.*&lt;/node&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(x.begin(),x.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;nodes](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back( Node::FromXml(s) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!nodes.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Replace the first node by its CenterNode equivalent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; old_node = nodes[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept = old_node-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x = old_node-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double y = old_node-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::CenterNode&gt; center_node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new cmap::CenterNode(concept,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[0] = center_node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*old_node,*center_node));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; edges;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Obtain the &lt;edges&gt; ... &lt;/edges&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= cmap::GetRegexMatches(concept_map_str,QRegExp("(&lt;edges&gt;.*&lt;/edges&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Strip the &lt;edges&gt; tags<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string nodes_str = ribi::xml::StripXmlTag(w[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Obtain the &lt;edge&gt; ... &lt;/edge&gt; strings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= cmap::GetRegexMatches(nodes_str,QRegExp("(&lt;edge&gt;.*&lt;/edge&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; s: x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge = EdgeFactory::FromXml(s,nodes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(new ConceptMap(nodes,edges));<br/>
&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;assert(concept_map-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;assert( !concept_map-&gt;GetNodes().empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "A file's ConceptMap has at least one node");<br/>
&nbsp;&nbsp;assert( boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(concept_map-&gt;GetNodes()[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "A file's ConceptMap is be a CenterNode");<br/>
<br/>
&nbsp;&nbsp;return concept_map;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; ribi::cmap::ConceptMapFactory::GetAllTests()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto w = ribi::cmap::ConceptMapFactory::GetSimpleHomomorphousTestConceptMaps();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; w = ribi::cmap::ConceptMapFactory::GetComplexHomomorphousTestConceptMaps();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto w = ribi::cmap::ConceptMapFactory::GetHeteromorphousTestConceptMaps();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;for (const auto concept_map: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map-&gt;IsValid());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto node: concept_map-&gt;GetNodes())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto edge: concept_map-&gt;GetEdges())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;//Add empty concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; ribi::cmap::ConceptMapFactory::GetHeteromorphousTestConceptMaps()<br/>
{<br/>
&nbsp;&nbsp;typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; Edges;<br/>
&nbsp;&nbsp;typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; Nodes;<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; v(19);<br/>
&nbsp;&nbsp;assert(std::count_if(v.begin(),v.end(),[](const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt;&amp; p) { return p; } ) == 0);<br/>
&nbsp;&nbsp;//[0]: as-empty-as-can-get concept map (X = focal question_<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[1]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[2]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[2]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[3]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("edge_a concept"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(1),false,nodes.at(2),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[3]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[4]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("edge_a concept"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(2),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[4]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[5]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("1"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(1),false,nodes.at(2),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[5]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[6]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("1"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_d,1.2,3.4,nodes.at(2),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[6]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[7]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[7]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[8]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_a(cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true));<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[8]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[9]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_a(cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(3),true));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[9]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[10]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(3),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[10]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[11]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::Create(nodes,edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[11]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[12]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(3),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[12]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[13]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("2"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[13]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[14]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("2"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(3),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[14]=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[15]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create("B", { {"B-1",cmap::Competency::uninitialized} },0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("C", { {"C-1",cmap::Competency::uninitialized},{"C-2",cmap::Competency::misc}},-1,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("D", { {"D-1",cmap::Competency::misc},{"D-2",cmap::Competency::misc},{"D-3",cmap::Competency::misc}},-1,-1,-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::NodeFactory::Create(concept_d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_e(cmap::NodeFactory::Create(concept_e));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_h(cmap::ConceptFactory::Create("2",{{"2-I",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3",{{"3-I",cmap::Competency::misc},{"3-II",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_i(cmap::ConceptFactory::Create("4",{{"4-I",cmap::Competency::misc},{"4-II",cmap::Competency::misc},{"4-III",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_j(cmap::ConceptFactory::Create("5",{{"5-I",cmap::Competency::misc},{"5-II",cmap::Competency::misc},{"5-III",cmap::Competency::misc},{"5-IV",cmap::Competency::misc} } ));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.at(15)=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[16]: complex rated concept map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create("B", { {"B-1: profession",cmap::Competency::profession} },0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("C", { {"C-1: organisations",cmap::Competency::organisations},{"C-2: social_surroundings",cmap::Competency::social_surroundings}},2,1,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("D", { {"D-1: target_audience",cmap::Competency::target_audience},{"D-2: ti_knowledge",cmap::Competency::ti_knowledge},{"D-3: prof_growth",cmap::Competency::prof_growth},{"D-4: misc",cmap::Competency::misc}},0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::NodeFactory::Create(concept_d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_e(cmap::NodeFactory::Create(concept_e));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_h(cmap::ConceptFactory::Create("2",{{"2-I",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3",{{"3-I",cmap::Competency::misc},{"3-II",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_i(cmap::ConceptFactory::Create("4",{{"4-I",cmap::Competency::misc},{"4-II",cmap::Competency::misc},{"4-III",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_j(cmap::ConceptFactory::Create("5",{{"5-I",cmap::Competency::misc},{"5-II",cmap::Competency::misc},{"5-III",cmap::Competency::misc},{"5-IV",cmap::Competency::misc} } ));<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.at(16)=concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[17]: complex rated concept map with many examples<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create("B",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-P",cmap::Competency::profession},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-O",cmap::Competency::organisations},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-S",cmap::Competency::social_surroundings},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-TA",cmap::Competency::target_audience},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-TK",cmap::Competency::ti_knowledge},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-PG",cmap::Competency::prof_growth},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-M",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("C",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ {"C-1: organisations",cmap::Competency::organisations},{"C-2: social_surroundings",cmap::Competency::social_surroundings}},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2,1,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("D",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ {"D-1: target_audience",cmap::Competency::target_audience},{"D-2: ti_knowledge",cmap::Competency::ti_knowledge},{"D-3: prof_growth",cmap::Competency::prof_growth},{"D-4: misc",cmap::Competency::misc}},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::NodeFactory::Create(concept_d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_e(cmap::NodeFactory::Create(concept_e));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{"2-I",cmap::Competency::misc}}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_h(cmap::ConceptFactory::Create("2",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{"2-I",cmap::Competency::misc} }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{"3-I",cmap::Competency::misc},{"3-II",cmap::Competency::misc} }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_i(cmap::ConceptFactory::Create("4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{"4-I",cmap::Competency::misc},{"4-II",cmap::Competency::misc},{"4-III",cmap::Competency::misc} }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_j(cmap::ConceptFactory::Create("5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{"5-I",cmap::Competency::misc},{"5-II",cmap::Competency::misc},{"5-III",cmap::Competency::misc},{"5-IV",cmap::Competency::misc} }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.at(17)=concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[18]: complex rated concept map with many long concept names and examples<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B: This is a concept that has all types of competencies as its examples, each example name being multiple lines as well",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-P: this is B its first example (out of seven) and it is categorized as a competency in the profession domain",cmap::Competency::profession},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-O: this is B its second example (out of seven) and it is categorized as a competency in the organisation domain",cmap::Competency::organisations},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-S: this is B its third example (out of seven) and it is categorized as a competency in the social surroundings domain",cmap::Competency::social_surroundings},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-TA: this is B its fourth example (out of seven) and it is categorized as a competency in the target audience domain",cmap::Competency::target_audience},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-TK: this is B its fifth example (out of seven) and it is categorized as a competency in the technical instrumental knowledge domain",cmap::Competency::ti_knowledge},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-PG: this is B its sixth example (out of seven) and it is categorized as a competency in the professional growth domain",cmap::Competency::prof_growth},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"B-M: this is B its seventh example (out of seven) and it is categorized as a competency in the misc domain",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"C: This is a concept that has only two of the seven types of competencies as its examples, each example name being multiple lines as well",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"C-O: this is C its first example (out of two) and it is categorized as a competency in the organisation domain",cmap::Competency::organisations},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"C-S: this is C its second example (out of two) and it is categorized as a competency in the social surroundings domain",cmap::Competency::social_surroundings}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2,1,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"D: This is a concept that has only four of the seven types of competencies as its examples, each example name being multiple lines as well",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"D-TA: this is D its first example (out of four) and it is categorized as a competency in the target audience domain",cmap::Competency::target_audience},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"D-TK: this is D its second example (out of four) and it is categorized as a competency in the technical instrumental knowledge domain",cmap::Competency::ti_knowledge},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"D-PG: this is D its third example (out of four) and it is categorized as a competency in the professional growth domain",cmap::Competency::prof_growth},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"D-M: this is D its fourth example (out of four) and it is categorized as a competency in the misc domain",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::NodeFactory::Create(concept_d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_e(cmap::NodeFactory::Create(concept_e));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X: This is the center node concept that can have no examples, oterwise each of its example name would be multiple lines"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A: This is a concept that has none of all types of competencies as its examples, oterwise each of its example name would be multiple lines"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_d,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1: the first description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//{"2-I: this misc example ",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_h(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2: the second description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"2-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"3: the third description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"3-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"3-II: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_i(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"4: the fourth description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"4-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"4-II: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"4-III: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_j(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::ConceptFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"5: the fifth description of a relation that has one example. This description spans multiple lines as it is longer than eighty characters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"5-I: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"5-II: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"5-III: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{"5-IV: an example of a description of a relation. This example spans multiple lines as it is longer than eighty characters",cmap::Competency::misc}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,1.2,3.4,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,2.3,4.5,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_h,3.4,5.6,nodes.at(4),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_i,4.5,6.7,nodes.at(1),false,nodes.at(4),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_j,5.6,7.8,nodes.at(0),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.at(18)=concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;for (const auto concept_map: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto node: concept_map-&gt;GetNodes())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto edge: concept_map-&gt;GetEdges())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; ribi::cmap::ConceptMapFactory::GetComplexHomomorphousTestConceptMaps()<br/>
{<br/>
&nbsp;&nbsp;typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; Edges;<br/>
&nbsp;&nbsp;typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; Nodes;<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; v;<br/>
&nbsp;&nbsp;//[0] (note: same as heteromorphous[11])<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[1]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),false,nodes.at(1),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[2]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),false,nodes.at(2),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[3]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),false,nodes.at(3),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[4]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),false,nodes.at(3),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(2),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[5]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),false,nodes.at(2),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),false,nodes.at(1),true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),false,nodes.at(3),true)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[6] (note: same as heteromorphous[11], yet arrows reversed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),true,nodes.at(1),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),true,nodes.at(2),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),true,nodes.at(3),false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[7]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),true,nodes.at(1),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),true,nodes.at(3),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(1),true,nodes.at(2),false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[8]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_a(cmap::ConceptFactory::Create("X"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_b(cmap::ConceptFactory::Create("B"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create("A"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("C"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_a(cmap::NodeFactory::Create(concept_a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_b(cmap::NodeFactory::Create(concept_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::NodeFactory::Create(concept_d));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),true,nodes.at(2),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(3),true,nodes.at(1),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),true,nodes.at(3),false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[9]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_a(cmap::ConceptFactory::Create("X"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_b(cmap::ConceptFactory::Create("B"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create("C"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("A"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_a(cmap::NodeFactory::Create(concept_a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_b(cmap::NodeFactory::Create(concept_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::Create(concept_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::NodeFactory::Create(concept_d));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(1),true,nodes.at(3),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(2),true,nodes.at(1),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),true,nodes.at(2),false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[10]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(3),true,nodes.at(2),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),true,nodes.at(3),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(2),true,nodes.at(1),false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[11]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_e,1.2,3.4,nodes.at(2),true,nodes.at(3),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_f,2.3,4.5,nodes.at(1),true,nodes.at(2),false),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(concept_g,3.4,5.6,nodes.at(3),true,nodes.at(1),false)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(concept_map);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(v.size() == 12);<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;for (const auto concept_map: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto node: concept_map-&gt;GetNodes())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto edge: concept_map-&gt;GetEdges())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; ribi::cmap::ConceptMapFactory::GetSimpleHomomorphousTestConceptMaps()<br/>
{<br/>
&nbsp;&nbsp;typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; Edges;<br/>
&nbsp;&nbsp;typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; Nodes;<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; v(6);<br/>
&nbsp;&nbsp;assert(std::count_if(v.begin(),v.end(),[](const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt;&amp; p) { return p; } ) == 0);<br/>
&nbsp;&nbsp;//[0]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] = concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[1]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] = concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[2]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[2] = concept_map;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//[3]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[3] = concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[4]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[4] = concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//[5]<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("X"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("C"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("B"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("A")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Edges edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[5] = concept_map;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;for (const auto concept_map: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto node: concept_map-&gt;GetNodes())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto edge: concept_map-&gt;GetEdges())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapfactory.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPCONCEPTMAPFACTORY_H<br/>
#define CONCEPTMAPCONCEPTMAPFACTORY_H<br/>
<br/>
#include &lt;array&gt;<br/>
#include &lt;vector&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
///Factory class to create ConceptMaps<br/>
///ConceptMapFactory is the only class using the ConceptMap constructor<br/>
struct ConceptMapFactory<br/>
{<br/>
&nbsp;&nbsp;//Create an empty-as-can-get ConceptMap<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; focal_question);<br/>
<br/>
&nbsp;&nbsp;#ifdef TO_ADD_TO_PROJECTBRAINWEAVER<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; CreateFromCluster(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; question,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;cmap::Cluster&gt;&amp; cluster);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt;&amp; nodes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt;&amp; edges = {});<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///DeepCopy is only used for debugging<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; map);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Obtain a ConceptMap from an XML std::string<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; FromXml(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Get all the other tests as one vector<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; GetAllTests();<br/>
<br/>
&nbsp;&nbsp;///Get the documented heteromorphous test concept maps<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; GetHeteromorphousTestConceptMaps();<br/>
<br/>
&nbsp;&nbsp;///Get the documented complex homomorphous test concept maps<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; GetComplexHomomorphousTestConceptMaps();<br/>
<br/>
&nbsp;&nbsp;///Get the documented simple homomorphous test concept maps<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; GetSimpleHomomorphousTestConceptMaps();<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPCONCEPTMAPFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapfwd.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPFWD_H<br/>
#define CONCEPTMAPFWD_H<br/>
<br/>
//struct QRegExp;<br/>
//struct QTimer;<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct CenterNode;<br/>
//struct Cluster; //Remove for now, must be added at ProjectBrainweaver later<br/>
struct Concept;<br/>
struct ConceptFactory;<br/>
struct ConceptMap;<br/>
struct Edge;<br/>
struct Example;<br/>
struct Examples;<br/>
struct File;<br/>
struct Node;<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmaphelper.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmaphelper.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "conceptmaphelper.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;fstream&gt;<br/>
<br/>
#include &lt;boost/algorithm/string.hpp&gt;<br/>
#include &lt;QFile&gt;<br/>
#include &lt;QRegExp&gt;<br/>
<br/>
#include "fileio.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
double ribi::cmap::GetDistance(const double delta_x, const double delta_y)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;cmap::TestHelperFunctions();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return std::sqrt( (delta_x * delta_x) + (delta_y * delta_y) );<br/>
}<br/>
<br/>
double ribi::cmap::GetDistance(const double x1, const double y1, const double x2, const double y2)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;cmap::TestHelperFunctions();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return GetDistance(x1-x2,y1-y2);<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::cmap::GetRegexMatches(<br/>
&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;const QRegExp&amp; r_original)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;cmap::TestHelperFunctions();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;QRegExp r(r_original);<br/>
&nbsp;&nbsp;r.setMinimal(true); //QRegExp must be non-greedy<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;int pos = 0;<br/>
&nbsp;&nbsp;while ((pos = r.indexIn(s.c_str(), pos)) != -1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const QString q = r.cap(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (q.isEmpty()) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(q.toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pos += r.matchedLength();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::cmap::SafeFileToVector(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v = ribi::fileio::FileToVector(filename);<br/>
&nbsp;&nbsp;if (!v.empty() &amp;&amp; v.back().empty()) v.pop_back();<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::cmap::SplitXml(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;cmap::TestHelperFunctions();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;std::string::const_iterator i = s.begin();<br/>
&nbsp;&nbsp;std::string::const_iterator j = s.begin();<br/>
&nbsp;&nbsp;const std::string::const_iterator end = s.end();<br/>
&nbsp;&nbsp;while (j!=end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((*j=='&gt;' || *j == '&lt;') &amp;&amp; std::distance(i,j) &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::string t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*i=='&lt;' ? i&nbsp;&nbsp; : i+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*j=='&gt;' ? j+1 : j,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::TestHelperFunctions()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Started TestHelperFunctions");<br/>
&nbsp;&nbsp;//GetRegexMatches<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = "In the Netherlands, 1234 AB and 2345 BC are valid zip codes";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; expected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("1234 AB");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("2345 BC");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string r = "(\\d{4} [A-Z]{2})";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::GetRegexMatches(s,QRegExp(r.c_str())) == expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = "&lt;concept&gt;&lt;name&gt;Concept with examples&lt;/name&gt;&lt;example&gt;Example 1&lt;/example&gt;&lt;example&gt;Example 2&lt;/example&gt;&lt;example&gt;Example 3&lt;/example&gt;&lt;/concept&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(s.begin(),s.end(),'\b') == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; expected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("&lt;example&gt;Example 1&lt;/example&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("&lt;example&gt;Example 2&lt;/example&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;expected.push_back("&lt;example&gt;Example 3&lt;/example&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string r = "(&lt;example&gt;.*&lt;/example&gt;)";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::GetRegexMatches(s,QRegExp(r.c_str())) == expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//GetCombinations<br/>
&nbsp;&nbsp;//Assume the number of elements is correct<br/>
&nbsp;&nbsp;assert(GetCombinations(std::vector&lt;int&gt;( {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } ) ).size() ==&nbsp;&nbsp;1);<br/>
&nbsp;&nbsp;assert(GetCombinations(std::vector&lt;int&gt;( {1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ) ).size() ==&nbsp;&nbsp;2);<br/>
&nbsp;&nbsp;assert(GetCombinations(std::vector&lt;int&gt;( {1,2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ) ).size() ==&nbsp;&nbsp;4);<br/>
&nbsp;&nbsp;assert(GetCombinations(std::vector&lt;int&gt;( {1,2,3&nbsp;&nbsp;&nbsp;&nbsp;} ) ).size() ==&nbsp;&nbsp;8);<br/>
&nbsp;&nbsp;assert(GetCombinations(std::vector&lt;int&gt;( {1,2,3,4&nbsp;&nbsp;} ) ).size() == 16);<br/>
&nbsp;&nbsp;assert(GetCombinations(std::vector&lt;int&gt;( {1,2,3,4,5} ) ).size() == 32);<br/>
&nbsp;&nbsp;//Assume the elements are correct<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = GetCombinations(std::vector&lt;int&gt;( { 1 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_0 = {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_1 = {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = GetCombinations(std::vector&lt;int&gt;( { 1,2 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_0 = {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_1 = {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_2 = {2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_3 = {1,2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_3));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = GetCombinations(std::vector&lt;int&gt;( { 1,2,3 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_0 = {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_1 = {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_2 = {2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_3 = {3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_4 = {1,2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_5 = {1,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_6 = {2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_7 = {1,2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_7));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = GetCombinations(std::vector&lt;int&gt;( { 1,2,3,4 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_0 = {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_1 = {1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_2 = {2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_3 = {3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_4 = {4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_5 = {1,2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_6 = {1,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_7 = {1,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_8 = {2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_9 = {2,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_10 = {3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_11 = {1,2,3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_12 = {1,2,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_13 = {1,3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_14 = {2,3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; expected_15 = {1,2,3,4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_5));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_6));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_8));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_9));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_10));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_11));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_12));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_13));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_14));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),expected_15));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Wordwrap<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678901",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789012",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567890123",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678901234",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789012345",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567890123456",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678901234567",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789012345678",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567890123456789",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678901234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789012345678901",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567890123456789012",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678901234567890123",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789012345678901234",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567890123456789012345",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678901234567890123456",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789012345678901234567",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678901234567890123456789012345678",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789012345678901234567890123456789",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890123456789012345678901234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1 1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12 12",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123 123",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234 1234",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345 12345",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456 123456",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567 1234567",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"12345678 8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"123456789 9",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 0",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" 1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;1 ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;1&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;1 2 ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;1 23 ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;12 34&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;12&nbsp;&nbsp;34&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp; 12&nbsp;&nbsp; 34&nbsp;&nbsp; ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp; 12&nbsp;&nbsp; 34&nbsp;&nbsp; 5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp; 12&nbsp;&nbsp; 34&nbsp;&nbsp; 5 ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp; 12&nbsp;&nbsp; 34&nbsp;&nbsp; 5 6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0&nbsp;&nbsp; 12&nbsp;&nbsp; 34&nbsp;&nbsp; 5 6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0&nbsp;&nbsp; 12&nbsp;&nbsp; 34&nbsp;&nbsp; 5 6&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int len=1; len!=1000; ++len)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Wordwrap calls Unwordwrap<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wordwrap(s,len);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("TestHelperFunctions finished successfully");<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::cmap::Unwordwrap(<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt;&amp; v) noexcept<br/>
{<br/>
&nbsp;&nbsp;//Simply concatenate<br/>
&nbsp;&nbsp;std::string t;<br/>
&nbsp;&nbsp;for (const std::string&amp; s: v) { t += s; }<br/>
&nbsp;&nbsp;return t;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::cmap::Wordwrap(<br/>
&nbsp;&nbsp;const std::string&amp; s_original, const std::size_t max_len) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (max_len == 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("Cannot wordwrap for a max_len of zero");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "Wordwrap \'" &lt;&lt; s_original &lt;&lt; '\'' &lt;&lt; std::endl;<br/>
&nbsp;&nbsp;std::string s{s_original};<br/>
&nbsp;&nbsp;assert(s.size() == s_original.size());<br/>
<br/>
&nbsp;&nbsp;///Replace multiple spaces with '\b ', where x is a char not in the string<br/>
&nbsp;&nbsp;std::string::value_type x = '\b'; //Bell<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = s.size();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///Replace spaces at beginning<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s[i] == ' ')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[i] = x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Replace spaces at end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (sz &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//i!=0, because if s[0] is a space, it is already converted to bell<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=sz-1; i!=0; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s[i] == ' ')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[i] = x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///Replace "&nbsp;&nbsp;" by "\b "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=0; i!=sz-1; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s[i] == ' ' &amp;&amp; s[i+1] == ' ')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[i] = x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
<br/>
&nbsp;&nbsp;//Start the actual wordwrapping<br/>
&nbsp;&nbsp;while (!s.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Is the word short enough?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.size() &lt; max_len)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Copy entire word<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//No spaces, or space beyond max_len: cut word<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.find(' ') == std::string::npos || s.find(' ') &gt; max_len)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s.substr(0,max_len));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s.substr(max_len,s.size() - max_len);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find last space before max_len<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t len = s.find(' ');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(len != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(len &lt; s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t new_len = s.find(' ',len + 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (new_len &gt; max_len || new_len == std::string::npos) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = new_len;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(len + 0 &lt; s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(len + 1 &lt; s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//cut s, put cut part in vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string line = s.substr(0,len+1); //Keep space<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!line.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t new_index = len+1; //After the space found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(new_index &lt; s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string new_s = s.substr(new_index,s.size() - new_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(s != new_s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s = new_s;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;///Replace bell characters by spaces again<br/>
&nbsp;&nbsp;for (std::string&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x != ' ');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t pos = s.find(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (pos != std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(pos != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(pos &lt; s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(pos == s.find(x)); //To prevent infinite while loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[pos] = ' ';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s[pos] == ' ');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(pos != s.find(x)); //To prevent infinite while loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = s.find(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(s.find(x) == std::string::npos);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;//Test if Unwordwrap the result produces the original input<br/>
&nbsp;&nbsp;if (Unwordwrap(v) != s_original)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; v.size() &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.end(),std::ostream_iterator&lt;std::string&gt;(std::cerr,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; Unwordwrap(v) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; s_original &lt;&lt; std::endl;<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(Unwordwrap(v) == s_original);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::cmap::XmlToPretty(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;cmap::TestHelperFunctions();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v = cmap::SplitXml(s);<br/>
&nbsp;&nbsp;int n = -2;<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;n](std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s[0] == '&lt;' &amp;&amp; s[1] != '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n+=2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = std::string(n,' ') + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s[n+0] == '&lt;' &amp;&amp; s[n+1] == '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n-=2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmaphelper.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmaphelper.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPHELPER_H<br/>
#define CONCEPTMAPHELPER_H<br/>
<br/>
#include &lt;array&gt;<br/>
#include &lt;vector&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/array.hpp&gt;<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
struct QRegExp;<br/>
<br/>
namespace ribi {<br/>
<br/>
///Help adding constness a bit<br/>
template &lt;class T&gt;<br/>
const std::vector&lt;boost::shared_ptr&lt;const T&gt; &gt; AddConst(<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;T&gt; &gt; v)<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const T&gt; &gt; w(v.begin(),v.end());<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;assert(v.size() == w.size());<br/>
&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;for (std::size_t i=0; i!=sz; ++i) { assert(v[i] == w[i]); }<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
///Help adding constness a bit<br/>
template &lt;class T&gt;<br/>
const std::vector&lt;const T *&gt; AddConst(<br/>
&nbsp;&nbsp;const std::vector&lt;T *&gt; v)<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;const T *&gt; w(v.begin(),v.end());<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;assert(v.size() == w.size());<br/>
&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;for (std::size_t i=0; i!=sz; ++i) { assert(v[i] == w[i]); }<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
namespace cmap {<br/>
<br/>
///Obtain all possible selections of a std::vector, preserving the ordering of its elements<br/>
///Examples:<br/>
/// {&nbsp;&nbsp;&nbsp;&nbsp; } -&gt; { {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
/// {1&nbsp;&nbsp;&nbsp;&nbsp;} -&gt; { {}, {1}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
/// {1,2&nbsp;&nbsp;} -&gt; { {}, {1}, {2},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1,2}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
/// {1,2,3} -&gt; { {}, {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3} }<br/>
//From http://www.richelbilderbeek.nl/CppGetCombinations.htm<br/>
template &lt;class T&gt;<br/>
const std::vector&lt;std::vector&lt;T&gt; &gt; GetCombinations(const std::vector&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;T&gt; &gt; result;<br/>
&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;const int n_combinations = (1 &lt;&lt; sz);<br/>
<br/>
&nbsp;&nbsp;for (int i=0; i!=n_combinations; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;T&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((1 &lt;&lt; j) &amp; i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(v[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return result;<br/>
}<br/>
<br/>
///Obtain the Pythagorian distance from two delta's<br/>
//From www.richelbilderbeek.nl/CppGetDistance.htm<br/>
double GetDistance(const double delta_x, const double delta_y);<br/>
<br/>
///Obtain the Pythagorian distance from two coordinats<br/>
//From www.richelbilderbeek.nl/CppGetDistance.htm<br/>
double GetDistance(const double x1, const double y1, const double x2, const double y2);<br/>
<br/>
///From http://www.richelbilderbeek.nl/CppGetRegexMatches.htm<br/>
const std::vector&lt;std::string&gt; GetRegexMatches(<br/>
&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;const QRegExp&amp; r);<br/>
<br/>
///SafeFileToVector calls FileToVector and<br/>
///removes an empty trailing line that can be created under<br/>
///the Windows operating system, due to different line endings<br/>
const std::vector&lt;std::string&gt; SafeFileToVector(const std::string&amp; filename);<br/>
<br/>
///Split an XML std::string into its parts<br/>
//From http://www.richelbilderbeek.nl/CppSplitXml.htm<br/>
const std::vector&lt;std::string&gt; SplitXml(const std::string&amp; s);<br/>
<br/>
#ifndef NDEBUG<br/>
///Test the helper functions<br/>
void TestHelperFunctions();<br/>
#endif<br/>
<br/>
///Undo a Wordwrap<br/>
const std::string Unwordwrap(const std::vector&lt;std::string&gt;&amp; v) noexcept;<br/>
<br/>
///Wordwrap the text to obtain lines of max_len characters<br/>
///If the string _must_ be seperable by spaces; a word can have a maximum length of max_len<br/>
const std::vector&lt;std::string&gt; Wordwrap(const std::string&amp; s, const std::size_t max_len) noexcept;<br/>
<br/>
///Pretty-print an XML std::string by indenting its elements<br/>
//From http://www.richelbilderbeek.nl/CppXmlToPretty.htm<br/>
const std::vector&lt;std::string&gt; XmlToPretty(const std::string&amp; s);<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPHELPER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapnode.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapnode.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "conceptmapnode.h"<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;QRegExp&gt;<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "conceptmapexamplefactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "trace.h"<br/>
#include "xml.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::Node::Node(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;const double x,<br/>
&nbsp;&nbsp;const double y)<br/>
&nbsp;&nbsp;: m_signal_node_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept(concept),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(y)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;assert(m_concept);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Node&gt; ribi::cmap::Node::FromXml(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;assert(s.size() &gt;= 13);<br/>
&nbsp;&nbsp;assert(s.substr(0,6) == std::string("&lt;node&gt;"));<br/>
&nbsp;&nbsp;assert(s.substr(s.size() - 7,7) == std::string("&lt;/node&gt;"));<br/>
<br/>
&nbsp;&nbsp;//m_concept<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;concept&gt;.*&lt;/concept&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept = Concept::FromXml(v[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_x<br/>
&nbsp;&nbsp;double x = 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;x&gt;.*&lt;/x&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x = boost::lexical_cast&lt;double&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//m_x<br/>
&nbsp;&nbsp;double y = 0.0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = cmap::GetRegexMatches(s,QRegExp("(&lt;y&gt;.*&lt;/y&gt;)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y = boost::lexical_cast&lt;double&gt;(ribi::xml::StripXmlTag(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node(new Node(concept,x,y));<br/>
&nbsp;&nbsp;return node;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; ribi::cmap::Node::GetTests()<br/>
{<br/>
&nbsp;&nbsp;const auto test_concepts = ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; result;<br/>
&nbsp;&nbsp;std::for_each(test_concepts.begin(),test_concepts.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;result](const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int x = (std::rand() % 256) - 128;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int y = (std::rand() % 256) - 128;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node(new Node(concept,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push_back(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return result;<br/>
}<br/>
<br/>
bool ribi::cmap::Node::HasSameContent(const boost::shared_ptr&lt;const cmap::Node&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Node&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs);<br/>
&nbsp;&nbsp;assert(rhs);<br/>
&nbsp;&nbsp;return IsEqual(*lhs-&gt;GetConcept(),*rhs-&gt;GetConcept());<br/>
}<br/>
<br/>
void ribi::cmap::Node::SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept)<br/>
{<br/>
&nbsp;&nbsp;if (m_concept != concept)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept = concept;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_node_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Node::SetX(const double x)<br/>
{<br/>
&nbsp;&nbsp;if (m_x != x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x = x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_node_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::Node::SetY(const double y)<br/>
{<br/>
&nbsp;&nbsp;if (m_y != y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y = y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_node_changed(this);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::Node::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Started ribi::cmap::Node::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; v = ribi::cmap::Node::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test copy constructor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Node&gt; c = NodeFactory::DeepCopy(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*node,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ToXml(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; d = FromXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test HasSameContent<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; c(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c != d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot shuffle Concept its examples. No need to as well: the order is important<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c != d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot shuffle Concept its examples. No need to as well: the order is important<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d = ConceptFactory::Create("1", { {"3", cmap::Competency::uninitialized},{"2", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c != d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(a,b) &amp;&amp; "Order in examples is important and cannot be shuffled");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot shuffle Concept its examples. No need to as well: the order is important<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; c = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized},{"3", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d = ConceptFactory::Create("1", { {"2", cmap::Competency::uninitialized} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c != d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test ConceptFactory reproductions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; c = ConceptFactory::GetTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d = ConceptFactory::GetTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c != d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test ConceptFactory reproductions<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; c = ConceptFactory::GetTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d = ConceptFactory::GetTests()[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c != d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i!=j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; a(new Node(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; b(new Node(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;TRACE("Node::Test finished successfully");<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::cmap::Node::ToXml(const boost::shared_ptr&lt;const cmap::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;node&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; Concept::ToXml(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;x&gt;" &lt;&lt; node-&gt;GetX() &lt;&lt; "&lt;/x&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;y&gt;" &lt;&lt; node-&gt;GetY() &lt;&lt; "&lt;/y&gt;";<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;/node&gt;";<br/>
<br/>
&nbsp;&nbsp;const std::string r = s.str();<br/>
&nbsp;&nbsp;assert(r.size() &gt;= 13);<br/>
&nbsp;&nbsp;assert(r.substr(0,6) == std::string("&lt;node&gt;"));<br/>
&nbsp;&nbsp;assert(r.substr(r.size() - 7,7) == std::string("&lt;/node&gt;"));<br/>
<br/>
&nbsp;&nbsp;return r;<br/>
}<br/>
<br/>
bool ribi::cmap::IsEqual(const cmap::Node&amp; lhs, const cmap::Node&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs.GetConcept());<br/>
&nbsp;&nbsp;assert(rhs.GetConcept());<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsEqual(*lhs.GetConcept(),*rhs.GetConcept())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetX() == rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetY() == rhs.GetY();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapnode.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapnode.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPNODE_H<br/>
#define CONCEPTMAPNODE_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
struct NodeFactory;<br/>
<br/>
///A Node is the GUI independent part as used in QtConceptMapItem<br/>
struct Node<br/>
{<br/>
&nbsp;&nbsp;Node(const Node&amp;) = delete;<br/>
&nbsp;&nbsp;Node&amp; operator=(const Node&amp;) = delete;<br/>
<br/>
&nbsp;&nbsp;///Obtain a Node from an XML std::string<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Node&gt; FromXml(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Get the Concept<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&nbsp;&nbsp;GetConcept() const { return m_concept; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt;&amp; GetConcept() { return m_concept; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Get boost::shared_ptr::use_count<br/>
&nbsp;&nbsp;int GetConceptUseCount() const { return m_concept.use_count(); }<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Get some test nodes<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; GetTests();<br/>
<br/>
&nbsp;&nbsp;///Similar to operator==, except that GUI elements are not tested for equality<br/>
&nbsp;&nbsp;static bool HasSameContent(const boost::shared_ptr&lt;const cmap::Node&gt;&amp; lhs, const boost::shared_ptr&lt;const cmap::Node&gt;&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;///Get the x coordinat<br/>
&nbsp;&nbsp;double GetX() const { return m_x; }<br/>
<br/>
&nbsp;&nbsp;///Get the y coordinat<br/>
&nbsp;&nbsp;double GetY() const { return m_y; }<br/>
<br/>
&nbsp;&nbsp;///Set the concept<br/>
&nbsp;&nbsp;void SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept);<br/>
<br/>
&nbsp;&nbsp;///Set the position<br/>
&nbsp;&nbsp;void SetPos(const double x, const double y) { SetX(x); SetY(y); }<br/>
<br/>
&nbsp;&nbsp;///Set the x coordinat<br/>
&nbsp;&nbsp;void SetX(const double x);<br/>
<br/>
&nbsp;&nbsp;///Set the y coordinat<br/>
&nbsp;&nbsp;void SetY(const double y);<br/>
<br/>
&nbsp;&nbsp;///Convert a Node from an XML std::string<br/>
&nbsp;&nbsp;static const std::string ToXml(const boost::shared_ptr&lt;const cmap::Node&gt;&amp; c);<br/>
<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void(const cmap::Node *)&gt; m_signal_node_changed;<br/>
<br/>
&nbsp;&nbsp;protected:<br/>
&nbsp;&nbsp;///Block construction, except for NodeFactory and derived classes<br/>
&nbsp;&nbsp;Node() = delete;<br/>
&nbsp;&nbsp;friend NodeFactory;<br/>
<br/>
&nbsp;&nbsp;explicit Node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double x = 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y = 0.0);<br/>
<br/>
&nbsp;&nbsp;///Block destructor, except for the friend boost::checked_delete<br/>
&nbsp;&nbsp;virtual ~Node() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Node* x);<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;///The Concept<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Concept&gt; m_concept;<br/>
<br/>
&nbsp;&nbsp;///The x-coordinat<br/>
&nbsp;&nbsp;double m_x;<br/>
<br/>
&nbsp;&nbsp;///The y-coordinat<br/>
&nbsp;&nbsp;double m_y;<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
<br/>
};<br/>
<br/>
bool IsEqual(const cmap::Node&amp; lhs, const cmap::Node&amp; rhs);<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPNODE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapnodefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapnodefactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "conceptmapnodefactory.h"<br/>
<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Node&gt; ribi::cmap::NodeFactory::Create(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;const double x,<br/>
&nbsp;&nbsp;const double y)<br/>
{<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new cmap::Node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept,x,y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(IsEqual(*concept,*node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(node-&gt;GetX() == x);<br/>
&nbsp;&nbsp;assert(node-&gt;GetY() == y);<br/>
&nbsp;&nbsp;return node;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Node&gt; ribi::cmap::NodeFactory::Create(<br/>
&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; examples,<br/>
&nbsp;&nbsp;const double x,<br/>
&nbsp;&nbsp;const double y)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Node(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConceptFactory::Create(name,examples),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(node-&gt;GetX() == x);<br/>
&nbsp;&nbsp;assert(node-&gt;GetY() == y);<br/>
&nbsp;&nbsp;return node;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
const boost::shared_ptr&lt;ribi::cmap::Node&gt; ribi::cmap::NodeFactory::DeepCopy(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Node&gt;&amp; node)<br/>
{<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; new_concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= ConceptFactory::DeepCopy(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(new_concept);<br/>
&nbsp;&nbsp;assert(IsEqual(*node-&gt;GetConcept(),*new_concept));<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; new_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Create(new_concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(new_node);<br/>
&nbsp;&nbsp;assert(new_node-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(IsEqual(*node,*new_node));<br/>
&nbsp;&nbsp;return new_node;<br/>
}<br/>
#endif<br/>
<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; ribi::cmap::NodeFactory::GetTests()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;const auto v = ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::back_inserter(nodes),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static int x = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static int y = 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; p(new Node(c,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return nodes;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmapnodefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmapnodefactory.h" border = "1"><tr><td><code>
#ifndef CONCEPTMAPNODEFACTORY_H<br/>
#define CONCEPTMAPNODEFACTORY_H<br/>
<br/>
#include &lt;vector&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "conceptmapcompetency.h"<br/>
<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct Node;<br/>
<br/>
///Factory for creating Node instances<br/>
struct NodeFactory<br/>
{<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Node&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double x = 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y = 0.0);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Node&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::string,Competency&gt; &gt;&amp; examples = {},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double x = 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y = 0.0);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///DeepCopy is only used for debugging<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;ribi::cmap::Node&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Node&gt;&amp; node);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Obtain testing nodes<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; GetTests();<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // CONCEPTMAPNODEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmaptestconcept.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmaptestconcept.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "conceptmapconcept.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#ifdef COMPILER_SUPPORTS_THREADS_20130507<br/>
#include &lt;thread&gt;<br/>
#endif<br/>
<br/>
#include "trace.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::Concept::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef COMPILER_SUPPORTS_THREADS_20130507<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;cmap::TestHelperFunctions();<br/>
&nbsp;&nbsp;TRACE("Started ribi::cmap::Concept::Test");<br/>
&nbsp;&nbsp;//Test operator== and operator!=<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(ConceptFactory::GetTests().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sz &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto tmp_a = ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto tmp_b = ConceptFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; a = tmp_a.at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; b = tmp_b.at(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b); //FAILS AT CROSSCOMPILER<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a!=b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; c = ConceptFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; d = ConceptFactory::GetTests().at(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c); assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i==j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*c)); assert(IsEqual(*a,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*c)); assert(IsEqual(*b,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*a)); assert(IsEqual(*c,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*d,*a)); assert(IsEqual(*d,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*a,*c)); assert(!IsEqual(*a,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*b,*c)); assert(!IsEqual(*b,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*a)); assert(!IsEqual(*c,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*d,*a)); assert(!IsEqual(*d,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test operator&lt;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check correct ordering by name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; a = ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; b = ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; c = ConceptFactory::Create("2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; d = ConceptFactory::Create("2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a); assert(b); assert(c); assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a &lt; c); assert(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b &lt; c); assert(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check correct ordering by examples' size, sizes 0 versus 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; a = ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; b = ConceptFactory::Create("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; c = ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; d = ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a); assert(b); assert(c); assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a &lt; c); assert(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b &lt; c); assert(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check correct ordering by examples' size, sizes 1 versus 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; a = ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; b = ConceptFactory::Create("1", { {"2",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; c = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; d = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a); assert(b); assert(c); assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a &lt; c); assert(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b &lt; c); assert(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check correct ordering for equal examples' size, lexicographically in the 2nd text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; a = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; b = ConceptFactory::Create("1", { {"2",Competency::misc},{"3",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; c = ConceptFactory::Create("1", { {"2",Competency::misc},{"4",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt; d = ConceptFactory::Create("1", { {"2",Competency::misc},{"4",Competency::misc} } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a); assert(b); assert(c); assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a &lt; c); assert(a &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b &lt; c); assert(b &lt; d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test XML conversion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto v = AddConst(ConceptFactory::GetTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&amp; original)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test copy constructor and operator==<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Concept&gt; c = ConceptFactory::DeepCopy(original);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*original));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test operator!=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c-&gt;m_name = c-&gt;m_name + " (modified)";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsEqual(*c,*original));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test ToXml and FromXml<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ToXml(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; d = FromXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Concept::Test finished successfully");<br/>
<br/>
&nbsp;&nbsp;#ifdef COMPILER_SUPPORTS_THREADS_20130507<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/conceptmaptestconceptmap.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/conceptmaptestconceptmap.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "conceptmap.h"<br/>
<br/>
#include &lt;sstream&gt;<br/>
#include &lt;set&gt;<br/>
#include &lt;iterator&gt;<br/>
<br/>
#ifdef COMPILER_SUPPORTS_THREADS_20130507<br/>
#include &lt;thread&gt;<br/>
#endif<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;QRegExp&gt;<br/>
#include "conceptmapcenternode.h"<br/>
#include "conceptmapcenternodefactory.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmapfactory.h"<br/>
//#include "conceptmapclusterfactory.h"<br/>
#include "conceptmapcompetency.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmapexamplefactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapexamplesfactory.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "trace.h"<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapedge.h"<br/>
//#include "conceptmapcluster.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::ConceptMap::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef COMPILER_SUPPORTS_THREADS_20130507<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;TRACE("Started ribi::cmap::ConceptMap::Test");<br/>
&nbsp;&nbsp;//typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; Edges;<br/>
&nbsp;&nbsp;typedef std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; Nodes;<br/>
<br/>
&nbsp;&nbsp;//Brute force tests<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; &gt; v = AddConst(cmap::ConceptMapFactory::GetAllTests());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test copy constructor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; c(cmap::ConceptMapFactory::DeepCopy(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test XML conversions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ToXml(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; d = ribi::cmap::ConceptMapFactory::FromXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*c,*d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//CanConstruct<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept(cmap::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node = NodeFactory::Create(concept,123,234);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(CanConstruct( { node }, {} ) &amp;&amp; "Assume focal question without examples can be constructed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept(cmap::ConceptFactory::Create("FOCAL QUESTION", { {"No",cmap::Competency::misc},{"examples",cmap::Competency::misc},{"allowed",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node = NodeFactory::Create(concept,123,234);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(CanConstruct( { node }, {} )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume focal question with examples can be constructed"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "for example, when creating a sub-concept map");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//HasSameContent<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_a(cmap::NodeFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_b(cmap::NodeFactory::GetTests().at(1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::GetTests().at(2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a-&gt;GetNodes().size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_b(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b-&gt;GetNodes().size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b-&gt;GetNodes().at(0)-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(*map_a,*map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_c(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_a,*map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_b,*map_c));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_a(cmap::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_b(cmap::ConceptFactory::Create("1", { {"2",cmap::Competency::misc},{"3",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("4", { {"5",cmap::Competency::misc},{"6",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("1", { {"2",cmap::Competency::misc},{"3",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_a(cmap::NodeFactory::Create(concept_a,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_b(cmap::NodeFactory::Create(concept_b,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::NodeFactory::Create(concept_d,567,678));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_e(cmap::NodeFactory::Create(concept_e,789,890));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("4", { {"5",cmap::Competency::misc},{"6",cmap::Competency::misc} },345,456)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_b(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::GetTests().at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::NodeFactory::Create("4", { {"5",cmap::Competency::misc},{"6",cmap::Competency::misc} },901,012)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(*map_a,*map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_g(cmap::ConceptFactory::Create("7",{ {"8",cmap::Competency::misc},{"9",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_g = NodeFactory::Create(concept_f,901,012);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_c(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::CenterNodeFactory::Create("FOCAL QUESTION"), node_b, node_g<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b != map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_a,*map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_b,*map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_a(cmap::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_b(cmap::ConceptFactory::Create("1",{{"2",cmap::Competency::misc},{"3",cmap::Competency::misc}}));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_c(cmap::ConceptFactory::Create("4",{{"5",cmap::Competency::misc},{"6",cmap::Competency::misc}}));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_d(cmap::ConceptFactory::Create("FOCAL QUESTION"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e(cmap::ConceptFactory::Create("4",{{"5",cmap::Competency::misc},{"6",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_f(cmap::ConceptFactory::Create("1",{{"2",cmap::Competency::misc},{"3",cmap::Competency::misc} } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_a(cmap::CenterNodeFactory::Create(concept_a,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_b(cmap::NodeFactory::Create(concept_b,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_c(cmap::NodeFactory::Create(concept_c,345,456));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_d(cmap::CenterNodeFactory::Create(concept_d,567,678));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_e(cmap::NodeFactory::Create(concept_e,789,890));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_f(cmap::NodeFactory::Create(concept_f,901,012));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_a(cmap::ConceptMapFactory::Create( { node_a, node_b, node_c } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_b(cmap::ConceptMapFactory::Create( { node_d, node_f, node_e } )); //Swap e and f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(*map_a,*map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_c(cmap::ConceptMapFactory::Create( { node_d, node_d, node_d } ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_a,*map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_b,*map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b != map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n11(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n12(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n13(cmap::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n21(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n22(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n23(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_11(cmap::CenterNodeFactory::Create(concept_n11,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_12(cmap::NodeFactory::Create(concept_n12,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_13(cmap::NodeFactory::Create(concept_n13,345,456));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_21(cmap::CenterNodeFactory::Create(concept_n21,567,678));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_22(cmap::NodeFactory::Create(concept_n22,789,890));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_23(cmap::NodeFactory::Create(concept_n23,901,012));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e11(cmap::ConceptFactory::Create("9"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e12(cmap::ConceptFactory::Create("8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e13(cmap::ConceptFactory::Create("7"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e21(cmap::ConceptFactory::Create("9"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e22(cmap::ConceptFactory::Create("8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e23(cmap::ConceptFactory::Create("7"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes_1 = { node_11, node_12, node_13 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes_2 = { node_21, node_22, node_23 };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_11(cmap::EdgeFactory::Create(concept_e11,1.2,3.4,nodes_1.at(0),false,nodes_1.at(1),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_12(cmap::EdgeFactory::Create(concept_e12,2.3,4.5,nodes_1.at(0),false,nodes_1.at(2),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_13(cmap::EdgeFactory::Create(concept_e13,3.4,5.6,nodes_1.at(1),false,nodes_1.at(2),true));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_21(cmap::EdgeFactory::Create(concept_e21,4.5,6.7,nodes_2.at(0),false,nodes_2.at(1),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_22(cmap::EdgeFactory::Create(concept_e22,5.6,7.8,nodes_2.at(0),false,nodes_2.at(2),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_23(cmap::EdgeFactory::Create(concept_e23,6.7,8.9,nodes_2.at(1),false,nodes_2.at(2),true));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_a(cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_11, node_12, node_13 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_11, edge_12, edge_13 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_b(cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_21, node_22, node_23 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_21, edge_22, edge_23 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(*map_a,*map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_c(cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_21, node_22, node_23 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_21, edge_22 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_a,*map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!HasSameContent(*map_b,*map_c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_b != map_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n11(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n12(cmap::ConceptFactory::Create("2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n13(cmap::ConceptFactory::Create("3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_11(cmap::CenterNodeFactory::Create(concept_n11,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_12(cmap::NodeFactory::Create(concept_n12,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_13(cmap::NodeFactory::Create(concept_n13,345,456));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e11(cmap::ConceptFactory::Create("1-&gt;2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e12(cmap::ConceptFactory::Create("1-&gt;3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e13(cmap::ConceptFactory::Create("2-&gt;3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n21(cmap::ConceptFactory::Create("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n22(cmap::ConceptFactory::Create("3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_n23(cmap::ConceptFactory::Create("2"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_21(cmap::CenterNodeFactory::Create(concept_n21,123,234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_22(cmap::NodeFactory::Create(concept_n22,321,432));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_23(cmap::NodeFactory::Create(concept_n23,345,456));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e21(cmap::ConceptFactory::Create("2-&gt;3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e22(cmap::ConceptFactory::Create("1-&gt;2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept_e23(cmap::ConceptFactory::Create("1-&gt;3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes_1 = { node_11, node_12, node_13 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Nodes nodes_2 = { node_21, node_22, node_23 };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_21(cmap::EdgeFactory::Create(concept_e21,1.2,3.4,nodes_2.at(2),false,nodes_2.at(1),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_22(cmap::EdgeFactory::Create(concept_e22,2.3,4.5,nodes_2.at(0),false,nodes_2.at(2),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_23(cmap::EdgeFactory::Create(concept_e23,3.4,4.5,nodes_2.at(0),false,nodes_2.at(1),true));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_11(cmap::EdgeFactory::Create(concept_e11,1.2,3.4,nodes_1.at(0),false,nodes_1.at(1),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_12(cmap::EdgeFactory::Create(concept_e12,2.3,4.5,nodes_1.at(0),false,nodes_1.at(2),true));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge_13(cmap::EdgeFactory::Create(concept_e13,3.4,5.6,nodes_1.at(1),false,nodes_1.at(2),true));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_a(cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_11, node_12, node_13 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_11, edge_12, edge_13 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; map_b(cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_21, node_22, node_23 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edge_21, edge_22, edge_23 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(HasSameContent(*map_a,*map_b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(map_a != map_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto v = AddConst(cmap::ConceptMapFactory::GetHeteromorphousTestConceptMaps());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j = 0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; a(cmap::ConceptMapFactory::DeepCopy(v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*v[i])); assert(IsEqual(*v[i],*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; b(cmap::ConceptMapFactory::DeepCopy(v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cmap::ConceptMap::HasSameContent(*a,*b))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; "Testing concept maps #" &lt;&lt; i &lt;&lt; " and #" &lt;&lt; j &lt;&lt; " must not be the same";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!cmap::ConceptMap::HasSameContent(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE("ConceptMap::Test: heteromorphous testing concept maps are successfully identified as being different");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test simple homomorphous maps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto v = AddConst(cmap::ConceptMapFactory::GetSimpleHomomorphousTestConceptMaps());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j = 0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; a(cmap::ConceptMapFactory::DeepCopy(v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; b(cmap::ConceptMapFactory::DeepCopy(v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!cmap::ConceptMap::HasSameContent(*a,*b))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; "Testing simple concept maps #" &lt;&lt; i &lt;&lt; " and #" &lt;&lt; j &lt;&lt; " must be homomorphous";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE("ConceptMap::Test: simple homomorphous testing concept maps are successfully identified as being different, yet homomorphous");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test complex homomorphous maps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; &gt; v = AddConst(cmap::ConceptMapFactory::GetComplexHomomorphousTestConceptMaps());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j = 0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; a(cmap::ConceptMapFactory::DeepCopy(v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*a,*v[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; b(cmap::ConceptMapFactory::DeepCopy(v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*b,*v[j]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!cmap::ConceptMap::HasSameContent(*a,*b))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; "Testing complex concept maps #" &lt;&lt; i &lt;&lt; " and #" &lt;&lt; j &lt;&lt; " must be homomorphous";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMap::HasSameContent(*a,*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE("ConceptMap::Test: complex homomorphous testing concept maps are successfully identified as being different, yet homomorphous");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//OLD NOTE: There is no perfect check for shuffled, yet homomorphous concept maps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//LATER NOTE: Yet, I cannot think of an example that wouldn't get caught<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;so perhaps the check _is_ perfect?<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifdef TO_ADD_TO_PROJECTBRAINWEAVER<br/>
&nbsp;&nbsp;//Conversion from Cluster<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;cmap::Cluster&gt; &gt; clusters = cmap::ClusterFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(clusters.begin(),clusters.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;cmap::Cluster&gt; &amp; cluster)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cluster)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; m(cmap::ConceptMapFactory::CreateFromCluster("Focal question",cluster));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = ribi::cmap::ConceptMap::ToXml(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; n = ribi::cmap::ConceptMapFactory::FromXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*m,*n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;//CreateSubs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; maps<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ConceptMapFactory::GetHeteromorphousTestConceptMaps();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int n_heteromorphous_concept_maps = 19;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_heteromorphous_concept_maps == static_cast&lt;int&gt;(maps.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n_subs_expected = { 1,2,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5 } ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_heteromorphous_concept_maps == static_cast&lt;int&gt;(n_subs_expected.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_subs_expected[ 0] == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_subs_expected[ 1] == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_subs_expected[ 2] == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_subs_expected[ 6] == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_subs_expected[ 7] == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_subs_expected[14] == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_subs_expected[15] == 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(n_subs_expected[16] == 5);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(maps.size() == n_subs_expected.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(n_subs_expected.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!maps[i]) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt;&amp; map = maps[i];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; subs = map-&gt;CreateSubs();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (static_cast&lt;int&gt;(subs.size()) != n_subs_expected[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(subs.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(n_subs_expected[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(static_cast&lt;int&gt;(subs.size()) == n_subs_expected[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Just test all<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; maps = ConceptMapFactory::GetAllTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(maps.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!maps[i]) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt;&amp; map = maps[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; &gt; subs = map-&gt;CreateSubs();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!subs.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test IsValid<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; node_a = cmap::CenterNodeFactory::Create("...");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map = ribi::cmap::ConceptMapFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ node_a } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map-&gt;IsValid());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; node = cmap::NodeFactory::Create("...");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;AddNode(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map-&gt;IsValid());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Add nodes and edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto concept_map: concept_maps)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!concept_map) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int n_nodes_before = concept_map-&gt;GetNodes().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int n_edges_before = concept_map-&gt;GetEdges().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto node_a = cmap::NodeFactory::GetTests().at(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto node_b = cmap::NodeFactory::GetTests().at(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto concept = ribi::cmap::ConceptFactory::GetTests().at(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto edge = cmap::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept,123.456,456.789,node_a,true,node_b,true);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;AddNode(node_a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;AddNode(node_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;AddEdge(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int n_nodes_after = concept_map-&gt;GetNodes().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int n_edges_after = concept_map-&gt;GetEdges().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_nodes_after == n_nodes_before + 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_edges_after == n_edges_before + 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Deletion of nodes<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=n_concept_maps; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!cmap::ConceptMapFactory::GetAllTests()[i]) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMapFactory::GetAllTests()[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_nodes = ribi::cmap::ConceptMapFactory::GetAllTests()[i]-&gt;GetNodes().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t j=0; j!=n_nodes; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map = ribi::cmap::ConceptMapFactory::GetAllTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!concept_map) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map-&gt;GetNodes().size() == n_nodes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &lt; concept_map-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node = concept_map-&gt;GetNodes()[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;DeleteNode(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map-&gt;GetNodes().size() == n_nodes - 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Node must really be gone");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Deletion of edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=n_concept_maps; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!cmap::ConceptMapFactory::GetAllTests()[i]) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMapFactory::GetAllTests()[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_edges = ribi::cmap::ConceptMapFactory::GetAllTests()[i]-&gt;GetEdges().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t j=0; j!=n_edges; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map = ribi::cmap::ConceptMapFactory::GetAllTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!concept_map) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map-&gt;GetEdges().size() == n_edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &lt; concept_map-&gt;GetEdges().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge = concept_map-&gt;GetEdges()[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept_map-&gt;DeleteEdge(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map-&gt;GetEdges().size() == n_edges - 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Edge must really be gone");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Is GetNode()[0] a CenterNode?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_concept_maps = ribi::cmap::ConceptMapFactory::GetAllTests().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=n_concept_maps; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!cmap::ConceptMapFactory::GetAllTests()[i]) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(cmap::ConceptMapFactory::GetAllTests()[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map = ribi::cmap::ConceptMapFactory::GetAllTests()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!concept_map) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!concept_map-&gt;GetNodes().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(concept_map-&gt;GetNodes()[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume a CenterNode at the center of ConceptMap");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("ConceptMap::Test finished successfully");<br/>
&nbsp;&nbsp;#ifdef COMPILER_SUPPORTS_THREADS_20130507<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/CppConceptMap.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/CppConceptMap.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap<br/>
<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/Licence.txt<br/>
<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapfwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapcenternode.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapcenternodefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapcompetency.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapconcept.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapconceptfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmap.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapedgefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexample.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexamplefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexamples.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexamplesfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapnode.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapnodefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmaphelper.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapedge.h<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapcenternode.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapcenternodefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapcompetency.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapconcept.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapconceptfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmap.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapedge.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapedgefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexample.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexamplefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexamples.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapexamplesfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapnode.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmapnodefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmaphelper.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmaptestconceptmap.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppConceptMap/conceptmaptestconcept.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppConceptMap/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppConceptMap/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
