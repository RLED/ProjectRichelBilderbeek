<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Qwt example 5: alpha filter added</title>
  <meta name="description" content="C++ Qwt example 5: alpha filter added"/>
  <meta name="keywords" content="C++ Qwt example 5: alpha filter added Qt Creator"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <img src="PicQwt.png" alt="Qwt"/> <a href="CppQwtExample5.htm">Qwt example 5: alpha filter added</a></h1>
<p>&nbsp;</p>
<p>This <a href="CppQwt.htm">Qwt</a> example shows how to add two timeseries to a QwtPlot.</p>
<p>&nbsp;</p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppQwtExample5.png">View a screenshot of 'QwtExample5' (png)</a></li>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQwtExample5.zip">Download the Qt Project of 'QwtExample5' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.0</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.49</li>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 4.8.4 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppQwtExample5.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppQwtExample5.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui
<br/>
TEMPLATE = app
<br/>

<br/>
<a href="CppSOURCES.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp\
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alphabetafilter.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alphafilter.cpp
<br/>

<br/>
<a href="CppHEADERS.htm">HEADERS</a>&nbsp;&nbsp;+= qtdialog.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alphabetafilter.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alphafilter.h
<br/>

<br/>
<a href="CppFORMS.htm">FORMS</a>&nbsp;&nbsp;&nbsp;&nbsp;+= qtdialog.ui
<br/>

<br/>

<br/>
unix {
<br/>
&nbsp;&nbsp;<a href="CppQMAKE_CXXFLAGS.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a>
<br/>
&nbsp;&nbsp;<a href="CppINCLUDEPATH.htm">INCLUDEPATH</a> += /usr/include/qwt-qt4
<br/>
&nbsp;&nbsp;<a href="CppLIBS.htm">LIBS</a> += <a href="CppQwt.htm">-lqwt-qt4</a>
<br/>
}
<br/>

<br/>
win32 {
<br/>
&nbsp;&nbsp;<a href="CppQMAKE_CXXFLAGS.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp0x.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a>
<br/>
&nbsp;&nbsp;<a href="CppINCLUDEPATH.htm">INCLUDEPATH</a> += E:/boost_1_50_0 C:/qwt-6.0.1/include
<br/>

<br/>
&nbsp;&nbsp;<a href="CppLIBS.htm">LIBS</a> += \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-LE:/boost_1_50_0/stage/lib&nbsp;&nbsp;\
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSystem.htm">-lboost_system</a>-mgw44-mt-1_50 \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFilesystem.htm">-lboost_filesystem</a>-mgw44-mt-1_50 \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRegex.htm">-lboost_regex</a>-mgw44-mt-1_50 \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-LC:/qwt-6.0.1/lib \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lqwtd&nbsp;&nbsp;#Note: gives error 'Q<a href="CppWidget.htm">Widget</a>: Must construct a QApplication before a QPaintDevice' when using '-lqwt'
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>alphabetafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="alphabetafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ALPHABETAFILTER_H
<br/>
<a href="CppDefine.htm">#define</a> ALPHABETAFILTER_H
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaBetaFilter
<br/>
{
<br/>
&nbsp;&nbsp;AlphaBetaFilter(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> 0.1 ,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.01,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0
<br/>
&nbsp;&nbsp;);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Estimate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> input);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_alpha;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_beta;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dt;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_hidden;
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_output;
<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALPHABETAFILTER_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>alphabetafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="alphabetafilter.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:
<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale <a href="Cpp.htm">C++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110
<br/>
<a href="CppInclude.htm">#include</a> "alphabetafilter.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>

<br/>
AlphaBetaFilter::AlphaBetaFilter(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt)
<br/>
&nbsp;&nbsp;: m_alpha(alpha),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_beta(beta),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dt(dt),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_hidden(0.0),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_output(0.0)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_alpha &lt;&nbsp;&nbsp;1.0);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_beta&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_beta&nbsp;&nbsp;<a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0); <a href="CppComment.htm">//</a>beta &gt; 1.0 amplifies noise
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(4.0 <a href="CppOperatorMinus.htm">-</a> (2.0 * m_alpha <a href="CppOperatorMinus.htm">-</a> m_beta) &gt; 0.0);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dt <a href="CppOperatorNotEqual.htm">!=</a> 0.0);
<br/>
}
<br/>

<br/>

<br/>
<b><a href="CppDouble.htm">double</a></b> AlphaBetaFilter::Estimate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> input)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> new_output <a href="CppOperatorAssign.htm">=</a> m_output <a href="CppOperatorPlus.htm">+</a> ( m_hidden * m_dt );
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> new_hidden <a href="CppOperatorAssign.htm">=</a> m_hidden;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> difference <a href="CppOperatorAssign.htm">=</a> input <a href="CppOperatorMinus.htm">-</a> new_output;
<br/>

<br/>
&nbsp;&nbsp;new_output <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> m_alpha * difference;
<br/>
&nbsp;&nbsp;new_hidden <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> m_beta&nbsp;&nbsp;* difference <a href="CppOperatorDivide.htm">/</a> m_dt;
<br/>

<br/>
&nbsp;&nbsp;m_output <a href="CppOperatorAssign.htm">=</a> new_output;
<br/>
&nbsp;&nbsp;m_hidden <a href="CppOperatorAssign.htm">=</a> new_hidden;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_output;
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>alphafilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="alphafilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> ALPHAFILTER_H
<br/>
<a href="CppDefine.htm">#define</a> ALPHAFILTER_H
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphaFilter
<br/>
{
<br/>
&nbsp;&nbsp;AlphaFilter(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> 0.1 ,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0
<br/>
&nbsp;&nbsp;);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Estimate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> input);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_alpha;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dt;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_output;
<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ALPHAFILTER_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>alphafilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="alphafilter.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:
<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale <a href="Cpp.htm">C++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110
<br/>
<a href="CppInclude.htm">#include</a> "alphafilter.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>

<br/>
AlphaFilter::AlphaFilter(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt)
<br/>
&nbsp;&nbsp;: m_alpha(alpha),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dt(dt),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_output(0.0)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_alpha <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_alpha &lt;&nbsp;&nbsp;1.0);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_beta&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_beta&nbsp;&nbsp;<a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0); <a href="CppComment.htm">//</a>beta &gt; 1.0 amplifies noise
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(4.0 <a href="CppOperatorMinus.htm">-</a> (2.0 * m_alpha <a href="CppOperatorMinus.htm">-</a> m_beta) &gt; 0.0);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_dt <a href="CppOperatorNotEqual.htm">!=</a> 0.0);
<br/>
}
<br/>

<br/>

<br/>
<b><a href="CppDouble.htm">double</a></b> AlphaFilter::Estimate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> input)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> difference <a href="CppOperatorAssign.htm">=</a> input <a href="CppOperatorMinus.htm">-</a> m_output;
<br/>

<br/>
&nbsp;&nbsp;m_output <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> m_alpha * difference;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_output;
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQt.htm">Qt</a>Gui/<a href="CppQApplication.htm">QApplication</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> "qtdialog.h"
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Dialog w;
<br/>
&nbsp;&nbsp;w.show();
<br/>
&nbsp;&nbsp;
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTDIALOG_H
<br/>
<a href="CppDefine.htm">#define</a> QTDIALOG_H
<br/>

<br/>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> QwtPlotCurve;
<br/>

<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {
<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Dialog;
<br/>
}
<br/>

<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a>
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPublic.htm">public</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Dialog();
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Run();
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_type_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);
<br/>

<br/>
<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Dialog *ui;
<br/>

<br/>
&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_inputs;
<br/>
&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_outputs;
<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTDIALOG_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> own <a href="CppHeaderFile.htm">header file</a> as first substantive line of code, from:
<br/>
<a href="CppComment.htm">//</a> * John Lakos. Large-Scale <a href="Cpp.htm">C++</a> Software Design. 1996. ISBN: 0-201-63362-0. Section 3.2, page 110
<br/>
<a href="CppInclude.htm">#include</a> "qtdialog.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot.h"
<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot_curve.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "alphafilter.h"
<br/>
<a href="CppInclude.htm">#include</a> "alphabetafilter.h"
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtdialog.h"
<br/>

<br/>
<a href="CppQt.htm">Qt</a>Dialog::<a href="CppQt.htm">Qt</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent) :
<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>(parent),
<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Dialog),
<br/>
&nbsp;&nbsp;m_curve_inputs(<b><a href="CppNew.htm">new</a></b> QwtPlotCurve("Inputs")),
<br/>
&nbsp;&nbsp;m_curve_outputs(<b><a href="CppNew.htm">new</a></b> QwtPlotCurve("Outputs"))
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;setCanvasBackground(QBrush(<a href="CppQColor.htm">QColor</a>(255,255,255)));
<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a>
<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;setCanvasBackground(<a href="CppQColor.htm">QColor</a>(255,255,255));
<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
&nbsp;&nbsp;m_curve_inputs-&gt;attach(ui-&gt;plot);
<br/>
&nbsp;&nbsp;m_curve_inputs-&gt;setStyle(QwtPlotCurve::Lines);
<br/>
&nbsp;&nbsp;m_curve_inputs-&gt;setPen(QPen(<a href="CppQColor.htm">QColor</a>(128,128,128)));
<br/>

<br/>
&nbsp;&nbsp;m_curve_outputs-&gt;attach(ui-&gt;plot);
<br/>
&nbsp;&nbsp;m_curve_outputs-&gt;setStyle(QwtPlotCurve::Lines);
<br/>
&nbsp;&nbsp;m_curve_outputs-&gt;setPen(QPen(<a href="CppQColor.htm">QColor</a>(0,0,0)));
<br/>

<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;alpha,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(Run()));
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;beta,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(Run()));
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;dt,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(Run()));
<br/>
&nbsp;&nbsp;ui-&gt;box_type-&gt;setCurrentIndex(1);
<br/>
&nbsp;&nbsp;Run();
<br/>
}
<br/>

<br/>
<a href="CppQt.htm">Qt</a>Dialog::~<a href="CppQt.htm">Qt</a>Dialog()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Dialog::Run()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 100;
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; inputs;
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; outputs;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ui-&gt;alpha-&gt;value())
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ui-&gt;alpha-&gt;maximum());
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 2.0 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ui-&gt;beta-&gt;value())
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ui-&gt;beta-&gt;maximum());
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ui-&gt;dt-&gt;value())
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(ui-&gt;dt-&gt;maximum());
<br/>

<br/>
&nbsp;&nbsp;ui-&gt;value_alpha-&gt;setText(<a href="CppQString.htm">QString</a>::number(alpha));
<br/>
&nbsp;&nbsp;ui-&gt;value_beta-&gt;setText(<a href="CppQString.htm">QString</a>::number(beta));
<br/>
&nbsp;&nbsp;ui-&gt;value_dt-&gt;setText(<a href="CppQString.htm">QString</a>::number(dt));
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_type-&gt;currentIndex() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AlphaFilter filter(alpha,dt);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>steps; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> input <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;((rand() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> 100);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> output <a href="CppOperatorAssign.htm">=</a> filter.Estimate(input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs.push_back(input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputs.push_back(output);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;AlphaBetaFilter filter(alpha,beta,dt);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>steps; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> input <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;((rand() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> 100);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> output <a href="CppOperatorAssign.htm">=</a> filter.Estimate(input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs.push_back(input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputs.push_back(output);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Plot
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppTime.htm">time</a>series;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>steps; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>series.push_back(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_inputs-&gt;setData(<b><a href="CppNew.htm">new</a></b> Qwt<a href="CppPoint.htm">Point</a>ArrayData(&amp;<a href="CppTime.htm">time</a>series[0],&amp;inputs[0],inputs.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_outputs-&gt;setData(<b><a href="CppNew.htm">new</a></b> Qwt<a href="CppPoint.htm">Point</a>ArrayData(&amp;<a href="CppTime.htm">time</a>series[0],&amp;outputs[0],outputs.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_inputs-&gt;setData(&amp;<a href="CppTime.htm">time</a>series[0],&amp;inputs[0],inputs.size());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_outputs-&gt;setData(&amp;<a href="CppTime.htm">time</a>series[0],&amp;outputs[0],outputs.size());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot-&gt;replot();
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Dialog::on_box_type_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index)
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;beta-&gt;setVisible( index <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 );
<br/>
&nbsp;&nbsp;ui-&gt;label_beta-&gt;setVisible( index <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 );
<br/>
&nbsp;&nbsp;ui-&gt;value_beta-&gt;setVisible( index <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 );
<br/>
&nbsp;&nbsp;Run();
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

