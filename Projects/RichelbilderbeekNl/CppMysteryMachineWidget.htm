<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MysteryMachineWidget</title>
  <meta name="description" content="C++ MysteryMachineWidget"/>
  <meta name="keywords" content="C++ MysteryMachineWidget code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMysteryMachineWidget.htm">MysteryMachineWidget</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="CppMysteryMachineWidget.htm">MysteryMachineWidget</a> is a <a href="CppMysteryMachineWidget.htm">MysteryMachineWidget</a> <a href="CppWidget.htm">widget</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>mysterymachinewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="mysterymachinewidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>, GUI independent <a href="CppWidget.html">widget</a> <b><a href="CppFor.htm">for</a></b> <a href="CppMysteryMachine.html">MysteryMachine</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppMysteryMachineWidget.html">CppMysteryMachineWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> MYSTERYMACHINEWIDGET_H<br/>
<a href="CppDefine.html">#define</a> MYSTERYMACHINEWIDGET_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIosfwdH.html">iosfwd</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppScoped_ptr.html">scoped_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppSignals2.html">signals2</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppTuple.html">tuple</a>/<a href="CppTuple.html">tuple</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWidget.html">widget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRectangle.html">rectangle</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppMysteryMachine.html">MysteryMachine</a>;<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppDialWidget.html">DialWidget</a>;<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppToggleButton.html">ToggleButton</a><a href="CppWidget.html">Widget</a>;<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppLedWidget.html">LedWidget</a>;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a> handles the GUI independent<br/>
<a href="CppComment.htm">///</a>user <a href="CppInterface.html">interface</a> of the display of a <a href="CppMysteryMachine.html">MysteryMachine</a><br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppWidget.html">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>(<b><a href="CppConst.html">const</a></b> Rect&amp; <a href="CppGeometry.html">geometry</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Rect(0,0,200,400));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to the user clicking on the <a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Click(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppMysteryMachine.html">MysteryMachine</a> * GetMachine() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_machine.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a> can only be deleted by <a href="CppBoost.html">Boost</a> <a href="CppSmartPointer.html">smart pointer</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a> can only be deleted by <a href="CppBoost.html">Boost</a> <a href="CppSmartPointer.html">smart pointer</a>s<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;<a href="CppMysteryMachine.html">MysteryMachine</a>&gt; m_machine;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to a change in <a href="CppGeometry.html">geometry</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnResize();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
};<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> MYSTERYMACHINEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>mysterymachinewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="mysterymachinewidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>, GUI independent <a href="CppWidget.html">widget</a> <b><a href="CppFor.htm">for</a></b> <a href="CppMysteryMachine.html">MysteryMachine</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppMysteryMachineWidget.html">CppMysteryMachineWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppMysteryMachineWidget.html">mysterymachinewidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppDialWidget.html">dialwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppLed<a href="CppHeaderFile.htm">.h</a>tm">led</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppLedWidget.html">ledwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppMysteryMachine.html">mysterymachine</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRectangle.html">rectangle</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppToggleButton.html">togglebutton</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppToggleButtonWidget.html">togglebuttonwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Rect&amp; <a href="CppGeometry.html">geometry</a>)<br/>
&nbsp;&nbsp;: m_machine(<b><a href="CppNew.htm">new</a></b> <a href="CppMysteryMachine.html">MysteryMachine</a>)<br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_<a href="CppGeometry.html">geometry</a>_changed.connect(<a href="CppBind.html">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>::OnResize,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;SetGeometry(<a href="CppGeometry.html">geometry</a>);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Respond to the user clicking on the <a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>::Click(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_machine-&gt;GetDialBack()-&gt;IsClicked(x,y))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_machine-&gt;GetDialBack()-&gt;Click(x,y);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_machine-&gt;GetDialFront()-&gt;IsClicked(x,y))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_machine-&gt;GetDialFront()-&gt;Click(x,y);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_machine-&gt;Get<a href="CppToggleButton.html">ToggleButton</a>()-&gt;GetGeometry().IsIn(x,y))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_machine-&gt;Get<a href="CppToggleButton.html">ToggleButton</a>()-&gt;Click(x,y);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-07-03: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-20: <a href="CppVersion.html">Version</a> 1.1: added <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>::On<a href="CppMysteryMachine.html">MysteryMachine</a>Changed()<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;m_signal_<a href="CppMysteryMachine.html">mysterymachine</a>_changed();<br/>
<a href="CppComment.htm">//</a>}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>::OnResize()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> w <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(GetGeometry().GetWidth());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> h <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(GetGeometry().GetHeight());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> s <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.html">std::min</a>(w/4.0,h/8.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> w8 <a href="CppOperatorAssign.htm">=</a> w <a href="CppOperatorDivide.htm">/</a> 8.0;<br/>
<br/>
<br/>
&nbsp;&nbsp;m_machine-&gt;GetDialBack()-&gt;SetGeometry(Rect((w8 * 1.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),0,s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;GetDialFront()-&gt;SetGeometry(Rect((w8 * 7.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),h-s,s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppToggleButton.html">ToggleButton</a>()-&gt;SetGeometry(Rect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(w8 * 4.0) <a href="CppOperatorPlus.htm">+</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(h * 0.5) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s,s));<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>Back1()-&gt;SetGeometry(Rect((w8 * 3.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),0,s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>Back2()-&gt;SetGeometry(Rect((w8 * 5.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),0,s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>Back3()-&gt;SetGeometry(Rect((w8 * 7.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),0,s,s));<br/>
<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>Front1()-&gt;SetGeometry(Rect((w8 * 1.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),h-s,s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>Front2()-&gt;SetGeometry(Rect((w8 * 3.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),h-s,s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>Front3()-&gt;SetGeometry(Rect((w8 * 5.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),h-s,s,s));<br/>
<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>TopFront()-&gt;SetGeometry(Rect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(w8 * 5.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(((h <a href="CppOperatorMinus.htm">-</a> (s * 0.5)) <a href="CppOperatorPlus.htm">+</a> (h * 0.5)) * 0.5) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>TopMiddle()-&gt;SetGeometry(Rect((w8 * 4.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(h * 0.5) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s,s));<br/>
&nbsp;&nbsp;m_machine-&gt;Get<a href="CppLed.htm">Led</a>TopBack()-&gt;SetGeometry(Rect((w8 * 3.0) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(((s * 0.5) <a href="CppOperatorPlus.htm">+</a> (h * 0.5)) * 0.5) <a href="CppOperatorMinus.htm">-</a> (s * 0.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s,s));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_signal_<a href="CppMysteryMachine.html">mysterymachine</a>_changed();<br/>
}<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>&amp; <a href="CppWidget.html">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;<a href="CppGeometry.html">geometry</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppWidget.html">widget</a>.GetGeometry()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/<a href="CppGeometry.html">geometry</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;machine&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> *<a href="CppWidget.html">widget</a>.m_machine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/machine&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/<a href="CppMysteryMachineWidget.html">MysteryMachineWidget</a>&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
