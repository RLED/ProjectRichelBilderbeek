<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>VirtualBastard</title>
  <meta name="description" content="C++ VirtualBastard"/>
  <meta name="keywords" content="C++ VirtualBastard code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppVirtualBastard.htm">VirtualBastard</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppVirtualBastard.htm">VirtualBastard</a> is a class to do GUI testing.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>virtualbastard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="virtualbastard.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> VIRTUALBASTARD_H<br/>
<a href="CppDefine.html">#define</a> VIRTUALBASTARD_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>The VirtualBastard <b><a href="CppClass.html">class</a></b><br/>
<b><a href="CppStruct.html">struct</a></b> VirtualBastard<br/>
{<br/>
&nbsp;&nbsp;VirtualBastard();<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Make the mouse cursor perform a click<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Click();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the mouse cursor its current position<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetMousePos();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the mouse cursor to a certain position<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> SetMousePos(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Press a key<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> PressKey(<b><a href="CppConst.html">const</a></b> <b><a href="CppChar.htm">char</a></b> key);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sleep <b><a href="CppFor.htm">for</a></b> some <a href="CppTime.htm">time</a> (in msecs)<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Sleep(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_secs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Execute(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; cmd);<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> VIRTUALBASTARD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>virtualbastard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="virtualbastard.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "<b><a href="CppVirtual.html">virtual</a></b>bastard<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppChronoH.html">chrono</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppLimitsH.html">limits</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> &lt;<a href="CppSstreamH.html">sstream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppThreadH.html">thread</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppLexical_cast.html">lexical_cast</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<b><a href="CppExtern.html">extern</a></b> "C"<br/>
{<br/>
&nbsp;&nbsp;<a href="CppInclude.html">#include</a> "<a href="CppLibcvautomation.html">libcvautomation</a>/<a href="CppLibcvautomation.html">libcvautomation</a><a href="CppHeaderFile.htm">.h</a>"<br/>
}<br/>
<br/>
VirtualBastard::VirtualBastard()<br/>
{<br/>
&nbsp;&nbsp;XInit<a href="CppThread.html">Thread</a>s();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> VirtualBastard::Click()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> cmd <a href="CppOperatorAssign.htm">=</a> "mouseclick";<br/>
&nbsp;&nbsp;Execute(cmd);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> VirtualBastard::Execute(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; cmd)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open a display (whatever that may be)<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> display_name <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;Display * <b><a href="CppConst.html">const</a></b> display <a href="CppOperatorAssign.htm">=</a> XOpenDisplay( display_name.c_str() );<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(display);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.html">Convert</a> the line (with the command) to a C style string<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.html">const</a></b> command <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <b><a href="CppChar.htm">char</a></b>[ cmd.size() <a href="CppOperatorPlus.htm">+</a> 1 ];<br/>
&nbsp;&nbsp;strcpy(command,&amp;cmd[0]);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Run the command<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>*<b><a href="CppConst.html">const</a></b> cva<a href="CppPoint.html">Point</a> p <a href="CppOperatorAssign.htm">=</a><a href="CppComment.htm">*/</a> xte_commandString(display,command,1,0,<a href="CppNumeric_limits.html">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;().max(),1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Close the display (whatever that may be)<br/>
&nbsp;&nbsp;XCloseDisplay( display );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't forget to <b><a href="CppDelete.html">delete</a></b> a C-style string :-(<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b>[] command;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give some feedback<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>*<br/>
&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Execute command: '" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> cmd <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "': ";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> p.y <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "OK";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> p.x <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.html">&lt;&lt;</a> p.y <a href="CppOperatorStreamOut.html">&lt;&lt;</a> ")";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; VirtualBastard::GetMousePos()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Open a display (whatever that may be)<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> display_name <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;Display * <b><a href="CppConst.html">const</a></b> display <a href="CppOperatorAssign.htm">=</a> XOpenDisplay( display_name.c_str() );<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(display);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> cva<a href="CppPoint.html">Point</a> p <a href="CppOperatorAssign.htm">=</a> xte_mouseLocation(display);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppMake_pair.html">std::make_pair</a>(p.x,p.y);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> VirtualBastard::PressKey(<b><a href="CppConst.html">const</a></b> <b><a href="CppChar.htm">char</a></b> <a href="CppOperatorDivide.htm">/</a>* key <a href="CppComment.htm">*/</a>)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> VirtualBastard::SetMousePos(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> cmd<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "mousexy "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(y);<br/>
&nbsp;&nbsp;Execute(cmd);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> VirtualBastard::Sleep(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_secs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppThis_thread.html">std::this_thread</a>::sleep_for(<a href="CppChrono.html">std::chrono</a>::milliseconds(m_secs));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>virtualbastardcommand.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="virtualbastardcommand.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> VIRTUALBASTARDCOMMAND_H<br/>
<a href="CppDefine.html">#define</a> VIRTUALBASTARDCOMMAND_H<br/>
<br/>
<b><a href="CppClass.html">class</a></b> VirtualBastardCommand<br/>
{<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;VirtualBastardCommand();<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> VIRTUALBASTARDCOMMAND_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>virtualbastardcommand.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="virtualbastardcommand.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "<b><a href="CppVirtual.html">virtual</a></b>bastardcommand<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
VirtualBastardCommand::VirtualBastardCommand()<br/>
{<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>virtualbastardcommandfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="virtualbastardcommandfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> VIRTUALBASTARDCOMMANDFACTORY_H<br/>
<a href="CppDefine.html">#define</a> VIRTUALBASTARDCOMMANDFACTORY_H<br/>
<br/>
<b><a href="CppClass.html">class</a></b> VirtualBastardCommandFactory<br/>
{<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;VirtualBastardCommandFactory();<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> VIRTUALBASTARDCOMMANDFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>virtualbastardcommandfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="virtualbastardcommandfactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "<b><a href="CppVirtual.html">virtual</a></b>bastardcommandfactory<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
VirtualBastardCommandFactory::VirtualBastardCommandFactory()<br/>
{<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
