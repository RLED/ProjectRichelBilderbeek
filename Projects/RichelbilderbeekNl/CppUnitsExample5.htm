<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Boost.Units example 5: averaging multiple lengths</title>
  <meta name="description" content="C++ Boost.Units example 5: averaging multiple lengths"/>
  <meta name="keywords" content="C++ Boost.Units example 5: averaging multiple lengths code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppUnitsExample5.htm">Boost.Units example 5: averaging multiple lengths</a></h1>
<p>&nbsp;</p>
<p><a href="CppUnitsExample5.htm">Boost.Units example 5</a> is a <a href="CppUnits.htm">Boost.Units</a> example.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppUnitsExample5.zip">Download the Qt Creator project 'CppUnitsExample5' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.04 (precise)</li>
  <li><img src="PicUbuntu.png" alt="Ubuntu"/> <a href="CppUbuntu.htm">Ubuntu</a> 12.04 (precise)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.4.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.6.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.46.1</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.6.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppUnitsExample5.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= core
<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui
<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp0x.htm">c++0x</a>
<br/>
win32 { INCLUDEPATH += E:/boost_1_50_0 }
<br/>
TARGET = CppUnitsExample5
<br/>
CONFIG&nbsp;&nbsp; += console
<br/>
CONFIG&nbsp;&nbsp; -= app_bundle
<br/>
TEMPLATE = app
<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIomanipH.htm">iomanip</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>nano,milli,kilo
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>meter
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/io.hpp&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/physical_dimensions/area.hpp&gt; <a href="CppComment.htm">//</a>area
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> Distance
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppUnits.htm">boost::units</a>::quantity&lt;<a href="CppUnits.htm">boost::units</a>::si::length&gt; Distance_type;
<br/>
&nbsp;&nbsp;Distance(<b><a href="CppConst.htm">const</a></b> Distance_type&amp; distance) : m_distance(distance)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_distance <a href="CppOperatorGreaterEqual.htm">&gt;=</a> Distance_type(0));
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Distance_type&amp; <a href="CppGetDistance.htm">GetDistance</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_distance; }
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;Distance_type m_distance;
<br/>
};
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> Distance <b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> Distance&amp; lhs, <b><a href="CppConst.htm">const</a></b> Distance&amp; rhs)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Distance( lhs.<a href="CppGetDistance.htm">GetDistance</a>() <a href="CppOperatorPlus.htm">+</a> rhs.<a href="CppGetDistance.htm">GetDistance</a>() );
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> Distance <b><a href="CppOperatorDivide.htm">operator/</a></b>(<b><a href="CppConst.htm">const</a></b> Distance&amp; numerator, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> denominator)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Distance(numerator.<a href="CppGetDistance.htm">GetDistance</a>() <a href="CppOperatorDivide.htm">/</a> denominator);
<br/>
}
<br/>

<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Distance&amp; l)
<br/>
{
<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> l.<a href="CppGetDistance.htm">GetDistance</a>(); <b><a href="CppReturn.htm">return</a></b> os;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> Distance GetAverageDistance(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Distance&gt;&amp; v)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),Distance(Distance::Distance_type(0.0 * <a href="CppUnits.htm">boost::units</a>::si::meter)))
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(v.size());
<br/>
}
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppUnits.htm">boost::units</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppUnits.htm">boost::units</a>::si;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Distance&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Distance(Distance::Distance_type(2.34 * micro * meter)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Distance(Distance::Distance_type(3.00 * milli * meter)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Distance(Distance::Distance_type(5.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * meter)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Distance(Distance::Distance_type(7.00 * kilo&nbsp;&nbsp;* meter))
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Distance distance <a href="CppOperatorAssign.htm">=</a> GetAverageDistance(v);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppSetprecision.htm">std::setprecision</a>(20) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Distances:\n";
<br/>
&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;Distance&gt;(<a href="CppCout.htm">std::cout</a>,"\n"));
<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Average distance: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> distance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';
<br/>
}
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

