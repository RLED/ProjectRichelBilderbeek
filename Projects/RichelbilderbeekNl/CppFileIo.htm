<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>FileIo</title>
  <meta name="description" content="C++ FileIo"/>
  <meta name="keywords" content="C++ FileIo code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFileIo.htm">FileIo</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.483 at Sun Nov 17 13:44:39 2013
 -->
<p><a href="CppFileIo.htm">File I/O</a> is working with files, like saving, reading, copying and searching.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppFileIo.htm">File I/O</a> <a href="CppStl.htm">STL</a> <a href="CppFunction.htm">functions</a> and <a href="CppDataType.htm">data types</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppFstream.htm">std::fstream</a>: file <a href="CppStream.htm">stream</a></li>
  <li><a href="CppRemove.htm">std::remove</a>: remove a file</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppFileIo.htm">File I/O</a> <a href="CppCodeSnippets.htm">code snippets</a></h2>
<p>&nbsp;</p>
<ol>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppCopy_file.htm">boost::filesystem::copy_file, copy a file</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppIsRegularFile.htm">Check if a file exists, IsRegularFile</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/> 
    <a href="CppCopy_file.htm">Copy a file, boost::filesystem::copy_file</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppCopyFile.htm">Copy a file, CopyFile</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppCopyFile.htm">CopyFile, copy a file</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppDeleteFile.htm">DeleteFile, delete a file</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppDeleteFile.htm">Delete a file, DeleteFile</a>
  </li>
  <li>
    <img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToStringList.htm">FileToStringList, read a file in a TStringList</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToVector.htm">FileToVector, read a file in a std::vector</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetPath.htm">Get a file's path, GetPath</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCppFilesInFolder.htm">Get all C++ filenames in a folder, GetCppFilesInFolder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFilesInFolder.htm">Get all filenames in a folder, GetFilesInFolder</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetExtension.htm">Get the extension of a filename, GetExtension</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCurrentFolder.htm">Get the name of the folder your application runs in, GetCurrentFolder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCppFilesInFolder.htm">GetCppFilesInFolder, get all C++ filenames in a folder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetCurrentFolder.htm">GetCurrentFolder, get the name of the folder your application runs in</a>
  </li>
  <li>
    <img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFoldersInFolder.htm">Get the names of the folders in a folder, GetFoldersInFolder</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetExtension.htm">GetExtension, get the extension of a filename</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFilesInFolder.htm">GetFilesInFolder, get all filenames in a folder</a>
  </li>
  <li>
    <img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetFoldersInFolder.htm">GetFoldersInFolder, get all the names of the folders in a folder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppGetPath.htm">GetPath, get a file's path</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppIsFolder.htm">IsFolder, check if a path is a folder</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicQt.png" alt="Qt"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppIsRegularFile.htm">IsRegularFile, check if a file is a regular file</a>
  </li>

  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppReadDoubleFromFile.htm">ReadDoubleFromFile, read a double from file</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppReadDoubleFromFile.htm">Read a double from file, ReadDoubleFromFile</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToVector.htm">Read a file in a std::vector, FileToVector</a>
  </li>
  <li>
    <img src="PicVcl.png" alt="VCL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppFileToStringList.htm">Read a file in a TStringList, FileToStringList</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppRemoveExtension.htm">Remove the extension of a filename, RemoveExtension</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppRemoveExtension.htm">RemoveExtension, remove the extension of a filename</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppRunOtherProgram.htm">Run another program and use its output</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppSaveContainer.htm">Save a container to file, SaveContainer</a>
  </li>
  <li>
    <img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppSaveContainer.htm">SaveContainer, save a container to file</a>
  </li>
  <li>
    <img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicSpacer.png" alt=" "/><img src="PicSpacer.png" alt=" "/>
    <a href="CppSimplifyPath.htm">SimplifyPath, simplify a path</a>
  </li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>CppFileIo.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppFileIo.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppFileIo<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppFileIo/fileio.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppFileIo/fileio.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppFileIo/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>fileio.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileio.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppCfile.htm">FILE</a>IO_H<br/>
<a href="CppDefine.htm">#define</a> <a href="CppCfile.htm">FILE</a>IO_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fileio {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> CopyMode&nbsp;&nbsp; { allow_overwrite, prevent_overwrite };<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> RenameMode { allow_overwrite, prevent_overwrite };<br/>
<br/>
<a href="CppComment.htm">///</a>Creates a folder<br/>
<a href="CppComment.htm">///</a>Will abort <b><a href="CppIf.htm">if</a></b> it already exists<br/>
<b><a href="CppVoid.htm">void</a></b> CreateFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder);<br/>
<br/>
<a href="CppComment.htm">///</a>Copy a file. If prevent_overwrite is set to <b><a href="CppTrue.htm">true</a></b>, a file<br/>
<a href="CppComment.htm">///</a>cannot be copied over an existing target. If prevent_overwrite<br/>
<a href="CppComment.htm">///</a>is set to <b><a href="CppFalse.htm">false</a></b>, a file can be copied over an existing target,<br/>
<a href="CppComment.htm">///</a>which will overwrite the target.<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCopyFile.htm">CopyFile</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCopyFile.htm">CopyFile</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileNameFrom,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileNameTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode <a href="CppOperatorAssign.htm">=</a> CopyMode::prevent_overwrite);<br/>
<br/>
<a href="CppComment.htm">///</a>Delete a file<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDeleteFile.htm">DeleteFile</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDeleteFile.htm">DeleteFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">///</a>Deletes a folder<br/>
<a href="CppComment.htm">///</a>Will <b><a href="CppThrow.htm">throw</a></b> an <a href="CppException.htm">exception</a> <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> fails<br/>
<b><a href="CppVoid.htm">void</a></b> DeleteFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder);<br/>
<br/>
<a href="CppComment.htm">///</a>Checks <b><a href="CppIf.htm">if</a></b> two files are identical<br/>
<a href="CppComment.htm">///</a>Will <b><a href="CppThrow.htm">throw</a></b> <a href="CppBad_alloc.htm">std::bad_alloc</a> <b><a href="CppIf.htm">if</a></b> at least one of the files is<br/>
<a href="CppComment.htm">///</a>too big <b><a href="CppFor.htm">for</a></b> a <a href="CppVector.htm">std::vector</a>.<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppFilesAreIdentical.htm<br/>
<b><a href="CppBool.htm">bool</a></b> FilesAreIdentical(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename_a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename_b);<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppFileToVector.htm">FileToVector</a> reads a file and <a href="CppConvert.htm">converts</a> it to a <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;<br/>
<a href="CppComment.htm">///</a>Throws <a href="CppBad_alloc.htm">std::bad_alloc</a> <b><a href="CppIf.htm">if</a></b> the file is too big to fit in <a href="CppVector.htm">std::vector</a><br/>
<a href="CppComment.htm">///</a>Throws <a href="CppLogic_error.htm">std::logic_error</a> <b><a href="CppIf.htm">if</a></b> the file does not exist<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.htm">FileToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">///</a>Returns the extension of a filename<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetExtension.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">///</a>Returns the extension of a filename, without a trailing dot<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetExtensionNoDot(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">///</a>Returns the extension of a filename, with a trailing dot<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetExtensionWithDot(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the basename of a file, e.g. '/Folder/temp.txt' <a href="CppOperatorMinus.htm">-</a>&gt; 'temp'<br/>
<a href="CppComment.htm">///</a>Replacement of <a href="CppFilesystem.htm">boost::filesystem</a>::basename<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppGetFileBasename.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetFileBasename(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder);<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>By<a href="CppRegex.htm">Regex</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; <a href="CppRegex.htm">regex</a>_str);<br/>
<br/>
<a href="CppComment.htm">///</a>Returns the path of a filename<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetPath.htm">GetPath</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">///</a>Returns the superfolder from a path<br/>
<a href="CppComment.htm">///</a>For example: '/A/B/C' its superfolder is '/A/B'<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetSuperFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder);<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the name of a folder that does not exist<br/>
<a href="CppComment.htm">///</a>Will <b><a href="CppThrow.htm">throw</a></b> a <a href="CppRuntime_error.htm">std::runtime_error</a> in the unlikely<br/>
<a href="CppComment.htm">///</a><b><a href="CppCase.htm">case</a></b> it fails after one thousand <a href="CppTime.htm">time</a>s<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetTempFolderName();<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the <a href="CppVersion.htm">version</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the <a href="CppVersion.htm">version</a> history<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Returns <b><a href="CppIf.htm">if</a></b> the name is a folder name<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppIsFolder.htm<br/>
<b><a href="CppBool.htm">bool</a></b> IsFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Determines <b><a href="CppIf.htm">if</a></b> a filename is a regular file<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIsRegularFile.htm">IsRegularFile</a>.htm<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppIsRegularFile.htm">IsRegularFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>Removes the path of a filename<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppRemovePath.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> RemovePath(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename);<br/>
<br/>
<a href="CppComment.htm">///</a>Renames a file<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppRenameFile.htm<br/>
<b><a href="CppVoid.htm">void</a></b> RenameFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; to,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> RenameMode rename_mode <a href="CppOperatorAssign.htm">=</a> RenameMode::prevent_overwrite);<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fileio<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppCfile.htm">FILE</a>IO_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>fileio.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileio.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppInclude.htm">#include</a> "fileio.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostXpressive.htm">xpressive</a>/<a href="CppBoostXpressive.htm">xpressive</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDir.htm">QDir</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fileio::<a href="CppCopyFile.htm">CopyFile</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileNameFrom,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; fileNameTo,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameFrom) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot copy a non-existing file");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (copy_mode <a href="CppOperatorEqual.htm">==</a> CopyMode::prevent_overwrite <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameTo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>("Copying to an existing file is not allowed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameTo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDeleteFile.htm">DeleteFile</a> ensures a correct deletion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(fileNameTo);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfstream.htm">std::ifstream</a> in (fileNameFrom.c_str());<br/>
&nbsp;&nbsp;<a href="CppOfstream.htm">std::ofstream</a> out(fileNameTo.c_str());<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> in.rdbuf();<br/>
&nbsp;&nbsp;out.close();<br/>
&nbsp;&nbsp;in.close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fileio::CreateFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only create folders that <b><a href="CppDo.htm">do</a></b> not exist yes");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> cmd <a href="CppOperatorAssign.htm">=</a> "mkdir " <a href="CppOperatorPlus.htm">+</a> folder;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error <a href="CppOperatorAssign.htm">=</a> <a href="CppSystem.htm">std::system</a>(cmd.c_str());<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error) { <a href="CppTRACE.htm">TRACE</a>(cmd); }<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!error <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume mkdir works under both <a href="CppWindows.htm">Windows</a> and <a href="CppLinux.htm">Linux</a>");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error) <b><a href="CppThrow.htm">throw</a></b> <a href="CppRuntime_error.htm">std::runtime_error</a>("CreateFolder failed");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsFolder(folder) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "it should work");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fileio::<a href="CppDeleteFile.htm">DeleteFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRemove.htm">std::remove</a>(filename.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> cmd <a href="CppOperatorAssign.htm">=</a> "attrib <a href="CppOperatorMinus.htm">-</a>r " <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSystem.htm">std::system</a>(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRemove.htm">std::remove</a>(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "Failed to <b><a href="CppDelete.htm">delete</a></b> " <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must not exist <a href="CppAny.htm">any</a>more");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fileio::DeleteFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsFolder(folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only <b><a href="CppDelete.htm">delete</a></b> folders that <b><a href="CppDo.htm">do</a></b> exist");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> cmd <a href="CppOperatorAssign.htm">=</a> "rmdir " <a href="CppOperatorPlus.htm">+</a> folder;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error <a href="CppOperatorAssign.htm">=</a> <a href="CppSystem.htm">std::system</a>(cmd.c_str());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!error <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume rmdir works under both <a href="CppWindows.htm">Windows</a> and <a href="CppLinux.htm">Linux</a>");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppRuntime_error.htm">std::runtime_error</a>("DeleteFolder failed by system call");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsFolder(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppRuntime_error.htm">std::runtime_error</a>("DeleteFolder failed in deleting the folder");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fileio::FilesAreIdentical(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename_a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename_b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_a))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename_a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_b))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename_b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_a) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exist to be compared");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_b) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exist to be compared");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v { <a href="CppFileToVector.htm">FileToVector</a>(filename_a) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; w { <a href="CppFileToVector.htm">FileToVector</a>(filename_b) };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v <a href="CppOperatorEqual.htm">==</a> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::fileio::<a href="CppFileToVector.htm">FileToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(filename));<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppIfstream.htm">std::ifstream</a> in(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(in.is_open());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Without <b><a href="CppThis.htm">this</a></b> test in release mode,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the program might run indefinitely when the file does not exists<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!in.is_open())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "ERROR: file does not exist: " <a href="CppOperatorPlus.htm">+</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>(s.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetline.htm">std::getline</a>(in,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s); <a href="CppComment.htm">//</a>Might <b><a href="CppThrow.htm">throw</a></b> <a href="CppBad_alloc.htm">std::bad_alloc</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::GetExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetExtensionWithDot(filename);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::GetExtensionNoDot(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> rex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(.*)?(\\.)([A-Za-z]*)?" );<br/>
&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match( filename, what, rex ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> what[3];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "";<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::GetExtensionWithDot(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;( <a href="CppCount.htm">std::count</a>(filename.begin(),filename.end(),'.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppString.htm">std::string</a>(".")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppString.htm">std::string</a>("")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> GetExtensionNoDot(filename);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::GetFileBasename(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> rex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((.*)(/|\\\\))?([A-Za-z0-9_-]*)((\\.)([A-Za-z0-9]*))?" );<br/>
&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match( filename, what, rex ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> what[4];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "";<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::fileio::<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQDir.htm">QDir</a> dir(folder.c_str());<br/>
&nbsp;&nbsp;dir.setFilter(<a href="CppQDir.htm">QDir</a>::Files);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQFile.htm">QFile</a>InfoList list <a href="CppOperatorAssign.htm">=</a> dir.entryInfoList();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppQFile.htm">QFile</a>InfoList to <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; of filenames<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> list.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i <a href="CppOperatorNotEqual.htm">!=</a> size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> file_name <a href="CppOperatorAssign.htm">=</a> list.at(i).fileName().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(file_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::fileio::<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>By<a href="CppRegex.htm">Regex</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; <a href="CppRegex.htm">regex</a>_str)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get all filenames<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <a href="CppRegex.htm">regex</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> rex <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(<a href="CppRegex.htm">regex</a>_str);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the resulting <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; w;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy all filenames matching the <a href="CppRegex.htm">regex</a> in the resulting <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppCopy_if.htm">std::copy_if</a>(v.begin(),v.end(),<a href="CppBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[rex](<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match(s, what, rex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::<a href="CppGetPath.htm">GetPath</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> filename.rfind("/",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppMax.htm">std::max</a>(a,b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(filename.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename.substr(0,i);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::GetSuperFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> folder.rfind("\\",folder.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> folder.rfind("/",folder.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppMax.htm">std::max</a>(a,b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(folder.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppString.htm">std::string</a>("")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: folder.substr(0,i);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::GetTempFolderName()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Limit the number of searches, to prevent the program from freezing<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It might occur that the first random names are taken, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>of working without a randomize <a href="CppTime.htm">time</a>r first<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "tmpfoldername"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRand.htm">std::rand</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRand.htm">std::rand</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsFolder(s.str())) <b><a href="CppReturn.htm">return</a></b> s.str();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppRuntime_error.htm">std::runtime_error</a>("Could not find a temporary folder name");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::fileio::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-10-14: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-11-08: <a href="CppVersion.htm">Version</a> 1.1: improved <a href="CppFileToVector.htm">FileToVector</a>, improved GetFileBasename, added some <a href="CppFunction.htm">function</a>s"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fileio::IsFolder(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQDir.htm">QDir</a>(filename.c_str()).exists();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fileio::<a href="CppIsRegularFile.htm">IsRegularFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !<a href="CppQDir.htm">QDir</a>(filename.c_str()).exists() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppQFile.htm">QFile</a>::exists(filename.c_str());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fileio::RemovePath(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppSize_t.htm">std::size_t</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> a <a href="CppOperatorAssign.htm">=</a> filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppString.htm">std::string</a>::npos) v.push_back(a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> b <a href="CppOperatorAssign.htm">=</a> filename.rfind("/",filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppString.htm">std::string</a>::npos) v.push_back(b);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.htm">return</a></b> filename;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> *<a href="CppMax_element.htm">std::max_element</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> j <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; filename.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> filename.substr(j,filename.size() <a href="CppOperatorMinus.htm">-</a> j);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fileio::RenameFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; to,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> RenameMode rename_mode)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppIsRegularFile.htm">IsRegularFile</a>(from))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(from);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(from) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot rename a non-existing file");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorNotEqual.htm">!=</a> to <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot rename to the same filename");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rename_mode <a href="CppOperatorEqual.htm">==</a> RenameMode::prevent_overwrite <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppIsRegularFile.htm">IsRegularFile</a>(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>("Renaming to an existing file is not allowed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppIsRegularFile.htm">IsRegularFile</a>(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDeleteFile.htm">DeleteFile</a> ensures a correct deletion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(to);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> <a href="CppRename.htm">std::rename</a>(from.c_str(),to.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (result <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(to)&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(from));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete 'from' manually<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(to)&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(from));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fileio::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::fileio::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCopyFile.htm">CopyFile</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> filename { "tmp.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> filename_copy { "tmp_copy.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename_copy);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a regular file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.htm">std::ofstream</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.open(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "TEMP TEXT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CopyMode copy_mode {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? CopyMode::allow_overwrite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: CopyMode::prevent_overwrite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopyFile.htm">CopyFile</a>(filename,filename_copy,copy_mode);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename_copy);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_copy));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetTempFolderName, CreateFolder and DeleteFolder<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Depth 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> f { GetTempFolderName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(f) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsFolder(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Depth 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> super_folder { GetTempFolderName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(super_folder) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateFolder(super_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsFolder(super_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> f { GetTempFolderName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(f) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsFolder(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsFolder(super_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(super_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsFolder(super_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>FilesAreIdentical<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; filenames { "tmp_a.txt", "tmp_b.txt", "tmp_c.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_filenames <a href="CppOperatorAssign.htm">=</a> filenames.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename: filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_filenames; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> filenames[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_filenames; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> filenames[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(FilesAreIdentical(s,t) <a href="CppOperatorEqual.htm">==</a> (i <a href="CppOperatorEqual.htm">==</a> j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetFileBasename<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("tmp.") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("tmp.x") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("tmp.text") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("input_triangle"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder/My-Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("MyFolder/My_Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Games.htm">Games</a>/<a href="GameConnectThree.htm">GameConnectThree</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("<a href="GameConnectThree.htm">GameConnectThree</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Games.htm">Games</a>/<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("<a href="GameAminoAcidFighter.htm">GameAminoAcidFighter</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Games.htm">Games</a>/<a href="GameK3OpEenRij.htm">GameK3OpEenRij</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("<a href="GameK3OpEenRij.htm">GameK3OpEenRij</a>"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetFileBasename("/home/richel/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>/<a href="Projects.htm">Projects</a>/<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("<a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetExtension<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("tmp.") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("tmp.x") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("tmp.text") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("text"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("longextension"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder/My-Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionNoDot("MyFolder/My_Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("txt"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("tmp.") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("tmp.x") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".x"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("tmp.text") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".text"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".longextension"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder/My-Folder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionWithDot("MyFolder/My_Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("tmp.") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("tmp.x") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".x"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("tmp.text") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".text"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("tmp.longextension") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".longextension"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("input_triangle.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder/My_Folder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension("MyFolder/My-Folder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>(".txt"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetPath.htm">GetPath</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>path/<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>-path/<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>-path/<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>_path/<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("/<a href="CppAny.htm">any</a>_path/<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"/<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>-path\\<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>-path\\<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>-path\\<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>_path\\<a href="CppAny.htm">any</a>-file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>_path\\<a href="CppAny.htm">any</a>_file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>_path\\<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetPath.htm">GetPath</a>("C:\\<a href="CppAny.htm">any</a>path\\<a href="CppAny.htm">any</a>file<a href="CppImplementationFile.htm">.cpp</a>")<a href="CppOperatorEqual.htm">==</a>"C:\\<a href="CppAny.htm">any</a>path");<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetSuperFolder<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\A\\B")<a href="CppOperatorEqual.htm">==</a>"C:\\A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\A\\B\\C")<a href="CppOperatorEqual.htm">==</a>"C:\\A\\B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\")<a href="CppOperatorEqual.htm">==</a>"C:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:")<a href="CppOperatorEqual.htm">==</a>"");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/A/B")<a href="CppOperatorEqual.htm">==</a>"/A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/A/B/C")<a href="CppOperatorEqual.htm">==</a>"/A/B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/A")<a href="CppOperatorEqual.htm">==</a>"");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\AnySuperFolder\\AnyFolder")<a href="CppOperatorEqual.htm">==</a>"C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\AnySuperFolder\\Any_Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\AnySuperFolder\\Any-Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\Any_Super_Folder\\Any_Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\Any_Super_Folder\\Any-Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\Any-Super-Folder\\Any_Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("C:\\Any-Super-Folder\\Any-Folder")<a href="CppOperatorEqual.htm">==</a>"C:\\Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/AnySuperFolder/AnyFolder")<a href="CppOperatorEqual.htm">==</a>"/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/AnySuperFolder/Any_Folder")<a href="CppOperatorEqual.htm">==</a>"/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/AnySuperFolder/Any-Folder")<a href="CppOperatorEqual.htm">==</a>"/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/Any_Super_Folder/Any_Folder")<a href="CppOperatorEqual.htm">==</a>"/Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/Any_Super_Folder/Any-Folder")<a href="CppOperatorEqual.htm">==</a>"/Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/Any-Super-Folder/Any_Folder")<a href="CppOperatorEqual.htm">==</a>"/Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSuperFolder("/Any-Super-Folder/Any-Folder")<a href="CppOperatorEqual.htm">==</a>"/Any-Super-Folder");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppIsRegularFile.htm">IsRegularFile</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> filename { "tmp.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a regular file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFstream.htm">std::fstream</a> f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.open(filename.c_str(),<a href="CppStd.htm">std</a>::ios::out);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "TEMP TEXT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RemovePath<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Another/MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet/Another/MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Another\\MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet\\Another\\MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Another/MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Another\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet\\Another/MyFolder\\x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet\\Another\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet\\An-other\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet\\An_other\\MyFolder/x.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet\\Another\\MyFolder/x_y.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x_y.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(RemovePath("Yet\\Another\\MyFolder/x-y.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppString.htm">std::string</a>("x-y.txt"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RenameFile<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> filename_from <a href="CppOperatorAssign.htm">=</a> "tmp.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> filename_to&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> "tmp2.txt";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete possible old temporary files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename_from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDeleteFile.htm">DeleteFile</a>(filename_to);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <b><a href="CppNew.htm">new</a></b> file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.htm">std::ofstream</a> f(filename_from.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "TMP";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only filename_from will exist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_to));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RenameFile(filename_from,filename_to);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only filename_to will exist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsRegularFile.htm">IsRegularFile</a>(filename_to));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::fileio::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
