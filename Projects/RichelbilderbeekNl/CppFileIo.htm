<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>FileIo</title>
  <meta name="description" content="C++ FileIo"/>
  <meta name="keywords" content="C++ FileIo "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFileIo.htm">FileIo</a></h1>
<p>&nbsp;</p>
<h2>./CppFileIo/CppFileIo.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/CppFileIo.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFileIo<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFileIo/fileio.cpp<br/>
<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFileIo/fileio.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFileIo/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/filecopymode.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/filecopymode.h" border = "1"><tr><td><code>
#ifndef FILECOPYMODE_H<br/>
#define FILECOPYMODE_H<br/>
<br/>
namespace ribi {<br/>
namespace fileio {<br/>
<br/>
enum class CopyMode&nbsp;&nbsp; { allow_overwrite, prevent_overwrite };<br/>
<br/>
} //~namespace fileio<br/>
} //~namespace ribi<br/>
<br/>
#endif // FILECOPYMODE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/fileio.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/fileio.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "fileio.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;fstream&gt;<br/>
<br/>
#include &lt;boost/xpressive/xpressive.hpp&gt;<br/>
<br/>
#include &lt;QDir&gt;<br/>
#include &lt;QFile&gt;<br/>
<br/>
#include "filecopymode.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
<br/>
void ribi::fileio::CopyFile(<br/>
&nbsp;&nbsp;const std::string&amp; fileNameFrom,<br/>
&nbsp;&nbsp;const std::string&amp; fileNameTo,<br/>
&nbsp;&nbsp;const CopyMode copy_mode)<br/>
{<br/>
&nbsp;&nbsp;assert(IsRegularFile(fileNameFrom) &amp;&amp; "Cannot copy a non-existing file");<br/>
&nbsp;&nbsp;if (copy_mode == CopyMode::prevent_overwrite &amp;&amp; IsRegularFile(fileNameTo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("Copying to an existing file is not allowed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (IsRegularFile(fileNameTo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//DeleteFile ensures a correct deletion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(fileNameTo);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;std::ifstream in (fileNameFrom.c_str());<br/>
&nbsp;&nbsp;std::ofstream out(fileNameTo.c_str());<br/>
&nbsp;&nbsp;out &lt;&lt; in.rdbuf();<br/>
&nbsp;&nbsp;out.close();<br/>
&nbsp;&nbsp;in.close();<br/>
}<br/>
<br/>
void ribi::fileio::CreateFolder(const std::string&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if(IsFolder(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(folder);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(!IsFolder(folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Can only create folders that do not exist yes");<br/>
&nbsp;&nbsp;const std::string cmd = "mkdir " + folder;<br/>
&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (error) { TRACE(cmd); }<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(!error &amp;&amp; "Assume mkdir works under both Windows and Linux");<br/>
&nbsp;&nbsp;if (error) throw std::runtime_error("CreateFolder failed");<br/>
&nbsp;&nbsp;assert(IsFolder(folder) &amp;&amp; "it should work");<br/>
}<br/>
<br/>
void ribi::fileio::DeleteFile(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if(!IsRegularFile(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(IsRegularFile(filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Can only delete existing files");<br/>
&nbsp;&nbsp;std::remove(filename.c_str());<br/>
<br/>
&nbsp;&nbsp;//Under Windows, readonly files must be made deleteable<br/>
&nbsp;&nbsp;if (IsRegularFile(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef _WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string cmd = "attrib -r " + filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::system(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::remove(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (IsRegularFile(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = "Failed to delete " + filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(!IsRegularFile(filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "File must not exist anymore");<br/>
}<br/>
<br/>
void ribi::fileio::DeleteFolder(const std::string&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;assert(IsFolder(folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Can only delete folders that do exist");<br/>
<br/>
&nbsp;&nbsp;//Delete all files<br/>
&nbsp;&nbsp;for (const std::string&amp; subfolder: GetFoldersInFolder(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(folder.empty() ? folder : folder + fileio::GetPathSeperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ subfolder<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(GetFoldersInFolder(folder).empty());<br/>
&nbsp;&nbsp;for (const std::string&amp; filename: GetFilesInFolder(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(folder.empty() ? folder : folder + fileio::GetPathSeperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ filename<br/>
&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(GetFilesInFolder(folder).empty());<br/>
&nbsp;&nbsp;const std::string cmd = "rmdir " + folder;<br/>
&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;assert(!error &amp;&amp; "Assume rmdir works under both Windows and Linux");<br/>
&nbsp;&nbsp;if (error)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::runtime_error("DeleteFolder failed by system call");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (IsFolder(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::runtime_error("DeleteFolder failed in deleting the folder");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::fileio::FilesAreIdentical(<br/>
&nbsp;&nbsp;const std::string&amp; filename_a,<br/>
&nbsp;&nbsp;const std::string&amp; filename_b)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!IsRegularFile(filename_a))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(filename_a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (!IsRegularFile(filename_b))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(filename_b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(IsRegularFile(filename_a) &amp;&amp; "File must exist to be compared");<br/>
&nbsp;&nbsp;assert(IsRegularFile(filename_b) &amp;&amp; "File must exist to be compared");<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v { FileToVector(filename_a) };<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; w { FileToVector(filename_b) };<br/>
&nbsp;&nbsp;return v == w;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::fileio::FileToVector(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!IsRegularFile(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
&nbsp;&nbsp;assert(!IsFolder(filename));<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;std::ifstream in(filename.c_str());<br/>
&nbsp;&nbsp;assert(in.is_open());<br/>
&nbsp;&nbsp;//Without this test in release mode,<br/>
&nbsp;&nbsp;//the program might run indefinitely when the file does not exists<br/>
&nbsp;&nbsp;if (!in.is_open())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = "ERROR: file does not exist: " + filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(s.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;for (int i=0; !in.eof(); ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::getline(in,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s); //Might throw std::bad_alloc<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Remove empty line at back of vector<br/>
&nbsp;&nbsp;if (!v.empty() &amp;&amp; v.back().empty()) v.pop_back();<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetExtension(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;return GetExtensionWithDot(filename);<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetExtensionNoDot(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;static const boost::xpressive::sregex rex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= boost::xpressive::sregex::compile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(.*)?(\\.)([A-Za-z]*)?" );<br/>
&nbsp;&nbsp;boost::xpressive::smatch what;<br/>
<br/>
&nbsp;&nbsp;if( boost::xpressive::regex_match( filename, what, rex ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return what[3];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return "";<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetExtensionWithDot(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;( std::count(filename.begin(),filename.end(),'.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? std::string(".")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: std::string("")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ GetExtensionNoDot(filename);<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetFileBasename(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;const boost::xpressive::sregex rex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= boost::xpressive::sregex::compile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((.*)(/|\\\\))?([A-Za-z0-9_-]*)((\\.)([A-Za-z0-9]*))?" );<br/>
&nbsp;&nbsp;boost::xpressive::smatch what;<br/>
<br/>
&nbsp;&nbsp;if( boost::xpressive::regex_match( filename, what, rex ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return what[4];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return "";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::fileio::GetFilesInFolder(const std::string&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;assert(IsFolder(folder));<br/>
&nbsp;&nbsp;QDir dir(folder.c_str());<br/>
&nbsp;&nbsp;dir.setFilter(QDir::Files);<br/>
&nbsp;&nbsp;const QFileInfoList list = dir.entryInfoList();<br/>
<br/>
&nbsp;&nbsp;//Convert QFileInfoList to std::vector&lt;std::string&gt; of filenames<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;const int size = list.size();<br/>
&nbsp;&nbsp;for (int i = 0; i != size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string file_name = list.at(i).fileName().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(file_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::fileio::GetFilesInFolderRecursive(const std::string&amp; root_folder)<br/>
{<br/>
&nbsp;&nbsp;assert(IsFolder(root_folder));<br/>
<br/>
&nbsp;&nbsp;//Files in root_folder<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; files_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFilesInFolder(root_folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Copy the files and folders with path added<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(files_here.begin(),files_here.end(),std::back_inserter(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[root_folder](const std::string&amp; filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_folder + GetPathSeperator() + filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename_here));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return filename_here;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Folders in root_folder<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; folders_todo;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; folders_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFoldersInFolder(root_folder)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(folders_here.begin(),folders_here.end(),std::back_inserter(folders_todo),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[root_folder](const std::string&amp; foldername)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string folder_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root_folder + GetPathSeperator() + foldername<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsFolder(folder_here));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return folder_here;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Search through all sub folders<br/>
&nbsp;&nbsp;while (!folders_todo.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string folder_todo {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folders_todo.back() //Read from the back, so push_back can be used<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Done with this folder<br/>
&nbsp;&nbsp;&nbsp;&nbsp;folders_todo.pop_back();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if(!(folders_todo.empty() || folders_todo.back() != folder_todo))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; todo: folders_todo) { TRACE(todo); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; result: v) { TRACE(result); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( (folders_todo.empty() || folders_todo.back() != folder_todo)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Next folder must not be the one that is just processed");<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; files_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFilesInFolder(folder_todo)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; folders_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFoldersInFolder(folder_todo)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; folder_here: folders_here) { TRACE(folder_here); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Copy the files and folders with path added<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(files_here.begin(),files_here.end(),std::back_inserter(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[folder_todo](const std::string&amp; filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string file_here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_todo + GetPathSeperator() + filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(file_here));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return file_here;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(folders_here.begin(),folders_here.end(),std::back_inserter(folders_todo),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[folder_todo](const std::string&amp; foldername)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!foldername.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string subfolder_name {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_todo + GetPathSeperator() + foldername<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(subfolder_name != folder_todo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return subfolder_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::fileio::GetFilesInFolderByRegex(<br/>
&nbsp;&nbsp;const std::string&amp; folder,<br/>
&nbsp;&nbsp;const std::string&amp; regex_str)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if(!IsFolder(folder))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(folder);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Get all filenames<br/>
&nbsp;&nbsp;assert(IsFolder(folder));<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = GetFilesInFolder(folder);<br/>
<br/>
&nbsp;&nbsp;//Create the regex<br/>
&nbsp;&nbsp;const boost::xpressive::sregex rex = boost::xpressive::sregex::compile(regex_str);<br/>
<br/>
&nbsp;&nbsp;//Create the resulting std::vector<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; w;<br/>
<br/>
&nbsp;&nbsp;//Copy all filenames matching the regex in the resulting std::vector<br/>
&nbsp;&nbsp;std::copy_if(v.begin(),v.end(),std::back_inserter(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[rex](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::xpressive::smatch what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::xpressive::regex_match(s, what, rex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::fileio::GetFoldersInFolder(const std::string&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;assert(IsFolder(folder));<br/>
&nbsp;&nbsp;QDir dir(folder.c_str());<br/>
&nbsp;&nbsp;dir.setFilter(QDir::Dirs | QDir::NoDotAndDotDot&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;const QFileInfoList list = dir.entryInfoList();<br/>
<br/>
&nbsp;&nbsp;//Convert QFileInfoList to std::vector&lt;std::string&gt; of filenames<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;const int size = list.size();<br/>
&nbsp;&nbsp;for (int i = 0; i != size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string folder_name = list.at(i).fileName().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!folder_name.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(folder_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;for (const std::string s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),s) == 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Every folder name is unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetPath(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;const int a = filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;const int b = filename.rfind("/",filename.size());<br/>
&nbsp;&nbsp;const int i = std::max(a,b);<br/>
&nbsp;&nbsp;assert(i &lt; static_cast&lt;int&gt;(filename.size()));<br/>
&nbsp;&nbsp;return filename.substr(0,i);<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetPathSeperator() noexcept<br/>
{<br/>
&nbsp;&nbsp;#ifdef _WIN32<br/>
&nbsp;&nbsp;return "\\";<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;return "/";<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetSuperFolder(const std::string&amp; folder)<br/>
{<br/>
&nbsp;&nbsp;const int a = folder.rfind("\\",folder.size());<br/>
&nbsp;&nbsp;const int b = folder.rfind("/",folder.size());<br/>
&nbsp;&nbsp;const int i = std::max(a,b);<br/>
&nbsp;&nbsp;assert(i &lt; static_cast&lt;int&gt;(folder.size()));<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i == static_cast&lt;int&gt;(std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? std::string("")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: folder.substr(0,i);<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetTempFileName()<br/>
{<br/>
&nbsp;&nbsp;//Limit the number of searches, to prevent the program from freezing<br/>
&nbsp;&nbsp;//It might occur that the first random names are taken, because<br/>
&nbsp;&nbsp;//of working without a randomize timer first<br/>
&nbsp;&nbsp;for (int i=0; i!=1000; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; "tmpfilename"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!IsRegularFile(s.str())) return s.str();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;throw std::runtime_error("Could not find a temporary file name");<br/>
}<br/>
<br/>
<br/>
const std::string ribi::fileio::GetTempFolderName()<br/>
{<br/>
&nbsp;&nbsp;//Limit the number of searches, to prevent the program from freezing<br/>
&nbsp;&nbsp;//It might occur that the first random names are taken, because<br/>
&nbsp;&nbsp;//of working without a randomize timer first<br/>
&nbsp;&nbsp;for (int i=0; i!=1000; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; "tmpfoldername"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::rand();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!IsFolder(s.str())) return s.str();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;throw std::runtime_error("Could not find a temporary folder name");<br/>
}<br/>
<br/>
const std::string ribi::fileio::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.2";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::fileio::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-10-14: Version 1.0: initial version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-11-08: Version 1.1: improved FileToVector, improved GetFileBasename, added some functions",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-12-10: Version 1.2: improved existing function, added some functions"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
bool ribi::fileio::IsFolder(const std::string&amp; filename) noexcept<br/>
{<br/>
&nbsp;&nbsp;return QDir(filename.c_str()).exists();<br/>
}<br/>
<br/>
bool ribi::fileio::IsRegularFile(const std::string&amp; filename) noexcept<br/>
{<br/>
&nbsp;&nbsp;return !QDir(filename.c_str()).exists() &amp;&amp; QFile::exists(filename.c_str());<br/>
}<br/>
<br/>
const std::string ribi::fileio::RemovePath(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::size_t&gt; v;<br/>
&nbsp;&nbsp;const std::size_t a = filename.rfind("\\",filename.size());<br/>
&nbsp;&nbsp;if (a != std::string::npos) v.push_back(a);<br/>
&nbsp;&nbsp;const std::size_t b = filename.rfind("/",filename.size());<br/>
&nbsp;&nbsp;if (b != std::string::npos) v.push_back(b);<br/>
&nbsp;&nbsp;if (v.empty()) return filename;<br/>
&nbsp;&nbsp;const std::size_t i = *std::max_element(v.begin(),v.end());<br/>
&nbsp;&nbsp;assert(i &lt; filename.size());<br/>
&nbsp;&nbsp;const std::size_t j = i + 1;<br/>
&nbsp;&nbsp;assert(j &lt; filename.size());<br/>
&nbsp;&nbsp;const std::string s = filename.substr(j,filename.size() - j);<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
void ribi::fileio::RenameFile(<br/>
&nbsp;&nbsp;const std::string&amp; from,<br/>
&nbsp;&nbsp;const std::string&amp; to,<br/>
&nbsp;&nbsp;const RenameMode rename_mode)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!IsRegularFile(from))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(from);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(IsRegularFile(from) &amp;&amp; "Cannot rename a non-existing file");<br/>
&nbsp;&nbsp;assert(from != to &amp;&amp; "Cannot rename to the same filename");<br/>
&nbsp;&nbsp;if (rename_mode == RenameMode::prevent_overwrite &amp;&amp; IsRegularFile(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("Renaming to an existing file is not allowed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (IsRegularFile(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//DeleteFile ensures a correct deletion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(to);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const int result = std::rename(from.c_str(),to.c_str());<br/>
&nbsp;&nbsp;if (result == 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsRegularFile(to)&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(from));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Delete 'from' manually<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsRegularFile(to)&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsRegularFile(to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(from));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::fileio::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Starting ribi::fileio::Test");<br/>
&nbsp;&nbsp;//CopyFile<br/>
&nbsp;&nbsp;for (int i=0; i!=2; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename { GetTempFileName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename_copy { GetTempFileName() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Create a regular file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_copy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.open(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f &lt;&lt; "TEMP TEXT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_copy));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const CopyMode copy_mode {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i == 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? CopyMode::allow_overwrite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: CopyMode::prevent_overwrite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CopyFile(filename,filename_copy,copy_mode);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename_copy));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(filename_copy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename) &amp;&amp; "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_copy) &amp;&amp; "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//FilesAreIdentical<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; filenames { GetTempFileName(), GetTempFileName(), GetTempFileName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_filenames = filenames.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; filename: filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f &lt;&lt; filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=n_filenames; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = filenames[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j!=n_filenames; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string t = filenames[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(FilesAreIdentical(s,t) == (i == j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; filename: filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename) &amp;&amp; "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//FileToVector and VectorToFile, indidual<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename = GetTempFileName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v { "A","BC", "DEF" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToFile(v,filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; w { FileToVector(filename) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v != w)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; s: v) TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; t: w) TRACE(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//FileToVector and VectorToFile, many<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::vector&lt;std::string&gt;&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A" },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A", "B" },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A", "B", "C" },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "A", "", "C" }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const std::vector&lt;std::string&gt;&amp; w: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename = GetTempFileName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorToFile(w,filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; x { FileToVector(filename) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (w != x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; s: w) TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(x.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string&amp; t: x) TRACE(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(w == x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//GetTempFolderName, CreateFolder and DeleteFolder<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Depth 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string f { GetTempFolderName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(f) &amp;&amp; "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsFolder(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(f) &amp;&amp; "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Depth 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string super_folder { GetTempFolderName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(super_folder) &amp;&amp; "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateFolder(super_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsFolder(super_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string f { GetTempFolderName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(f) &amp;&amp; "A temporary folder name must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsFolder(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsFolder(super_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(super_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(super_folder) &amp;&amp; "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//GetFileBasename<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("tmp") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("tmp.") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("tmp.x") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("tmp.txt") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("tmp.text") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("tmp.longextension") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("input_triangle.txt") == std::string("input_triangle"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("tmp") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder/tmp") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder/tmp.txt") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder\\tmp.txt") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder/MyFolder/tmp") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder/MyFolder/tmp.txt") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder/MyFolder\\tmp.txt") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder/My-Folder\\tmp.txt") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("MyFolder/My_Folder\\tmp.txt") == std::string("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("/home/richel/ProjectRichelBilderbeek/Games/GameConnectThree")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== std::string("GameConnectThree"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("/home/richel/ProjectRichelBilderbeek/Games/GameAminoAcidFighter")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== std::string("GameAminoAcidFighter"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("/home/richel/ProjectRichelBilderbeek/Games/GameK3OpEenRij")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== std::string("GameK3OpEenRij"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetFileBasename("/home/richel/ProjectRichelBilderbeek/Projects/ProjectRichelBilderbeek")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== std::string("ProjectRichelBilderbeek"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//GetExtension<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("tmp.") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("tmp.x") == std::string("x"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("tmp.txt") == std::string("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("tmp.text") == std::string("text"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("tmp.longextension") == std::string("longextension"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("input_triangle.txt") == std::string("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder/tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder/tmp.txt") == std::string("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder\\tmp.txt") == std::string("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder/MyFolder/tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder/MyFolder/tmp.txt") == std::string("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder/MyFolder\\tmp.txt") == std::string("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder/My-Folder\\tmp.txt") == std::string("txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionNoDot("MyFolder/My_Folder\\tmp.txt") == std::string("txt"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("tmp.") == std::string("."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("tmp.x") == std::string(".x"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("tmp.text") == std::string(".text"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("tmp.longextension") == std::string(".longextension"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("input_triangle.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder/tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder/tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder\\tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder/MyFolder/tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder/MyFolder/tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder/MyFolder\\tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder/My-Folder/tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtensionWithDot("MyFolder/My_Folder\\tmp.txt") == std::string(".txt"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("tmp.") == std::string("."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("tmp.x") == std::string(".x"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("tmp.text") == std::string(".text"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("tmp.longextension") == std::string(".longextension"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("input_triangle.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder/tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder/tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder\\tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder/MyFolder/tmp") == std::string(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder/MyFolder/tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder/MyFolder\\tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder/My_Folder/tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExtension("MyFolder/My-Folder\\tmp.txt") == std::string(".txt"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//GetFilesInFolderRecursive<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Use the following structure:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - local.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - my_folder1/in_folder1.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - my_folder1/in_folder2.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - my_folder2/in_folder1.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - my_folder2/in_folder2.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - my_folder/my_subfolder/in_subfolder.txt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string local_filename { "local.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string folder_name1 { "my_folder1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string folder_name2 { "my_folder2" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string in_folder_filename1 { "in_folder.txt1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string in_folder_filename2 { "in_folder.txt2" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string subfolder_name1 { "my_subfolder1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string subfolder_name2 { "my_subfolder2" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string in_subfolder_filename1 { "in_subfolder1.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string in_subfolder_filename2 { "in_subfolder2.txt" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Folder creation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string folder_name:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + subfolder_name1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + subfolder_name2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + subfolder_name1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + subfolder_name2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsFolder(folder_name))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string cmd = "mkdir " + folder_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!error);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsFolder(folder_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//File creation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const std::string filename:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;local_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + in_folder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + in_folder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + in_folder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + in_folder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + subfolder_name1 + GetPathSeperator() + in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + subfolder_name1 + GetPathSeperator() + in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + subfolder_name2 + GetPathSeperator() + in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name1 + GetPathSeperator() + subfolder_name2 + GetPathSeperator() + in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + subfolder_name1 + GetPathSeperator() + in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + subfolder_name1 + GetPathSeperator() + in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + subfolder_name2 + GetPathSeperator() + in_subfolder_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name2 + GetPathSeperator() + subfolder_name2 + GetPathSeperator() + in_subfolder_filename2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsRegularFile(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Reading of the files and folders created<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFilesInFolderRecursive(folder_name1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 6);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Clean up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(folder_name1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFolder(folder_name2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(folder_name1) &amp;&amp; "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsFolder(folder_name2) &amp;&amp; "Temporary folder must be cleaned up");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//GetPath<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("/anypath/anyfile.cpp")=="/anypath");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("/any-path/any-file.cpp")=="/any-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("/any-path/any_file.cpp")=="/any-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("/any_path/any-file.cpp")=="/any_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("/any_path/any_file.cpp")=="/any_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("C:\\any-path\\any-file.cpp")=="C:\\any-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("C:\\any-path\\any_file.cpp")=="C:\\any-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("C:\\any-path\\anyfile.cpp")=="C:\\any-path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("C:\\any_path\\any-file.cpp")=="C:\\any_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("C:\\any_path\\any_file.cpp")=="C:\\any_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("C:\\any_path\\anyfile.cpp")=="C:\\any_path");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPath("C:\\anypath\\anyfile.cpp")=="C:\\anypath");<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//GetSuperFolder<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\A\\B")=="C:\\A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\A\\B\\C")=="C:\\A\\B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\")=="C:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:")=="");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/A/B")=="/A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/A/B/C")=="/A/B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/A")=="");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\AnySuperFolder\\AnyFolder")=="C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\AnySuperFolder\\Any_Folder")=="C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\AnySuperFolder\\Any-Folder")=="C:\\AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\Any_Super_Folder\\Any_Folder")=="C:\\Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\Any_Super_Folder\\Any-Folder")=="C:\\Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\Any-Super-Folder\\Any_Folder")=="C:\\Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("C:\\Any-Super-Folder\\Any-Folder")=="C:\\Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/AnySuperFolder/AnyFolder")=="/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/AnySuperFolder/Any_Folder")=="/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/AnySuperFolder/Any-Folder")=="/AnySuperFolder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/Any_Super_Folder/Any_Folder")=="/Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/Any_Super_Folder/Any-Folder")=="/Any_Super_Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/Any-Super-Folder/Any_Folder")=="/Any-Super-Folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetSuperFolder("/Any-Super-Folder/Any-Folder")=="/Any-Super-Folder");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//IsRegularFile<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename { GetTempFileName() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create a regular file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::fstream f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.open(filename.c_str(),std::ios::out);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f &lt;&lt; "TEMP TEXT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(filename);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename) &amp;&amp; "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//RemovePath<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("MyFolder/x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Another/MyFolder/x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet/Another/MyFolder/x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("MyFolder\\x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Another\\MyFolder\\x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet\\Another\\MyFolder\\x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Another/MyFolder\\x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Another\\MyFolder/x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet\\Another/MyFolder\\x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet\\Another\\MyFolder/x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet\\An-other\\MyFolder/x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet\\An_other\\MyFolder/x.txt") == std::string("x.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet\\Another\\MyFolder/x_y.txt") == std::string("x_y.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(RemovePath("Yet\\Another\\MyFolder/x-y.txt") == std::string("x-y.txt"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//RenameFile<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename_from { GetTempFileName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string filename_to&nbsp;&nbsp; { GetTempFileName() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_to));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Create new file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream f(filename_from.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f &lt;&lt; "TMP";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Only filename_from will exist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsRegularFile(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_to));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Rename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RenameFile(filename_from,filename_to);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Only filename_to will exist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( IsRegularFile(filename_to));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Clean up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(filename_to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename_to) &amp;&amp; "Temporary file must be cleaned up");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Finished ribi::fileio::Test successfully");<br/>
}<br/>
#endif<br/>
<br/>
void ribi::fileio::VectorToFile(<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt;&amp; v,<br/>
&nbsp;&nbsp;const std::string&amp; filename,<br/>
&nbsp;&nbsp;const CopyMode copy_mode<br/>
)<br/>
{<br/>
&nbsp;&nbsp;if (copy_mode == CopyMode::prevent_overwrite)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!IsRegularFile(filename) &amp;&amp; "File must not exist");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (IsRegularFile(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream msg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "VectorToFile: not allowed to overwrite file '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "'";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::runtime_error(msg.str().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::ofstream f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.end(),std::ostream_iterator&lt;std::string&gt;(f,"\n"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/fileio.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/fileio.h" border = "1"><tr><td><code>
#ifndef FILEIO_H<br/>
#define FILEIO_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
#include "fileiofwd.h"<br/>
#include "filecopymode.h"<br/>
<br/>
namespace ribi {<br/>
namespace fileio {<br/>
<br/>
enum class RenameMode { allow_overwrite, prevent_overwrite };<br/>
<br/>
///Creates a folder<br/>
///Will abort if it already exists<br/>
void CreateFolder(const std::string&amp; folder);<br/>
<br/>
///Copy a file. If prevent_overwrite is set to true, a file<br/>
///cannot be copied over an existing target. If prevent_overwrite<br/>
///is set to false, a file can be copied over an existing target,<br/>
///which will overwrite the target.<br/>
//From http://www.richelbilderbeek.nl/CppCopyFile.htm<br/>
void CopyFile(<br/>
&nbsp;&nbsp;const std::string&amp; fileNameFrom,<br/>
&nbsp;&nbsp;const std::string&amp; fileNameTo,<br/>
&nbsp;&nbsp;const CopyMode copy_mode = CopyMode::prevent_overwrite);<br/>
<br/>
///Delete a file<br/>
//From http://www.richelbilderbeek.nl/CppDeleteFile.htm<br/>
void DeleteFile(const std::string&amp; filename);<br/>
<br/>
///Deletes a folder its content recursively<br/>
///Will throw an exception if this fails<br/>
void DeleteFolder(const std::string&amp; folder);<br/>
<br/>
///Checks if two files are identical<br/>
///Will throw std::bad_alloc if at least one of the files is<br/>
///too big for a std::vector.<br/>
//From http://www.richelbilderbeek.nl/CppFilesAreIdentical.htm<br/>
bool FilesAreIdentical(<br/>
&nbsp;&nbsp;const std::string&amp; filename_a,<br/>
&nbsp;&nbsp;const std::string&amp; filename_b);<br/>
<br/>
///FileToVector reads a file and converts it to a std::vector&lt;std::string&gt;<br/>
///Throws std::bad_alloc if the file is too big to fit in std::vector<br/>
///Throws std::logic_error if the file does not exist<br/>
//From http://www.richelbilderbeek.nl/CppFileToVector.htm<br/>
const std::vector&lt;std::string&gt; FileToVector(const std::string&amp; filename);<br/>
<br/>
///Returns the extension of a filename<br/>
//From http://www.richelbilderbeek.nl/CppGetExtension.htm<br/>
const std::string GetExtension(const std::string&amp; filename);<br/>
<br/>
///Returns the extension of a filename, without a trailing dot<br/>
const std::string GetExtensionNoDot(const std::string&amp; filename);<br/>
<br/>
///Returns the extension of a filename, with a trailing dot<br/>
const std::string GetExtensionWithDot(const std::string&amp; filename);<br/>
<br/>
///Obtain the basename of a file or folder<br/>
///MyFolder/MyFile.txt - &gt; MyFile<br/>
///MyFolder/MySubFolder -&gt; MySubFolder<br/>
///GetFileBasename is a replacement of boost::filesystem::basename<br/>
///From http://www.richelbilderbeek.nl/CppGetFileBasename.htm<br/>
const std::string GetFileBasename(const std::string&amp; filename);<br/>
<br/>
///Obtain all files in a folder.<br/>
///This does not include those in a subfolder<br/>
//From http://www.richelbilderbeek.nl/CppGetFilesInFolder.htm<br/>
const std::vector&lt;std::string&gt; GetFilesInFolder(const std::string&amp; folder);<br/>
<br/>
///Obtain all files in a folder including thos in a subfolder<br/>
//From http://www.richelbilderbeek.nl/CppGetFilesInFolder.htm<br/>
const std::vector&lt;std::string&gt; GetFilesInFolderRecursive(const std::string&amp; folder);<br/>
<br/>
const std::vector&lt;std::string&gt; GetFilesInFolderByRegex(<br/>
&nbsp;&nbsp;const std::string&amp; folder,<br/>
&nbsp;&nbsp;const std::string&amp; regex_str);<br/>
<br/>
///Obtain all folder in a folder.<br/>
///This does not include those in a subfolder<br/>
//From http://www.richelbilderbeek.nl/CppGetFoldersInFolder.htm<br/>
const std::vector&lt;std::string&gt; GetFoldersInFolder(const std::string&amp; folder);<br/>
<br/>
///Obtain all folder in a folder.<br/>
///This does include those in a subfolder<br/>
//From http://www.richelbilderbeek.nl/CppGetFoldersInFolder.htm<br/>
const std::vector&lt;std::string&gt; GetFoldersInFolderRecursive(const std::string&amp; folder);<br/>
<br/>
///Returns the path of a filename<br/>
///From http://www.richelbilderbeek.nl/CppGetPath.htm<br/>
const std::string GetPath(const std::string&amp; filename);<br/>
<br/>
///Returns the path seperator depending on the operating system<br/>
///For Linux, this is a slash<br/>
///For Windows, this is a backslash<br/>
///From http://www.richelbilderbeek.nl/CppGetPathSeperator.htm<br/>
const std::string GetPathSeperator() noexcept;<br/>
<br/>
///Returns the superfolder from a path<br/>
///For example: '/A/B/C' its superfolder is '/A/B'<br/>
const std::string GetSuperFolder(const std::string&amp; folder);<br/>
<br/>
///Obtain the name of a file that does not exist<br/>
///Will throw a std::runtime_error in the unlikely<br/>
///case it fails after one thousand times<br/>
const std::string GetTempFileName();<br/>
<br/>
///Obtain the name of a folder that does not exist<br/>
///Will throw a std::runtime_error in the unlikely<br/>
///case it fails after one thousand times<br/>
const std::string GetTempFolderName();<br/>
<br/>
///Obtain the version<br/>
const std::string GetVersion() noexcept;<br/>
<br/>
///Obtain the version history<br/>
const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
///Returns if the name is a folder name<br/>
///From http://www.richelbilderbeek.nl/CppIsFolder.htm<br/>
bool IsFolder(const std::string&amp; filename) noexcept;<br/>
<br/>
///Determines if a filename is a regular file<br/>
///From http://www.richelbilderbeek.nl/CppIsRegularFile.htm<br/>
bool IsRegularFile(const std::string&amp; filename) noexcept;<br/>
<br/>
<br/>
///Removes the path of a filename<br/>
///From http://www.richelbilderbeek.nl/CppRemovePath.htm<br/>
const std::string RemovePath(const std::string&amp; filename);<br/>
<br/>
///Renames a file<br/>
//From http://www.richelbilderbeek.nl/CppRenameFile.htm<br/>
void RenameFile(<br/>
&nbsp;&nbsp;const std::string&amp; from,<br/>
&nbsp;&nbsp;const std::string&amp; to,<br/>
&nbsp;&nbsp;const RenameMode rename_mode = RenameMode::prevent_overwrite);<br/>
<br/>
#ifndef NDEBUG<br/>
void Test() noexcept;<br/>
#endif<br/>
<br/>
///Convert a std::vector to a file<br/>
void VectorToFile(<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt;&amp; v,<br/>
&nbsp;&nbsp;const std::string&amp; filename,<br/>
&nbsp;&nbsp;const CopyMode copy_mode = CopyMode::prevent_overwrite);<br/>
<br/>
} //~namespace fileio<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // FILEIO_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/fileiofwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/fileiofwd.h" border = "1"><tr><td><code>
#ifndef FILEIOFWD_H<br/>
#define FILEIOFWD_H<br/>
<br/>
namespace ribi {<br/>
namespace fileio {<br/>
<br/>
enum class CopyMode;<br/>
struct Filename;<br/>
<br/>
} //~namespace fileio<br/>
} //~namespace ribi<br/>
<br/>
#endif // FILEIOFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/filename.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/filename.cpp" border = "1"><tr><td><code>
#include "filename.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include "fileio.h"<br/>
<br/>
ribi::fileio::Filename::Filename(<br/>
&nbsp;&nbsp;const std::string&amp; filename,<br/>
&nbsp;&nbsp;const bool delete_file_on_destroy)<br/>
&nbsp;&nbsp;: m_delete_file_on_destroy(delete_file_on_destroy),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_filename(filename)<br/>
{<br/>
&nbsp;&nbsp;if (m_filename.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("A filio::Filename must consist of at least one character");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//if (!IsRegularFile(filename))<br/>
&nbsp;&nbsp;//{<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;throw std::logic_error("filio::Filename must have the name of an existing file");<br/>
&nbsp;&nbsp;//}<br/>
&nbsp;&nbsp;//assert(IsRegularFile(m_filename));<br/>
<br/>
&nbsp;&nbsp;assert(!m_filename.empty());<br/>
}<br/>
<br/>
ribi::fileio::Filename::~Filename()<br/>
{<br/>
&nbsp;&nbsp;if (m_delete_file_on_destroy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeleteFile(m_filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::string&amp; ribi::fileio::Filename::Get() const noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(!m_filename.empty());<br/>
&nbsp;&nbsp;//assert(IsRegularFile(m_filename));<br/>
&nbsp;&nbsp;return m_filename;<br/>
}<br/>
<br/>
<br/>
<br/>
void ribi::fileio::CopyFile(<br/>
&nbsp;&nbsp;const Filename&amp; fileNameFrom,<br/>
&nbsp;&nbsp;const Filename&amp; fileNameTo,<br/>
&nbsp;&nbsp;const CopyMode copy_mode)<br/>
{<br/>
&nbsp;&nbsp;CopyFile(fileNameFrom.Get(),fileNameTo.Get(),copy_mode);<br/>
}<br/>
void ribi::fileio::DeleteFile(const Filename&amp; filename) { DeleteFile(filename.Get()); }<br/>
bool ribi::fileio::FilesAreIdentical(const Filename&amp; filename_a,const Filename&amp; filename_b)<br/>
{<br/>
&nbsp;&nbsp;return FilesAreIdentical(filename_a.Get(),filename_b.Get());<br/>
}<br/>
const std::vector&lt;std::string&gt; ribi::fileio::FileToVector(const Filename&amp; filename) { return FileToVector(filename.Get()); }<br/>
const std::string ribi::fileio::GetExtensionNoDot(const Filename&amp; filename) { return GetExtensionNoDot(filename.Get()); }<br/>
bool ribi::fileio::IsRegularFile(const Filename&amp; filename) { return IsRegularFile(filename.Get()); }<br/>
<br/>
bool ribi::fileio::operator==(const Filename&amp; lhs, const Filename&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return lhs.Get() == rhs.Get();<br/>
}<br/>
<br/>
std::ostream&amp; ribi::fileio::operator&lt;&lt;(std::ostream&amp; os, const Filename&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; filename.Get();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/filename.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/filename.h" border = "1"><tr><td><code>
#ifndef FILENAME_H<br/>
#define FILENAME_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#include "filecopymode.h"<br/>
<br/>
namespace ribi {<br/>
namespace fileio {<br/>
<br/>
///A Filename is the name a regular file<br/>
///Will not do anything with the file itself<br/>
struct Filename<br/>
{<br/>
&nbsp;&nbsp;Filename(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool delete_file_on_destroy = false);<br/>
<br/>
&nbsp;&nbsp;~Filename() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the filename<br/>
&nbsp;&nbsp;const std::string&amp; Get() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;const bool m_delete_file_on_destroy;<br/>
&nbsp;&nbsp;const std::string m_filename;<br/>
};<br/>
<br/>
///Free functions on Filename. These call the fileio functions<br/>
///working on std::string<br/>
void CopyFile(<br/>
&nbsp;&nbsp;const Filename&amp; fileNameFrom,<br/>
&nbsp;&nbsp;const Filename&amp; fileNameTo,<br/>
&nbsp;&nbsp;const ribi::fileio::CopyMode copy_mode = CopyMode::prevent_overwrite);<br/>
void DeleteFile(const Filename&amp; filename);<br/>
bool FilesAreIdentical(const Filename&amp; filename_a,const Filename&amp; filename_b);<br/>
const std::vector&lt;std::string&gt; FileToVector(const Filename&amp; filename);<br/>
const std::string GetExtensionNoDot(const Filename&amp; filename);<br/>
bool IsRegularFile(const Filename&amp; filename);<br/>
<br/>
bool operator==(const Filename&amp; lhs, const Filename&amp; rhs);<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Filename&amp; filename);<br/>
<br/>
} //~namespace fileio<br/>
} //~namespace ribi<br/>
<br/>
#endif // FILENAME_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFileIo/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFileIo/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
