<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>EuclideanVector</title>
  <meta name="description" content="C++ EuclideanVector"/>
  <meta name="keywords" content="C++ EuclideanVector code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppEuclideanVector.htm">EuclideanVector</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppEuclideanVector-->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>euclideanvector.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="euclideanvector.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> EUCLIDEANVECTOR_H<br/>
<a href="CppDefine.html">#define</a> EUCLIDEANVECTOR_H<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppUtilityH.html">utility</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>A Euclidean vector<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppStruct.html">struct</a></b> EuclideanVector<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> EuclideanVector(<b><a href="CppConst.html">const</a></b> T&amp; <a href="CppAny.htm">any</a>_x, <b><a href="CppConst.html">const</a></b> T&amp; <a href="CppAny.htm">any</a>_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: x { <a href="CppAny.htm">any</a>_x }, y { <a href="CppAny.htm">any</a>_y }<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> EuclideanVector(<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;T,T&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: x { p.first }, y { p.second }<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> EuclideanVector(<b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt;&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: x { rhs.x }, y { rhs.y }<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;EuclideanVector&amp; <b><a href="CppOperatorPlus.html">operator+</a></b>=(<b><a href="CppConst.html">const</a></b> EuclideanVector&amp; rhs)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> rhs.x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> rhs.y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;EuclideanVector&amp; <b><a href="CppOperatorMultiply.html">operator*</a></b>=(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> f)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x<a href="CppOperatorMultiplyAssign.htm">*=</a>f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y<a href="CppOperatorMultiplyAssign.htm">*=</a>f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;T x;<br/>
&nbsp;&nbsp;T y;<br/>
};<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt;&amp; lhs, <b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> lhs.x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.x <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> lhs.y <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.y;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.html">operator!=</a></b>(<b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt;&amp; lhs, <b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> !(lhs <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt; <b><a href="CppOperatorPlus.html">operator+</a></b>(<b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt;&amp; lhs, <b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> EuclideanVector&lt;T&gt;(lhs.x <a href="CppOperatorPlus.htm">+</a> rhs.x, lhs.y <a href="CppOperatorPlus.htm">+</a> rhs.y);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T, <b><a href="CppClass.html">class</a></b> U, <b><a href="CppClass.html">class</a></b> V&gt;<br/>
<b><a href="CppConst.html">const</a></b> EuclideanVector&lt;T&gt; <b><a href="CppOperatorDivide.html">operator/</a></b>(<b><a href="CppConst.html">const</a></b> EuclideanVector&lt;U&gt;&amp; lhs, <b><a href="CppConst.html">const</a></b> V&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;{ <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppInt.htm">int</a></b> {}; <a href="CppAssert.html">assert</a>(x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0); }<br/>
&nbsp;&nbsp;{ <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDouble.html">double</a></b> {}; <a href="CppAssert.html">assert</a>(x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0); }<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> EuclideanVector&lt;T&gt;(lhs.x <a href="CppOperatorDivide.htm">/</a> rhs, lhs.y <a href="CppOperatorDivide.htm">/</a> rhs);<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> EUCLIDEANVECTOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>euclideanvector.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="euclideanvector.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "euclideanvector<a href="CppHeaderFile.htm">.h</a>"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
