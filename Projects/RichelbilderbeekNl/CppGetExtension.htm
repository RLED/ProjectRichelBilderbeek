<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetExtension</title>
  <meta name="description" content="C++ GetExtension"/>
  <meta name="keywords" content="C++ GetExtension code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetExtension.htm">GetExtension</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.0.473 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppGetExtension.htm">GetExtension</a> is a <a href="CppFileIo.htm">file I/O</a> <a href="CppString.htm">std::string</a> <a href="CppCodeSnippets.htm">code snippet</a> to get a filename's extension.</p>
<p>&nbsp;</p>
<p>Thanks goes to Curtis Krauskopf, who supported me to improve the (terrible and error-prone) STL version GetExtension.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppGetExtension.zip">Download the Qt Creator project 'CppGetExtension' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.49</li>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.1.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppGetExtension.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppGetExtension.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
unix {<br/>
&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += <a href="CppRegex.htm">-lboost_regex</a> <a href="CppFilesystem.htm">-lboost_filesystem</a><br/>
}<br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;#message(Native Windows dynamic link to Boost)<br/>
<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
<br/>
&nbsp;&nbsp;debug {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0/stage/lib/libboost_filesystem-mgw48-mt-d-1_54.a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0/stage/lib/libboost_regex-mgw48-mt-d-1_54.a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0/stage/lib/libboost_system-mgw48-mt-d-1_54.a<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;release {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0/stage/lib/libboost_filesystem-mgw48-mt-1_54.a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0/stage/lib/libboost_regex-mgw48-mt-1_54.a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0/stage/lib/libboost_system-mgw48-mt-1_54.a<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostXpressive.htm">xpressive</a>/<a href="CppBoostXpressive.htm">xpressive</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">//</a>Returns the extension of a filename<br/>
<a href="CppComment.htm">//</a>Assumes that the filename has an extension<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetExtension.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetExtensionStl(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> filename.rfind('.');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppString.htm">std::string</a>::npos <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must contain a dot");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> filename.size() <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must not end with a dot");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename[i+1] <a href="CppOperatorNotEqual.htm">!=</a> '\\' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must have an extension");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filename[i+1] <a href="CppOperatorNotEqual.htm">!=</a> '/' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must have an extension");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename.substr(i,filename.size());<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>Returns the extension of a filename<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetExtension.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetExtension<a href="CppBoost.htm">Boost</a>Filesystem(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppFilesystem.htm">boost::filesystem</a>::extension(filename);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Returns the extension of a filename<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetExtension.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetExtension<a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> rex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(.*)?(\\.[A-Za-z]*)" );<br/>
&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match( filename, what, rex ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> what[2];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "";<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionStl("test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionStl("myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionStl("myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionStl("myfolder/myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtensionStl("myfolder\\myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a>Filesystem("test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a>Filesystem("myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a>Filesystem("myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a>Filesystem("myfolder/myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a>Filesystem("myfolder\\myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("myfolder/myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetExtension<a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("myfolder\\myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> f: { GetExtensionStl, GetExtension<a href="CppBoost.htm">Boost</a>Filesystem, GetExtension<a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>} )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f("test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f("myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f("myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f("myfolder/myfolder/test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f("myfolder\\myfolder\\test.abc") <a href="CppOperatorEqual.htm">==</a> ".abc");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
