<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtPylos</title>
  <meta name="description" content="C++ QtPylos"/>
  <meta name="keywords" content="C++ QtPylos "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtPylos.htm">QtPylos</a></h1>
<p>&nbsp;</p>
<h2>./CppQtPylos/CppQtPylos.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/CppQtPylos.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpyloswidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpylossprites.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpylosgamewidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpylosboardwidget.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpyloswidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpylossprites.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpylosgamewidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/qtpylosboardwidget.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtPylos/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosboardwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosboardwidget.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
PylosWidget, widget to display Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "qtpylosboardwidget.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;cstdlib&gt;<br/>
#include &lt;iostream&gt;<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include &lt;QMouseEvent&gt;<br/>
#include &lt;QPainter&gt;<br/>
<br/>
#include "pylosboard.h"<br/>
#include "pylosmove.h"<br/>
#include "pylosmustremovestate.h"<br/>
#include "pylosplayer.h"<br/>
#include "trace.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::QtPylosBoardWidget::QtPylosBoardWidget() :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board(new Pylos::BoardBasic),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_must_remove(Pylos::MustRemoveState::no),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_player(Pylos::Player::player1)<br/>
{<br/>
<br/>
}<br/>
<br/>
bool ribi::QtPylosBoardWidget::CanRemove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanRemove(v,m_player);<br/>
}<br/>
<br/>
bool ribi::QtPylosBoardWidget::CanSet(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanSet(c,m_player);<br/>
}<br/>
<br/>
bool ribi::QtPylosBoardWidget::CanSetPlayer(const Pylos::Player) const<br/>
{<br/>
&nbsp;&nbsp;return m_must_remove == Pylos::MustRemoveState::no;<br/>
}<br/>
<br/>
bool ribi::QtPylosBoardWidget::CanTransfer(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanTransfer(c,m_player);<br/>
}<br/>
<br/>
bool ribi::QtPylosBoardWidget::CanTransfer(<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; to) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanTransfer(from,to,m_player);<br/>
}<br/>
<br/>
ribi::Pylos::PositionState ribi::QtPylosBoardWidget::Get(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;Get(c);<br/>
}<br/>
<br/>
ribi::Pylos::Player ribi::QtPylosBoardWidget::GetCurrentTurn() const<br/>
{<br/>
&nbsp;&nbsp;return m_player;<br/>
}<br/>
<br/>
int ribi::QtPylosBoardWidget::GetLayerSize(const int layer) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetLayerSize(layer);<br/>
}<br/>
<br/>
const std::string ribi::QtPylosBoardWidget::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::QtPylosBoardWidget::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-09-22: version 1.2: initial release version");<br/>
&nbsp;&nbsp;v.push_back("2010-10-06: version 1.3: disallow clicking when there is a winner");<br/>
&nbsp;&nbsp;v.push_back("2010-05-28: version 2.0: inherit from QtPylosWidget");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::Pylos::Winner ribi::QtPylosBoardWidget::GetWinner() const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetWinner();<br/>
}<br/>
<br/>
void ribi::QtPylosBoardWidget::Remove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;m_board-&gt;Remove(v,m_player);<br/>
&nbsp;&nbsp;m_must_remove = Pylos::MustRemoveState::no;<br/>
}<br/>
<br/>
void ribi::QtPylosBoardWidget::Set(const Pylos::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;m_board-&gt;Set(c,m_player,m_must_remove);<br/>
}<br/>
<br/>
void ribi::QtPylosBoardWidget::SetPlayer(const Pylos::Player player)<br/>
{<br/>
&nbsp;&nbsp;assert(CanSetPlayer(player));<br/>
&nbsp;&nbsp;if (m_player != player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_player = player;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit PlayerChanged();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::QtPylosBoardWidget::StartAdvanced()<br/>
{<br/>
&nbsp;&nbsp;m_board = Pylos::Board::CreateAdvancedBoard();<br/>
&nbsp;&nbsp;m_select = Pylos::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors = std::vector&lt;Pylos::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
void ribi::QtPylosBoardWidget::StartBasic()<br/>
{<br/>
&nbsp;&nbsp;m_board = Pylos::Board::CreateBasicBoard();<br/>
&nbsp;&nbsp;m_select = Pylos::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors = std::vector&lt;Pylos::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
void ribi::QtPylosBoardWidget::Transfer(<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; to)<br/>
{<br/>
&nbsp;&nbsp;m_board-&gt;Transfer(from,to,m_must_remove);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosboardwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosboardwidget.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
PylosWidget, widget to display Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef QTPYLOSBOARDWIDGET_H<br/>
#define QTPYLOSBOARDWIDGET_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/tuple/tuple.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include &lt;QWidget&gt;<br/>
<br/>
#include "qtpyloswidget.h"<br/>
#include "pylosboard.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
struct QPaintEvent;<br/>
<br/>
namespace ribi {<br/>
<br/>
///PylosWidget manages a Pylos::Board and facilitates its user interface<br/>
class QtPylosBoardWidget : public QtPylosWidget<br/>
{<br/>
&nbsp;&nbsp;Q_OBJECT<br/>
public:<br/>
&nbsp;&nbsp;QtPylosBoardWidget();<br/>
&nbsp;&nbsp;QtPylosBoardWidget(const QtPylosBoardWidget&amp;) = delete;<br/>
&nbsp;&nbsp;QtPylosBoardWidget&amp; operator=(const QtPylosBoardWidget&amp;) = delete;<br/>
&nbsp;&nbsp;~QtPylosBoardWidget() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///CanRemove specifies if current player can remove one or<br/>
&nbsp;&nbsp;///two marble(s) at the requested position(s).<br/>
&nbsp;&nbsp;bool CanRemove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v) const;<br/>
<br/>
&nbsp;&nbsp;///CanSet tests if the current player can be set at the Coordinat<br/>
&nbsp;&nbsp;bool CanSet(const Pylos::Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///CanSetPlayer determines is the active Player can be changed.<br/>
&nbsp;&nbsp;///CanSetPlayer returns false if there are marbles to be removed<br/>
&nbsp;&nbsp;bool CanSetPlayer(const Pylos::Player player) const;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer<br/>
&nbsp;&nbsp;///the marble at the specified coordinat for movement<br/>
&nbsp;&nbsp;bool CanTransfer(const Pylos::Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer his marble<br/>
&nbsp;&nbsp;///to a new, higher position<br/>
&nbsp;&nbsp;bool CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; to) const;<br/>
<br/>
&nbsp;&nbsp;///GetPylos returns a read-only pylos<br/>
&nbsp;&nbsp;const Pylos::Board * GetBoard() { return m_board.get(); }<br/>
<br/>
&nbsp;&nbsp;///GetCurrentTurn returns whose turn it is now<br/>
&nbsp;&nbsp;Pylos::Player GetCurrentTurn() const;<br/>
<br/>
&nbsp;&nbsp;///GetLayerSize returns how many marbles this is wide/height.<br/>
&nbsp;&nbsp;///For exaple; layer 0 has 4x4 marbles, so GetLayerSize<br/>
&nbsp;&nbsp;///will return 4.<br/>
&nbsp;&nbsp;int GetLayerSize(const int layer) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the MustRemoveState of the widget<br/>
&nbsp;&nbsp;Pylos::MustRemoveState GetMustRemove() const { return m_must_remove; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the PositionState at a certain coordinat<br/>
&nbsp;&nbsp;Pylos::PositionState Get(const Pylos::Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///GetSelector returns the selector's current coodinat<br/>
&nbsp;&nbsp;//const Pylos::Coordinat&amp; GetSelector() const { return m_select; }<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Return the possible winner<br/>
&nbsp;&nbsp;Pylos::Winner GetWinner() const;<br/>
<br/>
&nbsp;&nbsp;///Remove lets the current player remove one or two marbles<br/>
&nbsp;&nbsp;void Remove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///Set makes current player place his marble<br/>
&nbsp;&nbsp;///at the specified position. After Set,<br/>
&nbsp;&nbsp;///GetMustRemove must be called to determine if<br/>
&nbsp;&nbsp;///the current player must remove some marbles<br/>
&nbsp;&nbsp;void Set(const Pylos::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;///SetPlayer determines which player is allowed to make a move<br/>
&nbsp;&nbsp;void SetPlayer(const Pylos::Player player);<br/>
<br/>
&nbsp;&nbsp;///StartAdvanced cleans the board to start a game<br/>
&nbsp;&nbsp;///with advanced rules<br/>
&nbsp;&nbsp;void StartAdvanced();<br/>
<br/>
&nbsp;&nbsp;///StartBasic cleans the board to start a game<br/>
&nbsp;&nbsp;///with basic rules<br/>
&nbsp;&nbsp;void StartBasic();<br/>
<br/>
&nbsp;&nbsp;///Transfer lets current player tranfer his marble to a new, higher position<br/>
&nbsp;&nbsp;void Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; to);<br/>
<br/>
<br/>
signals:<br/>
<br/>
&nbsp;&nbsp;///PlayerChanged is emitted when the active player has changed<br/>
&nbsp;&nbsp;void PlayerChanged();<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;//Pylos::QtSprites m_sprites;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Pylos::Board&gt; m_board;<br/>
<br/>
&nbsp;&nbsp;///m_must_remove tracks if the user must remove one/two marbles<br/>
&nbsp;&nbsp;Pylos::MustRemoveState m_must_remove;<br/>
<br/>
&nbsp;&nbsp;///m_player is the player that is allowed to do a move<br/>
&nbsp;&nbsp;Pylos::Player m_player;<br/>
<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPYLOSBOARDWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosgamewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosgamewidget.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
PylosWidget, widget to display Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "qtpylosgamewidget.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;cstdlib&gt;<br/>
#include &lt;iostream&gt;<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include &lt;QMouseEvent&gt;<br/>
#include &lt;QPainter&gt;<br/>
<br/>
#include "pylosboard.h"<br/>
#include "pylosgame.h"<br/>
#include "pylosmove.h"<br/>
#include "pylosmustremovestate.h"<br/>
#include "pylosplayer.h"<br/>
#include "trace.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::QtPylosGameWidget::QtPylosGameWidget() :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pylos(Pylos::Game::CreateBasicGame())<br/>
{<br/>
<br/>
}<br/>
<br/>
bool ribi::QtPylosGameWidget::CanRemove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v) const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;CanRemove(v);<br/>
}<br/>
<br/>
bool ribi::QtPylosGameWidget::CanSet(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;CanSet(c);<br/>
}<br/>
<br/>
bool ribi::QtPylosGameWidget::CanTransfer(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;CanTransfer(c);<br/>
}<br/>
<br/>
bool ribi::QtPylosGameWidget::CanTransfer(<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; to) const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;CanTransfer(from,to);<br/>
}<br/>
<br/>
ribi::Pylos::PositionState ribi::QtPylosGameWidget::Get(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;GetBoard()-&gt;Get(c);<br/>
}<br/>
<br/>
ribi::Pylos::Player ribi::QtPylosGameWidget::GetCurrentTurn() const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;GetCurrentTurn();<br/>
}<br/>
<br/>
int ribi::QtPylosGameWidget::GetLayerSize(const int layer) const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;GetBoard()-&gt;GetLayerSize(layer);<br/>
}<br/>
<br/>
ribi::Pylos::MustRemoveState ribi::QtPylosGameWidget::GetMustRemove() const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;GetMustRemove();<br/>
}<br/>
<br/>
const std::string ribi::QtPylosGameWidget::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::QtPylosGameWidget::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-09-22: version 1.2: initial release version");<br/>
&nbsp;&nbsp;v.push_back("2010-10-06: version 1.3: disallow clicking when there is a winner");<br/>
&nbsp;&nbsp;v.push_back("2010-05-28: version 2.0: inherit from QtPylosWidget");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::Pylos::Winner ribi::QtPylosGameWidget::GetWinner() const<br/>
{<br/>
&nbsp;&nbsp;return m_pylos-&gt;GetWinner();<br/>
}<br/>
<br/>
void ribi::QtPylosGameWidget::Remove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;m_pylos-&gt;Remove(v);<br/>
}<br/>
<br/>
void ribi::QtPylosGameWidget::Set(const Pylos::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;m_pylos-&gt;Set(c);<br/>
}<br/>
<br/>
void ribi::QtPylosGameWidget::StartAdvanced()<br/>
{<br/>
&nbsp;&nbsp;m_pylos = Pylos::Game::CreateAdvancedGame();<br/>
&nbsp;&nbsp;m_select = Pylos::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors = std::vector&lt;Pylos::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
void ribi::QtPylosGameWidget::StartBasic()<br/>
{<br/>
&nbsp;&nbsp;m_pylos = Pylos::Game::CreateBasicGame();<br/>
&nbsp;&nbsp;m_select = Pylos::Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors = std::vector&lt;Pylos::Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
void ribi::QtPylosGameWidget::Transfer(<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; to)<br/>
{<br/>
&nbsp;&nbsp;m_pylos-&gt;Transfer(from,to);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylosgamewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylosgamewidget.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
PylosWidget, widget to display Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef QTPYLOSGAMEWIDGET_H<br/>
#define QTPYLOSGAMEWIDGET_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/tuple/tuple.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include &lt;QWidget&gt;<br/>
#include "qtpyloswidget.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
struct QPaintEvent;<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos { struct Game; }<br/>
<br/>
///PylosWidget manages a Pylos::Game and facilitates its user interface<br/>
class QtPylosGameWidget : public QtPylosWidget<br/>
{<br/>
&nbsp;&nbsp;Q_OBJECT<br/>
public:<br/>
&nbsp;&nbsp;QtPylosGameWidget();<br/>
&nbsp;&nbsp;QtPylosGameWidget(const QtPylosGameWidget&amp;) = delete;<br/>
&nbsp;&nbsp;QtPylosGameWidget&amp; operator=(const QtPylosGameWidget&amp;) = delete;<br/>
&nbsp;&nbsp;~QtPylosGameWidget() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///CanRemove specifies if current player can remove one or<br/>
&nbsp;&nbsp;///two marble(s) at the requested position(s).<br/>
&nbsp;&nbsp;bool CanRemove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v) const;<br/>
<br/>
&nbsp;&nbsp;///CanSet tests if the current player can be set at the Coordinat<br/>
&nbsp;&nbsp;bool CanSet(const Pylos::Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer<br/>
&nbsp;&nbsp;///the marble at the specified coordinat for movement<br/>
&nbsp;&nbsp;bool CanTransfer(const Pylos::Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer his marble<br/>
&nbsp;&nbsp;///to a new, higher position<br/>
&nbsp;&nbsp;bool CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; to) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the PositionState at a certain coordinat<br/>
&nbsp;&nbsp;Pylos::PositionState Get(const Pylos::Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///GetCurrentTurn returns whose turn it is now<br/>
&nbsp;&nbsp;Pylos::Player GetCurrentTurn() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the MustRemoveState of the widget<br/>
&nbsp;&nbsp;Pylos::MustRemoveState GetMustRemove() const;<br/>
<br/>
&nbsp;&nbsp;///GetPylos returns a read-only Pylos::Game<br/>
&nbsp;&nbsp;const Pylos::Game * GetPylos() { return m_pylos.get(); }<br/>
<br/>
&nbsp;&nbsp;///GetLayerSize returns how many marbles this is wide/height.<br/>
&nbsp;&nbsp;///For exaple; layer 0 has 4x4 marbles, so GetLayerSize<br/>
&nbsp;&nbsp;///will return 4.<br/>
&nbsp;&nbsp;int GetLayerSize(const int layer) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Return the possible winner<br/>
&nbsp;&nbsp;Pylos::Winner GetWinner() const;<br/>
<br/>
&nbsp;&nbsp;///Remove lets the current player remove one or two marbles<br/>
&nbsp;&nbsp;void Remove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///Set makes current player place his marble<br/>
&nbsp;&nbsp;///at the specified position. After Set,<br/>
&nbsp;&nbsp;///GetMustRemove must be called to determine if<br/>
&nbsp;&nbsp;///the current player must remove some marbles<br/>
&nbsp;&nbsp;void Set(const Pylos::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;///StartAdvanced cleans the board to start a game<br/>
&nbsp;&nbsp;///with advanced rules<br/>
&nbsp;&nbsp;void StartAdvanced();<br/>
<br/>
&nbsp;&nbsp;///StartBasic cleans the board to start a game<br/>
&nbsp;&nbsp;///with basic rules<br/>
&nbsp;&nbsp;void StartBasic();<br/>
<br/>
&nbsp;&nbsp;///Transfer lets current player tranfer his marble to a new, higher position<br/>
&nbsp;&nbsp;void Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; to);<br/>
<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///The Pylos::Game class displayed and interacted with<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Pylos::Game&gt; m_pylos;<br/>
<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPYLOSGAMEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylossprites.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylossprites.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestPylos, tool to test Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "qtpylossprites.h"<br/>
#include &lt;cassert&gt;<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#include &lt;QBitmap&gt;<br/>
#include "pylosmove.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Pylos::QtSprites::QtSprites(<br/>
&nbsp;&nbsp;const int board_width,<br/>
&nbsp;&nbsp;const int board_height,<br/>
&nbsp;&nbsp;const boost::array&lt;int,6&gt; &amp;colors,<br/>
&nbsp;&nbsp;const int square_width,<br/>
&nbsp;&nbsp;const int square_height,<br/>
&nbsp;&nbsp;const int greyness_hole<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_board_height{board_height},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board_width{board_width},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_colors(colors),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_board_bottom{DrawBoardBottom(m_board_width,m_board_height,greyness_hole,greyness_hole,greyness_hole)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_board_hole{DrawInvertedGlobe(square_width,square_height,greyness_hole,greyness_hole,greyness_hole)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player1{DrawGlobe(square_width,square_height,m_colors[0],m_colors[1],m_colors[2])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player1_remove{DrawRemover(square_width,square_height,m_colors[0],m_colors[1],m_colors[2])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player1_select{DrawSelector(square_width,square_height,m_colors[0],m_colors[1],m_colors[2])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player2{DrawGlobe(square_width,square_height,m_colors[3],m_colors[4],m_colors[5])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player2_remove{DrawRemover(square_width,square_height,m_colors[3],m_colors[4],m_colors[5])},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite_player2_select{DrawSelector(square_width,square_height,m_colors[3],m_colors[4],m_colors[5])}<br/>
{<br/>
<br/>
}<br/>
<br/>
const QPixmap&amp; ribi::Pylos::QtSprites::Get(<br/>
&nbsp;&nbsp;const Type sprite) const<br/>
{<br/>
&nbsp;&nbsp;switch (sprite)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::player1: return m_sprite_player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::player2: return m_sprite_player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::player1_select : return m_sprite_player1_select;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::player2_select : return m_sprite_player2_select;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::player1_remove : return m_sprite_player1_remove;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::player2_remove : return m_sprite_player2_remove;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::board_bottom&nbsp;&nbsp; : return m_sprite_board_bottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Type::board_hole&nbsp;&nbsp;&nbsp;&nbsp; : return m_sprite_board_hole;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("ribi::Pylos::QtSprites::Get");<br/>
}<br/>
<br/>
const std::string ribi::Pylos::QtSprites::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Pylos::QtSprites::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-05-28: version 2.0: initial release version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-12: version 2.1: RAII",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
QPixmap ribi::Pylos::DrawBoardBottom(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b)<br/>
{<br/>
&nbsp;&nbsp;QPixmap pixmap(width,height);<br/>
&nbsp;&nbsp;Paint(pixmap,r,g,b);<br/>
&nbsp;&nbsp;return pixmap;<br/>
}<br/>
<br/>
///From http://www.richelbilderbeek.nl/CppDrawGlobe.htm<br/>
QPixmap ribi::Pylos::DrawGlobe(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b)<br/>
{<br/>
&nbsp;&nbsp;QPixmap pixmap(width,height);<br/>
&nbsp;&nbsp;QImage image = pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;assert(image.bytesPerLine() / width == 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;const double r_max = boost::numeric_cast&lt;double&gt;(r);<br/>
&nbsp;&nbsp;const double g_max = boost::numeric_cast&lt;double&gt;(g);<br/>
&nbsp;&nbsp;const double b_max = boost::numeric_cast&lt;double&gt;(b);<br/>
&nbsp;&nbsp;const double midX = boost::numeric_cast&lt;double&gt;(width ) / 2.0;<br/>
&nbsp;&nbsp;const double midY = boost::numeric_cast&lt;double&gt;(height) / 2.0;<br/>
&nbsp;&nbsp;const double max_dist = std::min(midX,midY);<br/>
<br/>
&nbsp;&nbsp;for (int y=0; y!=height; ++y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned char * const line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= static_cast&lt;unsigned char *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y_d = boost::numeric_cast&lt;double&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=width; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x_d = boost::numeric_cast&lt;double&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::sqrt(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d - midX) * (x_d - midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ((y_d - midY) * (y_d - midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist &lt;= max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double rel_dist = dist / max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int r_here = rel_dist * r_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int g_here = rel_dist * g_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int b_here = rel_dist * b_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 255; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = (r_here == 0 ? 1: r_here); //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = (g_here == 0 ? 1: g_here); //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = (b_here == 0 ? 1: b_here); //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 0; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = 0; //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = 0; //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = 0; //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap = pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;//Add transparency<br/>
&nbsp;&nbsp;const QBitmap mask = pixmap.createMaskFromColor(QColor(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;return pixmap;<br/>
}<br/>
<br/>
///From http://www.richelbilderbeek.nl/CppDrawInvertedGlobe.htm<br/>
QPixmap ribi::Pylos::DrawInvertedGlobe(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b)<br/>
{<br/>
&nbsp;&nbsp;QPixmap pixmap(width,height);<br/>
&nbsp;&nbsp;QImage image = pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;assert(image.bytesPerLine() / width == 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;const double r_max = boost::numeric_cast&lt;double&gt;(r);<br/>
&nbsp;&nbsp;const double g_max = boost::numeric_cast&lt;double&gt;(g);<br/>
&nbsp;&nbsp;const double b_max = boost::numeric_cast&lt;double&gt;(b);<br/>
&nbsp;&nbsp;const double midX = boost::numeric_cast&lt;double&gt;(width ) / 2.0;<br/>
&nbsp;&nbsp;const double midY = boost::numeric_cast&lt;double&gt;(height) / 2.0;<br/>
&nbsp;&nbsp;const double max_dist = std::min(midX,midY);<br/>
<br/>
&nbsp;&nbsp;for (int y=0; y!=height; ++y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned char * const line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= static_cast&lt;unsigned char *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y_d = boost::numeric_cast&lt;double&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=width; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x_d = boost::numeric_cast&lt;double&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::sqrt(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d - midX) * (x_d - midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ((y_d - midY) * (y_d - midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist &lt;= max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double rel_dist = dist / max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int r_here = r_max - (rel_dist * r_max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int g_here = g_max - (rel_dist * g_max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int b_here = b_max - (rel_dist * b_max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 255; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = (r_here == 0 ? 1: r_here); //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = (g_here == 0 ? 1: g_here); //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = (b_here == 0 ? 1: b_here); //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 0; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = 0; //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = 0; //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = 0; //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap = pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;//Add transparency<br/>
&nbsp;&nbsp;const QBitmap mask = pixmap.createMaskFromColor(QColor(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;return pixmap;<br/>
}<br/>
<br/>
QPixmap ribi::Pylos::DrawRemover(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b)<br/>
{<br/>
&nbsp;&nbsp;//Faded out globe<br/>
&nbsp;&nbsp;QPixmap pixmap(width,height);<br/>
&nbsp;&nbsp;QImage image = pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;assert(image.bytesPerLine() / width == 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;const double r_max = boost::numeric_cast&lt;double&gt;(r);<br/>
&nbsp;&nbsp;const double g_max = boost::numeric_cast&lt;double&gt;(g);<br/>
&nbsp;&nbsp;const double b_max = boost::numeric_cast&lt;double&gt;(b);<br/>
&nbsp;&nbsp;const double midX = boost::numeric_cast&lt;double&gt;(width ) / 2.0;<br/>
&nbsp;&nbsp;const double midY = boost::numeric_cast&lt;double&gt;(height) / 2.0;<br/>
&nbsp;&nbsp;const double max_dist = std::min(midX,midY);<br/>
<br/>
&nbsp;&nbsp;for (int y=0; y!=height; ++y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned char * const line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= static_cast&lt;unsigned char *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y_d = boost::numeric_cast&lt;double&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=width; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x_d = boost::numeric_cast&lt;double&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::sqrt(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d - midX) * (x_d - midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ((y_d - midY) * (y_d - midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist &lt;= max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double rel_dist = dist / max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int r_here = 127 + ((rel_dist * r_max) / 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int g_here = 127 + ((rel_dist * g_max) / 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int b_here = 127 + ((rel_dist * b_max) / 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 255; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = (r_here == 0 ? 1: r_here); //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = (g_here == 0 ? 1: g_here); //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = (b_here == 0 ? 1: b_here); //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 0; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = 0; //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = 0; //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = 0; //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap = pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;//Add transparency<br/>
&nbsp;&nbsp;const QBitmap mask = pixmap.createMaskFromColor(QColor(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;return pixmap;<br/>
}<br/>
<br/>
QPixmap ribi::Pylos::DrawSelector(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b)<br/>
{<br/>
&nbsp;&nbsp;QPixmap pixmap(width,height);<br/>
&nbsp;&nbsp;QImage image = pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;assert(image.bytesPerLine() / width == 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;const double r_max = boost::numeric_cast&lt;double&gt;(r);<br/>
&nbsp;&nbsp;const double g_max = boost::numeric_cast&lt;double&gt;(g);<br/>
&nbsp;&nbsp;const double b_max = boost::numeric_cast&lt;double&gt;(b);<br/>
&nbsp;&nbsp;const double midX = boost::numeric_cast&lt;double&gt;(width ) / 2.0;<br/>
&nbsp;&nbsp;const double midY = boost::numeric_cast&lt;double&gt;(height) / 2.0;<br/>
&nbsp;&nbsp;const double max_dist = std::min(midX,midY);<br/>
&nbsp;&nbsp;const double min_dist = 0.8 * max_dist;<br/>
<br/>
&nbsp;&nbsp;for (int y=0; y!=height; ++y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned char * const line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= static_cast&lt;unsigned char *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double y_d = boost::numeric_cast&lt;double&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=width; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x_d = boost::numeric_cast&lt;double&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::sqrt(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d - midX) * (x_d - midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ((y_d - midY) * (y_d - midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist &gt;= min_dist &amp;&amp; dist &lt;= max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double rel_dist = (dist - min_dist) / (max_dist - min_dist);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int r_here = rel_dist * r_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int g_here = rel_dist * g_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int b_here = rel_dist * b_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 255; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = (r_here == 0 ? 1: r_here); //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = (g_here == 0 ? 1: g_here); //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = (b_here == 0 ? 1: b_here); //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = 0; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = 0; //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = 0; //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = 0; //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap = pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;//Add transparency<br/>
&nbsp;&nbsp;const QBitmap mask = pixmap.createMaskFromColor(QColor(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
&nbsp;&nbsp;return pixmap;<br/>
}<br/>
<br/>
const boost::array&lt;int,6&gt; ribi::Pylos::GetBlackWhiteColors()<br/>
{<br/>
&nbsp;&nbsp;boost::array&lt;int,6&gt; v;<br/>
&nbsp;&nbsp;v[0] = 255; v[1] = 255; v[2] = 255;<br/>
&nbsp;&nbsp;v[3] =&nbsp;&nbsp;96; v[4] =&nbsp;&nbsp;96; v[5] =&nbsp;&nbsp;96;<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const boost::array&lt;int,6&gt; ribi::Pylos::GetDefaultColors()<br/>
{<br/>
&nbsp;&nbsp;return GetRedBlueColors();<br/>
}<br/>
<br/>
const boost::array&lt;int,6&gt; ribi::Pylos::GetRedBlueColors()<br/>
{<br/>
&nbsp;&nbsp;boost::array&lt;int,6&gt; v;<br/>
&nbsp;&nbsp;v[0] = 255; v[1] =&nbsp;&nbsp; 0; v[2] =&nbsp;&nbsp; 0;<br/>
&nbsp;&nbsp;v[3] =&nbsp;&nbsp; 0; v[4] =&nbsp;&nbsp; 0; v[5] = 255;<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
//From http://www.richelbilderbeek.nl/CppPaint.htm<br/>
void ribi::Pylos::Paint(<br/>
&nbsp;&nbsp;QPixmap&amp; pixmap,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b,<br/>
&nbsp;&nbsp;const unsigned char a) //Opaque<br/>
{<br/>
&nbsp;&nbsp;const int width = pixmap.width();<br/>
&nbsp;&nbsp;const int height = pixmap.height();<br/>
<br/>
&nbsp;&nbsp;QImage image = pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;assert(image.bytesPerLine() / width == 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;for (int y=0; y!=height; ++y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;unsigned char * const line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= static_cast&lt;unsigned char *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=width; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] = a; //Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] = r; //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] = g; //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] = b; //Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap = pixmap.fromImage(image);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpylossprites.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpylossprites.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestPylos, tool to test Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef QTPYLOSSPRITES_H<br/>
#define QTPYLOSSPRITES_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include &lt;boost/array.hpp&gt;<br/>
#include &lt;QPixmap&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
const boost::array&lt;int,6&gt; GetBlackWhiteColors();<br/>
const boost::array&lt;int,6&gt; GetDefaultColors();<br/>
const boost::array&lt;int,6&gt; GetRedBlueColors();<br/>
<br/>
struct QtSprites<br/>
{<br/>
&nbsp;&nbsp;enum class Type&nbsp;&nbsp;{ player1, player2, player1_select, player2_select, player1_remove, player2_remove, board_bottom, board_hole };<br/>
<br/>
&nbsp;&nbsp;QtSprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int board_width = 64,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int board_height = 64,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::array&lt;int,6&gt;&amp; colors = GetDefaultColors())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: QtSprites(board_width,board_height,colors,board_width/4,board_height/4,64) {}<br/>
<br/>
&nbsp;&nbsp;///Get returns the pixmap of a certain sprite<br/>
&nbsp;&nbsp;const QPixmap&amp; Get(const Type sprite) const;<br/>
<br/>
&nbsp;&nbsp;int GetBoardWidth() const { return m_board_width; }<br/>
&nbsp;&nbsp;int GetBoardHeight() const { return m_board_height; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the color scheme<br/>
&nbsp;&nbsp;const boost::array&lt;int,6&gt;&amp; GetColorScheme() const { return m_colors; }<br/>
<br/>
&nbsp;&nbsp;int GetMarbleWidth() const { return m_board_width / 4; }<br/>
&nbsp;&nbsp;int GetMarbleHeight() const { return m_board_height / 4; }<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///SetBoardSize resizes the sprites to the<br/>
&nbsp;&nbsp;///required sizes<br/>
&nbsp;&nbsp;//void SetBoardSize(const int board_width, const int board_height);<br/>
<br/>
&nbsp;&nbsp;///SetColorScheme sets the color scheme of the Sprites.<br/>
&nbsp;&nbsp;///This redraws all the sprites.<br/>
&nbsp;&nbsp;//void SetColorScheme(const boost::array&lt;int,6&gt; colors);<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///The implementation of the public constructor<br/>
&nbsp;&nbsp;QtSprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int board_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int board_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::array&lt;int,6&gt;&amp; colors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int square_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int square_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int greyness_hole<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;const int m_board_height;<br/>
&nbsp;&nbsp;const int m_board_width;<br/>
&nbsp;&nbsp;const boost::array&lt;int,6&gt; m_colors;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_board_bottom;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_board_hole;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_player1;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_player1_remove;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_player1_select;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_player2;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_player2_remove;<br/>
&nbsp;&nbsp;const QPixmap m_sprite_player2_select;<br/>
};<br/>
<br/>
QPixmap DrawBoardBottom(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b);<br/>
<br/>
///From http://www.richelbilderbeek.nl/CppDrawGlobe.htm<br/>
QPixmap DrawGlobe(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b);<br/>
<br/>
///From http://www.richelbilderbeek.nl/CppDrawInvertedGlobe.htm<br/>
QPixmap DrawInvertedGlobe(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b);<br/>
<br/>
QPixmap DrawRemover(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b);<br/>
<br/>
QPixmap DrawSelector(<br/>
&nbsp;&nbsp;const int width,<br/>
&nbsp;&nbsp;const int height,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b);<br/>
<br/>
//From http://www.richelbilderbeek.nl/CppPaint.htm<br/>
void Paint(<br/>
&nbsp;&nbsp;QPixmap&amp; pixmap,<br/>
&nbsp;&nbsp;const unsigned char r,<br/>
&nbsp;&nbsp;const unsigned char g,<br/>
&nbsp;&nbsp;const unsigned char b,<br/>
&nbsp;&nbsp;const unsigned char a = 255); //Opaque<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPYLOSSPRITES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpyloswidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpyloswidget.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
PylosWidget, widget to display Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "qtpyloswidget.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;cstdlib&gt;<br/>
#include &lt;iostream&gt;<br/>
<br/>
#include &lt;boost/math/constants/constants.hpp&gt;<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include &lt;QMouseEvent&gt;<br/>
#include &lt;QPainter&gt;<br/>
<br/>
#include "pylosboard.h"<br/>
#include "pylosgame.h"<br/>
#include "pylosmove.h"<br/>
#include "pylosmustremovestate.h"<br/>
#include "pylosplayer.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::QtPylosWidget::QtPylosWidget() :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QWidget(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_select(0,0,0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites(new Pylos::QtSprites(this-&gt;width(),this-&gt;height(),Pylos::GetRedBlueColors())),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tilt(30.0 * 2.0 * boost::math::constants::pi&lt;double&gt;() / 360.0)<br/>
{<br/>
&nbsp;&nbsp;assert(m_sprites);<br/>
&nbsp;&nbsp;//Allows this widget to respond to mouse moving over it<br/>
&nbsp;&nbsp;this-&gt;setMouseTracking(true);<br/>
<br/>
&nbsp;&nbsp;SetSelector(Pylos::Coordinat(0,0,0));<br/>
<br/>
&nbsp;&nbsp;SaveAllSprites();<br/>
&nbsp;&nbsp;this-&gt;setMinimumWidth(64);<br/>
&nbsp;&nbsp;this-&gt;setMinimumHeight(64);<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::DeselectRemove(const Pylos::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;assert(!m_other_selectors.empty());<br/>
&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(m_other_selectors.size());<br/>
&nbsp;&nbsp;assert(sz == 1 || sz == 2);<br/>
&nbsp;&nbsp;if (sz == 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_other_selectors[0] == c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(sz == 2);<br/>
&nbsp;&nbsp;if (m_other_selectors[0] == c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_other_selectors[1] != c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::swap(m_other_selectors[0],m_other_selectors[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_other_selectors.back() == c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_other_selectors[1] == c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::DrawRemove(QPainter&amp; painter, const Pylos::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;const Pylos::QtSprites::Type sprite =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;( Get(c) == Pylos::PositionState::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp; ? Pylos::QtSprites::Type::player1_remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp; : Pylos::QtSprites::Type::player2_remove );<br/>
<br/>
&nbsp;&nbsp;const std::pair&lt;int,int&gt; p = Transform(c);<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.first&nbsp;&nbsp;- (m_sprites-&gt;GetMarbleWidth()&nbsp;&nbsp;/ 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.second - (m_sprites-&gt;GetMarbleHeight() / 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(sprite));<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::DrawSelect(QPainter&amp; painter)<br/>
{<br/>
&nbsp;&nbsp;if (GetWinner() != Pylos::Winner::none) return;<br/>
&nbsp;&nbsp;const Pylos::QtSprites::Type sprite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= (GetCurrentTurn() == Pylos::Player::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? Pylos::QtSprites::Type::player1_select<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: Pylos::QtSprites::Type::player2_select);<br/>
<br/>
&nbsp;&nbsp;const std::pair&lt;int,int&gt; c = Transform(m_select);<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.first&nbsp;&nbsp;- (m_sprites-&gt;GetMarbleWidth()&nbsp;&nbsp;/ 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.second - (m_sprites-&gt;GetMarbleHeight() / 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(sprite));<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Coordinat&gt; ribi::QtPylosWidget::GetCoordinats(<br/>
&nbsp;&nbsp;const int mouse_x, const int mouse_y)<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;Pylos::Coordinat&gt; v = Pylos::GetAllCoordinats();<br/>
&nbsp;&nbsp;std::vector&lt;double&gt; d; //Distances<br/>
&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::back_inserter(d),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this,mouse_x,mouse_y](const Pylos::Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Calculate this Pylos::Coordinat its center on the widget<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;int,int&gt; p = Transform(c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return GetDistance(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;double&gt;(p.first&nbsp;&nbsp;- mouse_x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;double&gt;(p.second - mouse_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(v.size() == d.size());<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;Pylos::Coordinat&gt; c;<br/>
<br/>
&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;const double ray = 0.33 * GetDistance(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;double&gt;(m_sprites-&gt;GetMarbleWidth()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;double&gt;(m_sprites-&gt;GetMarbleHeight()) );<br/>
<br/>
&nbsp;&nbsp;for (std::size_t i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (d[i] &lt; ray) c.push_back(v[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return c;<br/>
}<br/>
<br/>
double ribi::QtPylosWidget::GetDistance(const double dx, const double dy)<br/>
{<br/>
&nbsp;&nbsp;return std::sqrt( (dx * dx) + (dy * dy) );<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Coordinat&gt;&amp; ribi::QtPylosWidget::GetOtherSelectors() const<br/>
{<br/>
&nbsp;&nbsp;return m_other_selectors;<br/>
}<br/>
<br/>
const std::string ribi::QtPylosWidget::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::QtPylosWidget::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2012-05-28: version 1.0: initial version. Added tilt.");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
bool ribi::QtPylosWidget::IsOtherSelector(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return std::find(m_other_selectors.begin(),m_other_selectors.end(),c) != m_other_selectors.end();<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::MouseLeftClick()<br/>
{<br/>
&nbsp;&nbsp;if (!GetMustRemove())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseLeftClickSelect();<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseLeftClickRemove();<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::MouseLeftClickRemove()<br/>
{<br/>
&nbsp;&nbsp;//Player tries to select a third marble<br/>
&nbsp;&nbsp;if (m_other_selectors.size() == 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_select == m_other_selectors[0] || m_select == m_other_selectors[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeselectRemove(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Toggle marbles selected for removal<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bool must_return = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::find(m_other_selectors.begin(),m_other_selectors.end(),m_select) != m_other_selectors.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove c from m_other_selectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//invalidates d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeselectRemove(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emit Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;must_return = true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (must_return) return;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Player toggles his first marble for removal<br/>
&nbsp;&nbsp;if (m_other_selectors.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (CanRemove( std::vector&lt;Pylos::Coordinat&gt;(1,m_select) )) m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(m_other_selectors.size() == 1);<br/>
&nbsp;&nbsp;//Player clicks a marble and has selected none or one other<br/>
&nbsp;&nbsp;//If the player can remove the selected marble<br/>
&nbsp;&nbsp;//and if he has not selected two marbles<br/>
&nbsp;&nbsp;//for removal already<br/>
&nbsp;&nbsp;if (CanRemove( { m_select,m_other_selectors[0] } ))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit Toggle();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
///MouseLeftClickSelect handles mouse left-clicking<br/>
///during select state.<br/>
void ribi::QtPylosWidget::MouseLeftClickSelect()<br/>
{<br/>
&nbsp;&nbsp;if (GetWinner() != Pylos::Winner::none) return;<br/>
<br/>
&nbsp;&nbsp;//Select marble for movement<br/>
&nbsp;&nbsp;if (m_other_selectors.empty() &amp;&amp; CanTransfer(m_select))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Toggle marble selected for movement<br/>
&nbsp;&nbsp;if (!m_other_selectors.empty() &amp;&amp; m_select == m_other_selectors[0])<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Add marbles<br/>
&nbsp;&nbsp;if (m_other_selectors.empty() &amp;&amp; CanSet(m_select))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Set(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors = std::vector&lt;Pylos::Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit DoneMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (GetWinner() != Pylos::Winner::none)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emit HasWinner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//User might want to move a marble<br/>
&nbsp;&nbsp;if (GetMustRemove() == Pylos::MustRemoveState::no)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!m_other_selectors.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; CanTransfer(m_other_selectors[0], m_select) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Transfer(m_other_selectors[0],m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emit DoneMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors = std::vector&lt;Pylos::Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::MouseMove(const int mouse_x, const int mouse_y)<br/>
{<br/>
&nbsp;&nbsp;if (!GetMustRemove())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseMoveSelect(mouse_x,mouse_y);<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseMoveRemoval(mouse_x,mouse_y);<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::mouseMoveEvent(QMouseEvent * e)<br/>
{<br/>
&nbsp;&nbsp;assert(e-&gt;type() == QMouseEvent::MouseMove);<br/>
&nbsp;&nbsp;const int mouse_x = e-&gt;x();<br/>
&nbsp;&nbsp;const int mouse_y = e-&gt;y();<br/>
&nbsp;&nbsp;MouseMove(mouse_x,mouse_y);<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::mousePressEvent(QMouseEvent* e)<br/>
{<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "void ribi::QtPylosWidget::mousePressEvent(QMouseEvent* e)\n";<br/>
&nbsp;&nbsp;const int mouse_x = e-&gt;x();<br/>
&nbsp;&nbsp;const int mouse_y = e-&gt;y();<br/>
&nbsp;&nbsp;MouseMove(mouse_x,mouse_y); //Always first perform a mouse move to set the selector right<br/>
&nbsp;&nbsp;switch (e-&gt;button())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::LeftButton : MouseLeftClick(); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::RightButton: MouseRightClick(); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: break;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::MouseMoveRemoval(<br/>
&nbsp;&nbsp;const int mouse_x,<br/>
&nbsp;&nbsp;const int mouse_y)<br/>
{<br/>
<br/>
&nbsp;&nbsp;//Selector must be set to removable marbles<br/>
&nbsp;&nbsp;const std::vector&lt;Pylos::Coordinat&gt; v = GetCoordinats(mouse_x,mouse_y);<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const Pylos::Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //player has selected two marbles for removal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //only select those marbles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(m_other_selectors.size() &gt; 0 &amp;&amp; IsOtherSelector(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //player has selected one marble for removal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //select the marble (possibly below it) to be<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //removed as well<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| (m_other_selectors.size() == 1 &amp;&amp; CanRemove( { m_other_selectors[0],c } ))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //player has selected nothing for removal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| (m_other_selectors.empty() &amp;&amp; CanRemove( std::vector&lt;Pylos::Coordinat&gt;(1,c) ))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetSelector(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
///MouseMoveSelect handles mouse movement<br/>
///when player must select either a location to<br/>
///place a new marble or to select a marble to move<br/>
void ribi::QtPylosWidget::MouseMoveSelect(<br/>
&nbsp;&nbsp;const int mouse_x, const int mouse_y)<br/>
{<br/>
&nbsp;&nbsp;//Selector must show to either<br/>
&nbsp;&nbsp;//- movable marbles<br/>
&nbsp;&nbsp;//- spots to place a new marble<br/>
&nbsp;&nbsp;//Check lowest Pylos level first, otherwise (0,0,0) cannot be selected when (1,0,0) can be<br/>
&nbsp;&nbsp;const std::vector&lt;Pylos::Coordinat&gt; v = GetCoordinats(mouse_x,mouse_y);<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const Pylos::Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Player selects his/her first position<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( m_other_selectors.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Player can set a new marble there at the current empty position<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; (CanSet(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Or player can select his/her own marbles for transfer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; || CanTransfer(c) ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!m_other_selectors.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; (IsOtherSelector(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; || CanTransfer(m_other_selectors[0],c) ) ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetSelector(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::MouseRightClick()<br/>
{<br/>
&nbsp;&nbsp;if (!GetMustRemove()) return;<br/>
&nbsp;&nbsp;//Right mouse button is only used to remove the<br/>
&nbsp;&nbsp;//marbles selected for removal<br/>
&nbsp;&nbsp;//There must be marbles selected<br/>
&nbsp;&nbsp;if (m_other_selectors.empty()) return;<br/>
&nbsp;&nbsp;//Two marbles are selected<br/>
&nbsp;&nbsp;if (CanRemove(m_other_selectors))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Remove(m_other_selectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;emit DoneMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors = std::vector&lt;Pylos::Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::paintEvent(QPaintEvent *)<br/>
{<br/>
&nbsp;&nbsp;//assert(m_pylos);<br/>
&nbsp;&nbsp;QPainter painter(this);<br/>
<br/>
&nbsp;&nbsp;painter.drawPixmap(0,0,m_sprites-&gt;Get(Pylos::QtSprites::Type::board_bottom));<br/>
&nbsp;&nbsp;//Draw the hole<br/>
&nbsp;&nbsp;for (int y=0; y!=4; ++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=4; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x * m_sprites-&gt;GetMarbleWidth(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y * m_sprites-&gt;GetMarbleHeight(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::board_hole));<br/>
<br/>
&nbsp;&nbsp;for (int layer=0; layer!=4; ++layer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int layer_size = GetLayerSize(layer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int y=0; y!=layer_size; ++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=layer_size; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Pylos::Coordinat::IsValid(layer,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat c(layer,x,y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw selector, after sprite is drawn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == m_select) DrawSelect(painter);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::PositionState state = Get(c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pylos::QtSprites::Type sprite = Pylos::QtSprites::Type::board_hole;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (state)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Pylos::PositionState::empty&nbsp;&nbsp;: continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Pylos::PositionState::player1: sprite = Pylos::QtSprites::Type::player1; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Pylos::PositionState::player2: sprite = Pylos::QtSprites::Type::player2; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(sprite != Pylos::QtSprites::Type::board_hole);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;int,int&gt; p = Transform(Pylos::Coordinat(layer,x,y));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.first&nbsp;&nbsp;- (m_sprites-&gt;GetMarbleWidth()&nbsp;&nbsp;/ 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.second - (m_sprites-&gt;GetMarbleHeight() / 2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;Get(sprite));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(m_other_selectors.begin(),m_other_selectors.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,c,&amp;painter](const Pylos::Coordinat&amp; d)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (d == c) DrawRemove(painter,c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw selector, after sprite is drawn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == m_select) DrawSelect(painter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::resizeEvent(QResizeEvent *)<br/>
{<br/>
&nbsp;&nbsp;m_sprites.reset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Pylos::QtSprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;height(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites-&gt;GetColorScheme()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::SaveAllSprites() const<br/>
{<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::player1).save("sprite_player1.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::player2).save("sprite_player2.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::player1_select).save("sprite_player1_select.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::player2_select).save("sprite_player2_select.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::player1_remove).save("sprite_player1_remove.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::player2_remove).save("sprite_player2_remove.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::board_bottom).save("sprite_board_bottom.png");<br/>
&nbsp;&nbsp;m_sprites-&gt;Get(Pylos::QtSprites::Type::board_hole).save("sprite_board_hole.png");<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::SetColorSchemeBlackWhite()<br/>
{<br/>
&nbsp;&nbsp;m_sprites.reset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Pylos::QtSprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;height(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pylos::GetBlackWhiteColors()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::SetColorSchemeRedBlue()<br/>
{<br/>
&nbsp;&nbsp;m_sprites.reset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Pylos::QtSprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;height(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pylos::GetRedBlueColors()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::SetSelector(const Pylos::Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;m_select = c;<br/>
&nbsp;&nbsp;emit SelectorChanged();<br/>
}<br/>
<br/>
void ribi::QtPylosWidget::SetTilt(const double tilt)<br/>
{<br/>
&nbsp;&nbsp;m_tilt = tilt;<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<br/>
const std::pair&lt;int,int&gt; ribi::QtPylosWidget::Transform(const Pylos::Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;const int x_co<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= (m_sprites-&gt;GetMarbleWidth() / 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ static_cast&lt;int&gt;(std::sin(m_tilt) * static_cast&lt;double&gt;((m_sprites-&gt;GetMarbleWidth()) * (c.GetLayer() + 0)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ (c.GetX() * m_sprites-&gt;GetMarbleWidth());<br/>
&nbsp;&nbsp;const int y_co<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= (m_sprites-&gt;GetMarbleHeight() / 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ static_cast&lt;int&gt;(std::sin(m_tilt) * static_cast&lt;double&gt;((m_sprites-&gt;GetMarbleHeight()) * (c.GetLayer() + 0)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ (c.GetY() * m_sprites-&gt;GetMarbleHeight());<br/>
&nbsp;&nbsp;return std::make_pair(x_co,y_co);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPylos/qtpyloswidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPylos/qtpyloswidget.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
PylosWidget, widget to display Pylos class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef QTPYLOSWIDGET_H<br/>
#define QTPYLOSWIDGET_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/tuple/tuple.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include &lt;QWidget&gt;<br/>
<br/>
#include "pyloscoordinat.h"<br/>
#include "pylosfwd.h"<br/>
#include "pylosmove.h"<br/>
#include "pyloswinner.h"<br/>
#include "qtpylossprites.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
struct QPaintEvent;<br/>
//namespace Pylos { struct Game; }<br/>
<br/>
namespace ribi {<br/>
<br/>
///PylosWidget is the base class of QtPylosBoardWidget and QtPylosWidget<br/>
class QtPylosWidget : public QWidget<br/>
{<br/>
&nbsp;&nbsp;Q_OBJECT<br/>
public:<br/>
&nbsp;&nbsp;QtPylosWidget();<br/>
&nbsp;&nbsp;virtual ~QtPylosWidget() noexcept {}<br/>
&nbsp;&nbsp;///mouseMoveEvent is public, because<br/>
&nbsp;&nbsp;///TestPylos must be able to make virtual mouse movements.<br/>
&nbsp;&nbsp;void mouseMoveEvent(QMouseEvent * e);<br/>
&nbsp;&nbsp;///mousePressEvent is public, because<br/>
&nbsp;&nbsp;///TestPylos must be able to deliver virtual clicks.<br/>
&nbsp;&nbsp;void mousePressEvent(QMouseEvent*);<br/>
<br/>
&nbsp;&nbsp;///CanRemove specifies if current player can remove one or<br/>
&nbsp;&nbsp;///two marble(s) at the requested position(s).<br/>
&nbsp;&nbsp;virtual bool CanRemove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v) const = 0;<br/>
<br/>
&nbsp;&nbsp;///CanSet tests if the current player can be set at the Coordinat<br/>
&nbsp;&nbsp;virtual bool CanSet(const Pylos::Coordinat&amp; c) const = 0;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer<br/>
&nbsp;&nbsp;///the marble at the specified coordinat for movement<br/>
&nbsp;&nbsp;virtual bool CanTransfer(const Pylos::Coordinat&amp; c) const = 0;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer his marble<br/>
&nbsp;&nbsp;///to a new, higher position<br/>
&nbsp;&nbsp;virtual bool CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; to) const = 0;<br/>
<br/>
&nbsp;&nbsp;///GetCurrentTurn returns whose turn it is now<br/>
&nbsp;&nbsp;virtual Pylos::Player GetCurrentTurn() const = 0;<br/>
<br/>
&nbsp;&nbsp;///GetLayerSize returns how many marbles this is wide/height.<br/>
&nbsp;&nbsp;///For exaple; layer 0 has 4x4 marbles, so GetLayerSize<br/>
&nbsp;&nbsp;///will return 4.<br/>
&nbsp;&nbsp;virtual int GetLayerSize(const int layer) const = 0;<br/>
<br/>
&nbsp;&nbsp;///MustRemove returns whether the current player<br/>
&nbsp;&nbsp;///must remove one or two marbles<br/>
&nbsp;&nbsp;virtual Pylos::MustRemoveState GetMustRemove() const = 0;<br/>
<br/>
&nbsp;&nbsp;///GetOtherSelectors returns the other selectors' current coodinats<br/>
&nbsp;&nbsp;const std::vector&lt;Pylos::Coordinat&gt;&amp; GetOtherSelectors() const;<br/>
<br/>
&nbsp;&nbsp;///GetSelector returns the selector's current coodinat<br/>
&nbsp;&nbsp;const Pylos::Coordinat&amp; GetSelector() const { return m_select; }<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Return the possible winner<br/>
&nbsp;&nbsp;virtual Pylos::Winner GetWinner() const = 0;<br/>
<br/>
&nbsp;&nbsp;///Remove lets the current player remove one or two marbles<br/>
&nbsp;&nbsp;virtual void Remove(const std::vector&lt;Pylos::Coordinat&gt;&amp; v) = 0;<br/>
<br/>
&nbsp;&nbsp;///Set makes current player place his marble<br/>
&nbsp;&nbsp;///at the specified position. After Set,<br/>
&nbsp;&nbsp;///GetMustRemove must be called to determine if<br/>
&nbsp;&nbsp;///the current player must remove some marbles<br/>
&nbsp;&nbsp;virtual void Set(const Pylos::Coordinat&amp; c) = 0;<br/>
<br/>
&nbsp;&nbsp;///SetColorSchemeBlackWhite sets the color scheme to black and white.<br/>
&nbsp;&nbsp;void SetColorSchemeBlackWhite();<br/>
<br/>
&nbsp;&nbsp;///SetColorSchemeRedBlue sets the color scheme to red and blue.<br/>
&nbsp;&nbsp;void SetColorSchemeRedBlue();<br/>
<br/>
&nbsp;&nbsp;///SetTilt sets the tilt of this widget<br/>
&nbsp;&nbsp;void SetTilt(const double tilt);<br/>
<br/>
&nbsp;&nbsp;///StartAdvanced cleans the board to start a game<br/>
&nbsp;&nbsp;///with advanced rules<br/>
&nbsp;&nbsp;virtual void StartAdvanced() = 0;<br/>
<br/>
&nbsp;&nbsp;///StartBasic cleans the board to start a game<br/>
&nbsp;&nbsp;///with basic rules<br/>
&nbsp;&nbsp;virtual void StartBasic() = 0;<br/>
<br/>
&nbsp;&nbsp;///Transfer lets current player tranfer his marble to a new, higher position<br/>
&nbsp;&nbsp;virtual void Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Coordinat&amp; to) = 0;<br/>
<br/>
<br/>
signals:<br/>
&nbsp;&nbsp;///HasWinner is emitted when a winner is found<br/>
&nbsp;&nbsp;void HasWinner();<br/>
&nbsp;&nbsp;///SelectorChanged is emitted when the selector is moved<br/>
&nbsp;&nbsp;void SelectorChanged();<br/>
&nbsp;&nbsp;///DoneMove is emitted when a player has done a successfull move<br/>
&nbsp;&nbsp;void DoneMove();<br/>
&nbsp;&nbsp;///Toggle is emitted when a marble is (de)selected for something<br/>
&nbsp;&nbsp;void Toggle();<br/>
<br/>
protected:<br/>
&nbsp;&nbsp;///Draw the Pylos widget<br/>
&nbsp;&nbsp;void paintEvent(QPaintEvent *);<br/>
<br/>
&nbsp;&nbsp;///Resize the Pylos widget<br/>
&nbsp;&nbsp;void resizeEvent(QResizeEvent *);<br/>
<br/>
&nbsp;&nbsp;///m_other_selectors embodies the coordinats for<br/>
&nbsp;&nbsp;///- selecting a marble to move to a higher layer<br/>
&nbsp;&nbsp;///- select one or two marbles for removal<br/>
&nbsp;&nbsp;std::vector&lt;Pylos::Coordinat&gt; m_other_selectors;<br/>
<br/>
&nbsp;&nbsp;///The current coordinat of the selector<br/>
&nbsp;&nbsp;Pylos::Coordinat m_select;<br/>
<br/>
&nbsp;&nbsp;///All Pylos sprites<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Pylos::QtSprites&gt; m_sprites;<br/>
<br/>
&nbsp;&nbsp;///The angle which the board is tilted in radians.<br/>
&nbsp;&nbsp;///0.0*M_PI denotes looking at the board from the top<br/>
&nbsp;&nbsp;///0.5*M_PI denotes looking from directly above the bottom left position<br/>
&nbsp;&nbsp;double m_tilt;<br/>
<br/>
private:<br/>
&nbsp;&nbsp;///DeselectRemove remove coordinat c from m_other_selectors,<br/>
&nbsp;&nbsp;///because the player deselected the marble at<br/>
&nbsp;&nbsp;///that coordinat<br/>
&nbsp;&nbsp;void DeselectRemove(const Pylos::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;///DrawRemove draws a marble toggled for removal<br/>
&nbsp;&nbsp;void DrawRemove(QPainter&amp; painter, const Pylos::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;///DrawSelect draws the selector<br/>
&nbsp;&nbsp;void DrawSelect(QPainter&amp; painter);<br/>
<br/>
&nbsp;&nbsp;///Obtain the PositionState at a certain coordinat<br/>
&nbsp;&nbsp;virtual Pylos::PositionState Get(const Pylos::Coordinat&amp; c) const = 0;<br/>
<br/>
&nbsp;&nbsp;///Obtain all Pylos::Coordinat instances at a certain mouse position<br/>
&nbsp;&nbsp;const std::vector&lt;Pylos::Coordinat&gt; GetCoordinats(const int mouse_x, const int mouse_y);<br/>
<br/>
&nbsp;&nbsp;///From www.richelbilderbeek.nl/CppGetDistance.htm<br/>
&nbsp;&nbsp;static double GetDistance(const double dx, const double dy);<br/>
<br/>
&nbsp;&nbsp;///IsOtherSelector returns if the specified coordinat<br/>
&nbsp;&nbsp;///is selected for removal<br/>
&nbsp;&nbsp;bool IsOtherSelector(const Pylos::Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///MouseLeftClick handles mouse left-clicking.<br/>
&nbsp;&nbsp;void MouseLeftClick();<br/>
<br/>
&nbsp;&nbsp;///MouseLeftClickRemove handles mouse left-clicking<br/>
&nbsp;&nbsp;///during removal state.<br/>
&nbsp;&nbsp;void MouseLeftClickRemove();<br/>
<br/>
&nbsp;&nbsp;///MouseLeftClickSelect handles mouse left-clicking<br/>
&nbsp;&nbsp;///during select state.<br/>
&nbsp;&nbsp;void MouseLeftClickSelect();<br/>
<br/>
&nbsp;&nbsp;///MouseRightClick handles mouse right-clicking.<br/>
&nbsp;&nbsp;void MouseRightClick();<br/>
<br/>
&nbsp;&nbsp;///MouseMove is the first method called after a<br/>
&nbsp;&nbsp;///mouse move<br/>
&nbsp;&nbsp;void MouseMove(const int x, const int y);<br/>
<br/>
&nbsp;&nbsp;///MouseMoveRemoval handles mouse movement<br/>
&nbsp;&nbsp;///when player must remove one or two marbles<br/>
&nbsp;&nbsp;void MouseMoveRemoval(const int x, const int y);<br/>
<br/>
&nbsp;&nbsp;///MouseMoveSelect handles mouse movement<br/>
&nbsp;&nbsp;///when player must select either a location to<br/>
&nbsp;&nbsp;///place a new marble or to select a marble to move<br/>
&nbsp;&nbsp;void MouseMoveSelect(const int x, const int y);<br/>
<br/>
&nbsp;&nbsp;///SaveAllSprites saves all sprites used in this game.<br/>
&nbsp;&nbsp;void SaveAllSprites() const;<br/>
<br/>
&nbsp;&nbsp;///SetSelector sets the selector coordinat to c<br/>
&nbsp;&nbsp;void SetSelector(const Pylos::Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;///Transform a Pylos::Coordinat to a (x,y) position on the widget's canvas<br/>
&nbsp;&nbsp;///Note: the (x,y) position denotes the center of the marble<br/>
&nbsp;&nbsp;const std::pair&lt;int,int&gt; Transform(const Pylos::Coordinat&amp; c) const;<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPYLOSWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
