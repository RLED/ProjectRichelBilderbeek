<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GprofQtCreatorExample2</title>
  <meta name="description" content="C++ GprofQtCreatorExample2"/>
  <meta name="keywords" content="C++ GprofQtCreatorExample2 code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGprofQtCreatorExample2.htm">GprofQtCreatorExample2</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppGprofQtCreatorExample2.htm">gprof example 2: profiling a simple console application in Qt Creator, using Qt project file</a> is a
<a href="CppGprof.htm">gprof</a> example to  profile a simple console application under <a href="CppQt.htm">Qt Creator</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppGprofQtCreatorExample2.zip">Download the Qt Project of 'CppGprofQtCreatorExample2' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>To be able to use <a href="CppGprof.htm">gprof</a> to profile a project, add the following lines to a 
<a href="CppQtProjectFile.htm">Qt project file</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
QMAKE_CXXFLAGS_DEBUG += -pg<br/>
QMAKE_LFLAGS_DEBUG += -pg<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>then, for a terminal, type the following lines:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
qmake -config debug<br/>
make clean<br/>
make<br/>
./Cpp<a href="CppGprof.htm">Gprof</a><a href="CppQtCreator.htm">QtCreator</a>Example2<br/>
<a href="CppGprof.htm">gprof</a> Cpp<a href="CppGprof.htm">Gprof</a><a href="CppQtCreator.htm">QtCreator</a>Example2 &gt; <a href="CppGprof.htm">gprof</a>.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Or easier, run the script profile.sh:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
./profile.sh<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Profiling results</h2>
<p>&nbsp;</p>
<p>Here I show the results comparing the five functions, copied from the results file:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Each sample counts as 0.01 seconds.<br/>
&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>&nbsp;&nbsp; cumulative&nbsp;&nbsp; self&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self&nbsp;&nbsp;&nbsp;&nbsp; total&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br/>
 <a href="CppTime.htm">time</a>&nbsp;&nbsp; seconds&nbsp;&nbsp; seconds&nbsp;&nbsp;&nbsp;&nbsp;calls&nbsp;&nbsp; s/call&nbsp;&nbsp; s/call&nbsp;&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;<br/>
 12.51&nbsp;&nbsp;&nbsp;&nbsp;172.28&nbsp;&nbsp;&nbsp;&nbsp;29.52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;29.52&nbsp;&nbsp;&nbsp;&nbsp;77.11&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppBubbleSort.htm">BubbleSort</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>, <a href="CppStd.htm">std</a>::allocator&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp;)<br/>
 12.39&nbsp;&nbsp;&nbsp;&nbsp;201.51&nbsp;&nbsp;&nbsp;&nbsp;29.23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;29.23&nbsp;&nbsp;&nbsp;&nbsp;76.82&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppInsertionSort.htm">InsertionSort</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>, <a href="CppStd.htm">std</a>::allocator&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp;)<br/>
 12.06&nbsp;&nbsp;&nbsp;&nbsp;229.97&nbsp;&nbsp;&nbsp;&nbsp;28.45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;28.45&nbsp;&nbsp;&nbsp;&nbsp;76.04&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppSelectionSort.htm">SelectionSort</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>, <a href="CppStd.htm">std</a>::allocator&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp;)<br/>
&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;235.89&nbsp;&nbsp;&nbsp;&nbsp; 0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp; 0.00&nbsp;&nbsp;&nbsp;&nbsp; 0.52&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppSortVector.htm">SortVector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>, <a href="CppStd.htm">std</a>::allocator&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp;)<br/>
&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;235.89&nbsp;&nbsp;&nbsp;&nbsp; 0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp; 0.00&nbsp;&nbsp;&nbsp;&nbsp; 0.09&nbsp;&nbsp;CreateShuffledVector(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Conclusion: as expected, SortVector (a QuickSort) is by far the quickest <a href="CppSort.htm">sorting</a> <a href="CppAlgorithm.htm">algorithm</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.1.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppGprofQtCreatorExample2.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppGprofQtCreatorExample2.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
<br/>
#Use <a href="CppGprof.htm">gprof</a> for profiling in release mode, use for run-time speed optimization<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -pg<br/>
QMAKE_LFLAGS += -pg<br/>
#Use <a href="CppGprof.htm">gprof</a> for profiling in debug mode, okay for detecting memory leaks<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a>_DEBUG += -pg<br/>
QMAKE_LFLAGS_DEBUG += -pg<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
<br/>
#<br/>
#<br/>
# Type of compile<br/>
#<br/>
#<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(debug, debug|release) {<br/>
&nbsp;&nbsp;message(Debug mode)<br/>
}<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;message(Release mode)<br/>
<br/>
&nbsp;&nbsp;#Remove all <a href="CppAssert.htm">assert</a>s and <a href="CppTRACE.htm">TRACE</a><br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
}<br/>
<br/>
#<br/>
#<br/>
# Platform specific<br/>
#<br/>
#<br/>
<br/>
#<br/>
#<br/>
# Compiler flags<br/>
#<br/>
#<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a><br/>
<br/>
<br/>
unix {<br/>
&nbsp;&nbsp;message(Unix)<br/>
&nbsp;&nbsp;<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> &lt;<a href="CppAlgorithmH.html">algorithm</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppBOOST_FOREACH.html">foreach</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppBubbleSort.html">BubbleSort</a>.html<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppBubbleSort.html">BubbleSort</a>(<a href="CppVector.html">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>size-i-1; <a href="CppOperatorPlus.htm">+</a>+j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(v[j] &gt; v[j+1])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.html">std::swap</a>(v[j],v[j+1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppInsertionSort.html">InsertionSort</a>.html<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppTypename.html">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppInsertionSort.html">InsertionSort</a>(<a href="CppVector.html">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>i; <a href="CppOperatorPlus.htm">+</a>+j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[j]&gt;v[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> temp=v[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[j]=v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> k=i;k&gt;j;<a href="CppOperatorDecrement.htm">--</a>k) { v[k]=v[k-1]; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[j+1]=temp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSelectionSort.html">SelectionSort</a>.html<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppTypename.html">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppSelectionSort.html">SelectionSort</a>(<a href="CppVector.html">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> j=i+1; j<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorPlus.htm">+</a>+j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[i]&gt; v[j])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.html">std::swap</a>(v[i],v[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSortVector.html">SortVector</a>.html<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppSortVector.html">SortVector</a>(<a href="CppVector.html">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppSort.html">std::sort</a>(v.begin(), v.end());<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; CreateShuffledVector(<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> sz)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(sz);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> value <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.html">BOOST_FOREACH</a>(<b><a href="CppInt.htm">int</a></b>&amp; i,v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+value;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.html">std::random_shuffle</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> CreateShuffledVector(100000);<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v1(v);<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v2(v);<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v3(v);<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v4(v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBubbleSort.html">BubbleSort</a>(v1);<br/>
&nbsp;&nbsp;<a href="CppInsertionSort.html">InsertionSort</a>(v2);<br/>
&nbsp;&nbsp;<a href="CppSelectionSort.html">SelectionSort</a>(v3);<br/>
&nbsp;&nbsp;<a href="CppSortVector.html">SortVector</a>(v4);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v1<a href="CppOperatorEqual.htm">==</a>v2);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v2<a href="CppOperatorEqual.htm">==</a>v3);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v3<a href="CppOperatorEqual.htm">==</a>v4);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Finished <a href="CppDebug.html">debug</a> mode" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppPreElse.html">#else</a><br/>
&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Finished release mode" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>profile.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="profile.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
echo "Removing user file"<br/>
rm *.pro.user<br/>
<br/>
#echo "Creating profile executable (debug mode)"<br/>
#qmake -config debug<br/>
<br/>
echo "Creating profile executable (release mode)"<br/>
qmake -config release<br/>
<br/>
make clean<br/>
make<br/>
<br/>
echo "Removing makefile"<br/>
rm Makefile<br/>
<br/>
echo "Removing object files"<br/>
rm *.o<br/>
<br/>
echo "Start the application"<br/>
./CppGprofQtCreatorExample2<br/>
<br/>
echo "Analyse the gprof results"<br/>
gprof CppGprofQtCreatorExample2 &gt; gprof.txt<br/>
<br/>
echo "Remove temporary gprof file"<br/>
rm gmon.out<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
