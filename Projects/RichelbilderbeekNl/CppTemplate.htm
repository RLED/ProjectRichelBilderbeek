<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>template</title>
  <meta name="description" content="C++ template"/>
  <meta name="keywords" content="C++ template keyword"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTemplate.htm">template</a></h1>
<p>&nbsp;</p>
<p><a href="CppTemplate.htm">template</a> is a <a href="CppKeyword.htm">keyword</a> for <a href="CppTemplate.htm">templates</a>.
<a href="CppTemplate.htm">Templates</a> 'provide direct support for generic programming in the form of programming using types
as parameters' [1].</p>
<p>&nbsp;</p>
<p>A <a href="CppTemplate.htm">template</a> can take parameters [2]:</p>
<p>&nbsp;</p>
<ul>
  <li>Type parameters</li>
  <li>Value parameters</li>
  <li>Template parameters</li>
</ul>
<p>&nbsp;</p>
<p><a href="CppTemplate.htm">templates</a> can be used to:</p>
<p>&nbsp;</p>
<ul>
  <li>write <a href="CppTemplateFunction.htm">template functions</a></li>
  <li>write <a href="CppTemplateClass.htm">template classes</a></li>
  <li>do <a href="CppTemplateMetaprogram.htm">template metaprogrammming</a> (programs performed at compile time)</li>
  </ul>
<p>&nbsp;</p>
<p>Templates make it possible to use one <a href="CppFunction.htm">function</a> or <a
href="CppClass.htm">class</a> to handle many different <a href="CppDataType.htm">data
types</a>.</p>
<p>&nbsp;</p>
<p>There is no semantic difference between <a href="CppClass.htm">class</a> and <a
href="CppTypename.htm">typename</a> in a template-parameter [3,4]: 'template &lt;class T&gt;' and 'template&lt;typename T&gt;' are synonymous [5].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Examples</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppTemplateClassExample1.htm">Example 1: templated class</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.1, page 665: 'Templates provide direct support for generic programming in the form of programming using types as parameters</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 25.2, page 722: 'A template can take parameters: Type parameters [...], Value parameters [...], Template parameters [...]'</li>
  <li>C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 14.1.2.</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 25.2, page 722: 'A template argument is defined to be a type argument by prefixing it with typename or class. The result of using either is completely equivalent'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 23.8, page 698: 'template &lt;class T&gt;' and 'template&lt;typename T&gt;' are synonymous'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
