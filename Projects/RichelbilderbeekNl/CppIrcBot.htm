<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>IrcBot</title>
  <meta name="description" content="C++ IrcBot"/>
  <meta name="keywords" content="C++ IrcBot code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppIrcBot.htm">IrcBot</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="CppIrcBot.htm">IrcBot</a> is a <a href="CppClass.htm">class</a>
for an IRC bot. Its default name is 'lambda'.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>ircbot.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ircbot.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired by Quxbot, developed by Viderizer and Tyler Allen<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppFunctionalH.html">functional</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> IrcBot<br/>
{<br/>
&nbsp;&nbsp;IrcBot(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; bot_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; channel_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> port,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; server_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppStdFunction.html">std::function</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input)&gt;&amp; respond_function);<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>ircbot.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ircbot.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired by Quxbot, developed by Viderizer and Tyler Allen<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;ircbot<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStdexceptH.html">stdexcept</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;netdb<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppLexical_cast.html">lexical_cast</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
IrcBot::IrcBot(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; bot_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; channel_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> port,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; server_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppStdFunction.html">std::function</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input)&gt;&amp; respond_function)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> port_str <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(port);<br/>
<br/>
&nbsp;&nbsp;addrinfo hints;<br/>
&nbsp;&nbsp;memset(&amp;hints, 0, <b><a href="CppSizeof.html">sizeof</a></b>(hints)); <a href="CppComment.htm">//</a> <a href="CppMake.htm">make</a> sure the <b><a href="CppStruct.html">struct</a></b> is empty<br/>
<br/>
&nbsp;&nbsp;hints.ai_family&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> AF_UNSPEC; <a href="CppComment.htm">//</a> don't care IPv4 or IPv6<br/>
&nbsp;&nbsp;hints.ai_socktype <a href="CppOperatorAssign.htm">=</a> SOCK_STREAM; <a href="CppComment.htm">//</a> TCP stream sockets<br/>
<br/>
&nbsp;&nbsp;addrinfo *servinfo <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> res <a href="CppOperatorAssign.htm">=</a> getaddrinfo(<b><a href="CppConst_cast.html">const_cast</a></b>&lt;<b><a href="CppChar.htm">char</a></b>*&gt;(server_name.c_str()), <b><a href="CppConst_cast.html">const_cast</a></b>&lt;<b><a href="CppChar.htm">char</a></b>*&gt;(port_str.c_str()), &amp;hints, &amp;servinfo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("getaddrinfo: ") <a href="CppOperatorPlus.htm">+</a> <a href="CppString.html">std::string</a>(gai_strerror(res));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppRuntime_error.html">std::runtime_error</a>(s);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> socket_index <a href="CppOperatorAssign.htm">=</a> socket(servinfo-&gt;ai_family, servinfo-&gt;ai_socktype, servinfo-&gt;ai_protocol);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (socket_index <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPerror.html">std::perror</a>("client: socket");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "client: socket";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppRuntime_error.html">std::runtime_error</a>(s);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (connect(socket_index, servinfo-&gt;ai_addr, servinfo-&gt;ai_addrlen) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;close(socket_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPerror.html">std::perror</a>("client: connect");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "client: connect";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppRuntime_error.html">std::runtime_error</a>(s);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;freeaddrinfo(servinfo);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> count <a href="CppOperatorAssign.htm">=</a> 0; ; <a href="CppOperatorPlus.htm">+</a>+count)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (count)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppComment.htm">//</a>Note: must be 2 on e.g. irc.freenode.net<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> nickname_str <a href="CppOperatorAssign.htm">=</a> "NICK " <a href="CppOperatorPlus.htm">+</a> bot_name <a href="CppOperatorPlus.htm">+</a> "\r\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(socket_index,nickname_str.c_str(),nickname_str.size(),0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> user_str <a href="CppOperatorAssign.htm">=</a> "USER " <a href="CppOperatorPlus.htm">+</a> bot_name <a href="CppOperatorPlus.htm">+</a> " tolmoon tolsun :" <a href="CppOperatorPlus.htm">+</a> bot_name <a href="CppOperatorPlus.htm">+</a> "\r\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(socket_index,user_str.c_str(),user_str.size(),0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppComment.htm">//</a>Note: must be 3 on e.g. irc.freenode.net<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> joinmsg <a href="CppOperatorAssign.htm">=</a> "JOIN " <a href="CppOperatorPlus.htm">+</a> channel_name <a href="CppOperatorPlus.htm">+</a> "\r\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(socket_index,joinmsg.c_str(),joinmsg.size(),0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.html">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> max_data_size <a href="CppOperatorAssign.htm">=</a> 1024;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> buf[max_data_size];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> numbytes <a href="CppOperatorAssign.htm">=</a> recv(socket_index, buf, max_data_size-1, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;buf[numbytes] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; response <a href="CppOperatorAssign.htm">=</a> respond_function(buf);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s: response)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> msg <a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("PRIVMSG ") <a href="CppOperatorPlus.htm">+</a> channel_name <a href="CppOperatorPlus.htm">+</a> <a href="CppString.html">std::string</a>(" :") <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> <a href="CppString.html">std::string</a>("\r\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(socket_index,msg.c_str(),msg.size(),0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppString.html">std::string</a>(buf).find("PING") <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppString.html">std::string</a>::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> msg <a href="CppOperatorAssign.htm">=</a> <a href="CppString.html">std::string</a>("PONG\r\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(socket_index,msg.c_str(),msg.size(),0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (numbytes <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "CONNECTION CLOSED\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;close(socket_index);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
