<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Container</title>
  <meta name="description" content="C++ Container"/>
  <meta name="keywords" content="C++ Container code snippet snippets"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppContainer.htm">Container</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppContainer.htm">container</a> is a <a href="CppClassType.htm">class type</a> for containing zero, one or multiple instances of one or more <a href="CppDataType.htm">data type</a>s.</p>
<p>&nbsp;</p>
<p>
  Every <a href="CppContainer.htm">container</a> has its own advantages and disadvantages. 
  For example a <a href="CppVector.htm">std::vector</a> has random-access reading/writing, 
  but new elements can only be added at the begin and end of the <a href="CppContainer.htm">container</a>. 
  For a <a href="CppList.htm">std::list</a>, this is the other way around.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppStl.htm">STL</a> <a href="CppContainer.htm">container</a>s (incomplete list)</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBitset.htm">std::bitset</a></li>
  <li><a href="CppDeque.htm">std::deque</a></li>
  <li><a href="CppList.htm">std::list</a></li>
  <li><a href="CppMap.htm">std::map</a></li>
  <li><a href="CppMultimap.htm">std::multimap</a></li>
  <li><a href="CppMultiset.htm">std::multiset</a></li>
  <li><a href="CppPair.htm">std::pair</a></li>
  <li><a href="CppPriority_queue.htm">std::priority_queue</a></li>
  <li><a href="CppSet.htm">std::set</a></li>
  <li><a href="CppSlist.htm">std::slist</a></li>
  <li><a href="CppStack.htm">std::stack</a></li>
  <li><a href="CppString.htm">std::string</a></li>
  <li><a href="CppQueue.htm">std::queue</a></li>
  <li><a href="CppValarray.htm">std::valarray</a></li>
  <li><a href="CppVector.htm">std::vector</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>SGI extension <a href="CppContainer.htm">containers</a> (incomplete list)</h2>
<p>&nbsp;</p>
<ul>
  <li>bit_vector</li>
  <li><a href="CppHash_set.htm">hash_set</a></li>
  <li>hash_map</li>
  <li>hash_multiset</li>
  <li>hash_multimap</li>
  <li>hash</li>
  <li>rope</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppBoost.htm">Boost</a> <a href="CppContainer.htm">container</a>s (incomplete list)</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppAny.htm">boost::any</a></li>
  <li><a href="CppArray.htm">boost::array</a></li>
  <li>boost::compressed_pair</li>
  <li>boost::dynamic_bitset</li>
  <li><a href="CppMulti_array.htm">boost::multi_array</a></li>
  <li>boost::ptr_array</li>
  <li>boost::ptr_deque</li>
  <li>boost::ptr_list</li>
  <li>boost::ptr_map</li>
  <li>boost::ptr_multimap</li>
  <li>boost::ptr_multiset</li>
  <li><a href="CppPtr_set.htm">boost::ptr_set</a></li>
  <li>boost::ptr_vector</li>
  <li>boost::shared_array</li>
  <li><a href="CppTuple.htm">boost::tuple</a></li>
  <li>boost::variant</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppContainer.htm">Container</a> <a href="CppCodeSnippets.htm">code snippets</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppContainerToStr.htm">ContainerToStr, convert a container to a std::string</a></li>
  <li><a href="CppContainerToStr.htm">Convert a container to a std::string, ContainerToStr</a></li>
  <li><a href="CppCopyFirst.htm">Copy the first element of the std::pairs in a std::vector, CopyFirst</a></li>
  <li><a href="CppCopySecond.htm">Copy the second element of the std::pairs in a std::vector, CopySecond</a></li>
  <li><a href="CppCopyFirst.htm">CopyFirst, copy the first element of the std::pairs in a std::vector</a></li>
  <li><a href="CppCopySecond.htm">CopySecond, copy the second element of the std::pairs in a std::vector</a></li>
  <li><a href="CppCoutContainer.htm">CoutContainer, std::cout a container</a></li>
  <li><a href="CppExtractIds.htm">ExtractIds, extract the ID's for a std::vector of Persons</a></li>
  <li><a href="CppExtractIds.htm">Extract the ID's for a std::vector of Persons, ExtractIds</a></li>
  <li><a href="CppGetMean.htm">Get the mean value of all elements in a container, GetMean</a></li>
  <li><a href="CppGetSum.htm">Get the sum of all elements in a container, GetSum</a></li>
  <li><a href="CppGetMinThree.htm">Get the three lowest elements of a container, GetMinThree</a></li>
  <li><a href="CppGetMean.htm">GetMean, get the mean value of all elements in a container</a></li>
  <li><a href="CppGetMinThree.htm">GetMinThree, obtain the three lowest elements of a container</a></li>
  <li><a href="CppGetSum.htm">GetSum, get the sum of all elements in a container</a></li>
  <li><a href="CppLoopReader.htm">LoopReader, reading a container looped</a></li>
  <li><a href="CppMatrix.htm">Matrix</a></li>
  <li><a href="CppLoopReader.htm">Reading a container looped, LoopReader</a></li>
  <li><a href="CppReciprocal.htm">Reciprocal, replace all values in a container by their reciprocal</a></li>
  <li><a href="CppReciprocal.htm">Replace all values in a container by their reciprocal, Reciprocal</a></li>
  <li><a href="CppSaveContainer.htm">Save a container to file, SaveContainer</a></li>
  <li><a href="CppSaveContainer.htm">SaveContainer, save a container to file</a></li>
  <li><a href="CppCoutContainer.htm">std::cout a container, CoutContainer</a></li>
  <li><a href="CppTriple.htm">Triple all values in a container, Triple</a></li>
  <li><a href="CppTriple.htm">Triple, triple all values in a container</a></li>

</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    If a <a href="CppClass.htm">class</a> is a <a href="CppContainer.htm">container</a>, give it an <a href="CppInitializerList.htm">initializer-list</a> <a href="CppContructor.htm">constructor</a> [1]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[8] If a class is a container, give it an initializer-list constructor'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
