<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtConceptMap</title>
  <meta name="description" content="C++ QtConceptMap"/>
  <meta name="keywords" content="C++ QtConceptMap "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtConceptMap.htm">QtConceptMap</a></h1>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/CppQtConceptMap.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/CppQtConceptMap.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap<br/>
<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/Licence.txt<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapdisplaywidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapeditwidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapratewidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapwidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapedgeitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapexamplesitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapdisplayconceptitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapeditconceptitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmaprateconceptitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapcenternodeitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapnodeitem.cpp<br/>
<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapdisplaywidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapeditwidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapratewidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapwidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapedgeitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapexamplesitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapdisplayconceptitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapeditconceptitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmaprateconceptitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapcenternodeitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapnodeitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppQtConceptMap/qtconceptmapfwd.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapcenternodeitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapcenternodeitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapcenternodeitem.h"<br/>
<br/>
#include "conceptmapcenternode.h"<br/>
#include "qtconceptmapconceptitem.h"<br/>
#include "qtconceptmapbrushfactory.h"<br/>
#include "conceptmapnode.h"<br/>
#include "qtconceptmapdisplayconceptitem.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::QtPvdbCenterNodeItem::QtPvdbCenterNodeItem(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
&nbsp;&nbsp;: QtConceptMapNodeItem(node,CreateConceptItem(node))<br/>
{<br/>
&nbsp;&nbsp;assert( ( boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| !boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(node) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Both Nodes and CenterNodes can be put in QtCenterNodeItem"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "CenterNode: this QtNode is the center of a ConceptMap"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Node: this QtNode is the focal node of a sub ConceptMap");<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(this-&gt;GetConceptItem());<br/>
&nbsp;&nbsp;this-&gt;setFlags(QGraphicsItem::ItemIsFocusable);<br/>
&nbsp;&nbsp;this-&gt;GetConceptItem()-&gt;SetMainBrush(QtPvdbBrushFactory::CreateGoldGradientBrush());<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::QtConceptMapItem&gt; ribi::cmap::QtPvdbCenterNodeItem::CreateConceptItem(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
{<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; item(new QtConceptMapDisplayConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;return item;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapcenternodeitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapcenternodeitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBCENTERNODEITEM_H<br/>
#define QTPVDBCENTERNODEITEM_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "qtconceptmapnodeitem.h"<br/>
<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///The center node<br/>
struct QtPvdbCenterNodeItem : public QtConceptMapNodeItem<br/>
{<br/>
&nbsp;&nbsp;///Node cannot be const, as it contains a Concept the user might want to edit<br/>
&nbsp;&nbsp;///(that is, when a sub-concept map is created from a concept map and the<br/>
&nbsp;&nbsp;///focal node needs to be rated)<br/>
&nbsp;&nbsp;///concept_item is the display Strategy<br/>
&nbsp;&nbsp;explicit QtPvdbCenterNodeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node);<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;QtConceptMapItem&gt; CreateConceptItem(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node);<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBCENTERNODEITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapdisplayconceptitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapdisplayconceptitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapdisplayconceptitem.h"<br/>
<br/>
#include &lt;cstdlib&gt;<br/>
#include &lt;sstream&gt;<br/>
<br/>
#include &lt;QKeyEvent&gt;<br/>
<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapcompetency.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "qtconceptmapbrushfactory.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::QtConceptMapDisplayConceptItem::QtConceptMapDisplayConceptItem(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;: QtConceptMapItem(concept)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;assert(GetConcept());<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;UpdateBrushesAndPens();<br/>
<br/>
&nbsp;&nbsp;//?FIX 2013-01-06 22:47<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtConceptMapDisplayConceptItem::OnConceptNameChanged,this)); //Obligatory<br/>
<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_examples_changed.connect( //FIX 2013-01-06 22:32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_complexity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_concreteness_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_specificity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapDisplayConceptItem::~QtConceptMapDisplayConceptItem() noexcept<br/>
{<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_examples_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;//Obligatory: because concepts live longer than DisplayConceptItems,<br/>
&nbsp;&nbsp;//these Concepts will signal Items when the Item is destroyed,<br/>
&nbsp;&nbsp;//which results in a segmentation fault<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_complexity_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//2013-08-25<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_concreteness_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//2013-08-25<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_specificity_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapDisplayConceptItem::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Starting ribi::cmap::QtConceptMapDisplayConceptItem::Test()");<br/>
&nbsp;&nbsp;TRACE("Successfully finished ribi::cmap::QtConceptMapDisplayConceptItem::Test()");<br/>
}<br/>
#endif<br/>
<br/>
<br/>
void ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens() noexcept<br/>
{<br/>
&nbsp;&nbsp;//TRACE("Start of void ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens()");<br/>
&nbsp;&nbsp;assert(GetConcept());<br/>
&nbsp;&nbsp;assert(GetConcept()-&gt;GetExamples());<br/>
<br/>
&nbsp;&nbsp;//Brush for the concept being rated<br/>
&nbsp;&nbsp;QBrush new_main_brush = this-&gt;brush();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_rated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= (GetConcept()-&gt;GetRatingComplexity()&nbsp;&nbsp; != -1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ (GetConcept()-&gt;GetRatingConcreteness() != -1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ (GetConcept()-&gt;GetRatingSpecificity()&nbsp;&nbsp;!= -1 ? 1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;switch (n_rated)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_main_brush = QtPvdbBrushFactory::CreateRedGradientBrush();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_main_brush = QtPvdbBrushFactory::CreateYellowGradientBrush();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_main_brush = QtPvdbBrushFactory::CreateGreenGradientBrush();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Brush and pen for the examples being rated<br/>
&nbsp;&nbsp;QBrush new_indicator_brush = this-&gt;GetIndicatorBrush();<br/>
&nbsp;&nbsp;QPen new_indicator_pen = this-&gt;GetIndicatorPen();<br/>
&nbsp;&nbsp;if (GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//No examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(0,0,0));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; v = AddConst(GetConcept()-&gt;GetExamples()-&gt;Get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_examples = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_judged<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::count_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Example&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const cmap::Competency this_competency = p-&gt;GetCompetency();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this_competency != cmap::Competency::uninitialized;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n_judged == 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(255,128,128)); //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (n_judged &lt; n_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(255,196,128)); //Orange<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_judged == n_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(128,255,128)); //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n_judged == 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(255,0,0),3); //Thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (n_judged &lt; n_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(255,196,0),2); //Less thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_judged == n_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(0,255,0),1); //Thin pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (this-&gt;brush() != new_main_brush<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| this-&gt;GetIndicatorBrush() != new_indicator_brush<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| this-&gt;GetIndicatorPen() != new_indicator_pen)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setBrush(new_main_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetIndicatorBrush(new_indicator_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetIndicatorPen(new_indicator_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;brush() == new_main_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;GetIndicatorBrush() == new_indicator_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;GetIndicatorPen() == new_indicator_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(std::rand()); //GOOD: Detects infinite recursion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_item_has_updated(this); //Obligatory<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_request_scene_update(); //Obligatory<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//TRACE("End of void ribi::cmap::QtConceptMapDisplayConceptItem::UpdateBrushesAndPens()");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapdisplayconceptitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapdisplayconceptitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBDISPLAYCONCEPTITEM_H<br/>
#define QTPVDBDISPLAYCONCEPTITEM_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "qtconceptmapitem.h"<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///QtPvdbDisplayConcept display a Concept<br/>
struct QtConceptMapDisplayConceptItem : public QtConceptMapItem<br/>
{<br/>
&nbsp;&nbsp;~QtConceptMapDisplayConceptItem() noexcept;<br/>
<br/>
&nbsp;&nbsp;//concept can be modified (as it is not const), but I can promise I will try to prevent this from happening<br/>
&nbsp;&nbsp;explicit QtConceptMapDisplayConceptItem(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept);<br/>
<br/>
protected:<br/>
&nbsp;&nbsp;virtual void keyPressEvent(QKeyEvent *) noexcept {} //Do not respond to key presses<br/>
<br/>
private:<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;void UpdateBrushesAndPens() noexcept;<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBDISPLAYCONCEPTITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapdisplaywidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapdisplaywidget.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapdisplaywidget.h"<br/>
<br/>
#include &lt;boost/lambda/lambda.hpp&gt;<br/>
<br/>
#include "conceptmapedge.h"<br/>
#include "qtconceptmapedgeitem.h"<br/>
#include "qtconceptmapexamplesitem.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapedge.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmap.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "conceptmapfactory.h"<br/>
#include "qtconceptmapcenternodeitem.h"<br/>
#include "qtconceptmapnodeitem.h"<br/>
#include "qtconceptmapdisplayconceptitem.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///Collect all QGraphicsItems with class T in an unorderly way<br/>
template &lt;class T&gt;<br/>
std::vector&lt;T*&gt; Collect(const QGraphicsScene* const scene)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;T*&gt; v;<br/>
&nbsp;&nbsp;const QList&lt;QGraphicsItem *&gt; items = scene-&gt;items();<br/>
&nbsp;&nbsp;std::transform(items.begin(),items.end(),std::back_inserter(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](QGraphicsItem* const item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dynamic_cast&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(std::remove(v.begin(),v.end(),nullptr),v.end());<br/>
&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),nullptr)==0);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapDisplayWidget::QtConceptMapDisplayWidget(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;QWidget* parent)<br/>
&nbsp;&nbsp;: QtConceptMapWidget(concept_map,parent)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;assert( (concept_map || !concept_map)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Also an empty concept map can be displayed");<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (concept_map) BuildQtConceptMap();<br/>
<br/>
&nbsp;&nbsp;//assert(m_tools-&gt;scene() &amp;&amp; "m_tools is added at CleanMe at BuildQtConceptMap");<br/>
&nbsp;&nbsp;//scene()-&gt;addItem(m_tools); //Give m_tools a parent<br/>
}<br/>
<br/>
<br/>
void ribi::cmap::QtConceptMapDisplayWidget::AddEdge(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge)<br/>
{<br/>
&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept(new QtConceptMapDisplayConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(qtconcept);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const from = FindQtNode(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const to&nbsp;&nbsp; = FindQtNode(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;QtConceptMapEdgeItem * const qtedge = new QtConceptMapEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(qtedge);<br/>
<br/>
&nbsp;&nbsp;//Edges connected to the center node do not show their concepts<br/>
&nbsp;&nbsp;if (IsCenterNode(from) || IsCenterNode(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetConceptItem()-&gt;setVisible(false);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Add the EdgeConcepts to the scene<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;QtConceptMapWidget::OnItemRequestsUpdate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this,boost::lambda::_1)); //Do not forget the placeholder!<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
&nbsp;&nbsp;assert(this-&gt;scene());<br/>
<br/>
<br/>
&nbsp;&nbsp;assert(!qtedge-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;GetEdges().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;GetEdges().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge) == 1 &amp;&amp; "Assume edge is already in the concept map");<br/>
&nbsp;&nbsp;//this-&gt;GetConceptMap()-&gt;AddEdge(edge);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if(qtedge-&gt;pos().x() != edge-&gt;GetX())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtedge-&gt;pos().x());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(edge-&gt;GetX());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(qtedge-&gt;pos().x() == edge-&gt;GetX());<br/>
&nbsp;&nbsp;if(qtedge-&gt;pos().y() != edge-&gt;GetY())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtedge-&gt;pos().y());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(edge-&gt;GetY());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(qtedge-&gt;pos().y() == edge-&gt;GetY());<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapNodeItem * ribi::cmap::QtConceptMapDisplayWidget::AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
{<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept(new QtConceptMapDisplayConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(qtconcept);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode = new QtConceptMapNodeItem(node,qtconcept);<br/>
&nbsp;&nbsp;assert(qtnode);<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that this item has changed<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; boost::bind(&amp;QtConceptMapWidget::OnItemRequestsUpdate,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that a QGraphicsScene needs to be updated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;assert(!qtnode-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtnode);<br/>
<br/>
&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetConceptMap()-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetConceptMap()-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node) == 1 &amp;&amp; "Assume Node is already in the concept map");<br/>
&nbsp;&nbsp;//this-&gt;GetConceptMap()-&gt;AddNode(node);<br/>
<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().x() == node-&gt;GetX());<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().y() == node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;//Cannot test this: during construction, the nodes will be put in one-by-one<br/>
&nbsp;&nbsp;//assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size());<br/>
<br/>
&nbsp;&nbsp;return qtnode;<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapDisplayWidget::CleanMe()<br/>
{<br/>
&nbsp;&nbsp;//Prepare clearing the scene<br/>
&nbsp;&nbsp;assert(GetExamplesItem());<br/>
&nbsp;&nbsp;SetExamplesItem(nullptr);<br/>
&nbsp;&nbsp;assert(!GetExamplesItem());<br/>
<br/>
&nbsp;&nbsp;//Clear the scene, invalidates all scene items copies<br/>
&nbsp;&nbsp;assert(this-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;//Put stuff back in<br/>
&nbsp;&nbsp;//Add the invisible examples item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!GetExamplesItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapExamplesItem * const item = new QtConceptMapExamplesItem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetExamplesItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetExamplesItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetExamplesItem()-&gt;setVisible(false);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!GetExamplesItem()-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(GetExamplesItem());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
std::unique_ptr&lt;ribi::cmap::QtConceptMapWidget&gt; ribi::cmap::QtConceptMapDisplayWidget::CreateNewDerived() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::DeepCopy(this-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;std::unique_ptr&lt;QtConceptMapWidget&gt; p(new QtConceptMapDisplayWidget(concept_map));<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
#endif<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapDisplayWidget::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;assert(this-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;const int n_edges_before = boost::numeric_cast&lt;int&gt;(GetConceptMap()-&gt;GetEdges().size());<br/>
&nbsp;&nbsp;const int n_nodes_before = boost::numeric_cast&lt;int&gt;(GetConceptMap()-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;assert(!"Do something here");<br/>
&nbsp;&nbsp;const auto node_from = cmap::NodeFactory::GetTests().at(0);<br/>
&nbsp;&nbsp;const auto node_to&nbsp;&nbsp; = cmap::NodeFactory::GetTests().at(1);<br/>
&nbsp;&nbsp;assert(node_from != node_to);<br/>
&nbsp;&nbsp;this-&gt;AddNode(node_from);<br/>
&nbsp;&nbsp;this-&gt;AddNode(node_to&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;const auto edge_concept = ribi::cmap::ConceptFactory::GetTests().at(0);<br/>
&nbsp;&nbsp;const double node_x = 12.34; //Just some coordinat<br/>
&nbsp;&nbsp;const double node_y = 45.67; //Just some coordinat<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge = cmap::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_concept,node_x,node_y,node_from,true,node_to,true);<br/>
&nbsp;&nbsp;this-&gt;AddEdge(edge);<br/>
&nbsp;&nbsp;const int n_edges_after = boost::numeric_cast&lt;int&gt;(GetConceptMap()-&gt;GetEdges().size());<br/>
&nbsp;&nbsp;const int n_nodes_after = boost::numeric_cast&lt;int&gt;(GetConceptMap()-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;assert(n_edges_after &gt; n_edges_before);<br/>
&nbsp;&nbsp;assert(n_nodes_after &gt; n_nodes_before);<br/>
}<br/>
#endif<br/>
<br/>
void ribi::cmap::QtConceptMapDisplayWidget::OnItemRequestUpdateImpl(const QGraphicsItem* const item)<br/>
{<br/>
&nbsp;&nbsp;assert(GetExamplesItem());<br/>
&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;assert(dynamic_cast&lt;const QtConceptMapItem*&gt;(item));<br/>
&nbsp;&nbsp;if (GetExamplesItem()-&gt;GetBuddyItem() != item)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetExamplesItem()-&gt;SetBuddyItem(dynamic_cast&lt;const QtConceptMapItem*&gt;(item));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;scene()-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapdisplaywidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapdisplaywidget.h" border = "1"><tr><td><code>
#ifndef QTPVDBCONCEPTMAPDISPLAYWIDGET_H<br/>
#define QTPVDBCONCEPTMAPDISPLAYWIDGET_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "qtconceptmapwidget.h"<br/>
<br/>
#include "conceptmapfwd.h"<br/>
<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapedge.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///QtConceptMapWidget for creation and editing of a ConceptMap<br/>
struct QtConceptMapDisplayWidget : public QtConceptMapWidget<br/>
{<br/>
&nbsp;&nbsp;typedef QtConceptMapDisplayWidget This_t;<br/>
<br/>
&nbsp;&nbsp;QtConceptMapDisplayWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QWidget* parent = 0);<br/>
&nbsp;&nbsp;~QtConceptMapDisplayWidget() noexcept {}<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Creates a new derived class<br/>
&nbsp;&nbsp;///A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;std::unique_ptr&lt;QtConceptMapWidget&gt; CreateNewDerived() const;<br/>
<br/>
&nbsp;&nbsp;///Do something random<br/>
&nbsp;&nbsp;void DoRandomStuff();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
private:<br/>
&nbsp;&nbsp;///Adds an Edge and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;///Edge cannot be const, as it has a Concept on it that the user might want to edit<br/>
&nbsp;&nbsp;void AddEdge(const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge);<br/>
<br/>
&nbsp;&nbsp;///Adds a node and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node);<br/>
<br/>
&nbsp;&nbsp;void CleanMe();<br/>
<br/>
&nbsp;&nbsp;///Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;///If item is nullptr, the last item might be deleted<br/>
&nbsp;&nbsp;///Use QGraphicsItem* due to QtKeyboardFriendlyGraphicsView working on QGraphicsItems<br/>
&nbsp;&nbsp;///Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;///QGraphicsItem cannot be const: some items request for an update via-via<br/>
&nbsp;&nbsp;void OnItemRequestUpdateImpl(const QGraphicsItem* const);<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() {}<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBCONCEPTMAPDISPLAYWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapedgeitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapedgeitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapedgeitem.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include &lt;boost/lambda/lambda.hpp&gt;<br/>
#include &lt;boost/math/constants/constants.hpp&gt;<br/>
<br/>
#include &lt;QGraphicsSceneMouseEvent&gt;<br/>
#include &lt;QKeyEvent&gt;<br/>
#include &lt;QPainter&gt;<br/>
<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapedge.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "qtconceptmapbrushfactory.h"<br/>
#include "qtconceptmapitem.h"<br/>
#include "qtconceptmapnodeitem.h"<br/>
#include "qtquadbezierarrowitem.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::QtConceptMapEdgeItem::QtConceptMapEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; concept_item,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem* const from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem* const to)<br/>
&nbsp;&nbsp;: m_arrow{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item(concept_item),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_contour_pen(QPen(QColor(255,255,255))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_focus_pen(concept_item-&gt;GetFocusPen()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_edge(edge), //m_edge must be initialized before m_arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from(from),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to(to)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(m_concept_item);<br/>
&nbsp;&nbsp;assert(m_edge);<br/>
&nbsp;&nbsp;assert(m_from);<br/>
&nbsp;&nbsp;assert(m_to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;assert(m_from != m_to);<br/>
&nbsp;&nbsp;//m_edge must be initialized before m_arrow<br/>
&nbsp;&nbsp;m_arrow.reset(new QtQuadBezierArrowItem(from,edge-&gt;HasTailArrow(),this,edge-&gt;HasHeadArrow(),to));<br/>
&nbsp;&nbsp;assert(m_arrow);<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasTail() == m_edge-&gt;HasTailArrow() );<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasHead() == m_edge-&gt;HasHeadArrow() );<br/>
<br/>
&nbsp;&nbsp;this-&gt;setAcceptHoverEvents(true);<br/>
&nbsp;&nbsp;//this-&gt;setAcceptsHoverEvents(true); //Since Qt5?<br/>
&nbsp;&nbsp;this-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QGraphicsItem::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| QGraphicsItem::ItemIsMovable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| QGraphicsItem::ItemIsSelectable);<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetMainBrush(QtPvdbBrushFactory::CreateBlueGradientBrush());<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(QPen(QColor(255,255,255)));<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetTextPen(QPen(QColor(0,0,0)));<br/>
<br/>
&nbsp;&nbsp;//Name<br/>
&nbsp;&nbsp;this-&gt;SetName(edge-&gt;GetConcept()-&gt;GetName());<br/>
&nbsp;&nbsp;this-&gt;GetConceptItem()-&gt;SetName(edge-&gt;GetConcept()-&gt;GetName());<br/>
&nbsp;&nbsp;//assert(m_edge-&gt;GetConcept()-&gt;GetName() == GetName()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_edge-&gt;GetConcept()-&gt;GetName() == m_concept_item-&gt;GetText()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Names/texts must be in sync");<br/>
<br/>
<br/>
&nbsp;&nbsp;//Position<br/>
&nbsp;&nbsp;this-&gt;SetPos(edge-&gt;GetX(),edge-&gt;GetY());<br/>
&nbsp;&nbsp;this-&gt;GetConceptItem()-&gt;SetPos(edge-&gt;GetX(),edge-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;assert(std::abs(this-&gt;pos().x() - GetEdge()-&gt;GetX()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(this-&gt;pos().x() - this-&gt;GetConceptItem()-&gt;x()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(this-&gt;pos().y() - GetEdge()-&gt;GetY()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(this-&gt;pos().y() - this-&gt;GetConceptItem()-&gt;y()) &lt; epsilon);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Bounding rectangle<br/>
&nbsp;&nbsp;this-&gt;setRect(m_concept_item-&gt;boundingRect()); //NEW<br/>
&nbsp;&nbsp;this-&gt;update();<br/>
<br/>
&nbsp;&nbsp;assert( ( m_concept_item-&gt;boundingRect() == QtConceptMapItem::boundingRect()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| m_concept_item-&gt;boundingRect() != QtConceptMapItem::boundingRect() )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Bounding rects of edge and concept item might differ");<br/>
<br/>
&nbsp;&nbsp;//Qt things<br/>
<br/>
<br/>
&nbsp;&nbsp;//Signals<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_item_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEdgeItem::OnItemHasUpdated,this));<br/>
<br/>
&nbsp;&nbsp;m_edge-&gt;m_signal_edge_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEdgeItem::OnEdgeChanged,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEdgeItem::OnItemHasUpdated,this));<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEdgeItem::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_position_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEdgeItem::SetPos,this,boost::lambda::_1,boost::lambda::_2));<br/>
<br/>
&nbsp;&nbsp;if (QtPvdbEditConceptItem * edit_concept = dynamic_cast&lt;QtPvdbEditConceptItem*&gt;(concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edit_concept-&gt;m_signal_request_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;QtConceptMapItem::OnConceptRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(this-&gt;acceptHoverEvents()); //Must remove the 's' in Qt5?<br/>
&nbsp;&nbsp;assert(this-&gt;m_concept_item-&gt;acceptHoverEvents());<br/>
&nbsp;&nbsp;assert(this-&gt;m_arrow-&gt;acceptHoverEvents()); //Must remove the 's' in Qt5?<br/>
}<br/>
<br/>
QRectF ribi::cmap::QtConceptMapEdgeItem::boundingRect() const<br/>
{<br/>
&nbsp;&nbsp;assert((m_concept_item-&gt;boundingRect() == QtConceptMapItem::boundingRect()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| m_concept_item-&gt;boundingRect() != QtConceptMapItem::boundingRect())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Bounding rects should be synced, but this member function is used to sync them,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "so this must be checked on a higher level");<br/>
<br/>
&nbsp;&nbsp;return QtConceptMapItem::boundingRect() //2013-07-06: Bypassed going via m_concept_item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;.united(m_arrow-&gt;boundingRect().translated(-this-&gt;pos()));<br/>
&nbsp;&nbsp;//return m_concept_item-&gt;boundingRect()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;.united(m_arrow-&gt;boundingRect().translated(-this-&gt;pos()));<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::DisableAll()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setEnabled(false);<br/>
&nbsp;&nbsp;this-&gt;setVisible(false);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setEnabled(false);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setVisible(false);<br/>
&nbsp;&nbsp;this-&gt;m_arrow-&gt;setEnabled(false);<br/>
&nbsp;&nbsp;this-&gt;m_arrow-&gt;setVisible(false);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::EnableAll()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setEnabled(true);<br/>
&nbsp;&nbsp;this-&gt;setVisible(true);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setEnabled(true);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setVisible(true);<br/>
&nbsp;&nbsp;this-&gt;m_arrow-&gt;setEnabled(true);<br/>
&nbsp;&nbsp;this-&gt;m_arrow-&gt;setVisible(true);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; ribi::cmap::QtConceptMapEdgeItem::GetConcept() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; p = m_edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Concept&gt; ribi::cmap::QtConceptMapEdgeItem::GetConcept()<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = m_edge-&gt;GetConcept();<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::string ribi::cmap::QtConceptMapEdgeItem::GetName() const<br/>
{<br/>
&nbsp;&nbsp;return m_edge-&gt;GetConcept()-&gt;GetName();<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::focusInEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;//Lose focus of arrow<br/>
&nbsp;&nbsp;m_arrow-&gt;SetPen(QPen(QColor(0,0,0)));<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_focus_pen); //Updates itself<br/>
&nbsp;&nbsp;assert(!m_concept_item-&gt;hasFocus());<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::focusOutEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;m_arrow-&gt;SetPen(QPen(QColor(0,0,0)));<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen); //Updates itself<br/>
&nbsp;&nbsp;assert(!m_concept_item-&gt;hasFocus());<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::keyPressEvent(QKeyEvent *event)<br/>
{<br/>
&nbsp;&nbsp;assert(m_arrow);<br/>
&nbsp;&nbsp;assert(m_edge);<br/>
&nbsp;&nbsp;m_concept_item-&gt;keyPressEvent(event);<br/>
&nbsp;&nbsp;switch (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (m_arrow-&gt;isEnabled())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;keyPressEvent(event);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edge-&gt;SetHeadArrow( m_arrow-&gt;HasHead() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edge-&gt;SetTailArrow( m_arrow-&gt;HasTail() );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_edge-&gt;HasHeadArrow() == m_arrow-&gt;HasHead());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_edge-&gt;HasTailArrow() == m_arrow-&gt;HasTail());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;QtConceptMapItem::keyPressEvent(event);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::mousePressEvent(QGraphicsSceneMouseEvent *event)<br/>
{&nbsp;&nbsp;<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasTail() == m_edge-&gt;HasTailArrow() );<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasHead() == m_edge-&gt;HasHeadArrow() );<br/>
&nbsp;&nbsp;if (event-&gt;modifiers() &amp; Qt::ShiftModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((event-&gt;pos() - this-&gt;m_arrow-&gt;GetTail() + this-&gt;pos()).manhattanLength() &lt; 20.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetHasTailArrow( !m_arrow-&gt;HasTail() ); //FIX 2013-02-10<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;m_arrow-&gt;SetHasTail( !m_arrow-&gt;HasTail() ); //BUG 2013-02-10<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;update(); //Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//m_signal_item_updated(this); //Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if ((event-&gt;pos() - this-&gt;m_arrow-&gt;GetHead() + this-&gt;pos()).manhattanLength() &lt; 20.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetHasHeadArrow( !m_arrow-&gt;HasHead() ); //FIX 2013-02-10<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;m_arrow-&gt;SetHasHead( !m_arrow-&gt;HasHead() ); //BUG 2013-02-10<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;update(); //Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//m_signal_item_updated(this); //Don't!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//What is clicked on: the concept or the arrow? Assume concept<br/>
&nbsp;&nbsp;m_arrow-&gt;SetPen(QPen(QColor(0,0,0)));<br/>
&nbsp;&nbsp;if (!this-&gt;rect().contains(event-&gt;pos()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//If the concept is not clicked...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//but the arrow is...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QPointF pos_on_arrow = event-&gt;pos();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pos_on_arrow += (this-&gt;pos());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_arrow-&gt;shape().contains(pos_on_arrow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (event-&gt;pos() - this-&gt;m_arrow-&gt;GetTail() + this-&gt;pos()).manhattanLength() &lt; 20.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (event-&gt;pos() - this-&gt;m_arrow-&gt;GetHead() + this-&gt;pos()).manhattanLength() &lt; 20.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//give focus to the arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;SetPen(m_arrow-&gt;GetFocusPen());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;QtConceptMapItem::mousePressEvent(event);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::OnEdgeChanged(const cmap::Edge * const edge)<br/>
{<br/>
&nbsp;&nbsp;assert(m_arrow);<br/>
&nbsp;&nbsp;assert(m_edge);<br/>
&nbsp;&nbsp;assert(edge == m_edge.get());<br/>
&nbsp;&nbsp;this-&gt;SetPos(edge-&gt;GetX(),edge-&gt;GetY());<br/>
&nbsp;&nbsp;//m_edge is changed, so change m_arrow<br/>
&nbsp;&nbsp;m_arrow-&gt;SetHasHead(edge-&gt;HasHeadArrow());<br/>
&nbsp;&nbsp;m_arrow-&gt;SetHasTail(edge-&gt;HasTailArrow());<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasTail() == GetEdge()-&gt;HasTailArrow() );<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasHead() == GetEdge()-&gt;HasHeadArrow() );<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetName(edge-&gt;GetConcept()-&gt;GetName());<br/>
&nbsp;&nbsp;this-&gt;GetEdge()-&gt;SetX(edge-&gt;GetX());<br/>
&nbsp;&nbsp;this-&gt;GetEdge()-&gt;SetY(edge-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;//assert(m_edge-&gt;GetConcept()-&gt;GetName() == GetName()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_edge-&gt;GetConcept()-&gt;GetName() == m_concept_item-&gt;GetText()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Names/texts must be in sync before");<br/>
<br/>
&nbsp;&nbsp;//this-&gt;SetName(m_concept_item-&gt;GetText());<br/>
&nbsp;&nbsp;this-&gt;SetName(edge-&gt;GetConcept()-&gt;GetName()); //2013-09-15<br/>
<br/>
<br/>
&nbsp;&nbsp;//assert(m_edge-&gt;GetConcept()-&gt;GetName() == GetName()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_edge-&gt;GetConcept()-&gt;GetName() == m_concept_item-&gt;GetText()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Names/texts must be in sync after");<br/>
<br/>
&nbsp;&nbsp;this-&gt;setRect(m_concept_item-&gt;boundingRect());<br/>
<br/>
&nbsp;&nbsp;assert( ( m_concept_item-&gt;boundingRect() == QtConceptMapItem::boundingRect()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| m_concept_item-&gt;boundingRect() != QtConceptMapItem::boundingRect() )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Bounding rects of edge and concept item might differ");<br/>
<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::OnItemHasUpdated()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;SetName(m_concept_item-&gt;GetName());<br/>
<br/>
&nbsp;&nbsp;assert(m_edge-&gt;GetConcept()-&gt;GetName() == GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_edge-&gt;GetConcept()-&gt;GetName() == m_concept_item-&gt;GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Names/texts must be in sync after");<br/>
<br/>
&nbsp;&nbsp;//this-&gt;setRect(QtConceptMapItem::boundingRect());<br/>
&nbsp;&nbsp;this-&gt;setRect(m_concept_item-&gt;boundingRect());<br/>
&nbsp;&nbsp;assert( ( m_concept_item-&gt;boundingRect() == QtConceptMapItem::boundingRect()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| m_concept_item-&gt;boundingRect() != QtConceptMapItem::boundingRect() )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Bounding rects might differ between edge and concept item");<br/>
<br/>
&nbsp;&nbsp;this-&gt;update();<br/>
&nbsp;&nbsp;this-&gt;m_signal_item_has_updated(this);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::OnRequestSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;m_signal_request_scene_update();<br/>
}<br/>
<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget)<br/>
{<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetName(this-&gt;GetConcept()-&gt;GetName());<br/>
<br/>
&nbsp;&nbsp;//Only QtPvdbEditConceptItem actually modifies the position of the concept items<br/>
&nbsp;&nbsp;if (dynamic_cast&lt;QtPvdbEditConceptItem*&gt;(m_concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Notifies the GUI-independent collaborators<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_concept_item-&gt;SetPos(x(),y());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(this-&gt;pos() == m_arrow-&gt;GetMidItem()-&gt;pos());<br/>
&nbsp;&nbsp;painter-&gt;translate(-this-&gt;pos());<br/>
&nbsp;&nbsp;m_arrow-&gt;paint(painter,option,widget);<br/>
&nbsp;&nbsp;painter-&gt;translate(this-&gt;pos());<br/>
<br/>
&nbsp;&nbsp;assert(m_concept_item);<br/>
&nbsp;&nbsp;if (this-&gt;hasFocus() || this-&gt;isSelected())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Does the arrow or the concept have focus?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_arrow-&gt;GetPen() != m_arrow-&gt;GetFocusPen())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_focus_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (m_concept_item-&gt;isVisible())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Edges connect to the center node do not display their concept item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;paint(painter,option,widget);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept) //NEW 2013-01-07<br/>
{<br/>
&nbsp;&nbsp;this-&gt;m_edge-&gt;SetConcept(concept);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::SetHasHeadArrow(const bool has_head_arrow)<br/>
{<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasTail() == m_edge-&gt;HasTailArrow() );<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasHead() == m_edge-&gt;HasHeadArrow() );<br/>
<br/>
&nbsp;&nbsp;this-&gt;m_edge-&gt;SetHeadArrow(has_head_arrow);<br/>
&nbsp;&nbsp;this-&gt;m_arrow-&gt;SetHasHead(has_head_arrow);<br/>
<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasTail() == m_edge-&gt;HasTailArrow() );<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasHead() == m_edge-&gt;HasHeadArrow() );<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::SetHasTailArrow(const bool has_tail_arrow)<br/>
{<br/>
&nbsp;&nbsp;assert(m_arrow);<br/>
&nbsp;&nbsp;assert(m_edge);<br/>
&nbsp;&nbsp;assert(m_arrow-&gt;HasTail() == m_edge-&gt;HasTailArrow() );<br/>
&nbsp;&nbsp;assert(m_arrow-&gt;HasHead() == m_edge-&gt;HasHeadArrow() );<br/>
<br/>
&nbsp;&nbsp;this-&gt;m_edge-&gt;SetTailArrow(has_tail_arrow);<br/>
&nbsp;&nbsp;this-&gt;m_arrow-&gt;SetHasTail(has_tail_arrow);<br/>
<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasTail() == m_edge-&gt;HasTailArrow() );<br/>
&nbsp;&nbsp;assert( m_arrow-&gt;HasHead() == m_edge-&gt;HasHeadArrow() );<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::SetName(const std::string&amp; name)<br/>
{<br/>
&nbsp;&nbsp;m_edge-&gt;GetConcept()-&gt;SetName(name);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::SetX(const double x)<br/>
{<br/>
&nbsp;&nbsp;if ( x != this-&gt;pos().x()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| x != this-&gt;GetEdge()-&gt;GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| x != this-&gt;GetConceptItem()-&gt;pos().x()<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setX(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetEdge()-&gt;SetX(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptItem()-&gt;setX(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!(std::abs(x - this-&gt;GetEdge()-&gt;GetX()) &lt; 0.000001))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(GetEdge()-&gt;GetX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - this-&gt;pos().x()) &lt; 0.000001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - this-&gt;GetEdge()-&gt;GetX()) &lt; 0.000001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - this-&gt;GetConceptItem()-&gt;pos().x()) &lt; 0.000001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(std::abs(x - this-&gt;pos().x()) &lt; 0.000001);<br/>
&nbsp;&nbsp;assert(std::abs(x - this-&gt;GetEdge()-&gt;GetX()) &lt; 0.000001);<br/>
&nbsp;&nbsp;assert(std::abs(x - this-&gt;GetConceptItem()-&gt;pos().x()) &lt; 0.000001);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEdgeItem::SetY(const double y)<br/>
{<br/>
&nbsp;&nbsp;if ( y != this-&gt;pos().y()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| y != this-&gt;GetEdge()-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| y != this-&gt;GetConceptItem()-&gt;pos().y()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setY(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetEdge()-&gt;SetY(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptItem()-&gt;setY(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - this-&gt;pos().y()) &lt; 0.000001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - this-&gt;GetEdge()-&gt;GetY()) &lt; 0.000001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - this-&gt;GetConceptItem()-&gt;pos().y()) &lt; 0.000001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(std::abs(y - this-&gt;pos().y()) &lt; 0.000001);<br/>
&nbsp;&nbsp;assert(std::abs(y - this-&gt;GetEdge()-&gt;GetY()) &lt; 0.000001);<br/>
&nbsp;&nbsp;assert(std::abs(y - this-&gt;GetConceptItem()-&gt;pos().y()) &lt; 0.000001);<br/>
}<br/>
<br/>
QPainterPath ribi::cmap::QtConceptMapEdgeItem::shape() const<br/>
{<br/>
&nbsp;&nbsp;return m_concept_item-&gt;shape()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;.united(m_arrow-&gt;shape().translated(-this-&gt;pos()));<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapEdgeItem::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test SetX and SetY being in sync<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_from = cmap::NodeFactory::GetTests()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_to = cmap::NodeFactory::GetTests()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item_from(new QtPvdbEditConceptItem(node_from-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item_to(new QtPvdbEditConceptItem(node_to-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapNodeItem&gt; qtnode_from(new QtConceptMapNodeItem(node_from,qtconcept_item_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapNodeItem&gt; qtnode_to(new QtConceptMapNodeItem(node_to,qtconcept_item_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_edges = cmap::EdgeFactory::GetTests(node_from,node_to).size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t edge_index=0; edge_index!=n_edges; ++edge_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; edges = cmap::EdgeFactory::GetTests(node_from,node_to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge = edges[edge_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item(new QtPvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapEdgeItem&gt; qtedge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new QtConceptMapEdgeItem(edge,qtconcept_item,qtnode_from.get(),qtnode_to.get()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == qtedge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge == qtedge-&gt;GetEdge());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_x = edge-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_x = qtedge-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtedge-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(edge_x == qtedge_x &amp;&amp; qtedge_x == qtconcept_item_x))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(edge_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtedge_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtconcept_item_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_x == qtedge_x &amp;&amp; qtedge_x == qtconcept_item_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_y = edge-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_y = qtedge-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtedge-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_y == qtedge_y &amp;&amp; qtedge_y == qtconcept_item_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double pi = boost::math::constants::pi&lt;double&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double e = boost::math::constants::e&lt;double&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = e;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;SetX(new_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;SetY(new_y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_x = edge-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_x = qtedge-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtedge-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(std::abs(new_x - edge_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::abs(new_x - qtconcept_item_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::abs(new_x - qtedge_x) &lt; epsilon))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRACE(new_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRACE(edge_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRACE(qtedge_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRACE(qtconcept_item_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::abs(new_x - edge_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_x - qtconcept_item_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_x - qtedge_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_y = edge-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_y = qtedge-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtedge-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_y == qtedge_y &amp;&amp; qtedge_y == qtconcept_item_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = 123.456;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = 654.321;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;SetPos(new_x,new_y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_x = edge-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_x = qtedge-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtedge-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::abs(new_x - edge_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_x - qtconcept_item_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_x - qtedge_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_y = edge-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_y = qtedge-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtedge-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::abs(new_y - edge_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_y - qtconcept_item_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_y - qtedge_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = -1234.5678;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = -8765.4321;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt concept item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetConceptItem()-&gt;SetPos(new_x,new_y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_x = edge-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_x = qtedge-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtedge-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::abs(new_x - edge_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_x - qtconcept_item_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_x - qtedge_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_y = edge-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtedge_y = qtedge-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtedge-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::abs(new_y - edge_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_y - qtconcept_item_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; std::abs(new_y - qtedge_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test text on edge being in sync<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_from = cmap::NodeFactory::GetTests()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_to = cmap::NodeFactory::GetTests()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item_from(new QtPvdbEditConceptItem(node_from-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item_to(new QtPvdbEditConceptItem(node_to-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapNodeItem&gt; qtnode_from(new QtConceptMapNodeItem(node_from,qtconcept_item_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapNodeItem&gt; qtnode_to(new QtConceptMapNodeItem(node_to,qtconcept_item_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_edges = cmap::EdgeFactory::GetTests(node_from,node_to).size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t edge_index=0; edge_index!=n_edges; ++edge_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; edges = cmap::EdgeFactory::GetTests(node_from,node_to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge = edges[edge_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item(new QtPvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapEdgeItem&gt; qtedge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new QtConceptMapEdgeItem(edge,qtconcept_item,qtnode_from.get(),qtnode_to.get()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == qtedge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge == qtedge-&gt;GetEdge());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string edge_name = edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtedge_name = qtedge-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtconcept_text = qtconcept_item-&gt;GetName();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!(edge_name == qtedge_name &amp;&amp; qtedge_name == qtconcept_text))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(edge_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtedge_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtconcept_text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_name == qtedge_name &amp;&amp; qtedge_name == qtconcept_text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Names/texts must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string edge_name_before = edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtedge_name_before = qtedge-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtconcept_text_before = qtconcept_item-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_name_before == qtedge_name_before &amp;&amp; qtedge_name_before == qtconcept_text_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Names/texts must be in sync");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via edge's concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetConcept()-&gt;SetName( edge-&gt;GetConcept()-&gt;GetName() + " made longer");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string edge_name_after = edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtedge_name_after = qtedge-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtconcept_text_after = qtconcept_item-&gt;GetName();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_name_after == qtedge_name_after &amp;&amp; qtedge_name_after == qtconcept_text_after<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Names/texts must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string edge_name_before = edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtedge_name_before = qtedge-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtconcept_text_before = qtconcept_item-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_name_before == qtedge_name_before &amp;&amp; qtedge_name_before == qtconcept_text_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Names/texts must be in sync");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;SetName(qtedge-&gt;GetName() + " and made longer again");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string edge_name_after = edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtedge_name_after = qtedge-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtconcept_text_after = qtconcept_item-&gt;GetName();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_name_after == qtedge_name_after &amp;&amp; qtedge_name_after == qtconcept_text_after<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Names/texts must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string edge_name_before = edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtedge_name_before = qtedge-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtconcept_text_before = qtconcept_item-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_name_before == qtedge_name_before &amp;&amp; qtedge_name_before == qtconcept_text_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Names/texts must be in sync");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt concept item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetConceptItem()-&gt;SetName(qtedge-&gt;GetConceptItem()-&gt;GetName() + " and again");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string edge_name_after = edge-&gt;GetConcept()-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtedge_name_after = qtedge-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string qtconcept_text_after = qtconcept_item-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(edge_name_after == qtedge_name_after &amp;&amp; qtedge_name_after == qtconcept_text_after))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(edge_name_after);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtedge_name_after);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtconcept_text_after);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_name_after == qtedge_name_after &amp;&amp; qtedge_name_after == qtconcept_text_after<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Names/texts must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Test boundingRects being in sync<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_from = cmap::NodeFactory::GetTests()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node_to = cmap::NodeFactory::GetTests()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item_from(new QtPvdbEditConceptItem(node_from-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item_to(new QtPvdbEditConceptItem(node_to-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapNodeItem&gt; qtnode_from(new QtConceptMapNodeItem(node_from,qtconcept_item_from));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapNodeItem&gt; qtnode_to(new QtConceptMapNodeItem(node_to,qtconcept_item_to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_edges = cmap::EdgeFactory::GetTests(node_from,node_to).size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t edge_index=0; edge_index!=n_edges; ++edge_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; edges = cmap::EdgeFactory::GetTests(node_from,node_to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge = edges[edge_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item(new QtPvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapEdgeItem&gt; qtedge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new QtConceptMapEdgeItem(edge,qtconcept_item,qtnode_from.get(),qtnode_to.get()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == qtedge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == edge-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge == qtedge-&gt;GetEdge());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtedge_rect = qtedge-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtconcept_rect = qtconcept_item-&gt;boundingRect();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetName() == qtconcept_item-&gt;GetName());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect.width() &gt;= qtconcept_rect.width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as wide as the concept only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect.height() &gt;= qtconcept_rect.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as high as the concept only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtedge_rect_before = qtedge-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtconcept_rect_before = qtconcept_item-&gt;boundingRect();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_before.width() &gt;= qtconcept_rect_before.width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as wide as the concept only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_before.height() &gt;= qtconcept_rect_before.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as high as the concept only");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via edge's concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetConcept()-&gt;SetName( edge-&gt;GetConcept()-&gt;GetName() + " made longer");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtedge_rect_after = qtedge-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtconcept_rect_after = qtconcept_item-&gt;boundingRect();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_after.width() * qtedge_rect_after.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtconcept_rect_after.width() * qtconcept_rect_after.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will have an area at least the size of the concept its area");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(qtedge_rect_after.width() * qtedge_rect_after.height()) + 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge_rect_before.width() * qtedge_rect_before.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "bounding rect area must be bigger");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtedge_rect_before = qtedge-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtconcept_rect_before = qtconcept_item-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_before.width() &gt;= qtconcept_rect_before.width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes) will be at least as wide as the concept only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_before.height() &gt;= qtconcept_rect_before.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes) will be at least as high as the concept only");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt edge<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;SetName(qtedge-&gt;GetName() + " and made longer again");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtedge_rect_after = qtedge-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtconcept_rect_after = qtconcept_item-&gt;boundingRect();<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge_rect_after.width() * qtedge_rect_after.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtconcept_rect_after.width() * qtconcept_rect_after.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge its area (including nodes) will be at least the concept its area");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_area_after&nbsp;&nbsp;= qtedge_rect_after.width()&nbsp;&nbsp;* qtedge_rect_after.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_area_before = qtedge_rect_before.width() * qtedge_rect_before.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_area_after + 1.0 &gt;= edge_area_before //Add 1 pixel to be sure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "bounding rects must get bigger");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double concept_area_after&nbsp;&nbsp;= qtconcept_rect_after.width()&nbsp;&nbsp;* qtconcept_rect_after.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double concept_area_before = qtconcept_rect_before.width() * qtconcept_rect_before.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_area_after + 1.0 &gt;= concept_area_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "bounding rects must get bigger");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtedge_rect_before = qtedge-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtconcept_rect_before = qtconcept_item-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_before.width() &gt;= qtconcept_rect_before.width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as wide as the concept only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_before.height() &gt;= qtconcept_rect_before.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as high as the concept only");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt concept item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetConceptItem()-&gt;SetName(qtedge-&gt;GetConceptItem()-&gt;GetName() + " and again");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtedge_rect_after = qtedge-&gt;boundingRect();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QRectF qtconcept_rect_after = qtconcept_item-&gt;boundingRect();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_after.width() &gt;= qtconcept_rect_after.width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as wide as the concept only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge_rect_after.height() &gt;= qtconcept_rect_after.height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The complete edge (including nodes will be at least as high as the concept only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_area_after&nbsp;&nbsp;= qtedge_rect_after.width()&nbsp;&nbsp;* qtedge_rect_after.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double edge_area_before = qtedge_rect_before.width() * qtedge_rect_before.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge_area_after + 1.0 &gt;= edge_area_before //Add 1 pixel to be sure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "bounding rects must get bigger");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double concept_area_after&nbsp;&nbsp;= qtconcept_rect_after.width()&nbsp;&nbsp;* qtconcept_rect_after.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double concept_area_before = qtconcept_rect_before.width() * qtconcept_rect_before.height();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(concept_area_after + 1.0 &gt;= concept_area_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "bounding rects must get bigger");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapedgeitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapedgeitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBEDGEITEM_H<br/>
#define QTPVDBEDGEITEM_H<br/>
<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "qtconceptmapeditconceptitem.h"<br/>
#include "qtconceptmapitem.h"<br/>
<br/>
#include "qtconceptmapfwd.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
///The QtConceptMapEdgeItem is a QtPvdbEditConceptItem that<br/>
///draws a bezier curve underneath itself, between head and tail arrowhead<br/>
///concept_item is the Strategy for displaying the ConceptItem<br/>
struct QtConceptMapEdgeItem : public QtConceptMapItem<br/>
{<br/>
<br/>
&nbsp;&nbsp;QtConceptMapEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; concept_item,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem* const from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem* const to);<br/>
&nbsp;&nbsp;QtConceptMapEdgeItem(const QtConceptMapEdgeItem&amp;) = delete;<br/>
&nbsp;&nbsp;QtConceptMapEdgeItem&amp; operator=(const QtConceptMapEdgeItem&amp;) = delete;<br/>
&nbsp;&nbsp;~QtConceptMapEdgeItem() noexcept {}<br/>
<br/>
&nbsp;&nbsp;QRectF boundingRect() const final;<br/>
<br/>
&nbsp;&nbsp;void DisableAll();<br/>
&nbsp;&nbsp;void EnableAll();<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const QtQuadBezierArrowItem&gt;&nbsp;&nbsp;GetArrow() const { return m_arrow; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtQuadBezierArrowItem&gt;&amp; GetArrow()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return m_arrow; }<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&nbsp;&nbsp;GetConcept() const;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt;&nbsp;&nbsp;GetConcept()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const QtConceptMapItem&gt; GetConceptItem() const final { return m_concept_item; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapItem&gt; GetConceptItem()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final { return m_concept_item; }<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Edge&gt;&nbsp;&nbsp;GetEdge() const { return m_edge; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Edge&gt;&amp; GetEdge()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return m_edge; }<br/>
<br/>
&nbsp;&nbsp;///The node item the arrow originates from<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem * GetFrom() const { return m_from; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem * GetFrom()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return m_from; }<br/>
<br/>
&nbsp;&nbsp;///Get the name of the relation<br/>
&nbsp;&nbsp;const std::string GetName() const;<br/>
<br/>
&nbsp;&nbsp;///The node item the arrow targets<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem * GetTo() const { return m_to; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem * GetTo()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return m_to; }<br/>
<br/>
&nbsp;&nbsp;void SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept);<br/>
<br/>
&nbsp;&nbsp;void SetHasHeadArrow(const bool has_head_arrow);<br/>
&nbsp;&nbsp;void SetHasTailArrow(const bool has_tail_arrow);<br/>
<br/>
&nbsp;&nbsp;///Set the name of the relation on the edge<br/>
&nbsp;&nbsp;void SetName(const std::string&amp; name);<br/>
<br/>
&nbsp;&nbsp;///Set the X coordinat of the central concept<br/>
&nbsp;&nbsp;void SetX(const double x);<br/>
<br/>
&nbsp;&nbsp;///Set the Y coordinat of the central concept<br/>
&nbsp;&nbsp;void SetY(const double y);<br/>
<br/>
&nbsp;&nbsp;///No 'own/autonomous' signals, these are present in the ConceptItems<br/>
<br/>
protected:<br/>
&nbsp;&nbsp;void focusInEvent(QFocusEvent *event) final;<br/>
&nbsp;&nbsp;void focusOutEvent(QFocusEvent *event) final;<br/>
&nbsp;&nbsp;void keyPressEvent(QKeyEvent *event) final;<br/>
&nbsp;&nbsp;void mousePressEvent(QGraphicsSceneMouseEvent *event) final;<br/>
&nbsp;&nbsp;void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget) final;<br/>
&nbsp;&nbsp;QPainterPath shape() const final;<br/>
<br/>
private:<br/>
&nbsp;&nbsp;///The arrow used for drawing<br/>
&nbsp;&nbsp;///Not 'const boost::shared_ptr&lt;QtQuadBezierArrowItem&gt; m_arrow;',<br/>
&nbsp;&nbsp;///because in the initialization<br/>
&nbsp;&nbsp;///m_edge must be initialized before m_arrow<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;QtQuadBezierArrowItem&gt; m_arrow;<br/>
<br/>
&nbsp;&nbsp;///The Strategy for displaying the Concept<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; m_concept_item;<br/>
<br/>
&nbsp;&nbsp;const QPen m_contour_pen;<br/>
&nbsp;&nbsp;const QPen m_focus_pen;<br/>
<br/>
&nbsp;&nbsp;///The edge<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; m_edge;<br/>
<br/>
&nbsp;&nbsp;///The node item the arrow originates from<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const m_from;<br/>
<br/>
&nbsp;&nbsp;///The node item the arrow targets<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const m_to;<br/>
<br/>
&nbsp;&nbsp;///Called whenever the edge changes<br/>
&nbsp;&nbsp;void OnEdgeChanged(const cmap::Edge * const edge);<br/>
<br/>
&nbsp;&nbsp;///Called whenever the arrow updates<br/>
&nbsp;&nbsp;void OnItemHasUpdated();<br/>
<br/>
&nbsp;&nbsp;void OnRequestSceneUpdate();<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test();<br/>
&nbsp;&nbsp;#endif<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBEDGEITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapeditconceptitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapeditconceptitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapeditconceptitem.h"<br/>
<br/>
#include &lt;QKeyEvent&gt;<br/>
<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "qtconceptmapbrushfactory.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::QtPvdbEditConceptItem::QtPvdbEditConceptItem(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept)<br/>
&nbsp;&nbsp;: QtConceptMapItem(concept),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_edit{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;assert(GetConcept());<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;this-&gt;setBrush(QtPvdbBrushFactory::CreateGrayGradientBrush()); //NEW 2013-04-09<br/>
<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtPvdbEditConceptItem::OnConceptNameChanged,this)); //Obligatory<br/>
<br/>
&nbsp;&nbsp;//GetConcept()-&gt;m_signal_rating_complexity_changed.connect(<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtPvdbEditConceptItem::UpdateBrushesAndPens,this));<br/>
&nbsp;&nbsp;//GetConcept()-&gt;m_signal_rating_concreteness_changed.connect(<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtPvdbEditConceptItem::UpdateBrushesAndPens,this));<br/>
&nbsp;&nbsp;//GetConcept()-&gt;m_signal_rating_specificity_changed.connect(<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtPvdbEditConceptItem::UpdateBrushesAndPens,this));<br/>
}<br/>
<br/>
ribi::cmap::QtPvdbEditConceptItem::~QtPvdbEditConceptItem() noexcept<br/>
{<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtPvdbEditConceptItem::OnConceptNameChanged,this));<br/>
}<br/>
<br/>
void ribi::cmap::QtPvdbEditConceptItem::keyPressEvent(QKeyEvent *event) noexcept<br/>
{<br/>
&nbsp;&nbsp;switch (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_edit(this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_scene_update(); //???really needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return; //Done<br/>
&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtPvdbEditConceptItem::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Starting ribi::cmap::QtPvdbEditConceptItem::Test()");<br/>
&nbsp;&nbsp;///Test SetText<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Concept&gt; concept = ConceptFactory::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtPvdbEditConceptItem a(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto s: v) { a.SetName(s); } //SetName tests GetName<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Successfully finished ribi::cmap::QtPvdbEditConceptItem::Test()");<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapeditconceptitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapeditconceptitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBEDITCONCEPTITEM_H<br/>
#define QTPVDBEDITCONCEPTITEM_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "qtconceptmapitem.h"<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///Displays a Concept that might be edited<br/>
struct QtPvdbEditConceptItem : public QtConceptMapItem<br/>
{<br/>
&nbsp;&nbsp;//concept will be modified<br/>
&nbsp;&nbsp;explicit QtPvdbEditConceptItem(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept);<br/>
&nbsp;&nbsp;~QtPvdbEditConceptItem() noexcept;<br/>
&nbsp;&nbsp;///Signalled when the user wants to edit<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void (QtConceptMapItem *)&gt; m_signal_request_edit;<br/>
<br/>
protected:<br/>
&nbsp;&nbsp;void keyPressEvent(QKeyEvent *event) noexcept;<br/>
<br/>
private:<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///A Edit ConceptItem does not change its brushes and pens<br/>
&nbsp;&nbsp;void UpdateBrushesAndPens() noexcept {}<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBEDITCONCEPTITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapeditwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapeditwidget.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapeditwidget.h"<br/>
<br/>
#include &lt;boost/lambda/lambda.hpp&gt;<br/>
<br/>
#include &lt;QGraphicsItem&gt;<br/>
#include &lt;QKeyEvent&gt;<br/>
<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapfactory.h"<br/>
#include "conceptmap.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmapedge.h"<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "conceptmapnode.h"<br/>
#include "qtconceptmapcenternodeitem.h"<br/>
#include "qtconcepteditdialog.h"<br/>
#include "qtconceptmapitem.h"<br/>
#include "qtedgeitem.h"<br/>
#include "qtexamplesitem.h"<br/>
#include "qtitemhighlighter.h"<br/>
#include "qtnewarrow.h"<br/>
#include "qtconceptmapnodeitem.h"<br/>
#include "qttoolsitem.h"<br/>
#include "qtquadbezierarrowitem.h"<br/>
#include "qtscopeddisable.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///Collect all QGraphicsItems with class T in an unorderly way<br/>
template &lt;class T&gt;<br/>
std::vector&lt;T*&gt; Collect(const QGraphicsScene* const scene)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;T*&gt; v;<br/>
&nbsp;&nbsp;const QList&lt;QGraphicsItem *&gt; items = scene-&gt;items();<br/>
&nbsp;&nbsp;std::transform(items.begin(),items.end(),std::back_inserter(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](QGraphicsItem* const item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dynamic_cast&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(std::remove(v.begin(),v.end(),nullptr),v.end());<br/>
&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),nullptr)==0);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapEditWidget::QtConceptMapEditWidget(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;QWidget* parent)<br/>
&nbsp;&nbsp;: QtConceptMapWidget(concept_map,parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_conceptmapitem_requests_edit{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow(nullptr),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter(new QtPvdbItemHighlighter(0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tools(new QtPvdbToolsItem)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (!concept_map) return;<br/>
<br/>
<br/>
&nbsp;&nbsp;assert(concept_map&nbsp;&nbsp;&amp;&amp; "Only an existing concept map can be edited");<br/>
&nbsp;&nbsp;BuildQtConceptMap();<br/>
<br/>
&nbsp;&nbsp;assert(scene());<br/>
<br/>
&nbsp;&nbsp;assert(m_tools-&gt;scene() &amp;&amp; "m_tools is added at CleanMe at BuildQtConceptMap");<br/>
&nbsp;&nbsp;//scene()-&gt;addItem(m_tools); //Give m_tools a parent<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;assert(m_highlighter &amp;&amp; "m_highlighter does not need to be reset in ClearMe");<br/>
&nbsp;&nbsp;assert(concept_map-&gt;IsValid());<br/>
&nbsp;&nbsp;const auto nodes = concept_map-&gt;GetNodes();<br/>
&nbsp;&nbsp;const auto items = Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene());<br/>
&nbsp;&nbsp;const std::size_t n_items = items.size();<br/>
&nbsp;&nbsp;const std::size_t n_nodes = nodes.size();<br/>
&nbsp;&nbsp;assert(n_items == n_nodes &amp;&amp; "GUI and non-GUI concept map must match");<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapEditWidget::~QtConceptMapEditWidget() noexcept<br/>
{<br/>
&nbsp;&nbsp;m_tools = nullptr;<br/>
&nbsp;&nbsp;assert(m_highlighter);<br/>
&nbsp;&nbsp;m_highlighter-&gt;SetItem(nullptr); //Do this before destroying items<br/>
&nbsp;&nbsp;m_arrow = nullptr;<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::AddEdge(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtPvdbEditConceptItem&gt; qtconcept(new QtPvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(qtconcept);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const from = FindQtNode(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const to&nbsp;&nbsp; = FindQtNode(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;QtConceptMapEdgeItem * const qtedge = new QtConceptMapEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;//Edges connected to the center node do not show their concepts<br/>
&nbsp;&nbsp;if (IsCenterNode(from) || IsCenterNode(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept == qtedge-&gt;GetConceptItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept-&gt;setVisible(false);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that this item has changed<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; boost::bind(&amp;QtConceptMapWidget::OnItemRequestsUpdate,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that a QGraphicsScene needs to be updated<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;//Specific for Edit widget: inform an Observer of a request for a text edit<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_conceptmapitem_requests_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEditWidget::OnConceptMapItemRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this, boost::lambda::_1)); //Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;assert(!qtedge-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;GetEdges().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;GetEdges().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge) == 1 &amp;&amp; "Assume edge is already in the concept map");<br/>
&nbsp;&nbsp;//this-&gt;GetConceptMap()-&gt;AddEdge(edge);<br/>
<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(std::abs(qtedge-&gt;pos().x() - edge-&gt;GetX()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(qtedge-&gt;pos().y() - edge-&gt;GetY()) &lt; epsilon);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::AddEdge(QtConceptMapNodeItem * const qt_from, QtConceptMapNodeItem* const qt_to)<br/>
{<br/>
&nbsp;&nbsp;assert(qt_from);<br/>
&nbsp;&nbsp;assert(qt_to);<br/>
&nbsp;&nbsp;assert(qt_from != qt_to);<br/>
&nbsp;&nbsp;assert(qt_from-&gt;GetNode() != qt_to-&gt;GetNode());<br/>
&nbsp;&nbsp;assert(!dynamic_cast&lt;const QtPvdbToolsItem*&gt;(qt_to&nbsp;&nbsp;) &amp;&amp; "Cannot select a ToolsItem");<br/>
&nbsp;&nbsp;assert(!dynamic_cast&lt;const QtPvdbToolsItem*&gt;(qt_from) &amp;&amp; "Cannot select a ToolsItem");<br/>
&nbsp;&nbsp;//Does this edge already exists? If yes, modify it<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; edges = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto iter = std::find_if(edges.begin(),edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[qt_from,qt_to](const QtConceptMapEdgeItem* const other_edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(other_edge-&gt;GetArrow()-&gt;GetFromItem() == qt_from &amp;&amp; other_edge-&gt;GetArrow()-&gt;GetToItem() == qt_to&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; || (other_edge-&gt;GetArrow()-&gt;GetFromItem() == qt_to&nbsp;&nbsp; &amp;&amp; other_edge-&gt;GetArrow()-&gt;GetToItem() == qt_from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (iter != edges.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapEdgeItem * const qtedge = *iter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetEdge()-&gt;GetFrom() != qtedge-&gt;GetEdge()-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetArrow()-&gt;GetFromItem() != qtedge-&gt;GetArrow()-&gt;GetToItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (qtedge-&gt;GetArrow()-&gt;GetToItem()&nbsp;&nbsp; == qt_to &amp;&amp; !qtedge-&gt;GetArrow()-&gt;HasHead()) { qtedge-&gt;SetHasHeadArrow(true); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (qtedge-&gt;GetArrow()-&gt;GetFromItem() == qt_to &amp;&amp; !qtedge-&gt;GetArrow()-&gt;HasTail()) { qtedge-&gt;SetHasTailArrow(true); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Edge does not exist yet, create a new one<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem*&gt; qtnodes = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept(cmap::ConceptFactory::Create());<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;const bool head_arrow = true;<br/>
&nbsp;&nbsp;const bool tail_arrow = false;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; from = qt_from-&gt;GetNode();<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; to = qt_to-&gt;GetNode();<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cmap::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(qt_from-&gt;pos().x() + qt_to-&gt;pos().x()) / 2.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(qt_from-&gt;pos().y() + qt_to-&gt;pos().y()) / 2.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tail_arrow,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head_arrow));<br/>
<br/>
&nbsp;&nbsp;//Step 1: Create an Edge concept<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtPvdbEditConceptItem&gt; qtconcept(new QtPvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(qtconcept);<br/>
<br/>
&nbsp;&nbsp;QtConceptMapEdgeItem * const qtedge = new QtConceptMapEdgeItem(edge,qtconcept,qt_from,qt_to);<br/>
<br/>
&nbsp;&nbsp;//Edges connected to the center node do not show their concepts<br/>
&nbsp;&nbsp;if (IsCenterNode(qt_from) || IsCenterNode(qt_to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept == qtedge-&gt;GetConceptItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept-&gt;setVisible(false);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that this item has changed<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; boost::bind(&amp;QtConceptMapWidget::OnItemRequestsUpdate,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that a QGraphicsScene needs to be updated<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;//Specific for Edit widget: inform an Observer of a request for a text edit<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_conceptmapitem_requests_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEditWidget::OnConceptMapItemRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this, boost::lambda::_1)); //Do not forget the placeholder!<br/>
<br/>
<br/>
&nbsp;&nbsp;assert(!qtedge-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;AddEdge(edge);<br/>
<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;update();<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapNodeItem * ribi::cmap::QtConceptMapEditWidget::AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
{<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(node-&gt;GetConcept());<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtPvdbEditConceptItem&gt; qtconcept(new QtPvdbEditConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode = new QtConceptMapNodeItem(node,qtconcept);<br/>
<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().x() == node-&gt;GetX());<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().y() == node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that this item has changed<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; boost::bind(&amp;QtConceptMapWidget::OnItemRequestsUpdate,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that a QGraphicsScene needs to be updated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;//Specific for Edit widget: inform an Observer of a request for a text edit<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_conceptmapitem_requests_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEditWidget::OnConceptMapItemRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this, boost::lambda::_1)); //Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;assert(!qtnode-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtnode);<br/>
<br/>
&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetConceptMap()-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetConceptMap()-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node) == 1 &amp;&amp; "Assume Node is already in the concept map");<br/>
&nbsp;&nbsp;//this-&gt;GetConceptMap()-&gt;AddNode(node);<br/>
<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().x() == node-&gt;GetX());<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().y() == node-&gt;GetY());<br/>
&nbsp;&nbsp;//Cannot check this: during construction the concept map has multiple nodes, that can only be<br/>
&nbsp;&nbsp;//added one by one<br/>
&nbsp;&nbsp;//assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
<br/>
&nbsp;&nbsp;return qtnode;<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::CleanMe()<br/>
{<br/>
&nbsp;&nbsp;//Prepare cleaning the scene<br/>
&nbsp;&nbsp;assert(GetExamplesItem());<br/>
&nbsp;&nbsp;SetExamplesItem(nullptr);<br/>
&nbsp;&nbsp;assert(m_tools);<br/>
&nbsp;&nbsp;this-&gt;m_tools = nullptr;<br/>
&nbsp;&nbsp;assert(m_highlighter);<br/>
&nbsp;&nbsp;m_highlighter-&gt;SetItem(nullptr); //Do this before destroying items<br/>
&nbsp;&nbsp;//assert(m_arrow); //Not necessarily true: m_arrow is null when not active<br/>
&nbsp;&nbsp;this-&gt;m_arrow = nullptr;<br/>
<br/>
&nbsp;&nbsp;//Clear the scene, invalidates all scene items copies<br/>
&nbsp;&nbsp;assert(this-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;//Put stuff back in<br/>
<br/>
&nbsp;&nbsp;//Add the invisible examples item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!GetExamplesItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapExamplesItem * const item = new QtConceptMapExamplesItem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetExamplesItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEditWidget::OnRequestSceneUpdate,this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setVisible(false);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!item-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Add the tools item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!m_tools);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tools = new QtPvdbToolsItem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tools-&gt;m_signal_clicked.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapEditWidget::OnToolsClicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!m_tools-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(m_tools);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
std::unique_ptr&lt;ribi::cmap::QtConceptMapWidget&gt; ribi::cmap::QtConceptMapEditWidget::CreateNewDerived() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::DeepCopy(this-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;std::unique_ptr&lt;QtConceptMapWidget&gt; p(new This_t(concept_map));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
#endif<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::DeleteEdge(QtConceptMapEdgeItem * const qtedge)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const int n_items_before = this-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;assert(scene()-&gt;items().contains(qtedge));<br/>
&nbsp;&nbsp;//Remove non-GUI edges<br/>
&nbsp;&nbsp;GetConceptMap()-&gt;DeleteEdge(qtedge-&gt;GetEdge());<br/>
&nbsp;&nbsp;//Remove GUI edge<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;removeItem(qtedge);<br/>
&nbsp;&nbsp;//No left-overs when deleting an edge<br/>
&nbsp;&nbsp;//DeleteLeftovers();<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const int n_items_after = this-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;assert(n_items_after + 1 == n_items_before);<br/>
&nbsp;&nbsp;//Cannot do the check below: in DeleteNode multiple edges are deleted<br/>
&nbsp;&nbsp;//assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
#ifdef BELIEF_THIS_IS_A_GOOD_MEMBER_FUNCTION_20130629_723648723687<br/>
void ribi::cmap::QtConceptMapEditWidget::DeleteLeftovers()<br/>
{<br/>
&nbsp;&nbsp;//assert(m_edge_concepts.size() == m_arrows.size());<br/>
&nbsp;&nbsp;bool done = true;<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;done = true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Delete edges without to/from nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; qtedge = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i!=static_cast&lt;int&gt;(qtedge.size()); ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i &gt;= 0 &amp;&amp; i &lt; static_cast&lt;int&gt;(qtedge.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//An edge can be deleted if its 'to' or 'from' is absent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapEdgeItem * const edge = qtedge[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom() != edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem*&gt; qtnodes = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (std::count_if(qtnodes.begin(),qtnodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[edge](const QtConceptMapNodeItem * node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return edge-&gt;GetArrow()-&gt;GetToItem() == node || edge-&gt;GetArrow()-&gt;GetFromItem() == node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) &lt; 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(scene()-&gt;items().contains(edge));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteEdge(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (done) break;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()) == this-&gt;GetQtNodes());<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
}<br/>
#endif<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::DeleteNode(QtConceptMapNodeItem * const qtnode)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const int n_items_before = this-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Delete the edges connected to this node<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem *&gt; qtedges = this-&gt;GetQtEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = qtedges.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapEdgeItem * const qtedge = qtedges[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (qtedge-&gt;GetFrom() == qtnode || qtedge-&gt;GetTo() == qtnode)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteEdge(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Remove node from GUI<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;removeItem(qtnode);<br/>
&nbsp;&nbsp;//Remove from non-GUI, which removes the left-overs<br/>
&nbsp;&nbsp;GetConceptMap()-&gt;DeleteNode(qtnode-&gt;GetNode());<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const int n_items_after = this-&gt;scene()-&gt;items().count();<br/>
&nbsp;&nbsp;assert(n_items_before - n_items_after &gt;= 1 &amp;&amp; "At least one item is deleted: one node and x edges");<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapEditWidget::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;//this-&gt;mouseDoubleClickEvent(0); //CAUSES ACCESS VIOLATION<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept1(cmap::ConceptFactory::Create("...", { {} } ) );<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node1(cmap::NodeFactory::Create(concept1));<br/>
&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;AddNode(node1);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode1 = AddNode(node1);<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept2(cmap::ConceptFactory::Create("...", { {} } ) );<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node2(cmap::NodeFactory::Create(concept2));<br/>
&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;AddNode(node2);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode2 = AddNode(node2);<br/>
<br/>
&nbsp;&nbsp;assert(qtnode1-&gt;GetNode() != qtnode2-&gt;GetNode());<br/>
&nbsp;&nbsp;this-&gt;AddEdge(qtnode1,qtnode2);<br/>
<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
}<br/>
#endif<br/>
<br/>
<br/>
<br/>
<br/>
const std::vector&lt;ribi::cmap::QtConceptMapEdgeItem *&gt; ribi::cmap::QtConceptMapEditWidget::GetQtEdges()<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem *&gt; qtedges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Collect&lt;QtConceptMapEdgeItem&gt;(this-&gt;scene());<br/>
&nbsp;&nbsp;//Cannot do the check below: in DeleteNode multiple edges are deleted<br/>
&nbsp;&nbsp;//assert(qtedges.size() == GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI must contain an equal amount of edges");<br/>
&nbsp;&nbsp;return qtedges;<br/>
}<br/>
<br/>
const std::vector&lt;ribi::cmap::QtConceptMapNodeItem *&gt; ribi::cmap::QtConceptMapEditWidget::GetQtNodes()<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem *&gt; qtnodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene());<br/>
&nbsp;&nbsp;if (qtnodes.size() != GetConceptMap()-&gt;GetNodes().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtnodes.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(GetConceptMap()-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(qtnodes.size() == GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI must contain an equal amount of nodes");<br/>
&nbsp;&nbsp;return qtnodes;<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::keyPressEvent(QKeyEvent* event) noexcept<br/>
{<br/>
&nbsp;&nbsp;switch (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_Delete:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QList&lt;QGraphicsItem *&gt; v = this-&gt;scene()-&gt;selectedItems();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (std::count(v.begin(),v.end(),scene()-&gt;focusItem()) == 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(scene()-&gt;focusItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this](QGraphicsItem* const item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Delete a Node Concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (QtConceptMapNodeItem * const node = dynamic_cast&lt;QtConceptMapNodeItem *&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsCenterNode(node)) //Cannot delete center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem*&gt; node_concepts = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(node_concepts.begin(),node_concepts.end(),node) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteNode(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Delete an Edge Concept<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (QtConceptMapEdgeItem* const edge = dynamic_cast&lt;QtConceptMapEdgeItem*&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; edge_concepts = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(edge_concepts.begin(),edge_concepts.end(),edge) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(scene()-&gt;items().contains(edge));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteEdge(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!v.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//DeleteLeftovers(); //2013-06-29: Really needed?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetExamplesItem()-&gt;hide();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;OnItemRequestsUpdate(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_Escape:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Only remove the 'new arrow' if present<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Otherwise let the ESC be handled by the class this one derives from<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (m_arrow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;removeItem(m_arrow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_arrow = nullptr;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;QtConceptMapWidget::keyPressEvent(event);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::mouseDoubleClickEvent(QMouseEvent *event)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptFactory::Create("..."));<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node(cmap::NodeFactory::Create(concept));<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(GetConceptMap());<br/>
&nbsp;&nbsp;GetConceptMap()-&gt;AddNode(node);<br/>
<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode = AddNode(node); //AddNode creates, connects and adds the node to scene<br/>
<br/>
&nbsp;&nbsp;assert(qtnode);<br/>
&nbsp;&nbsp;const QPointF new_point = mapToScene(event-&gt;pos());<br/>
&nbsp;&nbsp;qtnode-&gt;SetPos(new_point.x(),new_point.y());<br/>
<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI concept map must match");<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::mouseMoveEvent(QMouseEvent * event)<br/>
{<br/>
&nbsp;&nbsp;if (m_arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const QPointF pos = mapToScene(event-&gt;pos());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;SetHeadPos(pos.x(),pos.y());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Move the item under the arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem* const item_below = GetItemBelowCursor(mapToScene(event-&gt;pos()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter-&gt;SetItem(item_below); //item_below is allowed to be nullptr<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter-&gt;SetItem(nullptr); //item_below is allowed to be nullptr<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;QtConceptMapWidget::mouseMoveEvent(event);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::mousePressEvent(QMouseEvent *event)<br/>
{<br/>
&nbsp;&nbsp;assert(m_highlighter);<br/>
&nbsp;&nbsp;if (m_arrow) //&amp;&amp; m_highlighter-&gt;GetItem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_highlighter-&gt;GetItem() &amp;&amp; m_arrow-&gt;GetFrom() != m_highlighter-&gt;GetItem())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!dynamic_cast&lt;QtPvdbToolsItem*&gt;(m_highlighter-&gt;GetItem()) &amp;&amp; "Cannot select a ToolsItem");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddEdge( m_arrow-&gt;GetFrom(),m_highlighter-&gt;GetItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;removeItem(m_arrow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow = nullptr;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_highlighter-&gt;SetItem(nullptr);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;QtConceptMapWidget::mousePressEvent(event);<br/>
<br/>
&nbsp;&nbsp;//If nothing is selected, hide the Examples<br/>
&nbsp;&nbsp;if (!GetScene()-&gt;focusItem() &amp;&amp; !this-&gt;GetScene()-&gt;selectedItems().count())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Let any node (in this case the central node) emit an update for the Examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//to hide.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetCenterNode()-&gt;m_signal_item_has_updated(0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::OnConceptMapItemRequestsEdit(QtConceptMapItem* const item)<br/>
{<br/>
<br/>
&nbsp;&nbsp;//assert(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;//const boost::shared_ptr&lt;ribi::cmap::Concept&gt; new_concept = ribi::cmap::ConceptFactory::DeepCopy(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;//assert(new_concept);<br/>
<br/>
&nbsp;&nbsp;assert(this);<br/>
&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;//TRACE("Try edit from EditWidget");<br/>
&nbsp;&nbsp;//m_signal_conceptmapitem_requests_edit(item);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtScopedDisable&lt;QtConceptMapWidget&gt; disable(this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtPvdbConceptEditDialog d(item-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;this-&gt;show();<br/>
&nbsp;&nbsp;this-&gt;setFocus();<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;setFocusItem(item);<br/>
&nbsp;&nbsp;item-&gt;setSelected(true);<br/>
&nbsp;&nbsp;item-&gt;m_signal_item_has_updated(item);<br/>
&nbsp;&nbsp;item-&gt;m_signal_request_scene_update();<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;this-&gt;OnItemRequestsUpdate(item);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::OnItemRequestUpdateImpl(const QGraphicsItem* const item)<br/>
{<br/>
&nbsp;&nbsp;m_tools-&gt;SetBuddyItem(dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(item));<br/>
&nbsp;&nbsp;GetExamplesItem()-&gt;SetBuddyItem(dynamic_cast&lt;const QtConceptMapItem*&gt;(item));<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapEditWidget::OnToolsClicked()<br/>
{<br/>
&nbsp;&nbsp;const QPointF cursor_pos_approx(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tools-&gt;GetBuddyItem()-&gt;pos().x(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tools-&gt;GetBuddyItem()-&gt;pos().y() - 32.0);<br/>
&nbsp;&nbsp;m_arrow = new QtPvdbNewArrow(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tools-&gt;GetBuddyItem(),cursor_pos_approx);<br/>
&nbsp;&nbsp;assert(!m_arrow-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(m_arrow);<br/>
&nbsp;&nbsp;m_arrow-&gt;update();<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;update();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapeditwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapeditwidget.h" border = "1"><tr><td><code>
#ifndef QTPVDBCONCEPTMAPEDITWIDGET_H<br/>
#define QTPVDBCONCEPTMAPEDITWIDGET_H<br/>
<br/>
<br/>
#include "conceptmapfwd.h"<br/>
<br/>
#include "qtconceptmapwidget.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
///QtConceptMapWidget for creation and editing of a ConceptMap<br/>
struct QtConceptMapEditWidget : public QtConceptMapWidget<br/>
{<br/>
&nbsp;&nbsp;typedef QtConceptMapEditWidget This_t;<br/>
&nbsp;&nbsp;QtConceptMapEditWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QWidget* parent = 0);<br/>
&nbsp;&nbsp;~QtConceptMapEditWidget() noexcept;<br/>
&nbsp;&nbsp;QtConceptMapEditWidget(const QtConceptMapEditWidget&amp; other) = delete;<br/>
&nbsp;&nbsp;QtConceptMapEditWidget&amp; operator=(const QtConceptMapEditWidget&amp; other) = delete;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Creates a new derived class<br/>
&nbsp;&nbsp;///A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;std::unique_ptr&lt;QtConceptMapWidget&gt; CreateNewDerived() const;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Delete an EdgeConcept<br/>
&nbsp;&nbsp;void DeleteEdge(QtConceptMapEdgeItem * const edge);<br/>
<br/>
&nbsp;&nbsp;///Delete a Node<br/>
&nbsp;&nbsp;void DeleteNode(QtConceptMapNodeItem * const node);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Do something random<br/>
&nbsp;&nbsp;void DoRandomStuff();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Signal emitted when a concept map item requests to be edited<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void(QtConceptMapItem*)&gt; m_signal_conceptmapitem_requests_edit;<br/>
<br/>
protected:<br/>
<br/>
&nbsp;&nbsp;void keyPressEvent(QKeyEvent* event) noexcept;<br/>
&nbsp;&nbsp;void mouseMoveEvent(QMouseEvent * event);<br/>
&nbsp;&nbsp;void mouseDoubleClickEvent(QMouseEvent *event);<br/>
&nbsp;&nbsp;void mousePressEvent(QMouseEvent *event);<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///The arrow used to create a new arrow<br/>
&nbsp;&nbsp;///Is nullptr when not active<br/>
&nbsp;&nbsp;QtPvdbNewArrow * m_arrow;<br/>
<br/>
&nbsp;&nbsp;///The item highlighter, used when creating a new relation<br/>
&nbsp;&nbsp;QtPvdbItemHighlighter * const m_highlighter;<br/>
<br/>
&nbsp;&nbsp;///The item showing the tools<br/>
&nbsp;&nbsp;QtPvdbToolsItem * m_tools;<br/>
<br/>
&nbsp;&nbsp;///Adds an Edge and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;void AddEdge(const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge);<br/>
<br/>
&nbsp;&nbsp;///Add a new edge<br/>
&nbsp;&nbsp;void AddEdge(QtConceptMapNodeItem * const from, QtConceptMapNodeItem* const to);<br/>
<br/>
&nbsp;&nbsp;///Adds a node and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node);<br/>
<br/>
&nbsp;&nbsp;///Remove all Qt and non-Qt items<br/>
&nbsp;&nbsp;void CleanMe();<br/>
<br/>
&nbsp;&nbsp;///Obtain the read-and-write Qt edge items<br/>
&nbsp;&nbsp;///The read-only Qt edge items is already supplied by QtConceptMapWidget<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem *&gt; GetQtEdges();<br/>
<br/>
&nbsp;&nbsp;///Obtain the read-and-write Qt node items<br/>
&nbsp;&nbsp;///The read-only Qt node items is already supplied by QtConceptMapWidget<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem *&gt; GetQtNodes();<br/>
<br/>
&nbsp;&nbsp;///Called when an item wants to be edited<br/>
&nbsp;&nbsp;void OnConceptMapItemRequestsEdit(QtConceptMapItem * const item);<br/>
<br/>
&nbsp;&nbsp;///Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;///If item is nullptr, the last item might be deleted<br/>
&nbsp;&nbsp;///Use QGraphicsItem* due to QtKeyboardFriendlyGraphicsView working on QGraphicsItems<br/>
&nbsp;&nbsp;///Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;void OnItemRequestUpdateImpl(const QGraphicsItem* const item);<br/>
<br/>
&nbsp;&nbsp;///Called whenever the tools item is clicked<br/>
&nbsp;&nbsp;void OnToolsClicked();<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBCONCEPTMAPEDITWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapexamplesitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapexamplesitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapexamplesitem.h"<br/>
<br/>
#include &lt;QFont&gt;<br/>
#include &lt;QPainter&gt;<br/>
<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "qtconceptmapitem.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "qtconceptmapitem.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "qtconceptmapedgeitem.h"<br/>
#include "qtconceptmapbrushfactory.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::QtConceptMapExamplesItem::QtConceptMapExamplesItem(<br/>
&nbsp;&nbsp;QGraphicsItem* parent)<br/>
&nbsp;&nbsp;: QtRoundedEditRectItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "..." },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtRoundedEditRectItem::Padding(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QFont("monospace",9),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_scene_update{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item{}<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setPen(QPen(QColor(255,0,0)));<br/>
&nbsp;&nbsp;this-&gt;setBrush(QtPvdbBrushFactory::CreateWhiteGradientBrush());<br/>
&nbsp;&nbsp;this-&gt;setFlags(0);<br/>
&nbsp;&nbsp;this-&gt;setZValue(2.0);<br/>
&nbsp;&nbsp;this-&gt;setVisible(false);<br/>
&nbsp;&nbsp;//this-&gt;SetBuddyItem(concept);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapExamplesItem::OnItemUpdated()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;update();<br/>
&nbsp;&nbsp;this-&gt;m_signal_request_scene_update();<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapExamplesItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)<br/>
{<br/>
&nbsp;&nbsp;this-&gt;SetExamples(this-&gt;m_item-&gt;GetConcept()-&gt;GetExamples());<br/>
<br/>
&nbsp;&nbsp;const QPointF p = m_item-&gt;pos();<br/>
&nbsp;&nbsp;const QRectF r = m_item-&gt;GetConceptItem()-&gt;rect();<br/>
&nbsp;&nbsp;this-&gt;setPos(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.x() + (0.5 * r.width() ) + 4.0 + (0.5 * this-&gt;rect().width() ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.y() + (0.5 * r.height()) + 4.0 + (0.5 * this-&gt;rect().height())<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;QtRoundedEditRectItem::paint(painter,option,widget);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapExamplesItem::SetBuddyItem(const QtConceptMapItem* const item)<br/>
{<br/>
&nbsp;&nbsp;if (m_item != item)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_item = item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_item &amp;&amp; !m_item-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_item-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapExamplesItem::OnItemUpdated,this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetExamples(item-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setVisible(true);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_scene_update();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (this-&gt;isVisible())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setVisible(false);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_scene_update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapExamplesItem::SetExamples(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; examples)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;for (const boost::shared_ptr&lt;const cmap::Example&gt; example: examples-&gt;Get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s { example-&gt;GetText() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t wordwrap_length = 40;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; w { Wordwrap(s,wordwrap_length) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;this-&gt;SetText(v);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapexamplesitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapexamplesitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBEXAMPLESITEM_H<br/>
#define QTPVDBEXAMPLESITEM_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include "qtroundededitrectitem.h"<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
struct QtConceptMapExamplesItem : public QtRoundedEditRectItem<br/>
{<br/>
&nbsp;&nbsp;QtConceptMapExamplesItem(QGraphicsItem* parent = 0);<br/>
&nbsp;&nbsp;QtConceptMapExamplesItem(const QtConceptMapExamplesItem&amp;) = delete;<br/>
&nbsp;&nbsp;QtConceptMapExamplesItem&amp; operator=(const QtConceptMapExamplesItem&amp;) = delete;<br/>
&nbsp;&nbsp;~QtConceptMapExamplesItem() noexcept {}<br/>
&nbsp;&nbsp;///Check the buddy item<br/>
&nbsp;&nbsp;const QtConceptMapItem* GetBuddyItem() const noexcept { return m_item; }<br/>
<br/>
&nbsp;&nbsp;///Set the concept this item displays the examples of.<br/>
&nbsp;&nbsp;///If the concept is nullptr, this item hides<br/>
&nbsp;&nbsp;void SetBuddyItem(const QtConceptMapItem* const item);<br/>
<br/>
&nbsp;&nbsp;///Request update of QGraphicsScene, because this item has changed<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void() &gt; m_signal_request_scene_update;<br/>
<br/>
protected:<br/>
<br/>
&nbsp;&nbsp;void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///The concept this item displays the examples of.<br/>
&nbsp;&nbsp;///If m_concept is nullptr, this item hides<br/>
&nbsp;&nbsp;const QtConceptMapItem* m_item;<br/>
<br/>
&nbsp;&nbsp;///Item has updated, Examples must follow<br/>
&nbsp;&nbsp;void OnItemUpdated();<br/>
<br/>
&nbsp;&nbsp;void SetExamples(const boost::shared_ptr&lt;const cmap::Examples&gt;&amp; examples);<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBEXAMPLESITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapfwd.h" border = "1"><tr><td><code>
#ifndef QTCONCEPTMAPFWD_H<br/>
#define QTCONCEPTMAPFWD_H<br/>
<br/>
#include "conceptmapfwd.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
struct QtQuadBezierArrowItem;<br/>
<br/>
namespace cmap {<br/>
<br/>
struct QtConceptMapEdgeItem;<br/>
struct QtConceptMapNodeItem;<br/>
struct QtConceptMapExamplesItem;<br/>
struct QtConceptMapItem;<br/>
<br/>
} //~namespace cmap<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTCONCEPTMAPFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapconceptmapitem.h"<br/>
<br/>
#include &lt;QCursor&gt;<br/>
<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "qtconceptmapconceptitem.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
void ribi::cmap::QtConceptMapItem::OnConceptRequestsEdit()<br/>
{<br/>
&nbsp;&nbsp;assert(this);<br/>
&nbsp;&nbsp;assert(this-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(this-&gt;GetConcept()-&gt;GetExamples());<br/>
&nbsp;&nbsp;this-&gt;setAcceptHoverEvents(true);<br/>
&nbsp;&nbsp;m_signal_conceptmapitem_requests_edit(this);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapItem::hoverMoveEvent(QGraphicsSceneHoverEvent *)<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setCursor(QCursor(Qt::PointingHandCursor));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBCONCEPTMAPITEM_H<br/>
#define QTPVDBCONCEPTMAPITEM_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include "qtconceptmapfwd.h"<br/>
#include "qtroundededitrectitem.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///Either a Node or Edge of a ConceptMap<br/>
///QtRoundedTextRectItem: single line<br/>
///QtRoundedEditRectItem: multiple lines<br/>
struct QtConceptMapItem : public QtRoundedEditRectItem //NEW 2013-09-15<br/>
{<br/>
&nbsp;&nbsp;virtual ~QtConceptMapItem() noexcept {}<br/>
<br/>
&nbsp;&nbsp;virtual void DisableAll() = 0;<br/>
&nbsp;&nbsp;virtual void EnableAll() = 0;<br/>
<br/>
&nbsp;&nbsp;///Obtain the Concept from either a Node or an Edge<br/>
&nbsp;&nbsp;virtual const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&nbsp;&nbsp;GetConcept() const = 0;<br/>
&nbsp;&nbsp;virtual const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt;&nbsp;&nbsp;GetConcept()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0;<br/>
<br/>
&nbsp;&nbsp;virtual const boost::shared_ptr&lt;const QtConceptMapItem&gt; GetConceptItem() const = 0;<br/>
&nbsp;&nbsp;virtual const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapItem&gt; GetConceptItem()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0;<br/>
<br/>
&nbsp;&nbsp;///Set the name of the concept<br/>
&nbsp;&nbsp;virtual void SetName(const std::string&amp; name) = 0;<br/>
<br/>
&nbsp;&nbsp;///Set the position<br/>
&nbsp;&nbsp;void SetPos(const double x, const double y) { SetX(x); SetY(y); }<br/>
<br/>
&nbsp;&nbsp;///Set the X coordinat<br/>
&nbsp;&nbsp;virtual void SetX(const double x) = 0;<br/>
<br/>
&nbsp;&nbsp;///Set the Y coordinat<br/>
&nbsp;&nbsp;virtual void SetY(const double y) = 0;<br/>
<br/>
&nbsp;&nbsp;///A more specific signal: a Concept requests an edit, this is passed to<br/>
&nbsp;&nbsp;///OnConceptRequestsEdit, which lets this QtConceptMapItem request for an edit<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void(QtConceptMapItem*)&gt; m_signal_conceptmapitem_requests_edit;<br/>
<br/>
&nbsp;&nbsp;///Slot for a Concept its signal to be edited, all it does is add the ConceptMapItem<br/>
&nbsp;&nbsp;///the Concept is a member of<br/>
&nbsp;&nbsp;void OnConceptRequestsEdit();<br/>
<br/>
&nbsp;&nbsp;protected:<br/>
&nbsp;&nbsp;///Remove this member function, let the client call the virual SetX and SetY member functions<br/>
&nbsp;&nbsp;void setPos(const QPointF &amp;pos) { QtRoundedEditRectItem::setPos(pos); }<br/>
&nbsp;&nbsp;///Remove this member function, let the client call the virual SetX and SetY member functions<br/>
&nbsp;&nbsp;void setPos(qreal x, qreal y) { QtRoundedEditRectItem::setPos(x,y); }<br/>
<br/>
&nbsp;&nbsp;void hoverMoveEvent(QGraphicsSceneHoverEvent *) final;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;virtual void SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept) = 0;<br/>
<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBCONCEPTMAPITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapnodeitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapnodeitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtpvdbnodeitem.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;climits&gt;<br/>
<br/>
#include &lt;boost/lambda/lambda.hpp&gt;<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
#include &lt;QKeyEvent&gt;<br/>
#include &lt;QPen&gt;<br/>
<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "qtpvdbbrushfactory.h"<br/>
#include "qtpvdbeditconceptitem.h"<br/>
#include "qtpvdbrateconceptitem.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "qtconceptitem.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::QtConceptMapNodeItem::QtConceptMapNodeItem(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; concept_item)<br/>
&nbsp;&nbsp;: m_signal_node_requests_rate_concept{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_node_requests_rate_examples{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item(concept_item),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_contour_pen(concept_item-&gt;GetContourPen()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_focus_pen(concept_item-&gt;GetFocusPen()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_node(node)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;assert(m_concept_item);<br/>
&nbsp;&nbsp;assert(m_node);<br/>
&nbsp;&nbsp;assert(m_concept_item-&gt;GetConcept().get() == m_node-&gt;GetConcept().get());<br/>
<br/>
&nbsp;&nbsp;this-&gt;setAcceptHoverEvents(true);<br/>
&nbsp;&nbsp;this-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QGraphicsItem::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| QGraphicsItem::ItemIsMovable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| QGraphicsItem::ItemIsSelectable);<br/>
<br/>
&nbsp;&nbsp;this-&gt;setRect(m_concept_item-&gt;boundingRect());<br/>
&nbsp;&nbsp;assert(m_concept_item-&gt;boundingRect() == this-&gt;boundingRect()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Bounding rects must by synced");<br/>
&nbsp;&nbsp;//assert(m_concept_item-&gt;boundingRect() == QtConceptMapItem::boundingRect()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&amp;&amp; "Bounding rects must by synced");<br/>
<br/>
<br/>
&nbsp;&nbsp;this-&gt;setPos(m_node-&gt;GetX(),m_node-&gt;GetY());<br/>
&nbsp;&nbsp;assert(this-&gt;pos().x() == m_node-&gt;GetX());<br/>
&nbsp;&nbsp;assert(this-&gt;pos().y() == m_node-&gt;GetY());<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetPos(m_node-&gt;GetX(),m_node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_position_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtConceptMapNodeItem::SetPos,this,boost::lambda::_1,boost::lambda::_2));<br/>
<br/>
&nbsp;&nbsp;m_node-&gt;m_signal_node_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtConceptMapNodeItem::OnNodeChanged,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapNodeItem::OnItemHasUpdated,this));<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapNodeItem::OnRequestsSceneUpdate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;if (QtPvdbEditConceptItem * edit_concept = dynamic_cast&lt;QtPvdbEditConceptItem*&gt;(concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edit_concept-&gt;m_signal_request_edit.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;QtConceptMapItem::OnConceptRequestsEdit,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (QtPvdbRateConceptItem * rate_concept = dynamic_cast&lt;QtPvdbRateConceptItem*&gt;(concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rate_concept-&gt;m_signal_request_rate_concept.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapNodeItem::OnItemRequestsRateConcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rate_concept-&gt;m_signal_request_rate_examples.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapNodeItem::OnItemRequestsRateExamples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(flags() &amp; QGraphicsItem::ItemIsFocusable);<br/>
&nbsp;&nbsp;assert(flags() &amp; QGraphicsItem::ItemIsSelectable);<br/>
&nbsp;&nbsp;assert(flags() &amp; QGraphicsItem::ItemIsMovable);<br/>
&nbsp;&nbsp;assert(this-&gt;pos().x() == m_node-&gt;GetX());<br/>
&nbsp;&nbsp;assert(this-&gt;pos().y() == m_node-&gt;GetY());<br/>
&nbsp;&nbsp;assert(this-&gt;acceptHoverEvents()); //Must remove the 's' in Qt5?<br/>
&nbsp;&nbsp;assert(this-&gt;m_concept_item-&gt;acceptHoverEvents()); //Must remove the 's' in Qt5?<br/>
}<br/>
<br/>
QRectF ribi::cmap::QtConceptMapNodeItem::boundingRect() const<br/>
{<br/>
&nbsp;&nbsp;//TRACE(m_concept_item-&gt;boundingRect().width());<br/>
&nbsp;&nbsp;//TRACE(QtConceptMapItem::boundingRect().width());<br/>
<br/>
&nbsp;&nbsp;//Cannot check here<br/>
&nbsp;&nbsp;//assert(m_concept_item-&gt;boundingRect() == QtConceptMapItem::boundingRect()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&amp;&amp; "Bounding rects must by synced");<br/>
&nbsp;&nbsp;return m_concept_item-&gt;boundingRect();<br/>
&nbsp;&nbsp;//return QtConceptMapItem::boundingRect(); //2013-05-20: Bypassed going via m_concept_item<br/>
}<br/>
<br/>
QBrush ribi::cmap::QtConceptMapNodeItem::brush() const<br/>
{<br/>
&nbsp;&nbsp;return m_concept_item-&gt;brush();<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::DisableAll()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setEnabled(false);<br/>
&nbsp;&nbsp;this-&gt;setVisible(false);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setEnabled(false);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setVisible(false);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::EnableAll()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setEnabled(true);<br/>
&nbsp;&nbsp;this-&gt;setVisible(true);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setEnabled(true);<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;setVisible(true);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::focusInEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_focus_pen); //Updates itself<br/>
&nbsp;&nbsp;assert(!m_concept_item-&gt;hasFocus());<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::focusOutEvent(QFocusEvent*)<br/>
{<br/>
&nbsp;&nbsp;m_concept_item-&gt;SetContourPen(m_contour_pen); //Updates itself<br/>
&nbsp;&nbsp;//m_signal_item_has_updated(0); //2013-01-20: causes Examples to get hidden //BUG<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; ribi::cmap::QtConceptMapNodeItem::GetConcept() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt; p = m_node-&gt;GetConcept();<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::Concept&gt; ribi::cmap::QtConceptMapNodeItem::GetConcept()<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; p = m_node-&gt;GetConcept();<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
/*<br/>
void ribi::cmap::QtConceptMapNodeItem::hoverMoveEvent(QGraphicsSceneHoverEvent * e)<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setCursor(QCursor(Qt::PointingHandCursor));<br/>
&nbsp;&nbsp;//m_concept_item-&gt;hoverMoveEvent(e);<br/>
&nbsp;&nbsp;//Won't cause a hover, because the concept item<br/>
&nbsp;&nbsp;//is not visible??<br/>
}<br/>
*/<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::keyPressEvent(QKeyEvent *event)<br/>
{<br/>
&nbsp;&nbsp;assert(m_concept_item);<br/>
&nbsp;&nbsp;assert(m_concept_item-&gt;GetConcept());<br/>
&nbsp;&nbsp;m_concept_item-&gt;keyPressEvent(event);<br/>
&nbsp;&nbsp;switch (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;QtConceptMapItem::keyPressEvent(event);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::OnItemHasUpdated()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;setRect(m_concept_item-&gt;boundingRect());<br/>
<br/>
&nbsp;&nbsp;//Cannot check here, as setRect triggers this member function<br/>
&nbsp;&nbsp;//assert(m_concept_item-&gt;boundingRect() == QtConceptMapItem::boundingRect()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&amp;&amp; "Bounding rects must by synced");<br/>
&nbsp;&nbsp;this-&gt;update();<br/>
&nbsp;&nbsp;this-&gt;m_signal_item_has_updated(this);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::OnItemRequestsRateConcept()<br/>
{<br/>
&nbsp;&nbsp;m_signal_node_requests_rate_concept(this);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::OnItemRequestsRateExamples()<br/>
{<br/>
&nbsp;&nbsp;m_signal_node_requests_rate_examples(this);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::OnNodeChanged(const cmap::Node * node)<br/>
{<br/>
&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;//Keep the coordinats synced<br/>
&nbsp;&nbsp;this-&gt;SetPos(node-&gt;GetX(),node-&gt;GetY());<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::OnRequestsSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;this-&gt;m_signal_request_scene_update();<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::paint(QPainter* painter, const QStyleOptionGraphicsItem* item, QWidget* widget)<br/>
{<br/>
<br/>
&nbsp;&nbsp;assert(m_concept_item);<br/>
&nbsp;&nbsp;assert(!m_concept_item-&gt;hasFocus());<br/>
&nbsp;&nbsp;assert(!m_concept_item-&gt;isSelected());<br/>
<br/>
&nbsp;&nbsp;this-&gt;m_concept_item-&gt;SetName(this-&gt;GetConcept()-&gt;GetName());<br/>
<br/>
<br/>
&nbsp;&nbsp;//Only QtPvdbEditConceptItem actually modifies the position of the concept items<br/>
&nbsp;&nbsp;if (dynamic_cast&lt;QtPvdbEditConceptItem*&gt;(m_concept_item.get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Notifies the GUI-independent collaborators<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_concept_item-&gt;SetPos(x(),y());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(this-&gt;boundingRect() == m_concept_item-&gt;boundingRect()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Keep bounding rects in sync (but is this check still relevent?) 2013-07-06");<br/>
<br/>
&nbsp;&nbsp;m_concept_item-&gt;paint(painter,item,widget);<br/>
<br/>
&nbsp;&nbsp;//Check if item can move (as the center node cannot)<br/>
&nbsp;&nbsp;if (this-&gt;flags() &amp; QGraphicsItem::ItemIsMovable)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Item can move, check for collision<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const QList&lt;QGraphicsItem*&gt; others = collidingItems();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(others.begin(),others.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this](const QGraphicsItem* const other_item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(other_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (const QtConceptMapNodeItem* const other_node = dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(other_item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double dx = x() - other_node-&gt;x() &gt; 0.0 ? 1.0 : -1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double dy = y() - other_node-&gt;y() &gt; 0.0 ? 1.0 : -1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(this-&gt;flags() &amp; QGraphicsItem::ItemIsMovable); //Not true for center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setPos( this-&gt;x()&nbsp;&nbsp;+ dx, this-&gt;y()&nbsp;&nbsp;+ dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept)<br/>
{<br/>
&nbsp;&nbsp;this-&gt;m_node-&gt;SetConcept(concept);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::SetName(const std::string&amp; name)<br/>
{<br/>
&nbsp;&nbsp;m_node-&gt;GetConcept()-&gt;SetName(name);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::SetX(const double x)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if ( x != this-&gt;pos().x()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| x != GetNode()-&gt;GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| x != m_concept_item-&gt;pos().x())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Use Qt setX, otherwise an infinite recursion occurs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setX(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetNode()-&gt;SetX(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;setX(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - this-&gt;pos().x()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - GetNode()-&gt;GetX()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - m_concept_item-&gt;pos().x()) &lt; epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(std::abs(x - this-&gt;pos().x()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(x - GetNode()-&gt;GetX()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(x - m_concept_item-&gt;pos().x()) &lt; epsilon);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapNodeItem::SetY(const double y)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if ( y != this-&gt;pos().y()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| y != GetNode()-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| y != m_concept_item-&gt;pos().y())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Use Qt setY, otherwise an infinite recursion occurs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setY(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetNode()-&gt;SetY(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_item-&gt;setY(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - this-&gt;pos().y()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - GetNode()-&gt;GetY()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - m_concept_item-&gt;pos().y()) &lt; epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(std::abs(y - this-&gt;pos().y()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(y - GetNode()-&gt;GetY()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(y - m_concept_item-&gt;pos().y()) &lt; epsilon);<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapNodeItem::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Started ribi::cmap::QtConceptMapNodeItem::Test");<br/>
<br/>
&nbsp;&nbsp;//Test SetX and SetY being in sync<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_nodes = cmap::NodeFactory::GetTests().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t node_index=0; node_index!=n_nodes; ++node_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto nodes = cmap::NodeFactory::GetTests();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; node = nodes[node_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapItem&gt; qtconcept_item(new QtPvdbEditConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;QtConceptMapNodeItem&gt; qtnode(new QtConceptMapNodeItem(node,qtconcept_item));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == qtnode-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept_item-&gt;GetConcept() == node-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node == qtnode-&gt;GetNode());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.00001;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_x = node-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_x = qtnode-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtnode-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(node_x == qtnode_x &amp;&amp; qtnode_x == qtconcept_item_x))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(node_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtnode_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtconcept_item_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_x == qtnode_x &amp;&amp; qtnode_x == qtconcept_item_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_y = node-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_y = qtnode-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtnode-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_y == qtnode_y &amp;&amp; qtnode_y == qtconcept_item_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = 12.34;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = 43.21;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;SetX(new_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;SetY(new_y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_x = node-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_x = qtnode-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtnode-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(node_x == qtnode_x &amp;&amp; qtnode_x == qtconcept_item_x))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(node_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtnode_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(qtconcept_item_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_x == qtnode_x &amp;&amp; qtnode_x == qtconcept_item_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_y = node-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_y = qtnode-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtnode-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_y == qtnode_y &amp;&amp; qtnode_y == qtconcept_item_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = 123.456;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = 654.321;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;SetPos(new_x,new_y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_x = node-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_x = qtnode-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtnode-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_x == qtnode_x &amp;&amp; qtnode_x == qtconcept_item_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_y = node-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_y = qtnode-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtnode-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node_y == qtnode_y &amp;&amp; qtnode_y == qtconcept_item_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = -1234.5678;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = -8765.4321;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Change via Qt concept item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;GetConceptItem()-&gt;SetPos(new_x,new_y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_x = node-&gt;GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_x = qtnode-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_x = qtnode-&gt;GetConceptItem()-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::abs(new_x - node_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::abs(new_x - qtnode_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::abs(new_x - qtconcept_item_x) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "X coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double node_y = node-&gt;GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtnode_y = qtnode-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double qtconcept_item_y = qtnode-&gt;GetConceptItem()-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::abs(new_y - node_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::abs(new_y - qtnode_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::abs(new_y - qtconcept_item_y) &lt; epsilon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Y coordinat must be in sync");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Finished ribi::cmap::QtConceptMapNodeItem::Test successfully");<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapnodeitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapnodeitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBNODEITEM_H<br/>
#define QTPVDBNODEITEM_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "qtroundedtextrectitem.h"<br/>
#include "qtconceptmapitem.h"<br/>
<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
///QtConceptMapNodeItem displays a Node<br/>
struct QtConceptMapNodeItem : public QtConceptMapItem<br/>
{<br/>
&nbsp;&nbsp;virtual ~QtConceptMapNodeItem() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///Node cannot be const as it contains a Concept that the user might want to edit<br/>
&nbsp;&nbsp;///concept_item contains the Stategy to display (and respond to the concept)<br/>
&nbsp;&nbsp;explicit QtConceptMapNodeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; concept_item);<br/>
<br/>
&nbsp;&nbsp;virtual QRectF boundingRect() const;<br/>
<br/>
&nbsp;&nbsp;QBrush brush() const;<br/>
<br/>
&nbsp;&nbsp;void DisableAll();<br/>
&nbsp;&nbsp;void EnableAll();<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::Concept&gt;&nbsp;&nbsp;GetConcept() const;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::Concept&gt;&nbsp;&nbsp;GetConcept()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const QtConceptMapItem&gt; GetConceptItem() const final { return m_concept_item; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapItem&gt; GetConceptItem()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final { return m_concept_item; }<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const cmap::Node&gt;&nbsp;&nbsp;GetNode() const { return m_node; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap::Node&gt;&amp; GetNode()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return m_node; }<br/>
<br/>
&nbsp;&nbsp;void SetConcept(const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept);<br/>
<br/>
&nbsp;&nbsp;void SetName(const std::string&amp; name);<br/>
<br/>
&nbsp;&nbsp;///Set the X coordinat of the central concept<br/>
&nbsp;&nbsp;void SetX(const double x);<br/>
<br/>
&nbsp;&nbsp;///Set the Y coordinat of the central concept<br/>
&nbsp;&nbsp;void SetY(const double y);<br/>
<br/>
&nbsp;&nbsp;///m_signal_request_rate_node is emitted due to a m_signal_request_rate_node<br/>
&nbsp;&nbsp;///of the Node its QtRateConceptItem<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void (QtConceptMapNodeItem *)&gt; m_signal_node_requests_rate_concept;<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void (QtConceptMapNodeItem *)&gt; m_signal_node_requests_rate_examples;<br/>
<br/>
&nbsp;&nbsp;///No other signals, these are present in the ConceptItems<br/>
<br/>
protected:<br/>
<br/>
&nbsp;&nbsp;void focusInEvent(QFocusEvent *event) final;<br/>
&nbsp;&nbsp;void focusOutEvent(QFocusEvent *event) final;<br/>
&nbsp;&nbsp;void keyPressEvent(QKeyEvent *event) final;<br/>
<br/>
&nbsp;&nbsp;//const boost::shared_ptr&lt;QtConceptMapItem&gt;&amp; GetConceptItem() { return m_concept_item; }<br/>
<br/>
&nbsp;&nbsp;///Next to QtPvdbConcept::paint, check for collision<br/>
&nbsp;&nbsp;void paint(QPainter* painter, const QStyleOptionGraphicsItem *, QWidget *) final;<br/>
<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///The Strategy for displaying a Concept<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; m_concept_item;<br/>
<br/>
&nbsp;&nbsp;const QPen m_contour_pen;<br/>
&nbsp;&nbsp;const QPen m_focus_pen;<br/>
<br/>
&nbsp;&nbsp;///The node being edited, or displayed and not changed, or rated<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; m_node;<br/>
<br/>
&nbsp;&nbsp;void OnItemHasUpdated();<br/>
<br/>
&nbsp;&nbsp;///The m_node has changed<br/>
&nbsp;&nbsp;void OnNodeChanged(const cmap::Node * node);<br/>
&nbsp;&nbsp;void OnRequestsSceneUpdate();<br/>
<br/>
&nbsp;&nbsp;///The item<br/>
&nbsp;&nbsp;void OnItemRequestsRateConcept();<br/>
&nbsp;&nbsp;void OnItemRequestsRateExamples();<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test();<br/>
&nbsp;&nbsp;#endif<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBNODEITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmaprateconceptitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmaprateconceptitem.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmaprateconceptitem.h"<br/>
<br/>
#include &lt;cstdlib&gt;<br/>
<br/>
#include &lt;QKeyEvent&gt;<br/>
<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapexample.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmapcompetency.h"<br/>
#include "qtconceptmapbrushfactory.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::cmap::QtPvdbRateConceptItem::QtPvdbRateConceptItem(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept)<br/>
&nbsp;&nbsp;: QtConceptMapItem(concept),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_rate_concept{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_rate_examples{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;assert(GetConcept());<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;UpdateBrushesAndPens();<br/>
<br/>
&nbsp;&nbsp;//?FIX 2013-01-06 22:47<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_name_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtPvdbRateConceptItem::OnConceptNameChanged,this)); //Obligatory<br/>
<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_examples_changed.connect( //FIX 2013-01-06 22:32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_complexity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_concreteness_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_specificity_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
}<br/>
<br/>
<br/>
ribi::cmap::QtPvdbRateConceptItem::~QtPvdbRateConceptItem() noexcept<br/>
{<br/>
&nbsp;&nbsp;//2013-08-25<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_complexity_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//2013-08-25<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_concreteness_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//2013-08-25<br/>
&nbsp;&nbsp;GetConcept()-&gt;m_signal_rating_specificity_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
}<br/>
<br/>
void ribi::cmap::QtPvdbRateConceptItem::keyPressEvent(QKeyEvent *event)<br/>
{<br/>
<br/>
&nbsp;&nbsp;switch (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_rate_concept(this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_rate_examples(this); //Dialog will handle empty examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return; //Always return, otherwise F2 in QtPvdbNodeConcept will cause an edit<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtPvdbRateConceptItem::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("ribi::cmap::QtPvdbRateConceptItem::Test started");<br/>
&nbsp;&nbsp;//Check brush comparison<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(QtPvdbBrushFactory::CreateRedGradientBrush() != QtPvdbBrushFactory::CreateYellowGradientBrush());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(QtPvdbBrushFactory::CreateRedGradientBrush() != QtPvdbBrushFactory::CreateGreenGradientBrush());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Concept&gt; concept = ConceptFactory::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtPvdbRateConceptItem a(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (const auto s: v) { a.SetName(s); } //SetName tests GetName<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("ribi::cmap::QtPvdbRateConceptItem::Test finished successfully");<br/>
}<br/>
#endif<br/>
<br/>
void ribi::cmap::QtPvdbRateConceptItem::UpdateBrushesAndPens()<br/>
{<br/>
&nbsp;&nbsp;assert(GetConcept());<br/>
&nbsp;&nbsp;assert(GetConcept()-&gt;GetExamples());<br/>
<br/>
&nbsp;&nbsp;//Brush for the concept being rated<br/>
&nbsp;&nbsp;QBrush new_main_brush = this-&gt;brush();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_rated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= (GetConcept()-&gt;GetRatingComplexity()&nbsp;&nbsp; != -1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ (GetConcept()-&gt;GetRatingConcreteness() != -1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ (GetConcept()-&gt;GetRatingSpecificity()&nbsp;&nbsp;!= -1 ? 1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;switch (n_rated)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_main_brush = QtPvdbBrushFactory::CreateRedGradientBrush();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_main_brush = QtPvdbBrushFactory::CreateYellowGradientBrush();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_main_brush = QtPvdbBrushFactory::CreateGreenGradientBrush();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Brush and pen for the examples being rated<br/>
&nbsp;&nbsp;QBrush new_indicator_brush = this-&gt;GetIndicatorBrush();<br/>
&nbsp;&nbsp;QPen new_indicator_pen = this-&gt;GetIndicatorPen();<br/>
&nbsp;&nbsp;if (GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//No examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(0,0,0));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Example&gt; &gt; v = AddConst(GetConcept()-&gt;GetExamples()-&gt;Get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_examples = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_judged<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::count_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Example&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const cmap::Competency this_competency = p-&gt;GetCompetency();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this_competency != cmap::Competency::uninitialized;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n_judged == 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(255,128,128)); //Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (n_judged &lt; n_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(255,196,128)); //Orange<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_judged == n_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_brush = QBrush(QColor(128,255,128)); //Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n_judged == 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(255,0,0),3); //Thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (n_judged &lt; n_examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(255,196,0),2); //Less thick pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_judged == n_examples);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_indicator_pen = QPen(QColor(0,255,0),1); //Thin pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (this-&gt;brush() != new_main_brush<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| this-&gt;GetIndicatorBrush() != new_indicator_brush<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| this-&gt;GetIndicatorPen() != new_indicator_pen)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;setBrush(new_main_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetIndicatorBrush(new_indicator_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetIndicatorPen(new_indicator_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;brush() == new_main_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;GetIndicatorBrush() == new_indicator_brush);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;GetIndicatorPen() == new_indicator_pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(std::rand()); //GOOD: Detects infinite recursion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_item_has_updated(this); //Obligatory<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#pragma GCC diagnostic push<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_request_scene_update(); //Obligatory<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#pragma GCC diagnostic pop<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmaprateconceptitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmaprateconceptitem.h" border = "1"><tr><td><code>
#ifndef QTPVDBRATECONCEPT_H<br/>
#define QTPVDBRATECONCEPT_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "qtconceptmapitem.h"<br/>
#include "conceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
///QtPvdbRateConcept display a Concept that is (1) a node (2) is unmovable (3) has focus on<br/>
///the concept AND its examples (4) has different colors depending on the concept being rated<br/>
struct QtPvdbRateConceptItem : public QtConceptMapItem<br/>
{<br/>
&nbsp;&nbsp;//concept will be modified<br/>
&nbsp;&nbsp;explicit QtPvdbRateConceptItem(const boost::shared_ptr&lt;ribi::cmap::Concept&gt;&amp; concept);<br/>
<br/>
&nbsp;&nbsp;virtual ~QtPvdbRateConceptItem() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Key was pressed to indicate user wants to rate the concept<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void(QtConceptMapItem*)&gt; m_signal_request_rate_concept;<br/>
<br/>
&nbsp;&nbsp;///Key was pressed to indicate user wants to rate the concept<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void(QtConceptMapItem*)&gt; m_signal_request_rate_examples;<br/>
<br/>
protected:<br/>
&nbsp;&nbsp;void keyPressEvent(QKeyEvent *event);<br/>
<br/>
private:<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Update the brushes and pens<br/>
&nbsp;&nbsp;void UpdateBrushesAndPens();<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBRATECONCEPT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapratewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapratewidget.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapratewidget.h"<br/>
<br/>
#include &lt;boost/lambda/lambda.hpp&gt;<br/>
<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmap.h"<br/>
#include "conceptmapedge.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapexamples.h"<br/>
#include "qtconceptmapdisplayconceptitem.h"<br/>
#include "qtconceptmapnodeitem.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmapfactory.h"<br/>
#include "conceptmapnode.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "qtconceptmapcenternodeitem.h"<br/>
#include "qtedgeitem.h"<br/>
#include "qtquadbezierarrowitem.h"<br/>
#include "qtrateexamplesdialog.h"<br/>
#include "qtexamplesitem.h"<br/>
#include "qtrateconceptitem.h"<br/>
#include "qtscopeddisable.h"<br/>
#include "qtrateconceptdialog.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///Collect all QGraphicsItems with class T in an unorderly way<br/>
template &lt;class T&gt;<br/>
std::vector&lt;T*&gt; Collect(const QGraphicsScene* const scene)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;T*&gt; v;<br/>
&nbsp;&nbsp;const QList&lt;QGraphicsItem *&gt; items = scene-&gt;items();<br/>
&nbsp;&nbsp;std::transform(items.begin(),items.end(),std::back_inserter(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](QGraphicsItem* const item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dynamic_cast&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(std::remove(v.begin(),v.end(),nullptr),v.end());<br/>
&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),nullptr)==0);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapRateWidget::QtConceptMapRateWidget(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;QWidget* parent)<br/>
&nbsp;&nbsp;: QtConceptMapWidget(concept_map,parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_rate_concept_dialog{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
<br/>
&nbsp;&nbsp;assert( (concept_map || !concept_map )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Only an existing concept map can be rated,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "an empty one displays nothing");<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (concept_map) BuildQtConceptMap();<br/>
<br/>
&nbsp;&nbsp;//assert(m_tools-&gt;scene() &amp;&amp; "m_tools is added at CleanMe at BuildQtConceptMap");<br/>
&nbsp;&nbsp;//scene()-&gt;addItem(m_tools); //Give m_tools a parent<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapRateWidget::AddEdge(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtPvdbEditConceptItem&gt; qtconcept(new QtPvdbEditConceptItem(edge-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(qtconcept);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const from = FindQtNode(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const to&nbsp;&nbsp; = FindQtNode(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;QtConceptMapEdgeItem * const qtedge = new QtConceptMapEdgeItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(qtedge);<br/>
<br/>
&nbsp;&nbsp;//Edges connected to the center node do not show their concepts<br/>
&nbsp;&nbsp;if (IsCenterNode(from) || IsCenterNode(to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtconcept == qtedge-&gt;GetConceptItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtconcept-&gt;setVisible(false);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;//General<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that this item has changed<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; boost::bind(&amp;QtConceptMapWidget::OnItemRequestsUpdate,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that a QGraphicsScene needs to be updated<br/>
&nbsp;&nbsp;qtedge-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;//Specific: disable changing arrow heads<br/>
&nbsp;&nbsp;qtedge-&gt;GetArrow()-&gt;setEnabled(false);<br/>
<br/>
&nbsp;&nbsp;//Do not connect m_signal_rate, because Edges will never be rated<br/>
<br/>
<br/>
&nbsp;&nbsp;//Add the EdgeConcepts to the scene<br/>
&nbsp;&nbsp;assert(!qtedge-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtedge);<br/>
<br/>
&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;GetEdges().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;GetConceptMap()-&gt;GetEdges().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge) == 1 &amp;&amp; "Assume edge is already in the concept map");<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(std::abs(qtedge-&gt;pos().x() - edge-&gt;GetX()) &lt; epsilon);<br/>
&nbsp;&nbsp;assert(std::abs(qtedge-&gt;pos().y() - edge-&gt;GetY()) &lt; epsilon);<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapNodeItem * ribi::cmap::QtConceptMapRateWidget::AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;QtPvdbRateConceptItem&gt; qtconcept(new QtPvdbRateConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;assert(qtconcept);<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode = new QtConceptMapNodeItem(node,qtconcept);<br/>
&nbsp;&nbsp;assert(qtnode);<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that this item has changed<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp; boost::bind(&amp;QtConceptMapWidget::OnItemRequestsUpdate,this,boost::lambda::_1));<br/>
<br/>
&nbsp;&nbsp;//General: inform an Observer that a QGraphicsScene needs to be updated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
<br/>
&nbsp;&nbsp;//Specific: inform an Observer that the Node requests its Concept being rated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_node_requests_rate_concept.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapRateWidget::OnNodeRequestsRateConcept,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this, boost::lambda::_1)); //Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;//Specific: inform an Observer that the Node requests its Examples being rated<br/>
&nbsp;&nbsp;qtnode-&gt;m_signal_node_requests_rate_examples.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapRateWidget::OnNodeRequestsRateExamples,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this, boost::lambda::_1)); //Do not forget the placeholder!<br/>
<br/>
&nbsp;&nbsp;assert(!qtnode-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtnode);<br/>
<br/>
&nbsp;&nbsp;assert(std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetConceptMap()-&gt;GetNodes().begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetConceptMap()-&gt;GetNodes().end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node) == 1 &amp;&amp; "Assume Node is already in the concept map");<br/>
&nbsp;&nbsp;//this-&gt;GetConceptMap()-&gt;AddNode(node);<br/>
<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().x() == node-&gt;GetX());<br/>
&nbsp;&nbsp;assert(qtnode-&gt;pos().y() == node-&gt;GetY());<br/>
<br/>
&nbsp;&nbsp;//Cannot test this: during construction not all nodes are put in<br/>
&nbsp;&nbsp;//assert(Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene()).size() == this-&gt;GetConceptMap()-&gt;GetNodes().size());<br/>
<br/>
&nbsp;&nbsp;return qtnode;<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapRateWidget::CleanMe()<br/>
{<br/>
&nbsp;&nbsp;//Prepare cleaning the scene<br/>
&nbsp;&nbsp;assert(GetExamplesItem());<br/>
&nbsp;&nbsp;SetExamplesItem(nullptr);<br/>
<br/>
&nbsp;&nbsp;//Clear the scene, invalidates all scene items copies<br/>
&nbsp;&nbsp;assert(this-&gt;scene());<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;//Put stuff back in<br/>
<br/>
&nbsp;&nbsp;//Add the invisible examples item<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!GetExamplesItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapExamplesItem * const item = new QtConceptMapExamplesItem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetExamplesItem(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::cmap::QtConceptMapRateWidget::OnRequestSceneUpdate,this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setVisible(false);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!item-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(item);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
std::unique_ptr&lt;ribi::cmap::QtConceptMapWidget&gt; ribi::cmap::QtConceptMapRateWidget::CreateNewDerived() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= ribi::cmap::ConceptMapFactory::DeepCopy(this-&gt;GetConceptMap());<br/>
&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;std::unique_ptr&lt;QtConceptMapWidget&gt; p(new This_t(concept_map));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
#endif<br/>
<br/>
const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; ribi::cmap::QtConceptMapRateWidget::CreateSubConceptMap(QtConceptMapNodeItem * const item)<br/>
{<br/>
&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;//Collect all nodes first<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; qtedges = FindEdges(item);<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; nodes;<br/>
&nbsp;&nbsp;//assert(focal_concept);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; focal_node = item-&gt;GetNode(); //FIX?<br/>
&nbsp;&nbsp;assert(focal_node);<br/>
&nbsp;&nbsp;nodes.push_back(focal_node);<br/>
<br/>
&nbsp;&nbsp;assert(nodes[0]-&gt;GetConcept() == item-&gt;GetNode()-&gt;GetConcept());<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; edges;<br/>
<br/>
&nbsp;&nbsp;const int sz = static_cast&lt;int&gt;(qtedges.size());<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapEdgeItem* const qtedge = qtedges[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetArrow());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetArrow()-&gt;GetFromItem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetFromItem()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetFromItem())-&gt;GetNode());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetFromItem())-&gt;GetNode()-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetToItem()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetToItem())-&gt;GetNode());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(qtedge-&gt;GetArrow()-&gt;GetToItem())-&gt;GetNode()-&gt;GetConcept());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; other_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= qtedge-&gt;GetFrom()-&gt;GetNode() == focal_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? qtedge-&gt;GetTo()-&gt;GetNode()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: qtedge-&gt;GetFrom()-&gt;GetNode();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(other_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(other_node != focal_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodes.push_back(other_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge-&gt;GetEdge());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge(cmap::EdgeFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;GetConcept(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;focal_node,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;HasTailArrow(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_node,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;HasHeadArrow()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edges.push_back(edge);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map(cmap::ConceptMapFactory::Create(nodes,edges));<br/>
&nbsp;&nbsp;assert(concept_map);<br/>
&nbsp;&nbsp;assert(focal_node == concept_map-&gt;GetNodes().at(0));<br/>
<br/>
&nbsp;&nbsp;assert(concept_map-&gt;GetNodes().at(0));<br/>
&nbsp;&nbsp;assert(concept_map-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(concept_map-&gt;GetNodes().at(0)-&gt;GetConcept().get() == item-&gt;GetNode()-&gt;GetConcept().get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Should not be a deep copy, otherwise item will not be changed");<br/>
<br/>
&nbsp;&nbsp;return concept_map;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapRateWidget::DoRandomStuff()<br/>
{<br/>
&nbsp;&nbsp;assert(!"TODO");<br/>
}<br/>
#endif<br/>
<br/>
<br/>
void ribi::cmap::QtConceptMapRateWidget::OnItemRequestUpdateImpl(const QGraphicsItem* const item)<br/>
{<br/>
&nbsp;&nbsp;GetExamplesItem()-&gt;SetBuddyItem(dynamic_cast&lt;const QtConceptMapItem*&gt;(item));<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapRateWidget::OnNodeRequestsRateConcept(QtConceptMapNodeItem * const item)<br/>
{<br/>
&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;assert(item-&gt;GetNode()-&gt;GetConcept());<br/>
&nbsp;&nbsp;//Concept map must be edited, so item changes with it<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; sub_concept_map = CreateSubConceptMap(item);<br/>
&nbsp;&nbsp;assert(sub_concept_map);<br/>
&nbsp;&nbsp;assert(sub_concept_map-&gt;GetNodes().at(0));<br/>
&nbsp;&nbsp;assert(sub_concept_map-&gt;GetNodes().at(0)-&gt;GetConcept());<br/>
&nbsp;&nbsp;assert(sub_concept_map-&gt;GetNodes().at(0)-&gt;GetConcept().get() == item-&gt;GetNode()-&gt;GetConcept().get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Should not be a deep copy, otherwise item will not be changed");<br/>
<br/>
&nbsp;&nbsp;m_signal_request_rate_concept_dialog(sub_concept_map);<br/>
<br/>
<br/>
&nbsp;&nbsp;//PUT RATING HERE<br/>
&nbsp;&nbsp;//item-&gt;GetNode()-&gt;GetConcept()-&gt;GetExamples().<br/>
&nbsp;&nbsp;TRACE("CALCULATE RATING HERE");<br/>
<br/>
&nbsp;&nbsp;//QtPvdbRateConceptDialog d(sub_concept_map); //Item may be changed<br/>
&nbsp;&nbsp;//d.exec();<br/>
&nbsp;&nbsp;this-&gt;setFocus();<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;setFocusItem(item);<br/>
&nbsp;&nbsp;item-&gt;setSelected(true);<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;this-&gt;OnItemRequestsUpdate(item);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapRateWidget::OnNodeRequestsRateExamples(QtConceptMapNodeItem * const item)<br/>
{<br/>
&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;if (item-&gt;GetConcept()-&gt;GetExamples()-&gt;Get().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Start edit<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtScopedDisable&lt;QtConceptMapRateWidget&gt; disable(this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Concept&gt; concept = item-&gt;GetConcept();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(concept);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(item-&gt;GetConcept().get() == concept.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(item-&gt;GetConcept() == concept);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtPvdbRateExamplesDialog d(concept); //FYI: Might change the concept (as suggested by the ctor prototype)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.exec();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(item-&gt;GetConcept().get() == concept.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(item-&gt;GetConcept() == concept);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;this-&gt;setFocus();<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;setFocusItem(item);<br/>
&nbsp;&nbsp;item-&gt;setSelected(true);<br/>
&nbsp;&nbsp;this-&gt;scene()-&gt;update();<br/>
&nbsp;&nbsp;this-&gt;OnItemRequestsUpdate(item);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapratewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapratewidget.h" border = "1"><tr><td><code>
#ifndef QTPVDBCONCEPTMAPRATEWIDGET_H<br/>
#define QTPVDBCONCEPTMAPRATEWIDGET_H<br/>
<br/>
#include "qtconceptmapwidget.h"<br/>
<br/>
#include "conceptmapfwd.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace cmap {<br/>
<br/>
///QtConceptMapWidget for creation and editing of a ConceptMap<br/>
struct QtConceptMapRateWidget : public QtConceptMapWidget<br/>
{<br/>
&nbsp;&nbsp;typedef QtConceptMapRateWidget This_t;<br/>
<br/>
&nbsp;&nbsp;QtConceptMapRateWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QWidget* parent = 0);<br/>
&nbsp;&nbsp;~QtConceptMapRateWidget() noexcept {}<br/>
&nbsp;&nbsp;QtConceptMapRateWidget(const QtConceptMapRateWidget&amp; other) = delete;<br/>
&nbsp;&nbsp;QtConceptMapRateWidget&amp; operator=(const QtConceptMapRateWidget&amp; other) = delete;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Creates a new derived class<br/>
&nbsp;&nbsp;///A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;std::unique_ptr&lt;QtConceptMapWidget&gt; CreateNewDerived() const;<br/>
<br/>
&nbsp;&nbsp;///Do something random<br/>
&nbsp;&nbsp;void DoRandomStuff();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///If the user wants to rate the focal concept of the already generated sub concept map<br/>
&nbsp;&nbsp;///the dialog using this widget must display the tally dialog<br/>
&nbsp;&nbsp;boost::signals2::signal&lt;void (boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt;)&gt; m_signal_request_rate_concept_dialog;<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///Adds an Edge and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;void AddEdge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge);<br/>
<br/>
&nbsp;&nbsp;///Adds a node and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;///For rating and editing, the node must be non-cost<br/>
&nbsp;&nbsp;///For display, the node should best be const<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node);<br/>
<br/>
&nbsp;&nbsp;///Remove all Qt and non-Qt items and add new ones<br/>
&nbsp;&nbsp;void CleanMe();<br/>
<br/>
&nbsp;&nbsp;///Create a subsection of the concept map, with item at the center<br/>
&nbsp;&nbsp;///Item is non-const, as all items can be edited in other contexts<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; CreateSubConceptMap(QtConceptMapNodeItem * const item);<br/>
<br/>
&nbsp;&nbsp;///Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;///If item is nullptr, the last item might be deleted<br/>
&nbsp;&nbsp;///Use QGraphicsItem* due to QtKeyboardFriendlyGraphicsView working on QGraphicsItems<br/>
&nbsp;&nbsp;///Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;void OnItemRequestUpdateImpl(const QGraphicsItem* const item);<br/>
<br/>
&nbsp;&nbsp;///Called when a QtConceptItem requests to have its concept rated<br/>
&nbsp;&nbsp;///Note that this might be a ConceptItem on an Edge, but those signals are not connected<br/>
&nbsp;&nbsp;///item must be a Node, becaus only Nodes can be rated and because the Node is<br/>
&nbsp;&nbsp;///used for contruction of a sub concept map<br/>
&nbsp;&nbsp;void OnNodeRequestsRateConcept(QtConceptMapNodeItem * const item);<br/>
<br/>
&nbsp;&nbsp;///Called when a QtConceptItem requests to have its concept rated<br/>
&nbsp;&nbsp;///Note that this might be a ConceptItem on an Edge, but those signals are not connected<br/>
&nbsp;&nbsp;///item must be a Node, becaus only Nodes can be rated and because the Node is<br/>
&nbsp;&nbsp;///used for contruction of a sub concept map<br/>
&nbsp;&nbsp;void OnNodeRequestsRateConceptWithSuggestion(QtConceptMapNodeItem * const item);<br/>
<br/>
&nbsp;&nbsp;///Called when a QtConceptItem requests to have its examples rated<br/>
&nbsp;&nbsp;///Note that this might be a ConceptItem on an Edge, but those signals are not connected<br/>
&nbsp;&nbsp;void OnNodeRequestsRateExamples(QtConceptMapNodeItem * const item);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test();<br/>
&nbsp;&nbsp;#endif<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBCONCEPTMAPRATEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapwidget.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#include "qtconceptmapconceptmapwidget.h"<br/>
<br/>
#include &lt;set&gt;<br/>
<br/>
#include &lt;boost/bind.hpp&gt;<br/>
#include &lt;boost/lambda/lambda.hpp&gt;<br/>
#include &lt;boost/math/constants/constants.hpp&gt;<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include &lt;QKeyEvent&gt;<br/>
<br/>
#include "fuzzy_equal_to.h"<br/>
#include "conceptmapcenternode.h"<br/>
#include "conceptmapconceptfactory.h"<br/>
#include "conceptmapconcept.h"<br/>
#include "conceptmapfactory.h"<br/>
#include "conceptmap.h"<br/>
#include "conceptmapedgefactory.h"<br/>
#include "conceptmapedge.h"<br/>
#include "conceptmaphelper.h"<br/>
#include "conceptmapnodefactory.h"<br/>
#include "conceptmapnode.h"<br/>
#include "qtarrowitem.h"<br/>
#include "qtconceptmapdisplayconceptitem.h"<br/>
#include "qtconceptmapbrushfactory.h"<br/>
#include "qtconceptmapcenternodeitem.h"<br/>
#include "qtconceptmapconcepteditdialog.h"<br/>
#include "qtconceptmapitem.h"<br/>
#include "qtconceptmapedgeitem.h"<br/>
#include "qtconceptmapexamplesitem.h"<br/>
#include "qtconceptmapitemhighlighter.h"<br/>
#include "qtconceptmapnewarrow.h"<br/>
#include "qtconceptmapnodeitem.h"<br/>
#include "qtconceptmaptoolsitem.h"<br/>
#include "qtscopeddisable.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///Collect all QGraphicsItems with class T in an unorderly way<br/>
template &lt;class T&gt;<br/>
std::vector&lt;T*&gt; Collect(const QGraphicsScene* const scene)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;T*&gt; v;<br/>
&nbsp;&nbsp;const QList&lt;QGraphicsItem *&gt; items = scene-&gt;items();<br/>
&nbsp;&nbsp;std::transform(items.begin(),items.end(),std::back_inserter(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](QGraphicsItem* const item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dynamic_cast&lt;T*&gt;(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;v.erase(std::remove(v.begin(),v.end(),nullptr),v.end());<br/>
&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),nullptr)==0);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
///Returns a sorted vector<br/>
template &lt;class T&gt;<br/>
const std::vector&lt;T&gt; Sort(const std::vector&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;T&gt; w(v);<br/>
&nbsp;&nbsp;std::sort(w.begin(),w.end());<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
template &lt;&gt;<br/>
const std::vector&lt;ribi::cmap::QtConceptMapNodeItem*&gt;<br/>
&nbsp;&nbsp;Sort(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;ribi::cmap::QtConceptMapNodeItem*&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;typedef std::vector&lt;ribi::cmap::QtConceptMapNodeItem*&gt;::iterator Iterator;<br/>
&nbsp;&nbsp;std::vector&lt;ribi::cmap::QtConceptMapNodeItem*&gt; w(v);<br/>
&nbsp;&nbsp;std::sort(w.begin(),w.end());<br/>
&nbsp;&nbsp;const Iterator i = std::find_if(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const ribi::cmap::QtConceptMapNodeItem* const node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dynamic_cast&lt;const ribi::cmap::QtPvdbCenterNodeItem*&gt;(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;if (i != w.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::swap(*i,*w.begin());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;const ribi::cmap::QtPvdbCenterNodeItem*&gt;(*w.begin()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
<br/>
<br/>
ribi::cmap::QtConceptMapWidget::QtConceptMapWidget(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;QWidget* parent)<br/>
&nbsp;&nbsp;: QtKeyboardFriendlyGraphicsView(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_concept_map(concept_map),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples_item(new QtConceptMapExamplesItem)<br/>
{<br/>
&nbsp;&nbsp;assert( (concept_map || !concept_map)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Also empty concept maps must be displayed");<br/>
<br/>
&nbsp;&nbsp;//Cannot test this ABC here, its derived classes will test themselves<br/>
<br/>
&nbsp;&nbsp;this-&gt;setScene(new QGraphicsScene(this));<br/>
<br/>
&nbsp;&nbsp;assert(!m_examples_item-&gt;scene());<br/>
&nbsp;&nbsp;scene()-&gt;addItem(m_examples_item); //Add the examples so it has a parent<br/>
<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(scene()).empty());<br/>
<br/>
&nbsp;&nbsp;//Without this line, mouseMoveEvent won't be called<br/>
&nbsp;&nbsp;this-&gt;setMouseTracking(true);<br/>
<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//QLinearGradient linearGradient(-500,-500,500,500);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//linearGradient.setColorAt(0.0,QColor(214,214,214));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//linearGradient.setColorAt(1.0,QColor(255,255,255));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//this-&gt;scene()-&gt;setBackgroundBrush(linearGradient);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;setBackgroundBrush(QBrush(QColor(255,255,255)));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(GetConceptMap() == concept_map);<br/>
&nbsp;&nbsp;assert( (!concept_map || concept_map-&gt;IsValid())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Expect no or a valid concept map");<br/>
}<br/>
<br/>
<br/>
ribi::cmap::QtConceptMapWidget::~QtConceptMapWidget() noexcept<br/>
{<br/>
&nbsp;&nbsp;delete m_examples_item; //Why did I forget this?<br/>
&nbsp;&nbsp;m_examples_item = nullptr;<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapWidget::BuildQtConceptMap()<br/>
{<br/>
<br/>
&nbsp;&nbsp;CleanMe();<br/>
&nbsp;&nbsp;assert(m_concept_map);<br/>
&nbsp;&nbsp;assert(m_concept_map-&gt;IsValid());<br/>
&nbsp;&nbsp;assert(this-&gt;scene());<br/>
&nbsp;&nbsp;//This std::vector keeps the QtNodes in the same order as the nodes in the concept map<br/>
&nbsp;&nbsp;//You cannot rely on Collect&lt;QtPvdbNodeConcept*&gt;(scene), as this shuffles the order<br/>
&nbsp;&nbsp;std::vector&lt;QtConceptMapNodeItem*&gt; qtnodes;<br/>
<br/>
&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(scene()).empty());<br/>
<br/>
&nbsp;&nbsp;//Add the nodes to the scene<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Add the main question as the first node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::Node&gt; node = m_concept_map-&gt;GetNodes()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem* const qtnode = new QtPvdbCenterNodeItem(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef USE_NEW_STYLE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem* qtnode = nullptr;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (const boost::shared_ptr&lt;cmap::CenterNode&gt; center_node = boost::dynamic_pointer_cast&lt;cmap::CenterNode&gt;(node))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode = new QtPvdbCenterNodeItem(center_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;QtConceptMapItem&gt; item(new QtConceptMapDisplayConceptItem(node-&gt;GetConcept()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode = new QtConceptMapNodeItem(node,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Let the center node respond to mouse clicks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;m_signal_request_scene_update.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtConceptMapWidget::OnRequestSceneUpdate,this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;m_signal_item_has_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(&amp;ribi::cmap::QtConceptMapWidget::OnItemRequestsUpdate,this,boost::lambda::_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Add the center node to scene<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!qtnode-&gt;scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scene()-&gt;addItem(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtnodes.push_back(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(scene()).size() == 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Add the regular nodes to the scene<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Node&gt; &gt; nodes = m_concept_map-&gt;GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_nodes = nodes.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n_nodes &gt;= 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=1; i!=n_nodes; ++i) //+1 to skip center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(scene()).size() == i &amp;&amp; "Node not yet added to scene");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i &lt; nodes.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;ribi::cmap::Node&gt; node = nodes[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode = AddNode(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnodes.push_back(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Collect&lt;QtConceptMapNodeItem&gt;(scene()).size() == i + 1 &amp;&amp; "Node is added to scene");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check the number of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto qtnodes = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto n_qtnodes = qtnodes.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto nodes = m_concept_map-&gt;GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto n_nodes = nodes.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n_qtnodes == n_nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "There must as much nodes in the scene as there were in the concept map");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;//Add the Concepts on the Edges<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;ribi::cmap::Edge&gt; &gt; edges = m_concept_map-&gt;GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(edges.begin(),edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,qtnodes](const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(edge-&gt;GetFrom() != edge-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;AddEdge(edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check the number of edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto qtedges = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto n_qtedges = qtedges.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto edges = m_concept_map-&gt;GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const auto n_edges = edges.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n_qtedges == n_edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "There must as much edges in the scene as there were in the concept map");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Put the nodes around the focal question in an initial position<br/>
&nbsp;&nbsp;if (MustReposition(AddConst(m_concept_map-&gt;GetNodes())))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RepositionItems();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;assert(m_concept_map-&gt;IsValid());<br/>
&nbsp;&nbsp;const auto nodes = m_concept_map-&gt;GetNodes();<br/>
&nbsp;&nbsp;const auto items = Collect&lt;QtConceptMapNodeItem&gt;(this-&gt;scene());<br/>
&nbsp;&nbsp;const std::size_t n_items = items.size();<br/>
&nbsp;&nbsp;const std::size_t n_nodes = nodes.size();<br/>
&nbsp;&nbsp;if (n_items != n_nodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(m_concept_map-&gt;GetNodes().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(n_items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(n_nodes);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(n_items == n_nodes &amp;&amp; "GUI and non-GUI concept map must match");<br/>
&nbsp;&nbsp;TestMe(m_concept_map);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const std::vector&lt;ribi::cmap::QtConceptMapEdgeItem*&gt; ribi::cmap::QtConceptMapWidget::FindEdges(<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem* const from) const<br/>
{<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; v = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;std::vector&lt;QtConceptMapEdgeItem*&gt; w;<br/>
&nbsp;&nbsp;std::copy_if(v.begin(),v.end(),std::back_inserter(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[from](const QtConceptMapEdgeItem* const edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return edge-&gt;GetFrom() == from || edge-&gt;GetTo() == from;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
const ribi::cmap::QtConceptMapEdgeItem * ribi::cmap::QtConceptMapWidget::FindQtEdge(<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem* const from,<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem* const to) const<br/>
{<br/>
<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;assert(from != to);<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; edge_concepts = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;const auto iter = std::find_if(edge_concepts.begin(),edge_concepts.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[from,to](const QtConceptMapEdgeItem* const edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(edge-&gt;GetFrom() == from &amp;&amp; edge-&gt;GetTo() == to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; || (edge-&gt;GetFrom() == to &amp;&amp; edge-&gt;GetTo() == from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;if (iter == edge_concepts.end()) return nullptr;<br/>
&nbsp;&nbsp;return * iter;<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapNodeItem * ribi::cmap::QtConceptMapWidget::FindQtNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node) const<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem *&gt; qtnodes = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;for (QtConceptMapNodeItem * qtnode: qtnodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (qtnode-&gt;GetNode() == node) return qtnode;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should always find QtNode");<br/>
&nbsp;&nbsp;throw std::logic_error("ribi::cmap::QtConceptMapWidget::FindQtNode");<br/>
}<br/>
<br/>
const ribi::cmap::QtConceptMapNodeItem * ribi::cmap::QtConceptMapWidget::GetCenterNode() const<br/>
{<br/>
<br/>
&nbsp;&nbsp;assert(scene());<br/>
&nbsp;&nbsp;assert(!scene()-&gt;items().isEmpty());<br/>
&nbsp;&nbsp;assert(scene()-&gt;items()[0]);<br/>
&nbsp;&nbsp;QList&lt;QGraphicsItem *&gt; v = scene()-&gt;items();<br/>
&nbsp;&nbsp;assert(std::count_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const QGraphicsItem * const item) { return this-&gt;IsCenterNode(item); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) == 1 &amp;&amp; "There must be exactly one center node");<br/>
&nbsp;&nbsp;const auto iter = std::find_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const QGraphicsItem * const item) { return this-&gt;IsCenterNode(item); } );<br/>
&nbsp;&nbsp;assert(iter != v.end());<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem * const center_node = dynamic_cast&lt;QtConceptMapNodeItem*&gt;(*iter);<br/>
&nbsp;&nbsp;assert(center_node);<br/>
&nbsp;&nbsp;assert(IsCenterNode(center_node));<br/>
&nbsp;&nbsp;return center_node;<br/>
}<br/>
<br/>
const ribi::cmap::QtConceptMapExamplesItem * ribi::cmap::QtConceptMapWidget::GetExamplesItem() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_examples_item || !m_examples_item);<br/>
&nbsp;&nbsp;return m_examples_item;<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapExamplesItem * ribi::cmap::QtConceptMapWidget::GetExamplesItem()<br/>
{<br/>
&nbsp;&nbsp;//Calls the const version of this member function<br/>
&nbsp;&nbsp;//To avoid duplication in const and non-const member functions [1]<br/>
&nbsp;&nbsp;//[1] Scott Meyers. Effective C++ (3rd edition). ISBN: 0-321-33487-6.<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Item 3, paragraph 'Avoid duplication in const and non-const member functions'<br/>
&nbsp;&nbsp;return const_cast&lt;QtConceptMapExamplesItem*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const_cast&lt;const QtConceptMapWidget*&gt;(this)-&gt;GetExamplesItem());<br/>
}<br/>
<br/>
ribi::cmap::QtConceptMapNodeItem* ribi::cmap::QtConceptMapWidget::GetItemBelowCursor(const QPointF&amp; pos) const<br/>
{<br/>
&nbsp;&nbsp;#if (QT_VERSION &gt;= QT_VERSION_CHECK(5,0,0))<br/>
&nbsp;&nbsp;const QList&lt;QGraphicsItem*&gt; v = this-&gt;scene()-&gt;items(pos.x(),pos.y(),2.0,2.0,Qt::IntersectsItemShape,Qt::AscendingOrder);<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;const QList&lt;QGraphicsItem*&gt; v = this-&gt;scene()-&gt;items(pos.x(),pos.y(),2.0,2.0);<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;std::vector&lt;QtConceptMapNodeItem*&gt; qtnodes;<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;qtnodes](QGraphicsItem* const item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (QtConceptMapNodeItem * const qtnode = dynamic_cast&lt;QtConceptMapNodeItem*&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!dynamic_cast&lt;QtPvdbToolsItem*&gt;(item) &amp;&amp; "Cannot draw arrow to ToolsItem");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnodes.push_back(qtnode);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;if (!qtnodes.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return qtnodes[0];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return nullptr;<br/>
}<br/>
<br/>
const std::vector&lt;const ribi::cmap::QtConceptMapEdgeItem *&gt; ribi::cmap::QtConceptMapWidget::GetQtEdges() const<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;const QtConceptMapEdgeItem *&gt; qtedges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Collect&lt;const QtConceptMapEdgeItem&gt;(this-&gt;scene());<br/>
&nbsp;&nbsp;assert(qtedges.size() == GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI must contain an equal amount of edges");<br/>
&nbsp;&nbsp;return qtedges;<br/>
}<br/>
<br/>
const std::vector&lt;const ribi::cmap::QtConceptMapNodeItem *&gt; ribi::cmap::QtConceptMapWidget::GetQtNodes() const<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;const QtConceptMapNodeItem *&gt; qtnodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= Collect&lt;const QtConceptMapNodeItem&gt;(this-&gt;scene());<br/>
&nbsp;&nbsp;assert(qtnodes.size() == GetConceptMap()-&gt;GetNodes().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "GUI and non-GUI must contain an equal amount of nodes");<br/>
&nbsp;&nbsp;return qtnodes;<br/>
}<br/>
<br/>
QGraphicsScene* ribi::cmap::QtConceptMapWidget::GetScene() const<br/>
{<br/>
<br/>
&nbsp;&nbsp;return this-&gt;scene();<br/>
}<br/>
<br/>
bool ribi::cmap::QtConceptMapWidget::IsCenterNode(const QGraphicsItem* const item)<br/>
{<br/>
<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem * const qtnode = dynamic_cast&lt;const QtConceptMapNodeItem*&gt;(item);<br/>
&nbsp;&nbsp;return qtnode &amp;&amp; !(item-&gt;flags() &amp; QGraphicsItem::ItemIsMovable);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapWidget::keyPressEvent(QKeyEvent *event) noexcept<br/>
{<br/>
<br/>
&nbsp;&nbsp;switch (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_Equal:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scale(1.1,1.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Qt::Key_Minus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;scale(0.9,0.9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;QtKeyboardFriendlyGraphicsView::keyPressEvent(event);<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
bool ribi::cmap::QtConceptMapWidget::MustReposition(const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt;&amp; nodes) const<br/>
{<br/>
&nbsp;&nbsp;//If all are at the origin, the nodes must be (re)positioned<br/>
&nbsp;&nbsp;return std::count_if(nodes.begin(),nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Node&gt;&amp; node)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return node-&gt;GetX() == 0.0 &amp;&amp; node-&gt;GetY() == 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;) == static_cast&lt;int&gt;(nodes.size());<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapWidget::OnItemRequestsUpdate(const QGraphicsItem* const item)<br/>
{<br/>
&nbsp;&nbsp;OnItemRequestUpdateImpl(item);<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapWidget::OnRequestSceneUpdate()<br/>
{<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
<br/>
<br/>
void ribi::cmap::QtConceptMapWidget::RepositionItems()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//The ray of the upcoming circle of nodes, is the larger of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//(1) half of the diagonal of the focal question (e.g. for short concepts)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//(2) calculated from the circumference by adding the nodes' length<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem *&gt; qtnode_concepts_unsorted = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem *&gt; qtnode_concepts = Sort(qtnode_concepts_unsorted);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!qtnode_concepts.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtnode_concepts[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const QtConceptMapNodeItem * const qtcenter_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= dynamic_cast&lt;const QtConceptMapNodeItem *&gt;(qtnode_concepts[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtcenter_node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtcenter_node-&gt;pos().x() &gt; -0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtcenter_node-&gt;pos().x() &lt;&nbsp;&nbsp;0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtcenter_node-&gt;pos().y() &gt; -0.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtcenter_node-&gt;pos().y() &lt;&nbsp;&nbsp;0.5);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double r1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 0.5 * cmap::GetDistance(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtcenter_node-&gt;boundingRect().width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtcenter_node-&gt;boundingRect().height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double r3 = 50.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double r = std::max(r1,r3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r &gt; 10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_nodes = qtnode_concepts.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 1; i!=n_nodes; ++i) //+1 to skip center node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Added +0 (instead of -1) to n_nodes, to prevent, in a setup with two concepts and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//one edge, the edge to overlap the central question<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double pi = boost::math::constants::pi&lt;double&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 2.0 * pi * boost::numeric_cast&lt;double&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/ boost::numeric_cast&lt;double&gt;(n_nodes - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x =&nbsp;&nbsp;std::cos(angle) * r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double y = -std::sin(angle) * r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapNodeItem * const qtnode = qtnode_concepts[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;GetNode()-&gt;SetPos(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//qtnode-&gt;setPos(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - qtnode-&gt;pos().x()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - qtnode-&gt;GetNode()-&gt;GetX()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(x - qtnode-&gt;GetConceptItem()-&gt;pos().x()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - qtnode-&gt;pos().y()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - qtnode-&gt;GetNode()-&gt;GetY()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(y - qtnode-&gt;GetConceptItem()-&gt;pos().y()) &lt; epsilon);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Put the edge concepts in the middle of the nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem *&gt; qtedge_concepts = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(qtedge_concepts.begin(), qtedge_concepts.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](QtConceptMapEdgeItem * const qtedge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const QPointF p((qtedge-&gt;GetFrom()-&gt;pos() + qtedge-&gt;GetTo()-&gt;pos()) / 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = p.x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = p.y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//qtedge-&gt;GetEdge()-&gt;SetX(new_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//qtedge-&gt;GetEdge()-&gt;SetY(new_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;SetPos(new_x,new_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.000001;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(qtedge-&gt;pos().x() - qtedge-&gt;GetEdge()-&gt;GetX()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::abs(qtedge-&gt;pos().y() - qtedge-&gt;GetEdge()-&gt;GetY()) &lt; epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Put the nodes around the focal question in their improved position<br/>
&nbsp;&nbsp;//If there is no focal node, the non-focal nodes are put around an empty spot<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bool done = true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem *&gt; qtnodes = Sort(Collect&lt;QtConceptMapNodeItem&gt;(scene()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!qtnodes.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(qtnodes[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsCenterNode(qtnodes[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem* &gt; qtedges = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const QtConceptMapNodeItem * const center_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= dynamic_cast&lt;const QtConceptMapNodeItem *&gt;(qtnodes[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(center_node);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;QtRoundedEditRectItem*&gt; nodes_and_edges;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(qtnodes.begin(),qtnodes.end(),std::back_inserter(nodes_and_edges));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsCenterNode(nodes_and_edges[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(qtedges.begin(),qtedges.end(),std::back_inserter(nodes_and_edges));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Move the nodes away from the center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes_and_edges.begin() + 1, //+1 to skip the center node at [0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes_and_edges.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[center_node,&amp;done](QtRoundedEditRectItem* const node_or_edge)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (center_node-&gt;boundingRect().intersects(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_or_edge-&gt;boundingRect().translated(-node_or_edge-&gt;pos())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double cur_x = node_or_edge-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double cur_y = node_or_edge-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_x = cur_x + (node_or_edge-&gt;pos().x() &lt; center_node-&gt;pos().x() ? -1.0 : 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_y = cur_y + (node_or_edge-&gt;pos().y() &lt; center_node-&gt;pos().y() ? -1.0 : 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (QtConceptMapNodeItem * const qtnode = dynamic_cast&lt;QtConceptMapNodeItem *&gt;(node_or_edge))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;GetNode()-&gt;SetX(new_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;GetNode()-&gt;SetY(new_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QtConceptMapEdgeItem * const qtedge = dynamic_cast&lt;QtConceptMapEdgeItem *&gt;(node_or_edge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(qtedge &amp;&amp; "Every item is either a Qt node or Qt edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;SetX(new_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtedge-&gt;GetEdge()-&gt;SetY(new_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//node-&gt;setPos(QPointF(new_x,new_y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (done) break;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::cmap::QtConceptMapWidget::SetExamplesItem(QtConceptMapExamplesItem * const item)<br/>
{<br/>
&nbsp;&nbsp;assert((item || !item) &amp;&amp; "Can be both");<br/>
&nbsp;&nbsp;m_examples_item = item;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapWidget::Shuffle()<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem*&gt; nodes = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;std::for_each(nodes.begin(),nodes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](QtConceptMapNodeItem* qtnode)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsCenterNode(qtnode))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x = qtnode-&gt;pos().x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double y = qtnode-&gt;pos().y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int i = (std::rand() &gt;&gt; 4) % 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0: x+= 1.0; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1: y+= 1.0; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: x+=-1.0; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3: y+=-1.0; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(QPointF(x,y) != qtnode-&gt;pos());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtnode-&gt;SetPos(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;scene()-&gt;update();<br/>
}<br/>
#endif<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::cmap::QtConceptMapWidget::TestMe(const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; map) const<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::set&lt;const cmap::Node*&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt; v = map-&gt;GetNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::inserter(w,w.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Node&gt;&nbsp;&nbsp;ptr)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ptr.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == w.size() &amp;&amp; "All nodes must be unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::set&lt;const cmap::Edge*&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const cmap::Edge&gt; &gt; v = map-&gt;GetEdges();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(v.begin(),v.end(),std::inserter(w,w.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;const cmap::Edge&gt;&nbsp;&nbsp;ptr)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ptr.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == w.size() &amp;&amp; "All edges must be unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::set&lt;QtConceptMapItem*&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapNodeItem*&gt; node_concepts = Collect&lt;QtConceptMapNodeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(node_concepts.begin(),node_concepts.end(),std::inserter(v,v.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; edge_concepts = Collect&lt;QtConceptMapEdgeItem&gt;(scene());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(edge_concepts.begin(),edge_concepts.end(),std::inserter(v,v.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == (node_concepts.size() + edge_concepts.size()) &amp;&amp; "All Qt nodes must be unique");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///Note that the ConceptMap read out again differs from the original,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///because the Nodes are placed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!cmap::ConceptMap::HasSameContent(*GetConceptMap(),*map))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OH OH, AN ERROR! HELP ME OUT AND GIMME LOTS OF DEBUG INFO!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= cmap::XmlToPretty(cmap::ConceptMap::ToXml(map));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "original map:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.end(),std::ostream_iterator&lt;std::string&gt;(std::clog,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= cmap::XmlToPretty(cmap::ConceptMap::ToXml(GetConceptMap()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "GetConceptMap():\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.end(),std::ostream_iterator&lt;std::string&gt;(std::clog,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(cmap::ConceptMap::ToXml(GetConceptMap()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(cmap::ConceptMap::ToXml(map));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(cmap::ConceptMap::HasSameContent(*GetConceptMap(),*map)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "The concept map supplied must be homomorphous to the one created in the widget");<br/>
<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtConceptMap/qtconceptmapwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtConceptMap/qtconceptmapwidget.h" border = "1"><tr><td><code>
#ifndef QTPVDBCONCEPTMAPWIDGET_H<br/>
#define QTPVDBCONCEPTMAPWIDGET_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "qtkeyboardfriendlygraphicsview.h"<br/>
#include "qtconceptmapfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace cmap {<br/>
<br/>
//An ABC View with a ConceptMap as the Model<br/>
class QtConceptMapWidget : public ribi::QtKeyboardFriendlyGraphicsView<br/>
{<br/>
&nbsp;&nbsp;Q_OBJECT<br/>
<br/>
public:<br/>
&nbsp;&nbsp;explicit QtConceptMapWidget(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; concept_map,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QWidget* parent = 0);<br/>
&nbsp;&nbsp;QtConceptMapWidget(const QtConceptMapWidget&amp;) = delete;<br/>
&nbsp;&nbsp;QtConceptMapWidget&amp; operator=(const QtConceptMapWidget&amp;) = delete;<br/>
&nbsp;&nbsp;virtual ~QtConceptMapWidget() noexcept;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Creates a new derived class<br/>
&nbsp;&nbsp;///A simpler alternative to Clone (see above)<br/>
&nbsp;&nbsp;virtual std::unique_ptr&lt;QtConceptMapWidget&gt; CreateNewDerived() const = 0;<br/>
<br/>
&nbsp;&nbsp;///Do something random, used in debugging<br/>
&nbsp;&nbsp;virtual void DoRandomStuff() = 0;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Obtain the concept map<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; GetConceptMap() const { return m_concept_map; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::cmap::ConceptMap&gt; GetConceptMap()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return m_concept_map; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the read-only Qt edge items<br/>
&nbsp;&nbsp;///Read-and-write Qt edge items are only supported for QtConceptMapEditWidget<br/>
&nbsp;&nbsp;const std::vector&lt;const QtConceptMapEdgeItem *&gt; GetQtEdges() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the read-only Qt node items<br/>
&nbsp;&nbsp;///Read-and-write Qt node items are only supported for QtConceptMapEditWidget<br/>
&nbsp;&nbsp;const std::vector&lt;const QtConceptMapNodeItem *&gt; GetQtNodes() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the QGraphicsScene<br/>
&nbsp;&nbsp;QGraphicsScene* GetScene() const;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Shuffle the concepts (used in debugging)<br/>
&nbsp;&nbsp;void Shuffle();<br/>
<br/>
&nbsp;&nbsp;///Test this class with a derived class instance<br/>
&nbsp;&nbsp;static void Test(const boost::shared_ptr&lt;const QtConceptMapWidget&gt;&amp; widget);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
public slots:<br/>
<br/>
&nbsp;&nbsp;virtual void keyPressEvent(QKeyEvent *event) noexcept;<br/>
<br/>
protected:<br/>
<br/>
&nbsp;&nbsp;///Adds an Edge and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;///Edge cannot be const, as an Edge has a Concept that the user might want to edit<br/>
&nbsp;&nbsp;virtual void AddEdge(const boost::shared_ptr&lt;ribi::cmap::Edge&gt; edge) = 0;<br/>
<br/>
&nbsp;&nbsp;///Adds a node and connects (some of) its signals to slots present in the derived classes<br/>
&nbsp;&nbsp;///It returns (the derived class of) the QtPvdbNodeConcept added to the scene<br/>
&nbsp;&nbsp;virtual QtConceptMapNodeItem * AddNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node) = 0;<br/>
<br/>
&nbsp;&nbsp;///Initialize the widget with the loaded concept map<br/>
&nbsp;&nbsp;///BuildQtConceptMap changes the concept map entered, by changing some GUI<br/>
&nbsp;&nbsp;///elements (coordinats of the nodes, for example).<br/>
&nbsp;&nbsp;///Instead of using IsEqual use HasSameContent<br/>
&nbsp;&nbsp;void BuildQtConceptMap();<br/>
<br/>
&nbsp;&nbsp;///Remove all Qt and non-Qt items and add new ones<br/>
&nbsp;&nbsp;virtual void CleanMe() = 0;<br/>
<br/>
&nbsp;&nbsp;///Get all the edges connected to the concept<br/>
&nbsp;&nbsp;const std::vector&lt;QtConceptMapEdgeItem*&gt; FindEdges(const QtConceptMapNodeItem * const from) const;<br/>
<br/>
&nbsp;&nbsp;//Find the edge with the same from and to<br/>
&nbsp;&nbsp;const QtConceptMapEdgeItem * FindQtEdge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const QtConceptMapNodeItem* const from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const QtConceptMapNodeItem* const to) const;<br/>
<br/>
&nbsp;&nbsp;///Find the QtNode containing the Node<br/>
&nbsp;&nbsp;QtConceptMapNodeItem * FindQtNode(const boost::shared_ptr&lt;ribi::cmap::Node&gt; node) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the center node<br/>
&nbsp;&nbsp;const QtConceptMapNodeItem * GetCenterNode() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the rectangle with text showing the examples<br/>
&nbsp;&nbsp;const QtConceptMapExamplesItem * GetExamplesItem() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the rectangle with text showing the examples<br/>
&nbsp;&nbsp;QtConceptMapExamplesItem * GetExamplesItem();<br/>
<br/>
&nbsp;&nbsp;///Obtain the first QtConceptMapNodeItem under the cursor<br/>
&nbsp;&nbsp;///Returns nullptr if none is present<br/>
&nbsp;&nbsp;QtConceptMapNodeItem* GetItemBelowCursor(const QPointF&amp; pos) const;<br/>
<br/>
&nbsp;&nbsp;///Check if this item is the center node<br/>
&nbsp;&nbsp;static bool IsCenterNode(const QGraphicsItem* const item);<br/>
<br/>
&nbsp;&nbsp;///Have the nodes in the concept map be positioned once already, or must<br/>
&nbsp;&nbsp;///these be (re)positioned. '(re)', because the nodes are initially positioned at the origin<br/>
&nbsp;&nbsp;bool MustReposition(const std::vector&lt;boost::shared_ptr&lt;const cmap::Node&gt; &gt;&amp; nodes) const;<br/>
<br/>
&nbsp;&nbsp;///All items from a ConceptMap are put in at the center and need to be repositioned<br/>
&nbsp;&nbsp;void RepositionItems();<br/>
<br/>
&nbsp;&nbsp;///Set the rectangle with text showing the examples<br/>
&nbsp;&nbsp;void SetExamplesItem(QtConceptMapExamplesItem * const item);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test the internals of this class:<br/>
&nbsp;&nbsp;///Does the current content really reflect the map<br/>
&nbsp;&nbsp;void TestMe(const boost::shared_ptr&lt;const ribi::cmap::ConceptMap&gt; map) const;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
private:<br/>
<br/>
&nbsp;&nbsp;///The concept map to work on, the Model<br/>
&nbsp;&nbsp;///m_concept_map-&gt;GetNodes()[0] contains the focal node<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::cmap::ConceptMap&gt; m_concept_map;<br/>
<br/>
&nbsp;&nbsp;///The item showing the examples<br/>
&nbsp;&nbsp;QtConceptMapExamplesItem * m_examples_item;<br/>
<br/>
&nbsp;&nbsp;///Implemention of OnItemUpdateRequest<br/>
&nbsp;&nbsp;virtual void OnItemRequestUpdateImpl(const QGraphicsItem* const item) = 0;<br/>
<br/>
public slots:<br/>
<br/>
&nbsp;&nbsp;///Called whenever a concept is clicked or moved<br/>
&nbsp;&nbsp;///If item is nullptr, the last item might be deleted<br/>
&nbsp;&nbsp;///Use QGraphicsItem* due to QtKeyboardFriendlyGraphicsView working on QGraphicsItems<br/>
&nbsp;&nbsp;///Is implemented by OnItemUpdateRequestImpl<br/>
&nbsp;&nbsp;void OnItemRequestsUpdate(const QGraphicsItem* const item);<br/>
<br/>
&nbsp;&nbsp;///Called when an item requests a scene update<br/>
&nbsp;&nbsp;void OnRequestSceneUpdate();<br/>
};<br/>
<br/>
} //~namespace cmap<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // QTPVDBCONCEPTMAPWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
