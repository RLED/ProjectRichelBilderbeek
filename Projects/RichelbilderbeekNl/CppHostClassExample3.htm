<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>HostClassExample3</title>
  <meta name="description" content="C++ HostClassExample3"/>
  <meta name="keywords" content="C++ HostClassExample3 code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppHostClassExample3.htm">HostClassExample3</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppHostClassExample3-->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppHostClassExample3.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppHostClassExample3.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a><br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppFstreamH.html">fstream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppStruct.html">struct</a></b> CheckPolicyNotEmpty<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Check(<b><a href="CppConst.html">const</a></b> T&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!s.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Object must not be empty");<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;~CheckPolicyNotEmpty()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> The <a href="CppDestructor.html">destructor</a> of a policy <b><a href="CppClass.html">class</a></b> should be <b><a href="CppProtected.html">protected</a></b> and non-<b><a href="CppVirtual.html">virtual</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> * <a href="CppHerbSutter.html">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.html">Andrei Alexandrescu</a>. <a href="Cpp.htm">C++</a> coding standards: 101 rules,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; guidelines, and best practices. ISBN: 0-32-111358-6. Item 50: 'Make<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; <a href="CppBaseClass.html">base class</a> <a href="CppDestructor.html">destructor</a>s <b><a href="CppPublic.html">public</a></b> and <b><a href="CppVirtual.html">virtual</a></b>, or <b><a href="CppProtected.html">protected</a></b> and non<b><a href="CppVirtual.html">virtual</a></b>'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> * <a href="CppAndreiAlexandrescu.html">Andrei Alexandrescu</a>. Modern <a href="Cpp.htm">C++</a> Design. 2001. ISBN: 0201704315.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; Page 13. Section 1.7: 'The lightweight, effective solution that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; policies should use is to define a non<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppProtected.html">protected</a></b> <a href="CppDestructor.html">destructor</a>'<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
<b><a href="CppStruct.html">struct</a></b> CheckPolicyNotNull<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Check(<b><a href="CppConst.html">const</a></b> T&amp; p)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(p <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "<a href="CppPointer.html">Pointer</a> must not be null");<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;~CheckPolicyNotNull()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> The <a href="CppDestructor.html">destructor</a> of a policy <b><a href="CppClass.html">class</a></b> should be <b><a href="CppProtected.html">protected</a></b> and non-<b><a href="CppVirtual.html">virtual</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> * <a href="CppHerbSutter.html">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.html">Andrei Alexandrescu</a>. <a href="Cpp.htm">C++</a> coding standards: 101 rules,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; guidelines, and best practices. ISBN: 0-32-111358-6. Item 50: 'Make<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; <a href="CppBaseClass.html">base class</a> <a href="CppDestructor.html">destructor</a>s <b><a href="CppPublic.html">public</a></b> and <b><a href="CppVirtual.html">virtual</a></b>, or <b><a href="CppProtected.html">protected</a></b> and non<b><a href="CppVirtual.html">virtual</a></b>'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> * <a href="CppAndreiAlexandrescu.html">Andrei Alexandrescu</a>. Modern <a href="Cpp.htm">C++</a> Design. 2001. ISBN: 0201704315.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; Page 13. Section 1.7: 'The lightweight, effective solution that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; policies should use is to define a non<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppProtected.html">protected</a></b> <a href="CppDestructor.html">destructor</a>'<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Manager keeps a <a href="CppVector.html">std::vector</a> in a valid state<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T, <b><a href="CppTypename.html">typename</a></b> CheckPolicy&gt;<br/>
<b><a href="CppStruct.html">struct</a></b> Manager : <b><a href="CppPublic.html">public</a></b> CheckPolicy<br/>
{<br/>
&nbsp;&nbsp;Manager(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;T&gt;&amp; v) : m_v(v) { CheckAll(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;T&gt; m_v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CheckAll()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.html">const</a></b> T&amp; t: m_v) <b><a href="CppThis.htm">this</a></b>-&gt;Check(t);<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b> *&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> { <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b> };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b> *&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> { <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>, <b><a href="CppNullptr.html">nullptr</a></b> }; <a href="CppComment.htm">//</a><b><a href="CppNullptr.html">nullptr</a></b> will be detected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Manager&lt;<b><a href="CppInt.htm">int</a></b> *, CheckPolicyNotNull&lt;<b><a href="CppInt.htm">int</a></b> *&gt; &gt; <a href="CppPointer.html">pointer</a>s( v );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> * p: v) <b><a href="CppDelete.html">delete</a></b> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Manager&lt;<a href="CppString.html">std::string</a>, CheckPolicyNotEmpty&lt;<a href="CppString.html">std::string</a>&gt; &gt; strings(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ "1", "12", "123" } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> Manager&lt;<a href="CppString.html">std::string</a>, CheckPolicyNotEmpty&lt;<a href="CppString.html">std::string</a>&gt; &gt; strings(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;{ "1", "12", "" } ); <a href="CppComment.htm">//</a>empty <a href="CppString.html">std::string</a> will be detected<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
