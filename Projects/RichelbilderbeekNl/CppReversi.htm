<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Reversi</title>
  <meta name="description" content="C++ Reversi"/>
  <meta name="keywords" content="C++ Reversi "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppReversi.htm">Reversi</a></h1>
<p>&nbsp;</p>
<h2>./CppReversi/CppReversi.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/CppReversi.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/reversiwidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/reversimove.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/reversiboard.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/reversiwidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/reversimove.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/reversiboard.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/reversifwd.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppReversi/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/reversiboard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/reversiboard.cpp" border = "1"><tr><td><code>
#include "reversiboard.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/foreach.hpp&gt;<br/>
<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::reversi::Board::Board(const int size)<br/>
&nbsp;&nbsp;: m_board(size,std::vector&lt;int&gt;(size,empty))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(size &gt; 0);<br/>
&nbsp;&nbsp;assert(size == this-&gt;GetSize());<br/>
&nbsp;&nbsp;assert(m_board.size() == m_board[0].size() );<br/>
<br/>
&nbsp;&nbsp;const int x = size / 2 - 1;<br/>
&nbsp;&nbsp;const int y = size / 2 - 1;<br/>
&nbsp;&nbsp;Set(x&nbsp;&nbsp;,y&nbsp;&nbsp;,player1);<br/>
&nbsp;&nbsp;Set(x+1,y&nbsp;&nbsp;,player2);<br/>
&nbsp;&nbsp;Set(x&nbsp;&nbsp;,y+1,player2);<br/>
&nbsp;&nbsp;Set(x+1,y+1,player1);<br/>
}<br/>
<br/>
/*<br/>
ribi::reversi::Board::Board(const Board&amp; other)<br/>
&nbsp;&nbsp;: m_board(other.m_board)<br/>
{<br/>
<br/>
}<br/>
ribi::reversi::Board&amp; ribi::reversi::Board::operator=(const Board&amp; other)<br/>
{<br/>
&nbsp;&nbsp;m_board = other.m_board;<br/>
&nbsp;&nbsp;return *this;<br/>
}<br/>
*/<br/>
<br/>
bool ribi::reversi::Board::CanDoMove(const int x, const int y, const int player) const noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(x &gt;= 0);<br/>
&nbsp;&nbsp;assert(y &gt;= 0);<br/>
&nbsp;&nbsp;assert(x &lt; this-&gt;GetSize());<br/>
&nbsp;&nbsp;assert(y &lt; this-&gt;GetSize());<br/>
&nbsp;&nbsp;if (Get(x,y) != empty) return false;<br/>
&nbsp;&nbsp;for (const std::pair&lt;int,int&gt; d: CreateDeltas())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int cur_x = x + d.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int cur_y = y + d.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Must be a valid direction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (cur_x &lt; 0 || cur_y &lt; 0 || cur_x &gt;= GetSize() || cur_y &gt;= GetSize()) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Adjacent square must be of opponent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (Get(cur_x,cur_y) != GetOtherPlayer(player)) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Get(cur_x,cur_y) != empty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Follow the trail until<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - player is found -&gt; Can do move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - empty is found -&gt; Cannot do move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - other player is found -&gt; Search on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur_x += d.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur_y += d.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Must be a valid direction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cur_x &lt; 0 || cur_y &lt; 0 || cur_x &gt;= GetSize() || cur_y &gt;= GetSize()) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Get(cur_x,cur_y) == empty) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Get(cur_x,cur_y) == player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return false;<br/>
}<br/>
<br/>
int ribi::reversi::Board::Count(const int player) const noexcept<br/>
{<br/>
&nbsp;&nbsp;const int size = GetSize();<br/>
<br/>
&nbsp;&nbsp;int sum = 0;<br/>
<br/>
&nbsp;&nbsp;for (int y=0; y!=size; ++y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=size; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Get(x,y) == player) ++sum;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return sum;<br/>
}<br/>
<br/>
const std::vector&lt;std::pair&lt;int,int&gt;&gt; ribi::reversi::Board::CreateDeltas() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;int,int&gt;&gt; v;<br/>
&nbsp;&nbsp;for (int dx = -1; dx != 2; ++dx)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int dy = -1; dy != 2; ++dy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dx != 0 || dy != 0) v.push_back( std::make_pair(dx,dy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(v.size() == 8);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
void ribi::reversi::Board::DoMove(const int x, const int y, const int player) noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(CanDoMove(x,y,player));<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const Board before(*this);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Collect the deltas tomodify the color<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;int,int&gt;&gt; v;<br/>
&nbsp;&nbsp;for (const std::pair&lt;int,int&gt; d: CreateDeltas())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int cur_x = x + d.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int cur_y = y + d.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Must be a valid direction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (cur_x &lt; 0 || cur_y &lt; 0 || cur_x &gt;= GetSize() || cur_y &gt;= GetSize()) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Adjacent square must be of opponent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (Get(cur_x,cur_y) != GetOtherPlayer(player)) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Get(cur_x,cur_y) != empty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Follow the trail until<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - player is found -&gt; Can do move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - empty is found -&gt; Cannot do move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - other player is found -&gt; Search on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur_x += d.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur_y += d.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Must be a valid direction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cur_x &lt; 0 || cur_y &lt; 0 || cur_x &gt;= GetSize() || cur_y &gt;= GetSize()) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Get(cur_x,cur_y) == empty) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Get(cur_x,cur_y) == player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(d); //Found delta<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; //Next delta<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!v.empty());<br/>
<br/>
&nbsp;&nbsp;for (const std::pair&lt;int,int&gt; d: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int cur_x = x + d.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int cur_y = y + d.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Adjacent square must be of opponent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Get(cur_x,cur_y) == GetOtherPlayer(player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Set(cur_x,cur_y,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Follow the trail until<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// - player is found -&gt; Can do move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur_x += d.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur_y += d.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Must be a valid direction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!(cur_x &lt; 0 || cur_y &lt; 0 || cur_x &gt;= GetSize() || cur_y &gt;= GetSize()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Get(cur_x,cur_y) == player) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Get(cur_x,cur_y) == GetOtherPlayer(player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set(cur_x,cur_y,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Set(x,y,player);<br/>
}<br/>
<br/>
int ribi::reversi::Board::Get(const int x, const int y) const noexcept<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const int sz = GetSize();<br/>
&nbsp;&nbsp;assert(x &gt;= 0);<br/>
&nbsp;&nbsp;assert(y &gt;= 0);<br/>
&nbsp;&nbsp;assert(x &lt; sz);<br/>
&nbsp;&nbsp;assert(y &lt; sz);<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return m_board[y][x];<br/>
}<br/>
<br/>
const std::string ribi::reversi::Board::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::reversi::Board::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2007-09-24: version 1.0: initial version developed under C++ Builder, called Reversi",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-09-24: version 1.1: initial port to Qt Creator",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-12-19: version 2.0: split interface in reversi::Board and reversi::Widget",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
void ribi::reversi::Board::Set(const int x, const int y, const int state) noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(x&gt;=0 &amp;&amp; x &lt; GetSize());<br/>
&nbsp;&nbsp;assert(y&gt;=0 &amp;&amp; y &lt; GetSize());<br/>
&nbsp;&nbsp;m_board[y][x] = state;<br/>
&nbsp;&nbsp;assert(Get(x,y)==state);<br/>
}<br/>
<br/>
int ribi::reversi::Board::GetOtherPlayer(const int player) noexcept<br/>
{<br/>
&nbsp;&nbsp;switch (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case player1: return player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case player2: return player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Board::GetOtherPlayer: unknown player");<br/>
}<br/>
<br/>
<br/>
const std::vector&lt;std::pair&lt;int,int&gt;&gt; ribi::reversi::Board::GetValidMoves(const int player) const noexcept<br/>
{<br/>
&nbsp;&nbsp;const int size = GetSize();<br/>
&nbsp;&nbsp;std::vector&lt; std::pair&lt;int,int&gt; &gt; v;<br/>
&nbsp;&nbsp;for (int y=0; y!=size; ++y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=size; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CanDoMove(x,y,player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back( std::make_pair(x,y) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
int ribi::reversi::Board::GetSize() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_board.size();<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::reversi::Board::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Starting ribi::reversi::Board::Test()");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Board r(4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.Get(1,1) == Board::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.Get(1,2) == Board::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.Get(2,1) == Board::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.Get(2,2) == Board::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.Get(0,0) == Board::empty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.Get(2,0) == Board::empty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.CanDoMove(2,0,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.CanDoMove(3,1,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.CanDoMove(0,2,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.CanDoMove(1,3,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.GetValidMoves(Board::player1).size() == 4);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//operator==<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Board r(5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Board s(5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r == s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.Set(0,0,player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r != s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//operator&lt;&lt;<br/>
&nbsp;&nbsp;for (int sz=4; sz!=10; ++sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Board r(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Board t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &gt;&gt; t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r == t);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; "1112." &lt;&lt; '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "111.." &lt;&lt; '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "112.." &lt;&lt; '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "1.2.." &lt;&lt; '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "1.2..";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Board r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &gt;&gt; r;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( r.CanDoMove(4,0,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( r.CanDoMove(3,2,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( r.CanDoMove(3,3,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( r.CanDoMove(3,4,Board::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!r.CanDoMove(3,1,Board::player1));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Play random games<br/>
&nbsp;&nbsp;for (int sz = 4; sz != 10; ++sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Board r(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int player = Board::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (!r.GetValidMoves(player).empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::pair&lt;int,int&gt;&gt; m {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.GetValidMoves(player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::random_shuffle(m.begin(),m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;int,int&gt; move = m[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.CanDoMove(move.first,move.second,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.DoMove(move.first,move.second,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player = GetOtherPlayer(player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Finished ribi::reversi::Board::Test()");<br/>
}<br/>
#endif<br/>
<br/>
bool ribi::reversi::operator==(const ribi::reversi::Board&amp; lhs, const ribi::reversi::Board&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return lhs.GetBoard() == rhs.GetBoard();<br/>
}<br/>
<br/>
bool ribi::reversi::operator!=(const ribi::reversi::Board&amp; lhs, const ribi::reversi::Board&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
<br/>
std::ostream&amp; ribi::reversi::operator&lt;&lt;(std::ostream&amp; os, const ribi::reversi::Board&amp; r)<br/>
{<br/>
&nbsp;&nbsp;for(const std::vector&lt;int&gt;&amp; line: r.m_board)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::transform(line.begin(),line.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::ostream_iterator&lt;std::string&gt;(os,""),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const int square)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (square)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Board::empty&nbsp;&nbsp;: return ".";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Board::player1: return "1";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Board::player2: return "2";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("operator&lt;&lt;(std::ostream&amp; os, const Board&amp; r): Unknown square type");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
<br/>
std::istream&amp; ribi::reversi::operator&gt;&gt;(std::istream&amp; is, ribi::reversi::Board&amp; r)<br/>
{<br/>
&nbsp;&nbsp;TRACE_FUNC();<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Read first line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is &gt;&gt; s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Read next lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int size = static_cast&lt;int&gt;(v[0].size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=1; i!=size; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is &gt;&gt; s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.size() == v[0].size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(size == static_cast&lt;int&gt;(v.size()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;r = Board(static_cast&lt;int&gt;(v.size()));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int size = static_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int y=0; y!=size; ++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; line = v[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=size; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char c = line[x];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '1': r.Set(x,y,Board::player1); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '2': r.Set(x,y,Board::player2); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '.': r.Set(x,y,Board::empty); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/reversiboard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/reversiboard.h" border = "1"><tr><td><code>
#ifndef REVERSIBOARD_H<br/>
#define REVERSIBOARD_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
namespace reversi {<br/>
<br/>
///Board is a reversi board with the most level interface as possible.<br/>
///Board does not know the current player and Board cannot undo its moves<br/>
///For a higher level interface, use Widget<br/>
struct Board<br/>
{<br/>
&nbsp;&nbsp;enum { empty&nbsp;&nbsp; = 0};<br/>
&nbsp;&nbsp;enum { player1 = 1};<br/>
&nbsp;&nbsp;enum { player2 = 2};<br/>
<br/>
&nbsp;&nbsp;Board(const int size = 10);<br/>
&nbsp;&nbsp;//Board(const Board&amp; other);<br/>
&nbsp;&nbsp;//Board&amp; operator=(const Board&amp; other);<br/>
&nbsp;&nbsp;//~Board() noexcept {}<br/>
<br/>
&nbsp;&nbsp;bool CanDoMove(const int x, const int y, const int player) const noexcept;<br/>
<br/>
&nbsp;&nbsp;int Count(const int player) const noexcept;<br/>
<br/>
&nbsp;&nbsp;void DoMove(const int x, const int y, const int player) noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt;&amp; GetBoard() const noexcept { return m_board; }<br/>
<br/>
&nbsp;&nbsp;int Get(const int x, const int y) const noexcept;<br/>
<br/>
&nbsp;&nbsp;int GetSize() const noexcept;<br/>
<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt; std::pair&lt;int,int&gt; &gt; GetValidMoves(const int player) const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Simply sets a square, without any checking<br/>
&nbsp;&nbsp;void Set(const int x, const int y, const int state) noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;int&gt; &gt; m_board;<br/>
<br/>
&nbsp;&nbsp;///Create the delta-x and delta-y to search in the 8 directions<br/>
&nbsp;&nbsp;static const std::vector&lt;std::pair&lt;int,int&gt;&gt; CreateDeltas() noexcept;<br/>
<br/>
&nbsp;&nbsp;static int GetOtherPlayer(const int player) noexcept;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Board&amp; r);<br/>
};<br/>
<br/>
bool operator==(const Board&amp; lhs, const Board&amp; rhs);<br/>
bool operator!=(const Board&amp; lhs, const Board&amp; rhs);<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Board&amp; r);<br/>
std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Board&amp; r);<br/>
<br/>
} //~namespace reversi<br/>
} //~namespace ribi<br/>
<br/>
#endif // REVERSIBOARD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/reversifwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/reversifwd.h" border = "1"><tr><td><code>
#ifndef REVERSIFWD_H<br/>
#define REVERSIFWD_H<br/>
<br/>
namespace ribi {<br/>
namespace reversi {<br/>
<br/>
struct Board;<br/>
struct Move;<br/>
struct Widget;<br/>
<br/>
} //namespace reversi<br/>
} //namespace ribi<br/>
<br/>
#endif // REVERSIFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/reversimove.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/reversimove.cpp" border = "1"><tr><td><code>
#include "reversimove.h"<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const std::string ribi::reversi::MovePlacePiece::ToStr() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; this-&gt;GetX() &lt;&lt; ',' &lt;&lt; this-&gt;GetY();<br/>
&nbsp;&nbsp;return s.str();<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::reversi::Move&gt; ribi::reversi::Move::Parse(<br/>
&nbsp;&nbsp;const std::string&amp; s) noexcept<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;ribi::reversi::Move&gt; move;<br/>
<br/>
&nbsp;&nbsp;if (s.empty()) return move;<br/>
&nbsp;&nbsp;if (s == "p" || s == "P" || s == "pass" || s == "Pass" || s == "PASS")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;move.reset(new MovePass);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return move;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::size_t i = s.find(',');<br/>
&nbsp;&nbsp;if (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i != std::string::npos<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; i != 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; i != s.size() - 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::count(s.begin(),s.end(),',') == 1<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string a = s.substr(0,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string b = s.substr(i + 1,s.size() - i - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(a.begin(),a.end(),',') == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(b.begin(),b.end(),',') == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = boost::lexical_cast&lt;int&gt;(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int y = boost::lexical_cast&lt;int&gt;(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;move.reset(new MovePlacePiece(x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return move;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(move || !move);<br/>
&nbsp;&nbsp;return move;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/reversimove.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/reversimove.h" border = "1"><tr><td><code>
#ifndef REVERSIMOVE_H<br/>
#define REVERSIMOVE_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace reversi {<br/>
<br/>
struct Move<br/>
{<br/>
&nbsp;&nbsp;virtual ~Move() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///Create a Move from a std::string<br/>
&nbsp;&nbsp;///Returns a nullptr if the Move cannot be parsed<br/>
&nbsp;&nbsp;///<br/>
&nbsp;&nbsp;///Notation:<br/>
&nbsp;&nbsp;///- x,y -&gt; MovePlacePiece<br/>
&nbsp;&nbsp;///- [empty] -&gt; MovePass<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Move&gt; Parse(const std::string&amp; s) noexcept;<br/>
<br/>
&nbsp;&nbsp;virtual const std::string ToStr() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
};<br/>
<br/>
struct MovePlacePiece : public Move<br/>
{<br/>
&nbsp;&nbsp;MovePlacePiece(const int x, const int y) : m_x(x), m_y(y) {}<br/>
<br/>
&nbsp;&nbsp;int GetX() const noexcept { return m_x; }<br/>
&nbsp;&nbsp;int GetY() const noexcept { return m_y; }<br/>
<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;const int m_x;<br/>
&nbsp;&nbsp;const int m_y;<br/>
};<br/>
<br/>
struct MovePass : public Move<br/>
{<br/>
&nbsp;&nbsp;MovePass() {}<br/>
<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept { return "pass"; }<br/>
};<br/>
<br/>
<br/>
} //~namespace reversi<br/>
} //~namespace ribi<br/>
<br/>
#endif // REVERSIMOVE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/reversiwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/reversiwidget.cpp" border = "1"><tr><td><code>
#include "reversiwidget.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/foreach.hpp&gt;<br/>
<br/>
#include "reversimove.h"<br/>
#include "reversiboard.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
static_assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; static_cast&lt;int&gt;(ribi::reversi::Widget::empty&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;== static_cast&lt;int&gt;(ribi::reversi::Board::empty&nbsp;&nbsp;),"enums must have same value");<br/>
static_assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; static_cast&lt;int&gt;(ribi::reversi::Widget::player1)<br/>
&nbsp;&nbsp;== static_cast&lt;int&gt;(ribi::reversi::Board::player1),"enums must have same value");<br/>
static_assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; static_cast&lt;int&gt;(ribi::reversi::Widget::player2)<br/>
&nbsp;&nbsp;== static_cast&lt;int&gt;(ribi::reversi::Board::player2),"enums must have same value");<br/>
<br/>
ribi::reversi::Widget::Widget(const int size)<br/>
&nbsp;&nbsp;: m_board(new Board(size)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_player(player1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_undo{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(size &gt; 0);<br/>
&nbsp;&nbsp;assert(size == m_board-&gt;GetSize());<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const int x = size / 2 - 1;<br/>
&nbsp;&nbsp;const int y = size / 2 - 1;<br/>
&nbsp;&nbsp;assert(m_board-&gt;Get(x&nbsp;&nbsp;,y&nbsp;&nbsp;) == player1);<br/>
&nbsp;&nbsp;assert(m_board-&gt;Get(x+1,y&nbsp;&nbsp;) == player2);<br/>
&nbsp;&nbsp;assert(m_board-&gt;Get(x&nbsp;&nbsp;,y+1) == player2);<br/>
&nbsp;&nbsp;assert(m_board-&gt;Get(x+1,y+1) == player1);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
bool ribi::reversi::Widget::CanDoMove(const boost::shared_ptr&lt;const ribi::reversi::Move&gt; move) const noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;if (boost::dynamic_pointer_cast&lt;const ribi::reversi::MovePass&gt;(move))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Can always pass for now<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::reversi::MovePlacePiece&gt; place {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::dynamic_pointer_cast&lt;const ribi::reversi::MovePlacePiece&gt;(move)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(place);<br/>
&nbsp;&nbsp;return CanDoMove(place-&gt;GetX(),place-&gt;GetY());<br/>
}<br/>
<br/>
bool ribi::reversi::Widget::CanDoMove(const int x, const int y) const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanDoMove(x,y,GetCurrentPlayer());<br/>
}<br/>
<br/>
void ribi::reversi::Widget::DoMove(const boost::shared_ptr&lt;const ribi::reversi::Move&gt; move) noexcept<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;if(!CanDoMove(move))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(*this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(move-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(CanDoMove(move));<br/>
&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;if (boost::dynamic_pointer_cast&lt;const ribi::reversi::MovePass&gt;(move))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DoMovePass();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::reversi::MovePlacePiece&gt; place {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::dynamic_pointer_cast&lt;const ribi::reversi::MovePlacePiece&gt;(move)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(place);<br/>
&nbsp;&nbsp;assert(CanDoMove(place-&gt;GetX(),place-&gt;GetY()));<br/>
<br/>
&nbsp;&nbsp;//Undo<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Widget&gt; prev_widget {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Widget(*this)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_undo.push(std::make_pair(prev_widget,move));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DoMove(place-&gt;GetX(),place-&gt;GetY());<br/>
}<br/>
<br/>
<br/>
void ribi::reversi::Widget::DoMove(const int x, const int y) noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(GetBoard()-&gt;CanDoMove(x,y,GetCurrentPlayer()));<br/>
&nbsp;&nbsp;m_board-&gt;DoMove(x,y,GetCurrentPlayer());<br/>
&nbsp;&nbsp;TogglePlayer();<br/>
}<br/>
<br/>
void ribi::reversi::Widget::DoMovePass() noexcept<br/>
{<br/>
&nbsp;&nbsp;TogglePlayer();<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::reversi::Move&gt;&gt; ribi::reversi::Widget::GetValidMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt;&gt; moves;<br/>
&nbsp;&nbsp;for (const std::pair&lt;int,int&gt; p: m_board-&gt;GetValidMoves(GetCurrentPlayer()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; move {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new MovePlacePiece(p.first,p.second)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;moves.push_back(move);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; move_pass {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new MovePass<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;moves.push_back(move_pass);<br/>
&nbsp;&nbsp;return moves;<br/>
}<br/>
<br/>
const std::string ribi::reversi::Widget::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::reversi::Widget::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-12-19: version 1.0: split off from Reversi",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
void ribi::reversi::Widget::TogglePlayer()<br/>
{<br/>
&nbsp;&nbsp;switch (GetCurrentPlayer())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case player1: m_current_player = player2; return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case player2: m_current_player = player1; return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
int ribi::reversi::Widget::GetOtherPlayer() const noexcept<br/>
{<br/>
&nbsp;&nbsp;switch (GetCurrentPlayer())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case player1: return player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case player2: return player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("ribi::reversi::Widget::GetOtherPlayer: invalid player");<br/>
}<br/>
<br/>
int ribi::reversi::Widget::GetWinner() const noexcept<br/>
{<br/>
&nbsp;&nbsp;//static_assert(std::is_same&lt;ribi::reversi::Widget::player1,Board::player1&gt;(),"");<br/>
&nbsp;&nbsp;//If both players cannot do moves, count the tiles<br/>
&nbsp;&nbsp;if (GetBoard()-&gt;GetValidMoves(GetCurrentPlayer()).empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Board r(*m_board);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int other_player = GetOtherPlayer();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!r.GetValidMoves(other_player).empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::player1) == static_cast&lt;int&gt;(Board::player1),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::player2) == static_cast&lt;int&gt;(Board::player2),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int n_1 { r.Count(ribi::reversi::Widget::player1) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int n_2 { r.Count(ribi::reversi::Widget::player2) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n_1 &gt; n_2) return ribi::reversi::Widget::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n_2 &gt; n_1) return ribi::reversi::Widget::player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n_1 == n_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ribi::reversi::Widget::draw;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return ribi::reversi::Widget::empty;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::reversi::Widget::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Starting ribi::TestReversiMenuDialog::Test()");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::reversi::Widget r(4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.GetCurrentPlayer() == Board::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(r.GetValidMoves().size() == 5); //4 place moves and one pass<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Play random games<br/>
&nbsp;&nbsp;for (int sz = 4; sz != 10; ++sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::reversi::Widget r(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (r.GetValidMoves().size() &gt; 1) //Pass is always allowed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::empty&nbsp;&nbsp;) == static_cast&lt;int&gt;(Board::empty&nbsp;&nbsp;),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::player1) == static_cast&lt;int&gt;(Board::player1),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::player2) == static_cast&lt;int&gt;(Board::player2),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.GetWinner() == ribi::reversi::Widget::empty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::reversi::Move&gt;&gt; m {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.GetValidMoves()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::random_shuffle(m.begin(),m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::reversi::Move&gt; move = m[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.DoMove(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test undo functionality in a single game<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::reversi::Widget r(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while (r.GetValidMoves().size() &gt; 1) //Pass is always allowed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::empty&nbsp;&nbsp;) == static_cast&lt;int&gt;(Board::empty&nbsp;&nbsp;),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::player1) == static_cast&lt;int&gt;(Board::player1),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_assert(static_cast&lt;int&gt;(ribi::reversi::Widget::player2) == static_cast&lt;int&gt;(Board::player2),"enums must have same value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.GetWinner() == ribi::reversi::Widget::empty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;ribi::reversi::Move&gt;&gt; m {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.GetValidMoves()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::random_shuffle(m.begin(),m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::reversi::Move&gt; move = m[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Widget before(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.DoMove(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(before != r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.Undo();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(before == r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.DoMove(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Finished ribi::TestReversiMenuDialog::Test()");<br/>
}<br/>
#endif<br/>
<br/>
void ribi::reversi::Widget::Undo()<br/>
{<br/>
&nbsp;&nbsp;assert(!m_undo.empty());<br/>
&nbsp;&nbsp;this-&gt;m_board = (m_undo.top().first)-&gt;GetBoard();<br/>
&nbsp;&nbsp;this-&gt;m_current_player = (m_undo.top().first)-&gt;GetCurrentPlayer();<br/>
&nbsp;&nbsp;m_undo.pop();<br/>
}<br/>
<br/>
bool ribi::reversi::operator==(const ribi::reversi::Widget&amp; lhs, const ribi::reversi::Widget&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return *lhs.GetBoard() == *rhs.GetBoard()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetCurrentPlayer() == rhs.GetCurrentPlayer();<br/>
}<br/>
<br/>
bool ribi::reversi::operator!=(const ribi::reversi::Widget&amp; lhs, const ribi::reversi::Widget&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
<br/>
std::ostream&amp; ribi::reversi::operator&lt;&lt;(std::ostream&amp; os, const ribi::reversi::Widget&amp; r)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; *r.GetBoard()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; r.GetCurrentPlayer();<br/>
<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppReversi/reversiwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppReversi/reversiwidget.h" border = "1"><tr><td><code>
#ifndef REVERSIWIDGET_H<br/>
#define REVERSIWIDGET_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;stack&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "reversifwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace reversi {<br/>
<br/>
///Widget is higher level interface of the Reversi Board:<br/>
///Widget keeps track of the current player its turn and allows undoing of moves<br/>
struct Widget<br/>
{<br/>
&nbsp;&nbsp;enum { empty&nbsp;&nbsp; = 0};<br/>
&nbsp;&nbsp;enum { player1 = 1};<br/>
&nbsp;&nbsp;enum { player2 = 2};<br/>
&nbsp;&nbsp;enum { draw = 3};<br/>
<br/>
&nbsp;&nbsp;Widget(const int size = 10);<br/>
<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept;<br/>
<br/>
&nbsp;&nbsp;void DoMove(const boost::shared_ptr&lt;const Move&gt; move) noexcept;<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Board&gt; GetBoard() const noexcept { return m_board; }<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Board&gt; GetBoard()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; noexcept { return m_board; }<br/>
<br/>
&nbsp;&nbsp;int GetCurrentPlayer() const noexcept { return m_current_player; }<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt;&gt; GetValidMoves() const noexcept;<br/>
<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
&nbsp;&nbsp;int GetWinner() const noexcept;<br/>
<br/>
&nbsp;&nbsp;void Undo();<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; m_board;<br/>
&nbsp;&nbsp;int m_current_player;<br/>
<br/>
&nbsp;&nbsp;//The undo stack:<br/>
&nbsp;&nbsp;//first: the Widget before the Move<br/>
&nbsp;&nbsp;//second: the last Move done in the game<br/>
&nbsp;&nbsp;std::stack&lt;std::pair&lt;boost::shared_ptr&lt;Widget&gt;,boost::shared_ptr&lt;const Move&gt;&gt;&gt; m_undo;<br/>
<br/>
&nbsp;&nbsp;bool CanDoMove(const int x, const int y) const noexcept;<br/>
&nbsp;&nbsp;bool CanDoMovePass() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Create the delta-x and delta-y to search in the 8 directions<br/>
&nbsp;&nbsp;static const std::vector&lt;std::pair&lt;int,int&gt;&gt; CreateDeltas() noexcept;<br/>
<br/>
&nbsp;&nbsp;void DoMove(const int x, const int y) noexcept;<br/>
&nbsp;&nbsp;void DoMovePass() noexcept;<br/>
<br/>
&nbsp;&nbsp;int GetOtherPlayer() const noexcept;<br/>
<br/>
&nbsp;&nbsp;//Simply sets a square<br/>
&nbsp;&nbsp;//void Set(const int x, const int y, const int state) noexcept;<br/>
<br/>
&nbsp;&nbsp;void TogglePlayer();<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
};<br/>
<br/>
bool operator==(const Widget&amp; lhs, const Widget&amp; rhs);<br/>
bool operator!=(const Widget&amp; lhs, const Widget&amp; rhs);<br/>
<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Widget&amp; r);<br/>
<br/>
} //~namespace reversi<br/>
} //~namespace ribi<br/>
<br/>
#endif // REVERSIWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
