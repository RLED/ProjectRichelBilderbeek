<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TicTacToe</title>
  <meta name="description" content="C++ TicTacToe"/>
  <meta name="keywords" content="C++ TicTacToe code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTicTacToe.htm">TicTacToe</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppTicTacToe.htm">TicTacToe</a> is a <a href="CppClass.htm">class</a> embodying
the game logic of Tic-Tac-Toe.</p>
<p>&nbsp;</p>
<p><a href="CppTicTacToe.htm">TicTacToe</a> is used by, among others:</p>
<ul>
  <li><a href="ProjectWtWebsite.htm">ProjectWtWebsite</a></li>
  <li><a href="ToolTestTicTacToe.htm">TestTicTacToe</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>tictactoe.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="tictactoe.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppTicTacToe.htm">TicTacToe</a>, tic-tac-toe game <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppTicTacToe.htm">CppTicTacToe</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> TICTACTOE_H<br/>
<a href="CppDefine.htm">#define</a> TICTACTOE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/multi_<a href="CppArray.htm">array</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm\">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppTicTacToe.htm">TicTacToe</a> is a tic-tac-toe game <b><a href="CppClass.htm">class</a></b>.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppTicTacToe.htm">TicTacToe</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { empty&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { player1&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 1 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { player2&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 2 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { draw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 3 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { no_winner <a href="CppOperatorAssign.htm">=</a> 4 };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTicTacToe.htm">TicTacToe</a> <b><a href="CppDefault.htm">default</a></b> contructor creates an empty board,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/where the current turn is to player1.<br/>
&nbsp;&nbsp;<a href="CppTicTacToe.htm">TicTacToe</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTicTacToe.htm">TicTacToe</a> contructor from summized state <a href="CppInt.htm">integer</a>.<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/CanDoMove <a href="CppReturn.htm">returns</a> <b><a href="CppIf.htm">if</a></b> a move at a certain position is valid.<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanDoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DoMove lets m_current_player put his token at a certain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/position on the board.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetBoard <a href="CppReturn.htm">returns</a> the tic-tac-toe board.<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMulti_array.htm">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt;&amp; GetBoard() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_board; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentPlayer <a href="CppReturn.htm">returns</a> whose turn it is.<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetCurrentPlayer() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_current_player; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentTurn <a href="CppReturn.htm">returns</a> the turn number.<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetCurrentTurn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetSquare <a href="CppReturn.htm">returns</a> the content at square (x,y)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a> <a href="CppReturn.htm">returns</a> an <a href="CppInt.htm">integer</a> summarizing the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/state, which is both tic-tac-toe board and whose turn it is.<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get<a href="CppVersion.htm">Version</a> <a href="CppReturn.htm">returns</a> the <a href="CppTicTacToe.htm">TicTacToe</a> <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() { <b><a href="CppReturn.htm">return</a></b> "1.3.1"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetWinner <a href="CppReturn.htm">returns</a> the winner.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppComment.htm">/*</a> <a href="CppTicTacToe.htm">TicTacToe</a>::player1&nbsp;&nbsp; : player1 has won.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppComment.htm">/*</a> <a href="CppTicTacToe.htm">TicTacToe</a>::player2&nbsp;&nbsp; : player2 has won.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppComment.htm">/*</a> <a href="CppTicTacToe.htm">TicTacToe</a>::draw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: draw.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppComment.htm">/*</a> <a href="CppTicTacToe.htm">TicTacToe</a>::no_winner : no winner.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The constant <a href="CppTicTacToe.htm">TicTacToe</a>::empty should _not_ be <b><a href="CppReturn.htm">return</a></b>ed.<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWinner() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetBoard sets a tic-tac-toe board.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBoard(<b><a href="CppConst.htm">const</a></b> <a href="CppMulti_array.htm">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt;&amp; board);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetSquare sets the value of square (x,y).<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> square_state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetSummarized<a href="CppState.htm">State</a> sets the <a href="CppTicTacToe.htm">TicTacToe</a> state,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/which is both tic-tac-toe board and whose turn it is.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSummarized<a href="CppState.htm">State</a>(<b><a href="CppInt.htm">int</a></b> state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_board stores the board in an x-y-order.\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTicTacToe.htm">TicTacToe</a>::empty : empty\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTicTacToe.htm">TicTacToe</a>::player1 : occupied by player 1\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppTicTacToe.htm">TicTacToe</a>::player2 : occupied by player 2\n<br/>
&nbsp;&nbsp;<a href="CppMulti_array.htm">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt; m_board;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_current_player;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/NoEmptySquares determines whether there are no empty squares left.<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> NoEmptySquares() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>&amp; t);<br/>
};<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>&amp; t);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>&amp; rhs);<br/>
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIntPower.htm">IntPower</a>.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppIntPower.htm">IntPower</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> base, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent);<br/>
<br/>
<a href="CppComment.htm">//</a>YYYY-MM-DD: <a href="CppVersion.htm">version</a> X.Y: [description]<br/>
<a href="CppComment.htm">//</a>2010-09-19: <a href="CppVersion.htm">version</a> 1.3: made CanDoMove <a href="CppMemberFunction.htm">member function</a> a <b><a href="CppConst.htm">const</a></b> <a href="CppMemberFunction.htm">member function</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm\">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TICTACTOE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>tictactoe.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="tictactoe.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppTicTacToe.htm">TicTacToe</a>, tic-tac-toe game <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppTicTacToe.htm">CppTicTacToe</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTicTacToe.htm">tictactoe</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppTicTacToe.htm">TicTacToe</a> <b><a href="CppDefault.htm">default</a></b> contructor creates an empty board,<br/>
<a href="CppComment.htm">///</a>where the current turn is to player1.<br/>
<a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::<a href="CppTicTacToe.htm">TicTacToe</a>()<br/>
&nbsp;&nbsp;: m_board(<a href="CppBoost.htm">boost</a>::extents[3][3]),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_player(<a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board[i/3][i%3] <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetCurrentTurn() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetCurrentPlayer() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player1);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppTicTacToe.htm">TicTacToe</a> contructor from summized state <a href="CppInt.htm">integer</a>.<br/>
<a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::<a href="CppTicTacToe.htm">TicTacToe</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state)<br/>
&nbsp;&nbsp;: m_board(<a href="CppBoost.htm">boost</a>::extents[3][3]),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_player(-1)<br/>
{<br/>
&nbsp;&nbsp;SetSummarized<a href="CppState.htm">State</a>(state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetCurrentPlayer() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; GetCurrentPlayer() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player2);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::CanDoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[x][y]<a href="CppOperatorEqual.htm">==</a>0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanDoMove(x,y));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Player " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_current_player<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;m_board[x][y] <a href="CppOperatorAssign.htm">=</a> m_current_player;<br/>
&nbsp;&nbsp;m_current_player <a href="CppOperatorAssign.htm">=</a> (m_current_player <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 ? 2 : 1);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>GetCurrentTurn <a href="CppReturn.htm">returns</a> the turn number.<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::GetCurrentTurn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> turn <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[i/3][i%3] <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty) <a href="CppOperatorPlus.htm">+</a>+turn;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> turn;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>GetSquare <a href="CppReturn.htm">returns</a> the content at square (x,y)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::GetSquare(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board[x][y];<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a> <a href="CppReturn.htm">returns</a> an <a href="CppInt.htm">integer</a> summarizing the<br/>
<a href="CppComment.htm">///</a>state, which is both tic-tac-toe board and whose turn it is.<br/>
<a href="CppComment.htm">///</a>In trinary, <b><a href="CppFor.htm">for</a></b> lowest order digit:\n<br/>
<a href="CppComment.htm">///</a># : content\n<br/>
<a href="CppComment.htm">///</a>0 : content of (0,0)\n<br/>
<a href="CppComment.htm">///</a>1 : content of (1,0)\n<br/>
<a href="CppComment.htm">///</a>2 : content of (2,0)\n<br/>
<a href="CppComment.htm">///</a>3 : content of (0,1)\n<br/>
<a href="CppComment.htm">///</a>4 : content of (1,1)\n<br/>
<a href="CppComment.htm">///</a>5 : content of (2,1)\n<br/>
<a href="CppComment.htm">///</a>6 : content of (0,2)\n<br/>
<a href="CppComment.htm">///</a>7 : content of (1,2)\n<br/>
<a href="CppComment.htm">///</a>8 : content of (2,2)\n<br/>
<a href="CppComment.htm">///</a>9 : current turn\n<br/>
<a href="CppComment.htm">///</a>For indices [0,8] content is stored as:<br/>
<a href="CppComment.htm">///</a>[#] : description\n<br/>
/<a href="CppComment.htm">//</a> 0&nbsp;&nbsp;: empty\n<br/>
/<a href="CppComment.htm">//</a> 1&nbsp;&nbsp;: player1\n<br/>
/<a href="CppComment.htm">//</a> 2&nbsp;&nbsp;: player2\n<br/>
<a href="CppComment.htm">///</a>For index 9 content is stored as:<br/>
<a href="CppComment.htm">///</a>[#] : description\n<br/>
/<a href="CppComment.htm">//</a> 0&nbsp;&nbsp;: ERROR\n<br/>
/<a href="CppComment.htm">//</a> 1&nbsp;&nbsp;: player1\n<br/>
/<a href="CppComment.htm">//</a> 2&nbsp;&nbsp;: player2\n<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> z <a href="CppOperatorAssign.htm">=</a> m_board[0][0];<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;z <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> (m_board[i/3][i%3] * <a href="CppIntPower.htm">IntPower</a>(3,i));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;z <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> (m_current_player * <a href="CppIntPower.htm">IntPower</a>(3,9));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> z;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>GetWinner <a href="CppReturn.htm">returns</a> the winner.<br/>
<a href="CppComment.htm">///</a><a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::no_winner : no winner yet\n<br/>
<a href="CppComment.htm">///</a><a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player1&nbsp;&nbsp; : player1 has won\n<br/>
<a href="CppComment.htm">///</a><a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player2&nbsp;&nbsp; : player2 has won\n<br/>
<a href="CppComment.htm">///</a><a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::draw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: draw\n<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::GetWinner() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check rows<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[0][y] <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[0][y] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[1][y]<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[1][y] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[2][y])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board[0][y];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check collumns<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[x][0] <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[x][0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[x][1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[x][1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[x][2])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> m_board[x][0];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check diagonal<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[0][0] <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[0][0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[1][1]<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[1][1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[2][2])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board[1][1];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check other diagonal<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[0][2] <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[0][2] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[1][1]<br/>
&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_board[1][1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_board[2][0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_board[1][1];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> draw<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (NoEmptySquares())<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::draw;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No winner<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::no_winner;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::NoEmptySquares() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_board[i/3][i%3] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>SetBoard sets a tic-tac-toe board.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::SetBoard(<b><a href="CppConst.htm">const</a></b> <a href="CppMulti_array.htm">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt;&amp; board)<br/>
{<br/>
&nbsp;&nbsp;m_board <a href="CppOperatorAssign.htm">=</a> board;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> z <a href="CppOperatorAssign.htm">=</a> m_board[i/3][i%3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(z <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> z <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> z <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>SetSquare sets the value of square (x,y).<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::SetSquare(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> square_state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(square_state <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> square_state <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> square_state <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player2);<br/>
<br/>
&nbsp;&nbsp;m_board[x][y] <a href="CppOperatorAssign.htm">=</a> square_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Internal test<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetSquare(x,y)<a href="CppOperatorEqual.htm">==</a>square_state);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>SetSummarized<a href="CppState.htm">State</a> sets the <a href="CppTicTacToe.htm">TicTacToe</a> state,<br/>
<a href="CppComment.htm">///</a>which is both tic-tac-toe board and whose turn it is.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::SetSummarized<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> original_state)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> s <a href="CppOperatorAssign.htm">=</a> original_state;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board[i/3][i%3] <a href="CppOperatorAssign.htm">=</a> s <a href="CppOperatorModulus.htm">%</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorDivideAssign.htm">/=</a>3;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s<a href="CppOperatorNotEqual.htm">!=</a><a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppRibi.htm\">ribi</a>::<a href="CppTicTacToe.htm">TicTacToe</a>::player2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>("Invalid <a href="CppTicTacToe.htm">TicTacToe</a> state");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_current_player <a href="CppOperatorAssign.htm">=</a> s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Internal check<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppGetSum.htm">GetSum</a>marized<a href="CppState.htm">State</a>()<a href="CppOperatorEqual.htm">==</a>original_state);<br/>
}<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm\">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>&amp; t)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(0,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(1,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(2,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(0,1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(1,1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(2,1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(0,2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(1,2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.GetSquare(2,2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm\">ribi</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetBoard() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.GetBoard()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetCurrentPlayer() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.GetCurrentPlayer()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetCurrentTurn() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.GetCurrentTurn();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm\">ribi</a>::<a href="CppIntPower.htm">IntPower</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> base, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "When calculating <a href="CppIntPower.htm">IntPower</a>(x,0) the result "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "might be zero or one, depending on the context");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> base;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>exponent; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorMultiplyAssign.htm">*=</a>base;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
