<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>function design</title>
  <meta name="description" content="C++ function design"/>
  <meta name="keywords" content="C++ function design code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFunctionDesign.htm">function design</a></h1>
<p>&nbsp;</p>
<p><a href="CppFunctionDesign.htm">Function design</a> is the correct design of a <a href="CppFunction.htm">function</a>. <a href="CppExerciseCorrectFunctionDeclarations.htm">Exercise #2: correct function declarations</a> is an exercise in correct <a href="CppFunctionDesign.htm">function design</a>.</p>
<p>&nbsp;</p>
<p>The most important to get correct is the <a href="CppFunctionDeclaration.htm">function declaration</a>.</p>
<p>&nbsp;</p>
<p>Here are some rules:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>The name of the function should say what it does</h3>
<p>&nbsp;</p>
<ul>
  <li>Do use names like <a href="CppSwap.htm">Swap</a>, <a href="CppGetDistance.htm">GetDistance</a>, <a href="CppStrToInt.htm">StrToInt</a></li>
  <li>Do not use names like DoIt, Transmogrify, Stuff</li>
  <li>Exceptions: Transmogrify is a function name commonly used in the literature to denote a function you are not aware of what it is doing</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Make a function responsible for one thing</h3>
<p>&nbsp;</p>
<ul>
  <li>Do not use names with 'And' in it, like SwapAndGetMean</li>
  <li>Do use two functions instead, Swap and GetMean</li>
  <li>Exceptions: some mathematical functions can cooperate and so improve runtime speed: <a href="CppMeanAndStdDev.htm">MeanAndStdDev</a> executes faster then calling the seperate functions for Mean and StdDev</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>The <a href="CppReturnType.htm">return type</a> is expected from the name of the function</h3>
<p>&nbsp;</p>
<ul>
  <li>Do give a function a <a href="CppVoid.htm">void</a> <a href="CppReturnType.htm">return type</a> when it has no <a href="CppReturnType.htm">return type</a></li>
  <li>Do return a non-<a href="CppPointer.htm">pointer</a> non-<a href="CppReference.htm">reference</a> object when a function is expected to always execute successfully on the assumptions that its <a href="CppArgument.htm">arguments</a> are valid</li>
  <li>Do return a <a href="CppPointer.htm">pointer</a> (or better: a <a href="CppSmartPointer.htm">smart pointer</a>) to a <a href="CppDataType.htm">data type</a> when the <a href="CppReturnType.htm">return type</a> can be <a href="CppNull.htm">null</a>, that is: empty. If the <a href="CppPointer.htm">pointer</a> needs to be read-only, make it <a href="CppConst.htm">const</a> (for example '<a href="CppConst.htm">const</a> T * <a href="CppConst.htm">const</a> GetT()', where GetT is a function that returns a pointer to a T)</li>
  <li>Do not make a function return a <a href="CppReference.htm">reference</a> to a function's <a href="CppLocal.htm">local</a> variable, this leads to undefined behavior</li>
  <li>Do not make a function return an error code, use <a href="CppException.htm">exceptions</a> instead</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>The function arguments are expected from the name of the function</h3>
<p>&nbsp;</p>
<ul>
  <li>Do use a <a href="CppPointer.htm">pointer</a> (or better: a <a href="CppSmartPointer.htm">smart pointer</a>) to a <a href="CppDataType.htm">data type</a> when the <a href="CppArgument.htm">argument</a> can be <a href="CppNull.htm">null</a>, that is: empty. If the <a href="CppPointer.htm">pointer</a> needs to be read-only, make it <a href="CppConst.htm">const</a> (for example 'void CoutT(<a href="CppConst.htm">const</a> T * <a href="CppConst.htm">const</a> t)', where CoutT is a function that uses std::cout on a T)</li>
  <li>Do use a non-<a href="CppPointer.htm">pointer</a> <a href="CppReference.htm">reference</a> object for expensive-to-copy data types, like <a href="CppString.htm">std::string</a>, <a href="CppVector.htm">std::vector</a>&lt;int&gt; or Database. Make the argument <a href="CppConst.htm">const</a> if it must be marked read-only</li>
  <li>Do use a non-<a href="CppPointer.htm">pointer</a> non-<a href="CppReference.htm">reference</a> object for standard data types like int. Make the argument <a href="CppConst.htm">const</a> if it must be marked read-only</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>The function must specify the called what input it can't handle</h3>
<p>&nbsp;</p>
<ul>
  <li>Do use <a href="CppAssert.htm">assert</a> and <a href="CppException.htm">exceptions</a> to make clear to the client which input the function cannot handle. For example, the square root of a negative number does not exist</li>
  <li>Do not use error codes as return types</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ul>
  <li>[0] ...</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
