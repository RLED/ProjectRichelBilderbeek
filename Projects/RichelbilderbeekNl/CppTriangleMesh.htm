<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TriangleMesh</title>
  <meta name="description" content="C++ TriangleMesh"/>
  <meta name="keywords" content="C++ TriangleMesh "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTriangleMesh.htm">TriangleMesh</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppTriangleMesh-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/CppTriangleMesh.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/CppTriangleMesh.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshtemplate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshpoint.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshfaceorientation.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshfacefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshface.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcellscreator.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcellfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcell.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshhelper.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshbuilder_pout.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshbuilder_pin.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshbuilder_mut.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshbuilder_k.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshbuilder.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshpointfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcellscreatorfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshedge.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshedgefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshwinding.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshwindings.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshtemplate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshpoint.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshfwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshfaceorientation.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshfacefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshhelper.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshface.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcellscreator.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcellfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcell.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshbuilder.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshpointfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshcellscreatorfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshedge.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshedgefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshwinding.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/trianglemeshwindings.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppTriangleMesh/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshbuilder.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshbuilder.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHBUILDER_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHBUILDER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>TriangleMeshBuilder creates all files needed by OpenFOAM<br/>
<a href="CppComment.htm">///</a>(in the correct folder) from a collection of Cells<br/>
<a href="CppComment.htm">///</a>These Cells can be created by TriangleMeshCellCreator<br/>
<a href="CppComment.htm">///</a>The Cells' Faces are as<b><a href="CppSigned.htm">signed</a></b> a Boundary, but these<br/>
<a href="CppComment.htm">///</a>may be reas<b><a href="CppSigned.htm">signed</a></b> before feeding the cells to TriangleMeshBuilder<br/>
<b><a href="CppStruct.htm">struct</a></b> TriangleMeshBuilder<br/>
{<br/>
&nbsp;&nbsp;TriangleMeshBuilder(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; mesh_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; boundary_to_patch_field_type_function<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_cells;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_faces;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateBoundary(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; boundary_to_patch_field_type_function<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt; CreateCells() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateNodes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamHeader(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppClass.htm">class</a></b>_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; object,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; location,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; note <a href="CppOperatorAssign.htm">=</a> "") <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamK() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamMut() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamNodes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamPin() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamPout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamRasProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateOpenFoamT() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> ExtractFaces(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> Extract<a href="CppPoint.htm">Point</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetAllFolders() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Implode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Implode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> SortByBoundary(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; boundary_to_patch_field_type_function<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHBUILDER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshbuilder.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshbuilder.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshbuilder.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIomanipH.htm">iomanip</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcell.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfileitem.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfilenames.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>index.h"<br/>
<a href="CppInclude.htm">#include</a> "php.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::TriangleMeshBuilder(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; mesh_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; boundary_to_patch_field_type_function<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_cells(cells),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces(SortByBoundary(ExtractFaces(cells),boundary_to_patch_field_type_function)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(Extract<a href="CppPoint.htm">Point</a>s(cells))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder: GetAllFolders())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppIsFolder.htm">IsFolder</a>(folder))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppCreateFolder.htm">CreateFolder</a>(folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppIsFolder.htm">IsFolder</a>(folder));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove cells with less than 8 faces or less than 8 faces with an owner<br/>
&nbsp;&nbsp;m_cells.erase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove_if.htm">std::remove_if</a>(m_cells.begin(),m_cells.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces { cell-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdCount_if.htm">std::count_if</a>(faces.begin(),faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner()); <a href="CppComment.htm">//</a>Test: is <b><a href="CppThis.htm">this</a></b> loop needed?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetOwner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) &lt; 8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cells.end()<br/>
&nbsp;&nbsp;);<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;m_faces.erase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove_if.htm">std::remove_if</a>(m_faces.begin(),m_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !face-&gt;GetOwner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.end()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove cells with less than 8 faces or less than 8 faces with an owner<br/>
&nbsp;&nbsp;m_cells.erase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove_if.htm">std::remove_if</a>(m_cells.begin(),m_cells.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces { cell-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdCount_if.htm">std::count_if</a>(faces.begin(),faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner()); <a href="CppComment.htm">//</a>Test: is <b><a href="CppThis.htm">this</a></b> loop needed?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetOwner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) &lt; 8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cells.end()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set all indices<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cells <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_cells; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cells[i]-&gt;SetIndex(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_faces[i]-&gt;SetIndex(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppPointer.htm">point</a>s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s[i]-&gt;SetIndex(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> cell: m_cells) { cell-&gt;SetCorrectOrder(); }<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: m_faces) { face-&gt;SetCorrectWinding(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cell_usecount <a href="CppOperatorAssign.htm">=</a> m_cells.empty() ? 0 : m_cells[0].use_count();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; cell: m_cells)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(cell_usecount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(cell.use_count());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell.use_count() <a href="CppOperatorEqual.htm">==</a> cell_usecount <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Every Cell must have an equal use_count");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All Cells must have existing indices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell-&gt;GetIndex() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell-&gt;GetIndex() &lt;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> face_usecount <a href="CppOperatorAssign.htm">=</a> cell-&gt;GetFaces().empty() ? 0 : cell-&gt;GetFaces()[0].use_count();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; face: cell-&gt;GetFaces())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(face_usecount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(face.use_count());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(face_usecount <a href="CppOperatorMinus.htm">-</a> face.use_count()) <a href="CppOperatorLessEqual.htm">&lt;=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Face are used once or twice");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All Cells must exist of Faces with an existing index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetIndex() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetIndex() &lt;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All Faces must have a Cell that owns them with an existing index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner()-&gt;GetIndex() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner()-&gt;GetIndex() &lt;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All Faces must have either no Neighbout or a Neighbour with an existing index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!face-&gt;GetNeighbour() <a href="CppOperatorLogicalOr.htm">||</a> face-&gt;GetNeighbour()-&gt;GetIndex() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!face-&gt;GetNeighbour() <a href="CppOperatorLogicalOr.htm">||</a> face-&gt;GetNeighbour()-&gt;GetIndex() &lt;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: face-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All Faces must exists of <a href="CppPoint.htm">Point</a>s with an existing index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>-&gt;GetIndex() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>-&gt;GetIndex() &lt;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Writing output...\n";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mesh<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\tGenerating mesh (.ply)\n";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(mesh_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateHeader();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateNodes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateFaces();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(<a href="CppRibi.htm">ribi</a>::foam::Filenames().Get<a href="CppPoint.htm">Point</a>s().Get().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateOpenFoamHeader("vectorField","<a href="CppPointer.htm">point</a>s","constant/polyMesh");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateOpenFoamNodes();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> fp(<a href="CppRibi.htm">ribi</a>::foam::Filenames().GetFaces().Get().c_str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fp <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateOpenFoamHeader("faceList","faces","constant/polyMesh");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fp <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateOpenFoamFaces();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cells <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\tGenerating cells (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_cells <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> fo(<a href="CppRibi.htm">ribi</a>::foam::Filenames().GetOwner().Get().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> fn(<a href="CppRibi.htm">ribi</a>::foam::Filenames().GetNeighbour().Get().c_str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> fs;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n<a href="CppPoint.htm">Point</a>s: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_<a href="CppPointer.htm">point</a>s.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " nCells: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_cells.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " nFaces: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_faces.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fo <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateOpenFoamHeader(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"labelList",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"owner",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant/polyMesh",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fn <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateOpenFoamHeader(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"labelList",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"neighbour",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant/polyMesh",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.str()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt; p { CreateCells() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; out_owner { p.first };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; out_neighbour { p.second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fo <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> out_owner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fn <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> out_neighbour;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(<a href="CppRibi.htm">ribi</a>::foam::Filenames().GetBoundary().Get().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> CreateBoundary(boundary_to_patch_field_type_function);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(<a href="CppRibi.htm">ribi</a>::foam::Filenames().GetCase().Get().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Need nothing to stream<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>R_UPDATE();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateBoundary(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; boundary_to_patch_field_type_function<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tally all boundary names<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt; sorted_tally;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s { face-&gt;GetBoundaryType() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter(sorted_tally.find(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (iter <a href="CppOperatorEqual.htm">==</a> sorted_tally.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sorted_tally.insert(sorted_tally.begin(),<a href="CppStdMake_pair.htm">std::make_pair</a>(s,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(*iter).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a tally sorted as such that the PatchFieldType::no_patch_field comes last<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>so these can be omitted<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt; Pair;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Pair&gt; tally;<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(sorted_tally.begin(),sorted_tally.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(tally));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(tally.begin(),tally.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[boundary_to_patch_field_type_function](<b><a href="CppConst.htm">const</a></b> Pair&amp; lhs, <b><a href="CppConst.htm">const</a></b> Pair&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (boundary_to_patch_field_type_function(lhs.first) <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldType::no_patch_field)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (boundary_to_patch_field_type_function(rhs.first) <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldType::no_patch_field)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.first &lt; rhs.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (boundary_to_patch_field_type_function(rhs.first) <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldType::no_patch_field)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.first &lt; rhs.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: tally)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.second);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the items<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem&gt; items;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> start_index <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: tally)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> boundary_name <a href="CppOperatorAssign.htm">=</a> p.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundary_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundary_to_patch_field_type_function(boundary_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::foam::FaceIndex(start_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_index <a href="CppOperatorPlusAssign.htm">+=</a> p.second;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> file;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateCells() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> out_owner;<br/>
&nbsp;&nbsp;out_owner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n(\n";<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> out_neighbour;<br/>
&nbsp;&nbsp;out_neighbour<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_faces.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n(\n";<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out_owner <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face-&gt;GetOwner()-&gt;GetIndex() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!face-&gt;GetNeighbour())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out_neighbour <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "-1\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out_neighbour <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face-&gt;GetNeighbour()-&gt;GetIndex() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;out_owner <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")";<br/>
&nbsp;&nbsp;out_neighbour <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(out_owner.str(),out_neighbour.str());<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(17);<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_faces.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face-&gt;Get<a href="CppPoint.htm">Point</a>s().size();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;face-&gt;SetCorrectWinding();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>: face-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>-&gt;GetIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ply\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "format ascii 1.0\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "element vertex " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "property <b><a href="CppFloat.htm">float</a></b> x\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "property <b><a href="CppFloat.htm">float</a></b> y\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "property <b><a href="CppFloat.htm">float</a></b> z\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "element face " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_faces.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "property list u<b><a href="CppChar.htm">char</a></b> <b><a href="CppInt.htm">int</a></b> vertex_index\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "end_header\n";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateNodes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: m_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetZ().value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(cnt <a href="CppOperatorNotEqual.htm">!=</a> 2 ? 17 : 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t[t.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> ' '); <a href="CppComment.htm">//</a>Replace last space<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t[t.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> t;<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(17)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_faces.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n(\n";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Build a list of nodes<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppPointer.htm">point</a>s_indices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: face-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s_indices.push_back(<a href="CppPointer.htm">point</a>-&gt;GetIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>s_indices.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Implode(" ",<a href="CppPointer.htm">point</a>s_indices)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamHeader(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppClass.htm">class</a></b>_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; object,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; location,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; note) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "FoamFile\n{\t<a href="CppVersion.htm">version</a>\t2.0;\n\tformat\tascii;\n\t<b><a href="CppClass.htm">class</a></b>\t" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppClass.htm">class</a></b>_name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!note.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tnote\t\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> note <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\";";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tlocation\t\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> location <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\";\n\tobject\t" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> object <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n}\n\n";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamNodes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(17)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_<a href="CppPointer.htm">point</a>s.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n(\n";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Build a list of nodes<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: m_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3&gt; co {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetZ().value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;"(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::php::implode(" ",co) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::ExtractFaces(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt;&amp; cell: cells)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> w { cell-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("n_face, non-unique:");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(v.size());<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> new_end <a href="CppOperatorAssign.htm">=</a> <a href="CppStdUnique.htm">std::unique</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;v.erase(new_end,v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("n_face, unique:");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
<br/>
<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::Extract<a href="CppPoint.htm">Point</a>s(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt;&amp; cell: cells)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face: cell-&gt;GetFaces())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> w { face-&gt;Get<a href="CppPoint.htm">Point</a>s() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(w.begin(),w.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> new_end <a href="CppOperatorAssign.htm">=</a> <a href="CppStdUnique.htm">std::unique</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;v.erase(new_end,v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::GetAllFolders() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"constant",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"constant" <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> "polyMesh",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"system"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::Implode(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(17);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.htm">return</a></b> s.str();<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seperator <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::Implode(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(17);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.htm">return</a></b> s.str();<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seperator <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::SortByBoundary(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; boundary_to_patch_field_type_function<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(<a href="CppStdBegin.htm">std::begin</a>(faces),<a href="CppStdEnd.htm">std::end</a>(faces),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[boundary_to_patch_field_type_function](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> a { lhs-&gt;GetBoundaryType() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> b { rhs-&gt;GetBoundaryType() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (boundary_to_patch_field_type_function(a) <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldType::no_patch_field)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (boundary_to_patch_field_type_function(b) <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldType::no_patch_field)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a &lt; b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (boundary_to_patch_field_type_function(b) <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldType::no_patch_field)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a &lt; b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> faces;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshbuilder_k.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshbuilder_k.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshbuilder.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamK() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "FoamFile\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVersion.htm">version</a>&nbsp;&nbsp;&nbsp;&nbsp; 2.0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;format&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascii;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; volScalarField;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;&nbsp;&nbsp;&nbsp;\"0\";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dimensions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 0 2 <a href="CppOperatorMinus.htm">-</a>2 0 0 0 0 ];\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "internalField&nbsp;&nbsp; uniform 0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "boundaryField\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	inlet\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "		type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	outlet\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	side_CW\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	side_CCW\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 		type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	<b><a href="CppDefault.htm">default</a></b>Faces\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 		type		compressible::kqRWall<a href="CppFunction.htm">Function</a>;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	value		uniform 0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshbuilder_mut.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshbuilder_mut.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshbuilder.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamMut() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "FoamFile\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVersion.htm">version</a>&nbsp;&nbsp;&nbsp;&nbsp; 2.0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;format&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascii;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; volScalarField;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;&nbsp;&nbsp;&nbsp;\"0\";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dimensions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 0 0 0 0 ];\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "internalField&nbsp;&nbsp; uniform 0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "boundaryField\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	inlet\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "		type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	outlet\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	side_CW\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	side_CCW\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	<b><a href="CppDefault.htm">default</a></b>Faces\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		mutkWall<a href="CppFunction.htm">Function</a>;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	value		uniform 0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshbuilder_pin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshbuilder_pin.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshbuilder.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamPin() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "101			\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(			\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0		1.7000E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000005	1.7120E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000001	1.7135E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000015	1.7152E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000002	1.7172E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000025	1.7193E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000003	1.7218E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000035	1.7245E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000004	1.7277E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000045	1.7312E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000005	1.7351E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000055	1.7395E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000006	1.7445E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000065	1.7501E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000007	1.7564E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000075	1.7635E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000008	1.7715E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000085	1.7804E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000009	1.7905E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000095	1.8017E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.00001		1.8144E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000105	1.8285E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000011	1.8443E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000115	1.8621E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000012	1.8818E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000125	1.9039E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000013	1.9285E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000135	1.9560E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000014	1.9864E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000145	2.0202E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000015	2.0576E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000155	2.0990E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000016	2.1446E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000165	2.1948E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000017	2.2498E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000175	2.3100E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000018	2.3755E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000185	2.4467E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000019	2.5236E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000195	2.6065E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.00002		2.6953E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000205	2.7901E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000021	2.8906E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000215	2.9966E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000022	3.1078E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000225	3.2237E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000023	3.3437E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000235	3.4671E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000024	3.5932E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000245	3.7212E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000025	3.8500E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000255	3.9788E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000026	4.1068E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000265	4.2329E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000027	4.3563E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000275	4.4763E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000028	4.5922E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000285	4.7034E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000029	4.8094E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000295	4.9099E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.00003		5.0047E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000305	5.0935E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000031	5.1764E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000315	5.2533E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000032	5.3245E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000325	5.3900E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000033	5.4502E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000335	5.5052E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000034	5.5554E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000345	5.6010E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000035	5.6424E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000355	5.6798E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000036	5.7136E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000365	5.7440E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000037	5.7715E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000375	5.7961E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000038	5.8182E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000385	5.8379E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000039	5.8557E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000395	5.8715E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.00004		5.8856E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000405	5.8983E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000041	5.9095E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000415	5.9196E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000042	5.9285E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000425	5.9365E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000043	5.9436E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000435	5.9499E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000044	5.9555E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000445	5.9605E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000045	5.9649E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000455	5.9688E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000046	5.9723E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000465	5.9755E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000047	5.9782E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000475	5.9807E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000048	5.9828E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000485	5.9848E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000049	5.9865E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000495	5.9880E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.00005		6.0000E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")			\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshbuilder_pout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshbuilder_pout.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshbuilder.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamPout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "51			\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(			\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0		1.7000E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000005	1.6978E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000001	1.6972E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000015	1.6965E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000002	1.6955E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000025	1.6943E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000003	1.6928E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000035	1.6908E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000004	1.6884E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000045	1.6853E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000005	1.6814E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000055	1.6765E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000006	1.6704E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000065	1.6628E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000007	1.6534E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000075	1.6418E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000008	1.6276E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000085	1.6105E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000009	1.5900E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000095	1.5659E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.00001		1.5380E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000105	1.5062E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000011	1.4708E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000115	1.4324E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000012	1.3918E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000125	1.3500E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000013	1.3082E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000135	1.2676E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000014	1.2292E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000145	1.1938E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000015	1.1620E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000155	1.1341E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000016	1.1100E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000165	1.0895E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000017	1.0724E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000175	1.0582E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000018	1.0466E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000185	1.0372E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000019	1.0296E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000195	1.0235E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.00002		1.0186E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000205	1.0147E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000021	1.0116E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000215	1.0092E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000022	1.0072E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000225	1.0057E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000023	1.0045E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000235	1.0035E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000024	1.0028E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.0000245	1.0022E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(	0.000025	1.0000E+005	)\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")			\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcell.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcell.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHCELL_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHCELL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>A Cell consists of Faces that surround the volume of the cell without openings<br/>
<a href="CppComment.htm">///</a>Sure, the Faces can change...<br/>
<b><a href="CppStruct.htm">struct</a></b> Cell<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> GetFaces()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_faces; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D CalculateCenter() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sets the Faces of a Cell by their index<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCorrectOrder() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_index <a href="CppOperatorAssign.htm">=</a> index; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Cell() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Cell* x);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> Cell* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_faces;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_index;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> CellFactory;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Enforce that only CellFactory can create a Cell<br/>
&nbsp;&nbsp;Cell(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellFactory&amp; lock);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Cell&amp; lhs, <b><a href="CppConst.htm">const</a></b> Cell&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Cell&amp; lhs, <b><a href="CppConst.htm">const</a></b> Cell&amp; rhs);<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Cell&amp; cell);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHCELL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcell.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcell.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshcell.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::Cell::Cell(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; faces,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellFactory&amp;)<br/>
&nbsp;&nbsp;: m_faces(faces),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_index{index}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> 5 <a href="CppOperatorLogicalOr.htm">||</a> faces.size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::trim::Cell::CalculateCenter() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::Coordinat3D center;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face: m_faces)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: face-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D coordinat(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetZ().value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center <a href="CppOperatorPlusAssign.htm">+=</a> coordinat;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;center <a href="CppOperatorDivideAssign.htm">/=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(cnt);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> center;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::Cell::GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAdd.htm">Add</a>Const(m_faces);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell::SetCorrectOrder() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(m_faces.begin(), m_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt;&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> priority_lhs { lhs-&gt;CalcPriority() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> priority_rhs { rhs-&gt;CalcPriority() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (priority_lhs &lt; priority_rhs) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (priority_lhs &gt; priority_rhs) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sort on Face indices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs-&gt;GetIndex() <a href="CppOperatorNotEqual.htm">!=</a> rhs-&gt;GetIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs-&gt;GetIndex() &lt; rhs-&gt;GetIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face: m_faces) <a href="CppTRACE.htm">TRACE</a>(face-&gt;CalcPriority());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::Cell::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do not use the Cell its contructor! Use CellFactory::Create instead!<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test that in a prism-<a href="CppShape.htm">shape</a>d Cell, all Faces are owned, and no faces have a neighbour<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prism);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prism-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 5 <a href="CppOperatorLogicalOr.htm">||</a> prism-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prism-&gt;GetFaces()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount_if.htm">std::count_if</a>(faces.begin(),faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetNeighbour().get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test that in a prism-<a href="CppShape.htm">shape</a>d Cell, all Faces are owned, and no faces have a neighbour<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cube {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellFactory().CreateTestCube()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cube.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A cube consists out of two prisms");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cube[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 5 <a href="CppOperatorLogicalOr.htm">||</a> cube[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 8 faces");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cube[1]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 8 faces");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concatenate the faces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cube[0]-&gt;GetFaces()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> other_faces { cube[1]-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<a href="CppStdBegin.htm">std::begin</a>(other_faces),<a href="CppStdEnd.htm">std::end</a>(other_faces),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(faces.begin(),faces.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> 16);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> all_face_str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_face_str <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face-&gt;GetIndex() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppOperatorMinus.htm">-</a>&gt; " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (face-&gt;GetNeighbour() ? face-&gt;GetNeighbour()-&gt;GetIndex() : <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_face_str <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "No face";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(all_face_str.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(<a href="CppStdBegin.htm">std::begin</a>(faces),<a href="CppStdEnd.htm">std::end</a>(faces),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdUnique.htm">std::unique</a>(faces.begin(),faces.end()) <a href="CppOperatorNotEqual.htm">!=</a> faces.end() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Two faces must be present twice");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faces.erase(<a href="CppStdUnique.htm">std::unique</a>(<a href="CppStdBegin.htm">std::begin</a>(faces),<a href="CppStdEnd.htm">std::end</a>(faces)),faces.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faces.erase(<a href="CppStdRemove.htm">std::remove</a>(<a href="CppStdBegin.htm">std::begin</a>(faces),<a href="CppStdEnd.htm">std::end</a>(faces),<b><a href="CppNullptr.htm">nullptr</a></b>),faces.end()); <a href="CppComment.htm">//</a>OBLIGATORY! <a href="CppStdUnique.htm">std::unique</a> creates <b><a href="CppNullptr.htm">nullptr</a></b>s!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(faces.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdCount.htm">std::count</a>(<a href="CppStdBegin.htm">std::begin</a>(faces),<a href="CppStdEnd.htm">std::end</a>(faces),<b><a href="CppNullptr.htm">nullptr</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> face_str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_str <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face-&gt;GetIndex() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppOperatorMinus.htm">-</a>&gt; " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (face-&gt;GetNeighbour() ? face-&gt;GetNeighbour()-&gt;GetIndex() : <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_str <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "No face";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(face_str.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> 14 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Two faces were in both Cells, and are now present only once");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount_if.htm">std::count_if</a>(faces.begin(),faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetNeighbour().get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::Cell::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetFaces() <a href="CppOperatorEqual.htm">==</a> rhs.GetFaces();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell&amp; cell)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> faces <a href="CppOperatorAssign.htm">=</a> cell.GetFaces();<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("cell_index",cell.GetIndex())<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(faces.size()) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("face" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i),faces[i]-&gt;GetIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("faces",t.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { <a href="CppRibi.htm">ribi</a>::xml::<a href="CppXmlToPretty.htm">XmlToPretty</a>(s.str()) };<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(os,"\n"));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHCELLFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHCELLFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>The only <b><a href="CppClass.htm">class</a></b> to use Cell its <a href="CppConstructor.htm">constructor</a><br/>
<b><a href="CppStruct.htm">struct</a></b> CellFactory<br/>
{<br/>
&nbsp;&nbsp;CellFactory();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; faces<br/>
&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a cell in the <a href="CppShape.htm">shape</a> of a prism<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| | |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorPlus.htm">+</a> |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> \|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestCube() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create two prims-<a href="CppShape.htm">shape</a>d cell to form a cube<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\ <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---<a href="CppOperatorPlus.htm">+</a> |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| | | |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorPlus.htm">+</a>-|-+<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> \|/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHCELLFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellfactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshcellfactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcell.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreator.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreatorfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<b><a href="CppTemplate.htm">template</a></b>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::CellFactory::CellFactory()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Cell&gt; <a href="CppRibi.htm">ribi</a>::trim::CellFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; faces<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give every Cell some index at creation<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> cnt;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Cell(faces,n,*<b><a href="CppThis.htm">this</a></b>)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;face-&gt;<a href="CppAdd.htm">Add</a>BelongsTo(cell);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cell;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::CellFactory::CreateTestCube() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Template::CreateTest(1)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>-&gt;CountFaces() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; cells_creator {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CellsCreatorFactory().Create(my_<b><a href="CppTemplate.htm">template</a></b>,n_layers,1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { cells_creator-&gt;GetCells() };<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A cube consists out of two prisms");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 8 faces");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[1]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 8 faces");<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces { cells[i]-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face: faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cells;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Cell&gt; <a href="CppRibi.htm">ribi</a>::trim::CellFactory::CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt; faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CellFactory().Create(faces)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prism);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> prism;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::CellFactory::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::CellFactory::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create prism<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prism-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 8 faces (as the vertical faces are split into 2 triangle)");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create cube<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cube {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellFactory().CreateTestCube()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cube.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A cube consists of two prisms");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cube[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 8 faces (as the vertical faces are split into 2 triangle)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cube[1]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 8 faces (as the vertical faces are split into 2 triangle)");<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::CellFactory::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellscheck.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellscheck.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHCELLSCHECK_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHCELLSCHECK_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>Checks <b><a href="CppIf.htm">if</a></b> Cells are OK<br/>
<b><a href="CppVoid.htm">void</a></b> CellsCheck(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHCELLSCHECK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellscheck.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellscheck.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscheck.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcell.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreator.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreatorfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<b><a href="CppTemplate.htm">template</a></b>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::CellsCheck(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cells.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>All Cells must be in use as much <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> use_count <a href="CppOperatorAssign.htm">=</a> cells[0].use_count();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(use_count <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; cell: cells)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell.use_count() <a href="CppOperatorEqual.htm">==</a> use_count<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All Cells must have an equal use_count");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> cell: cells)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face: cell-&gt;GetFaces())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: face-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellscreator.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellscreator.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHCELLSCREATOR_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHCELLSCREATOR_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/quantity.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>CellsCreator creates multiple layers of cells from a Template<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The next step will be<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> freely <b><a href="CppDelete.htm">delete</a></b> the Cells that are not in the <b><a href="CppFinal.htm">final</a></b> mesh<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> pass the desired cells to TriangleMeshBuilder to create the OpenFOAM files<br/>
<b><a href="CppStruct.htm">struct</a></b> CellsCreator<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> CreateVerticalFacesStrategy { one_face_per_square, two_faces_per_square };<br/>
&nbsp;&nbsp;CellsCreator(<b><a href="CppConst.htm">const</a></b> CellsCreator&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;CellsCreator&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> CellsCreator&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Clear() <b><a href="CppNoexcept.htm">noexcept</a></b> { m_cells.clear(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> GetCells() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Cells must be released, and <b><a href="CppThis.htm">this</a></b> will clear CellsCreator its Cells<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This is important, because one can freely <b><a href="CppDelete.htm">delete</a></b> those released Cells<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/and have a valid mesh. Would the Cells be copied, the mesh created would be<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/invalid: the deleted Cells would always have a copy inside CellsCreator<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> ReleaseCells() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> CellsCreatorFactory;<br/>
<br/>
&nbsp;&nbsp;CellsCreator(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellsCreatorFactory&amp; lock <a href="CppComment.htm">//</a>to force creation by CellsCreatorFactory<br/>
&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_cells;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> CheckCells(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateCells(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateHorizontalFaces(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> Create<a href="CppPoint.htm">Point</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateVerticalFaces(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CreateVerticalFacesStrategy strategy<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> FindKnownFacesBetween(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; a, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; b<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsSubset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHCELLSCREATOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellscreator.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellscreator.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreator.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcell.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreatorfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<b><a href="CppTemplate.htm">template</a></b>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::CellsCreator::CellsCreator(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellsCreatorFactory&amp;<br/>
) : m_cells(CreateCells(t,n_layers,layer_height))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::CheckCells(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> cell: cells)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::CreateCells(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> all_<a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create<a href="CppPoint.htm">Point</a>s(t,n_layers,layer_height)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> hor_faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateHorizontalFaces(t,all_<a href="CppPointer.htm">point</a>s,n_layers)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CreateVerticalFacesStrategy strategy { CreateVerticalFacesStrategy::one_face_per_square };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> ver_faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateVerticalFaces(t,all_<a href="CppPointer.htm">point</a>s,n_layers,strategy)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_hor_faces_per_layer <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t-&gt;GetFaces().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cells_per_layer <a href="CppOperatorAssign.htm">=</a> n_hor_faces_per_layer;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> layer=0; layer<a href="CppOperatorNotEqual.htm">!=</a>n_layers-1; <a href="CppOperatorIncrement.htm">++</a>layer) <a href="CppComment.htm">//</a>-1 because there are no <a href="CppPointer.htm">point</a>s above the top layer<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_cells_per_layer; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> bottom_face_index <a href="CppOperatorAssign.htm">=</a> ((layer <a href="CppOperatorPlus.htm">+</a> 0) * n_hor_faces_per_layer) <a href="CppOperatorPlus.htm">+</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> top_face_index&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ((layer <a href="CppOperatorPlus.htm">+</a> 1) * n_hor_faces_per_layer) <a href="CppOperatorPlus.htm">+</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bottom_face_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top_face_index&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bottom_face_index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(hor_faces.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top_face_index&nbsp;&nbsp;&nbsp;&nbsp;&lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(hor_faces.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt; these_ver_faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindKnownFacesBetween(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hor_faces[bottom_face_index],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hor_faces[top_face_index]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (strategy <a href="CppOperatorEqual.htm">==</a> CreateVerticalFacesStrategy::one_face_per_square )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(these_ver_faces.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hor_faces[bottom_face_index],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hor_faces[top_face_index],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[2]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(hor_faces[bottom_face_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(hor_faces[top_face_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsHorizontal(*hor_faces[bottom_face_index]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsHorizontal(*hor_faces[top_face_index]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[2]));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells.push_back(cell);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(these_ver_faces.size() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hor_faces[bottom_face_index],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hor_faces[top_face_index],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[3],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[4],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these_ver_faces[5]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(hor_faces[bottom_face_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(hor_faces[top_face_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsHorizontal(*hor_faces[bottom_face_index]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsHorizontal(*hor_faces[top_face_index]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[4]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsVertical(*these_ver_faces[5]));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells.push_back(cell);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;CheckCells(cells);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cells;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::CreateHorizontalFaces(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; all_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers<br/>
)<br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!all_<a href="CppPointer.htm">point</a>s.empty());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s_per_layer <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t-&gt;Get<a href="CppPoint.htm">Point</a>s().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces_per_layer <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t-&gt;GetFaces().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_layers &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_layers &lt; 2) { <a href="CppTRACE.htm">TRACE</a>("WARNING: NEED AT LEAST TWO HORIZONTAL PLANES TO CREATE CELLS"); }<br/>
&nbsp;&nbsp;v.reserve(n_layers * n_<a href="CppPointer.htm">point</a>s_per_layer);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> layer=0; layer<a href="CppOperatorNotEqual.htm">!=</a>n_layers; <a href="CppOperatorIncrement.htm">++</a>layer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>_offset <a href="CppOperatorAssign.htm">=</a> n_<a href="CppPointer.htm">point</a>s_per_layer * layer;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; face_<a href="CppPointer.htm">point</a>_indices: t-&gt;GetFace<a href="CppPoint.htm">Point</a>Indices())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> face_index <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face_<a href="CppPointer.htm">point</a>_indices.size() <a href="CppOperatorEqual.htm">==</a> 3); <a href="CppComment.htm">//</a>Triangulation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>_index: face_<a href="CppPointer.htm">point</a>_indices)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>_index <a href="CppOperatorPlus.htm">+</a> <a href="CppPointer.htm">point</a>_offset &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s.push_back(all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>_index <a href="CppOperatorPlus.htm">+</a> <a href="CppPointer.htm">point</a>_offset]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (face_<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> face_<a href="CppPointer.htm">point</a>s[0]-&gt;CanGetZ())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face_<a href="CppPointer.htm">point</a>s.front()-&gt;GetZ() <a href="CppOperatorEqual.htm">==</a> face_<a href="CppPointer.htm">point</a>s.back()-&gt;GetZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(layer <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> face_index <a href="CppOperatorMinus.htm">-</a> n_faces_per_layer <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(layer <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> face_index <a href="CppOperatorMinus.htm">-</a> n_faces_per_layer &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( (layer <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (layer <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a>&nbsp;&nbsp;Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(face_<a href="CppPointer.htm">point</a>s.begin(),face_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&gt; &gt; <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::Create<a href="CppPoint.htm">Point</a>s(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height<br/>
)<br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_layers);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_layers; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>: t-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; new_<a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_<a href="CppPointer.htm">point</a>-&gt;SetZ(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) * layer_height );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(new_<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t-&gt;Get<a href="CppPoint.htm">Point</a>s().size()) * n_layers);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::CreateVerticalFaces(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; all_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CreateVerticalFacesStrategy strategy<br/>
)<br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t-&gt;GetEdges()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!edges.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edges.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s_per_layer <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t-&gt;Get<a href="CppPoint.htm">Point</a>s().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_ver_faces { strategy <a href="CppOperatorEqual.htm">==</a> CreateVerticalFacesStrategy::one_face_per_square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? 1 * n_edges<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: 2 * n_edges <a href="CppComment.htm">//</a>For every horizontal edge, two triangles are used instead<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt; v;<br/>
&nbsp;&nbsp;v.reserve(n_ver_faces * (n_layers <a href="CppOperatorMinus.htm">-</a> 1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_layers &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_layers &lt; 2) { <a href="CppTRACE.htm">TRACE</a>("WARNING: NEED AT LEAST TWO HORIZONTAL PLANES TO CREATE CELLS"); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> layer=0; layer<a href="CppOperatorNotEqual.htm">!=</a>n_layers-1; <a href="CppOperatorIncrement.htm">++</a>layer) <a href="CppComment.htm">//</a>-1 because there are no <a href="CppPointer.htm">point</a>s above the top layer<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorAssign.htm">=</a> n_<a href="CppPointer.htm">point</a>s_per_layer * layer;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; edge: edges)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge.first &lt; edge.second);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.first &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.second &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.first <a href="CppOperatorPlus.htm">+</a> n_<a href="CppPointer.htm">point</a>s_per_layer &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.second <a href="CppOperatorPlus.htm">+</a> n_<a href="CppPointer.htm">point</a>s_per_layer &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (strategy <a href="CppOperatorEqual.htm">==</a> CreateVerticalFacesStrategy::one_face_per_square)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.first],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.second],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.first <a href="CppOperatorPlus.htm">+</a> n_<a href="CppPointer.htm">point</a>s_per_layer],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.second <a href="CppOperatorPlus.htm">+</a> n_<a href="CppPointer.htm">point</a>s_per_layer]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot order face winding yet, need Cells <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::vertical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s_1 {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.first],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.second],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.first <a href="CppOperatorPlus.htm">+</a> n_<a href="CppPointer.htm">point</a>s_per_layer]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot order face winding yet, need Cells <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face_1 {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::vertical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(face_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s_2 {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.second],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.second <a href="CppOperatorPlus.htm">+</a> n_<a href="CppPointer.htm">point</a>s_per_layer],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>s_offset <a href="CppOperatorPlus.htm">+</a> edge.first <a href="CppOperatorPlus.htm">+</a> n_<a href="CppPointer.htm">point</a>s_per_layer]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face_2 {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s_2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::vertical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(face_2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_ver_faces * (n_layers <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::FindKnownFacesBetween(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; a, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; b<br/>
)<br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a-&gt;GetOrientation() <a href="CppOperatorEqual.htm">==</a> FaceOrientation::horizontal);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;GetOrientation() <a href="CppOperatorEqual.htm">==</a> FaceOrientation::horizontal);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect the <a href="CppPointer.htm">point</a>s the candidates must be a subset of<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Get<a href="CppPoint.htm">Point</a>s()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: b-&gt;Get<a href="CppPoint.htm">Point</a>s()) { <a href="CppPointer.htm">point</a>s.push_back(p); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdUnique.htm">std::unique</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end()) <a href="CppOperatorEqual.htm">==</a> <a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect the candidates<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> weak_candidates;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: a-&gt;Get<a href="CppPoint.htm">Point</a>s()) { <b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> q: p-&gt;GetConnected()) { weak_candidates.push_back(q); } }<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: b-&gt;Get<a href="CppPoint.htm">Point</a>s()) { <b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> q: p-&gt;GetConnected()) { weak_candidates.push_back(q); } }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> candidates;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: weak_candidates) { <b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> q <a href="CppOperatorAssign.htm">=</a> p.lock(); <b><a href="CppIf.htm">if</a></b> (q) candidates.push_back(q); }<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(candidates.begin(),candidates.end());<br/>
&nbsp;&nbsp;candidates.erase(<a href="CppStdUnique.htm">std::unique</a>(candidates.begin(),candidates.end()),candidates.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(candidates.begin(),candidates.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect the faces between<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> c: candidates)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsSubset(c-&gt;Get<a href="CppPoint.htm">Point</a>s(),<a href="CppPointer.htm">point</a>s)) { faces.push_back(c); }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdIs_sorted.htm">std::is_sorted</a>(faces.begin(),faces.end()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdUnique.htm">std::unique</a>(faces.begin(),faces.end()) <a href="CppOperatorEqual.htm">==</a> faces.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(faces.begin(),faces.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the faces a and b<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(faces.begin(),faces.end(),a) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(faces.begin(),faces.end(),b) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(faces.begin(),faces.end(),a);<br/>
&nbsp;&nbsp;faces.pop_back();<br/>
&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(faces.begin(),faces.end(),b);<br/>
&nbsp;&nbsp;faces.pop_back();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> faces;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::IsSubset(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> w<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(w.begin(),w.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdIs_sorted.htm">std::is_sorted</a>(v.begin(),v.end()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdIs_sorted.htm">std::is_sorted</a>(w.begin(),w.end()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdUnique.htm">std::unique</a>(v.begin(),v.end()) <a href="CppOperatorEqual.htm">==</a> v.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdUnique.htm">std::unique</a>(w.begin(),w.end()) <a href="CppOperatorEqual.htm">==</a> w.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(w.begin(),w.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> x;<br/>
&nbsp;&nbsp;<a href="CppStdSet_intersection.htm">std::set_intersection</a>(v.begin(),v.end(),w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(x));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(x.begin(),x.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x.size() <a href="CppOperatorEqual.htm">==</a> <a href="CppStdMin.htm">std::min</a>(v.size(),w.size());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::GetCells() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_cells;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Trying out to build cells from the testing <a href="CppTemplate.htm">templates</a>")<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Template::CreateTest(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; cells_creator {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellsCreatorFactory().Create(my_<b><a href="CppTemplate.htm">template</a></b>,n_layers,1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { cells_creator-&gt;GetCells() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells.size() &gt; 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Specific: check <b><a href="CppIf.htm">if</a></b> a Face really loses its neighbour: remove a prism from a cube");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a 2x1 cell block<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Template::CreateTest(1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>-&gt;CountFaces() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; cells_creator {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellsCreatorFactory().Create(my_<b><a href="CppTemplate.htm">template</a></b>,n_layers,1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { cells_creator-&gt;GetCells() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces_1 { cells[0]-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces_2 { cells[1]-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the two Faces that have a neighbour<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount_if.htm">std::count_if</a>(faces_1.begin(),faces_1.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetNeighbour().get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount_if.htm">std::count_if</a>(faces_2.begin(),faces_2.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetNeighbour().get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorEqual.htm">==</a> 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> internal_faces_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(faces_1.begin(),faces_1.end(),<a href="CppStd.htm">std</a>::inserter(internal_faces_1,internal_faces_1.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetNeighbour().get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> internal_faces_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy_if.htm">std::copy_if</a>(faces_2.begin(),faces_2.end(),<a href="CppStd.htm">std</a>::inserter(internal_faces_2,internal_faces_2.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetNeighbour().get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(internal_faces_1 <a href="CppOperatorEqual.htm">==</a> internal_faces_2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::CellsCreator::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellscreatorfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellscreatorfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHCELLSCREATORFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHCELLSCREATORFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/quantity.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>The only <b><a href="CppClass.htm">class</a></b> to use Cell its <a href="CppConstructor.htm">constructor</a><br/>
<b><a href="CppStruct.htm">struct</a></b> CellsCreatorFactory<br/>
{<br/>
&nbsp;&nbsp;CellsCreatorFactory();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a cell in the <a href="CppShape.htm">shape</a> of a prism<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| | |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorPlus.htm">+</a> |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> \|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; CreateTestCube() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create two prisms-<a href="CppShape.htm">shape</a>d cell to form a cube<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\ <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---<a href="CppOperatorPlus.htm">+</a> |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| | | |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorPlus.htm">+</a>-|-+<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> \|/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHCELLSCREATORFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshcellscreatorfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshcellscreatorfactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreatorfactory.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcell.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcellscreator.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<b><a href="CppTemplate.htm">template</a></b>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::CellsCreatorFactory::CellsCreatorFactory()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::CellsCreator&gt; <a href="CppRibi.htm">ribi</a>::trim::CellsCreatorFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Template&gt; t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; layer_height<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; creator {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> CellsCreator(t,n_layers,layer_height,*<b><a href="CppThis.htm">this</a></b>)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(creator);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> creator;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::CellsCreator&gt; <a href="CppRibi.htm">ribi</a>::trim::CellsCreatorFactory::CreateTestCube() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Template::CreateTest(1)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>-&gt;CountFaces() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; cells_creator {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CellsCreatorFactory().Create(my_<b><a href="CppTemplate.htm">template</a></b>,n_layers,1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { cells_creator-&gt;GetCells() };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A cube consists out of two prisms");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 8 faces");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[1]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 8 faces");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces { cells[i]-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face: faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cells_creator;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::CellsCreator&gt; <a href="CppRibi.htm">ribi</a>::trim::CellsCreatorFactory::CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Template::CreateTest(0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>-&gt;CountFaces() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_layers <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; cells_creator {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CellsCreatorFactory().Create(my_<b><a href="CppTemplate.htm">template</a></b>,n_layers,1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { cells_creator-&gt;GetCells() };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 1 prisms");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists out of 8 faces");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces { cells[i]-&gt;GetFaces() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face: faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cells_creator;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::CellsCreatorFactory::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::CellsCreatorFactory::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create prism<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellsCreatorFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { prism-&gt;GetCells() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(cells.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism consists of 1 prisms");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 8 faces (as the vertical faces are split into 2 triangle)");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create cube<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;CellsCreator&gt; cube {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellsCreatorFactory().CreateTestCube()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { cube-&gt;GetCells() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A cube consists of 2 prisms");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[0]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 8 faces (as the vertical faces are split into 2 triangle)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cells[1]-&gt;GetFaces().size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 8 faces (as the vertical faces are split into 2 triangle)");<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::CellsCreatorFactory::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshedge.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshedge.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHEDGE_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHEDGE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfaceorientation.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>Sure, its <a href="CppPointer.htm">point</a>s can change...<br/>
<b><a href="CppStruct.htm">struct</a></b> Edge<br/>
{<br/>
&nbsp;&nbsp;Edge(<b><a href="CppConst.htm">const</a></b> Edge&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Edge&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Edge&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt; GetFrom() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s[0]; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>&gt; GetFrom()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s[0]; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt; GetTo() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s[1]; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>&gt; GetTo()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s[1]; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Reverse from and to<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Reverse() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Edge() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Edge* x);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> Edge* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Faces <b><a href="CppThis.htm">this</a></b> Edge belongs to<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_belongs_to;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The index of <b><a href="CppThis.htm">this</a></b> Edge in an TriangleMeshBuilder vector. It is determined at the end<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <b><a href="CppInt.htm">int</a></b> m_index;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_<a href="CppPointer.htm">point</a>s must be a <a href="CppStdVector.htm">std::vector</a> instead of a <a href="CppStdSet.htm">std::set</a>, as<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/their orders matter (and changed by Reverse<a href="CppPoint.htm">Point</a>s)<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> EdgeFactory;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Enforce a Edge is only created by a EdgeFactory<br/>
&nbsp;&nbsp;Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt;&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EdgeFactory&amp; lock<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> FaceFactory;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>BelongsTo(<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Determined in the end<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> TriangleMeshBuilder;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { m_index <a href="CppOperatorAssign.htm">=</a> index; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Edge&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> Edge&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> Edge&amp; rhs);<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Edge&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHEDGE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshedge.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshedge.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshedge.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwindings.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::Edge::Edge(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt;&amp; <a href="CppAny.htm">any</a>_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EdgeFactory&amp;<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_belongs_to{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_index{index},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(<a href="CppAny.htm">any</a>_<a href="CppPointer.htm">point</a>s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge::<a href="CppAdd.htm">Add</a>BelongsTo(<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face.lock());<br/>
&nbsp;&nbsp;m_belongs_to.push_back(face);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&gt; <a href="CppRibi.htm">ribi</a>::trim::Edge::Get<a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Get<a href="CppPoint.htm">Point</a>s().size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Get<a href="CppPoint.htm">Point</a>s()[index];<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge::Reverse() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_<a href="CppPointer.htm">point</a>s[0],m_<a href="CppPointer.htm">point</a>s[1]);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::Edge::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Winding winding: Windings().GetAll())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EdgeFactory().CreateTestTriangle(winding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(edges.begin(),edges.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> const_edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAdd.htm">Add</a>Const(edges)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Windings().ToStr(winding));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().CalcWindingHorizontal(const_edges) <a href="CppOperatorEqual.htm">==</a> winding);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::Edge::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetFrom() <a href="CppOperatorEqual.htm">==</a> rhs.GetFrom()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetTo()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetTo()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Edge&amp; f)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("edge_index",f.GetIndex())<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("from",*f.GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("to",*f.GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("<a href="CppPointer.htm">point</a>s",s.str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshedgefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshedgefactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHEDGEFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHEDGEFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfaceorientation.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwinding.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> EdgeFactory<br/>
{<br/>
&nbsp;&nbsp;EdgeFactory();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt;&amp; <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the edges of a testing prism<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The indices are { top, bottom, a,b,c }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a> indices:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d---e<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| | |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| c |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> \|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a---b<br/>
<br/>
<br/>
&nbsp;&nbsp;Edge indices will become:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;6 | 5<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;d---4---e&nbsp;&nbsp;&nbsp;&nbsp;d---4---e---5---f---6---d<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; c&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp;&nbsp; A&nbsp;&nbsp; B&nbsp;&nbsp; C&nbsp;&nbsp; 7 &lt;-<a href="CppOperatorDecrement.htm">--</a> here, A,B,C denote 10,11,12<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> \&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;| 3&nbsp;&nbsp; 2 |&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; \|&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;a---1---b&nbsp;&nbsp;&nbsp;&nbsp;a---1---b---2---c---3---a<br/>
<br/>
<br/>
&nbsp;&nbsp;Folded out, with the bottom (marked #) at the center<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B | 5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;f-B-c&nbsp;&nbsp; A&nbsp;&nbsp; e<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|\&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;6 C 3#2 | 9<br/>
&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|##\|/<br/>
&nbsp;&nbsp;d-7-a-1-b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7 8 9<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;\|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-4-e<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates a triangle with the requested winding (when viewed from above)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>s are always the same:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 1 2<br/>
&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> 0&nbsp;&nbsp; where Z <a href="CppOperatorAssign.htm">=</a> 1.0 <b><a href="CppFor.htm">for</a></b> all <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| |\<br/>
&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> 2-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
<br/>
&nbsp;&nbsp;clockwise&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 0-&gt;1, 1-&gt;2, 2-&gt;0<br/>
&nbsp;&nbsp;<a href="CppCounter.htm">counter</a>_clockwise: 0-&gt;2, 2-&gt;1, 1-&gt;0<br/>
&nbsp;&nbsp;<a href="CppIndeterminate.htm">indeterminate</a>&nbsp;&nbsp;&nbsp;&nbsp;: 0-&gt;1, 2-&gt;1, 2-&gt;0<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestTriangle(<b><a href="CppConst.htm">const</a></b> Winding winding) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHEDGEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshedgefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshedgefactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshedgefactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshedge.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwindings.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::EdgeFactory()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Edge&gt; <a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt;&amp; <a href="CppPointer.htm">point</a>s<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give every Cell some index at creation<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> cnt;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Edge(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the <a href="CppPoint.htm">Point</a>s know they belong to the Edge<br/>
&nbsp;&nbsp;edge-&gt;GetFrom()-&gt;<a href="CppAdd.htm">Add</a>BelongsTo(edge);<br/>
&nbsp;&nbsp;edge-&gt;GetTo()-&gt;<a href="CppAdd.htm">Add</a>BelongsTo(edge);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> edge;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().CreateTestPrism()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_1 { <a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[1] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_2 { <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[2] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_3 { <a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[0] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_4 { <a href="CppPointer.htm">point</a>s[3], <a href="CppPointer.htm">point</a>s[4] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_5 { <a href="CppPointer.htm">point</a>s[4], <a href="CppPointer.htm">point</a>s[5] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_6 { <a href="CppPointer.htm">point</a>s[5], <a href="CppPointer.htm">point</a>s[3] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_7 { <a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[3] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_8 { <a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[4] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_9 { <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[4] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_a { <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[5] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_b { <a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[5] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_c { <a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[3] };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_1 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_1) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_2 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_2) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_3 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_3) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_4 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_4) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_5 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_5) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_6 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_6) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_7 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_7) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_8 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_8) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_9 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_9) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_a { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_a) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_b { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_b) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_c { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_c) };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_5);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_6);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_7);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_8);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_9);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_a);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_c);<br/>
&nbsp;&nbsp;edge_1-&gt;SetIndex(1);<br/>
&nbsp;&nbsp;edge_2-&gt;SetIndex(2);<br/>
&nbsp;&nbsp;edge_3-&gt;SetIndex(3);<br/>
&nbsp;&nbsp;edge_4-&gt;SetIndex(4);<br/>
&nbsp;&nbsp;edge_5-&gt;SetIndex(5);<br/>
&nbsp;&nbsp;edge_6-&gt;SetIndex(6);<br/>
&nbsp;&nbsp;edge_7-&gt;SetIndex(7);<br/>
&nbsp;&nbsp;edge_8-&gt;SetIndex(8);<br/>
&nbsp;&nbsp;edge_9-&gt;SetIndex(9);<br/>
&nbsp;&nbsp;edge_a-&gt;SetIndex(10);<br/>
&nbsp;&nbsp;edge_b-&gt;SetIndex(11);<br/>
&nbsp;&nbsp;edge_c-&gt;SetIndex(12);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D center { Helper().CalcCenter(<a href="CppPointer.htm">point</a>s) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_6,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_7,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_8,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_9,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_c<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> prism;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::CreateTestTriangle(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Winding winding) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winding <a href="CppOperatorNotEqual.htm">!=</a> Winding::n_types);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().CreateTestTriangle(winding <a href="CppOperatorEqual.htm">==</a> Winding::<a href="CppIndeterminate.htm">indeterminate</a> ? Winding::clockwise : winding)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Clockwise:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 1 2<br/>
&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> 0&nbsp;&nbsp; where Z <a href="CppOperatorAssign.htm">=</a> 1.0 <b><a href="CppFor.htm">for</a></b> all <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| |\<br/>
&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> 2-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCounter.htm">Counter</a>-clockwise:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 1 2<br/>
&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> 0&nbsp;&nbsp; where Z <a href="CppOperatorAssign.htm">=</a> 1.0 <b><a href="CppFor.htm">for</a></b> all <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| |\<br/>
&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> 1-2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end(),<b><a href="CppNullptr.htm">nullptr</a></b>) <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>clockwise&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 0-&gt;1, 1-&gt;2, 2-&gt;0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCounter.htm">counter</a>_clockwise: 0-&gt;1, 1-&gt;2, 2-&gt;0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppIndeterminate.htm">indeterminate</a>&nbsp;&nbsp;&nbsp;&nbsp;: 0-&gt;1, 2-&gt;1, 2-&gt;0<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winding <a href="CppOperatorNotEqual.htm">!=</a> Winding::clockwise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> Helper().IsClockwiseHorizontal( {<a href="CppPointer.htm">point</a>s[0],<a href="CppPointer.htm">point</a>s[1],<a href="CppPointer.htm">point</a>s[2]} )<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winding <a href="CppOperatorNotEqual.htm">!=</a> Winding::<a href="CppCounter.htm">counter</a>_clockwise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> !Helper().IsClockwiseHorizontal( {<a href="CppPointer.htm">point</a>s[0],<a href="CppPointer.htm">point</a>s[1],<a href="CppPointer.htm">point</a>s[2]} )<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_1{ {<a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[1]} };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_1[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_1[1]);<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_2 {{}};<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (winding)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::clockwise&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::<a href="CppCounter.htm">counter</a>_clockwise: <a href="CppPointer.htm">point</a>s_2 <a href="CppOperatorAssign.htm">=</a> { <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[2] }; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::<a href="CppIndeterminate.htm">indeterminate</a>&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppPointer.htm">point</a>s_2 <a href="CppOperatorAssign.htm">=</a> { <a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[1] }; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::CreateTestTriangle: invalid Winding");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_2[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_2[1]);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt;,2&gt; <a href="CppPointer.htm">point</a>s_3 {{<a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[0]}};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_3[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s_3[1]);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_1 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_1) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_2 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_2) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge&gt; edge_3 { EdgeFactory().Create(<a href="CppPointer.htm">point</a>s_3) };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edge_3);<br/>
&nbsp;&nbsp;edge_1-&gt;SetIndex(1);<br/>
&nbsp;&nbsp;edge_2-&gt;SetIndex(2);<br/>
&nbsp;&nbsp;edge_3-&gt;SetIndex(3);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> triangle {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge_3<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().CalcWindingHorizontal(<a href="CppAdd.htm">Add</a>Const(triangle)) <a href="CppOperatorEqual.htm">==</a> winding);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> triangle;<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> Winding winding: Windings().GetAll())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> triangle {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EdgeFactory().CreateTestTriangle(winding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().CalcWindingHorizontal(<a href="CppAdd.htm">Add</a>Const(triangle)) <a href="CppOperatorEqual.htm">==</a> winding);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EdgeFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prism.size() <a href="CppOperatorEqual.htm">==</a> 12 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 12 edges (as the vertical faces are split into 2 triangle)");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::EdgeFactory::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshface.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshface.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHFACE_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHFACE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfaceorientation.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>Sure, its <a href="CppPointer.htm">point</a>s can change...<br/>
<b><a href="CppStruct.htm">struct</a></b> Face<br/>
{<br/>
&nbsp;&nbsp;Face(<b><a href="CppConst.htm">const</a></b> Face&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Face&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Face&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::Coordinat3D CalcCenter() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> CalcPriority() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/When the Face its <a href="CppPointer.htm">point</a>s know their Layers, call DoExtractCoordinats<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanExtractCoordinats() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/When the Face its <a href="CppPointer.htm">point</a>s know their Layers, call <b><a href="CppThis.htm">this</a></b> <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoExtractCoordinats() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; GetCoordinats() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_coordinats; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppNullptr.htm">nullptr</a></b> <b><a href="CppIf.htm">if</a></b> no neighbour<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; GetNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;FaceOrientation GetOrientation() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_orientation; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppNullptr.htm">nullptr</a></b> <b><a href="CppIf.htm">if</a></b> no owner, a Volume:m_cellindex type<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; GetOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt; Get<a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Reverse<a href="CppPoint.htm">Point</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBoundaryType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> type) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { m_type <a href="CppOperatorAssign.htm">=</a> type; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Before saving a Face to OpenFOAM, its <a href="CppPoint.htm">Point</a>s' winding needs to be set to the correct order:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> <b><a href="CppIf.htm">if</a></b> the Face is a boundary face, the normal needs to <a href="CppPointer.htm">point</a> outwards;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; going away from the mesh; its <a href="CppPointer.htm">point</a>s needs to be ordered clockwise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; when viewed from its cell's center<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> <b><a href="CppIf.htm">if</a></b> the Face is an internal face, the normal needs to <a href="CppPointer.htm">point</a> inside<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; the cell with the heighest index<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCorrectWinding() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Face() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Face* x);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> Face* x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Cells <b><a href="CppThis.htm">this</a></b> Face belongs to<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_belongs_to;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_coordinats is used to speed up 'FaceExists', which compares a <b><a href="CppNew.htm">new</a></b> Face<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with one already present, by comparing their sorted coordinats<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; m_coordinats;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The index of <b><a href="CppThis.htm">this</a></b> Face in an TriangleMeshBuilder vector. It is determined at the end<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <b><a href="CppInt.htm">int</a></b> m_index;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceOrientation m_orientation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_<a href="CppPointer.htm">point</a>s must be a <a href="CppStdVector.htm">std::vector</a> instead of a <a href="CppStdSet.htm">std::set</a>, as<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/their orders matter (and changed by Reverse<a href="CppPoint.htm">Point</a>s)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The type of boundary <b><a href="CppThis.htm">this</a></b> Face belongs to. It is determined at the end<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/By <b><a href="CppDefault.htm">default</a></b> it is BoundaryType::internalMesh: a Face that is between two cells<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdString.htm">std::string</a> m_type;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> FaceFactory;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Enforce a Face is only created by a FaceFactory<br/>
&nbsp;&nbsp;Face(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceOrientation <a href="CppAny.htm">any</a>_orientation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceFactory&amp; lock<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> CellFactory;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>BelongsTo(<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; cell) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Determined in the end<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> TriangleMeshBuilder;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetBoundaryType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_type; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { m_index <a href="CppOperatorAssign.htm">=</a> index; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Face&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Face&amp; lhs, <b><a href="CppConst.htm">const</a></b> Face&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Face&amp; lhs, <b><a href="CppConst.htm">const</a></b> Face&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Face&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHFACE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshface.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshface.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshcell.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::Face::Face(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppAny.htm">any</a>_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceOrientation <a href="CppAny.htm">any</a>_orientation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceFactory&amp;<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_belongs_to{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_coordinats{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_index{index},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_orientation(<a href="CppAny.htm">any</a>_orientation),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(<a href="CppAny.htm">any</a>_<a href="CppPointer.htm">point</a>s),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_type{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_orientation <a href="CppOperatorEqual.htm">==</a> FaceOrientation::horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppPointer.htm">point</a>s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppPointer.htm">point</a>s &gt; 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppPointer.htm">point</a>s[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppPointer.htm">point</a>s[0]-&gt;CanGetZ())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> z <a href="CppOperatorAssign.htm">=</a> m_<a href="CppPointer.htm">point</a>s[0]-&gt;GetZ();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p: m_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;CanGetZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(z <a href="CppOperatorEqual.htm">==</a> p-&gt;GetZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face::<a href="CppAdd.htm">Add</a>BelongsTo(<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; cell) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell.lock());<br/>
&nbsp;&nbsp;m_belongs_to.push_back(cell);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_belongs_to.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> 2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (m_belongs_to.size() <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (m_belongs_to.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_belongs_to[0].lock() <a href="CppOperatorNotEqual.htm">!=</a> m_belongs_to[1].lock())<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::trim::Face::CalcCenter() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D sum {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAccumulate.htm">std::accumulate</a>(m_<a href="CppPointer.htm">point</a>s.begin(),m_<a href="CppPointer.htm">point</a>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt;&amp; <a href="CppPointer.htm">point</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetZ().value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sum <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_<a href="CppPointer.htm">point</a>s.size());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face::CalcPriority() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetOwner());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMax.htm">std::max</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetOwner()-&gt;GetIndex(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetNeighbour() ? GetNeighbour()-&gt;GetIndex() : <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face::CanExtractCoordinats() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: m_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppPointer.htm">point</a>-&gt;CanGetZ()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face::DoExtractCoordinats() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanExtractCoordinats());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_coordinats.empty()); <a href="CppComment.htm">//</a>This is done multiple <a href="CppTime.htm">time</a>s in <a href="CppDebug.htm">debugging</a><br/>
&nbsp;&nbsp;m_coordinats <a href="CppOperatorAssign.htm">=</a> Helper().ExtractCoordinats(m_<a href="CppPointer.htm">point</a>s);<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell&gt; <a href="CppRibi.htm">ribi</a>::trim::Face::GetNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_belongs_to.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> 2);<br/>
&nbsp;&nbsp;m_belongs_to.erase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove_if.htm">std::remove_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_belongs_to.begin(),m_belongs_to.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; cell)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !cell.lock();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_belongs_to.end()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; p;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_belongs_to.size() &lt; 2) <b><a href="CppReturn.htm">return</a></b> p;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_belongs_to[0].lock() <a href="CppOperatorNotEqual.htm">!=</a> m_belongs_to[1].lock());<br/>
<br/>
&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> m_belongs_to[1].lock();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Cell&gt; <a href="CppRibi.htm">ribi</a>::trim::Face::GetOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_belongs_to.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> 2);<br/>
&nbsp;&nbsp;m_belongs_to.erase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove_if.htm">std::remove_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_belongs_to.begin(),m_belongs_to.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; cell)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !cell.lock();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_belongs_to.end()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_belongs_to.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_belongs_to.empty());<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_belongs_to[0].lock()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&gt; <a href="CppRibi.htm">ribi</a>::trim::Face::Get<a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Get<a href="CppPoint.htm">Point</a>s().size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Get<a href="CppPoint.htm">Point</a>s()[index];<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face::SetCorrectWinding() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_belongs_to.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalOr.htm">||</a> m_belongs_to.size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!GetNeighbour())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Boundary face: normal must <a href="CppPointer.htm">point</a> away from the Cell its center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; observer { GetOwner() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(observer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>TEMP: reversed logic..<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppComment.htm">/*</a> ! <a href="CppComment.htm">*/</a> Helper().IsClockwise(<a href="CppAdd.htm">Add</a>Const(m_<a href="CppPointer.htm">point</a>s),observer-&gt;CalculateCenter()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(m_<a href="CppPointer.htm">point</a>s.begin(),m_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(! <a href="CppComment.htm">/*</a> added <a href="CppComment.htm">*/</a> Helper().IsClockwise(<a href="CppAdd.htm">Add</a>Const(m_<a href="CppPointer.htm">point</a>s),observer-&gt;CalculateCenter()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Internal face: normal must <a href="CppPointer.htm">point</a> to the Cell with the heighest label;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;must <a href="CppPointer.htm">point</a> away from the Cell with the lowest index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; observer {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetOwner()-&gt;GetIndex() &lt; GetNeighbour()-&gt;GetIndex() ? GetOwner() : GetNeighbour()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(observer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppComment.htm">/*</a> ! <a href="CppComment.htm">*/</a>Helper().IsClockwise(<a href="CppAdd.htm">Add</a>Const(m_<a href="CppPointer.htm">point</a>s),observer-&gt;CalculateCenter()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(m_<a href="CppPointer.htm">point</a>s.begin(),m_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(! <a href="CppComment.htm">/*</a> added <a href="CppComment.htm">*/</a> Helper().IsClockwise(<a href="CppAdd.htm">Add</a>Const(m_<a href="CppPointer.htm">point</a>s),observer-&gt;CalculateCenter()));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::Face::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!(face-&gt;GetOwner().get()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Faces obtain an owner when being added to a Cell");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!(face-&gt;GetNeighbour().get()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Faces obtain a neighbour when beging added to a Cell twice");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::Face::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.Get<a href="CppPoint.htm">Point</a>s() <a href="CppOperatorEqual.htm">==</a> rhs.Get<a href="CppPoint.htm">Point</a>s()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetOrientation() <a href="CppOperatorEqual.htm">==</a> rhs.GetOrientation()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; f)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("face_index",f.GetIndex())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("orientation",<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(f.GetOrientation()))<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(f.Get<a href="CppPoint.htm">Point</a>s().size()) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("<a href="CppPointer.htm">point</a>" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i),*f.Get<a href="CppPoint.htm">Point</a>(i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("<a href="CppPointer.htm">point</a>s",s.str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshfacefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshfacefactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHFACEFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHFACEFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfaceorientation.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FaceFactory<br/>
{<br/>
&nbsp;&nbsp;FaceFactory();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceOrientation <a href="CppAny.htm">any</a>_orientation<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceOrientation <a href="CppAny.htm">any</a>_orientation<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the faces of a testing prism from edges<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Edge indices are:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;6 | 5<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---4---<a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---4---+---5---+---6---+<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; B&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;7&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp;&nbsp; A&nbsp;&nbsp; B&nbsp;&nbsp; C&nbsp;&nbsp; 7 &lt;-<a href="CppOperatorDecrement.htm">--</a> here, A,B,C denote 10,11,12<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> \&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;| 3&nbsp;&nbsp; 2 |&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; \|&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---1---<a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---1---+---2---+---3---+<br/>
<br/>
&nbsp;&nbsp;Folded out, with the bottom (marked #) at the center<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B | 5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;f-B-c&nbsp;&nbsp; A&nbsp;&nbsp; e<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|\&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;6 C 3#2 | 9<br/>
&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|##\|/<br/>
&nbsp;&nbsp;d-7-a-1-b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7 8 9<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;\|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-4-e<br/>
<br/>
&nbsp;&nbsp;The front plane exists of the edges 1,4,7,9<br/>
<br/>
&nbsp;&nbsp;All windings are clockwise, when seen from the inside of the prism<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the faces of a testing prism from <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The indices are { top, bottom, a,b,c }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D---E<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| | |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;| C | &lt;<a href="CppOperatorMinus.htm">-</a> b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> \|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A---B<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bottom<br/>
<br/>
&nbsp;&nbsp;Folder out, with the bottom (marked #) at the center<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> | \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---C c | d <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;|f <a href="CppOperatorDivide.htm">/</a>|\&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a> |#\ | <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> e|##\|/<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---A---B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\ a|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| \ |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|b \|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>---+<br/>
<br/>
&nbsp;&nbsp;The front planes are 'a' and 'b', where 'a' has two nodes at the base<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestPrismFrom<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHFACEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshfacefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshfacefactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshedge.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshedgefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwinding.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::FaceFactory::FaceFactory()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face&gt; <a href="CppRibi.htm">ribi</a>::trim::FaceFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceOrientation <a href="CppAny.htm">any</a>_orientation<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> edge: edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.erase(<a href="CppStdUnique.htm">std::unique</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end()),<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Create(<a href="CppPointer.htm">point</a>s,<a href="CppAny.htm">any</a>_orientation);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face&gt; <a href="CppRibi.htm">ribi</a>::trim::FaceFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceOrientation <a href="CppAny.htm">any</a>_orientation<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give every Cell some index at creation<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> cnt;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Face(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAny.htm">any</a>_orientation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: face-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;<a href="CppAdd.htm">Add</a>Connected(face);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::FaceFactory::CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EdgeFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size() <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_bottom { edges[0], edges[ 1], edges[ 2] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_top&nbsp;&nbsp;&nbsp;&nbsp;{ edges[3], edges[ 4], edges[ 5] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edges[0], edges[ 7], edges[ 8] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edges[4], edges[ 7], edges[ 8] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edges[2], edges[ 9], edges[10] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edges[4], edges[ 8], edges[ 9] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edges[2], edges[ 6], edges[11] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges_f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ edges[5], edges[10], edges[11] };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D center { Helper().CalcCenter(edges) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Helper().CalcWindingHorizontal(<a href="CppAdd.htm">Add</a>Const(edges_bottom)) <a href="CppOperatorNotEqual.htm">!=</a> Winding::clockwise)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Helper().SetWindingHorizontal(edges_bottom,Winding::clockwise);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Helper().CalcWindingHorizontal(<a href="CppAdd.htm">Add</a>Const(edges_top)) <a href="CppOperatorNotEqual.htm">!=</a> Winding::<a href="CppCounter.htm">counter</a>_clockwise)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Helper().SetWindingHorizontal(edges_top,Winding::<a href="CppCounter.htm">counter</a>_clockwise);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwise(<a href="CppAdd.htm">Add</a>Const(edges_bottom),center));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsClockwiseHorizontal(edges_bottom))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(edges_bottom.begin(),edges_bottom.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsClockwiseHorizontal(edges_top))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(edges_top.begin(),edges_top.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; bottom {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_bottom,FaceOrientation::horizontal)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; top {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_top,FaceOrientation::horizontal)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_a,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_b,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_c,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_d,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; e {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_e,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(edges_f,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bottom);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;bottom-&gt;SetIndex(1);<br/>
&nbsp;&nbsp;top-&gt;SetIndex(2);<br/>
&nbsp;&nbsp;a-&gt;SetIndex(3);<br/>
&nbsp;&nbsp;b-&gt;SetIndex(4);<br/>
&nbsp;&nbsp;c-&gt;SetIndex(5);<br/>
&nbsp;&nbsp;d-&gt;SetIndex(6);<br/>
&nbsp;&nbsp;e-&gt;SetIndex(7);<br/>
&nbsp;&nbsp;f-&gt;SetIndex(8);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;top,bottom,a,b,c,d,e,f<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> prism;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::FaceFactory::CreateTestPrismFrom<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().CreateTestPrism()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_bottom { <a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[2] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_top&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[3], <a href="CppPointer.htm">point</a>s[4], <a href="CppPointer.htm">point</a>s[5] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[4] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[3], <a href="CppPointer.htm">point</a>s[4] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[5] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[1], <a href="CppPointer.htm">point</a>s[4], <a href="CppPointer.htm">point</a>s[5] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[0], <a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[3] };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s_f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppPointer.htm">point</a>s[2], <a href="CppPointer.htm">point</a>s[3], <a href="CppPointer.htm">point</a>s[5] };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(<a href="CppPointer.htm">point</a>s_bottom))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(<a href="CppPointer.htm">point</a>s_bottom.begin(),<a href="CppPointer.htm">point</a>s_bottom.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(<a href="CppPointer.htm">point</a>s_top))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(<a href="CppPointer.htm">point</a>s_top.begin(),<a href="CppPointer.htm">point</a>s_top.end());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; bottom {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_bottom,FaceOrientation::horizontal)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; top {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_top,FaceOrientation::horizontal)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_a,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_b,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_c,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_d,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; e {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_e,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<a href="CppPointer.htm">point</a>s_f,FaceOrientation::vertical)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bottom);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;bottom-&gt;SetIndex(1);<br/>
&nbsp;&nbsp;top-&gt;SetIndex(2);<br/>
&nbsp;&nbsp;a-&gt;SetIndex(3);<br/>
&nbsp;&nbsp;b-&gt;SetIndex(4);<br/>
&nbsp;&nbsp;c-&gt;SetIndex(5);<br/>
&nbsp;&nbsp;d-&gt;SetIndex(6);<br/>
&nbsp;&nbsp;e-&gt;SetIndex(7);<br/>
&nbsp;&nbsp;f-&gt;SetIndex(8);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;top,bottom,a,b,c,d,e,f<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> prism;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::FaceFactory::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::FaceFactory::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().CreateTestPrism()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prism.size() <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 8 faces (as the vertical faces are split into 2 triangle)");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::FaceFactory::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshfaceorientation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshfaceorientation.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHFACEORIENTATION_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHFACEORIENTATION_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> FaceOrientation { horizontal, vertical };<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHFACEORIENTATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshfaceorientation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshfaceorientation.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshfaceorientation.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshfwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHFWD_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHFWD_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ConstCoordinat2D;<br/>
<b><a href="CppStruct.htm">struct</a></b> Coordinat2D;<br/>
<b><a href="CppStruct.htm">struct</a></b> Coordinat3D;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Cell;<br/>
<b><a href="CppStruct.htm">struct</a></b> CellFactory;<br/>
<b><a href="CppStruct.htm">struct</a></b> CellsCreator;<br/>
<b><a href="CppStruct.htm">struct</a></b> CellsCreatorFactory;<br/>
<b><a href="CppStruct.htm">struct</a></b> Edge;<br/>
<b><a href="CppStruct.htm">struct</a></b> EdgeFactory;<br/>
<b><a href="CppStruct.htm">struct</a></b> Face;<br/>
<b><a href="CppStruct.htm">struct</a></b> FaceFactory;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>Factory;<br/>
<b><a href="CppStruct.htm">struct</a></b> Template;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshhelper.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshhelper.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHHELPER_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHHELPER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "constcoordinat2d.h"<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwinding.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Helper<br/>
{<br/>
&nbsp;&nbsp;Helper();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the <a href="CppPointer.htm">point</a> in the center of the collection of edges<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D CalcCenter(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D CalcCenter(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D CalcNormal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find out the Winding of the edges<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/knowing that all edges are in the same XY plane<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/when viewed from above (at an infinite Z coordinat)<br/>
&nbsp;&nbsp;Winding CalcWindingHorizontal(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; ExtractCoordinats(<b><a href="CppConst.htm">const</a></b> Face&amp; face);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; ExtractCoordinats(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the angle in radians between two deltas<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/12 o'clock is 0.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 3 o'clock is 0.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 6 o'clock is 1.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 9 o'clock is 1.5 * pi<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;(11)&nbsp;&nbsp;|&nbsp;&nbsp;(1)<br/>
 <a href="CppOperatorMinus.htm">-</a>2|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
 <a href="CppOperatorMinus.htm">-</a>1| (10)&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)<br/>
&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;0+----------0------<a href="CppOperatorDecrement.htm">--</a>X<br/>
&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
 <a href="CppOperatorPlus.htm">+</a>1| (8)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(4)<br/>
&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
 <a href="CppOperatorPlus.htm">+</a>2|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; (7)&nbsp;&nbsp;|&nbsp;&nbsp;(5)<br/>
&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>----------+------<a href="CppOperatorDecrement.htm">--</a>X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> <a href="CppOperatorPlus.htm">+</a> <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 2 1 0 1 2 3<br/>
<br/>
&nbsp;&nbsp;Appriximate coordinat <b><a href="CppFor.htm">for</a></b> a <a href="CppPointer.htm">point</a> <b><a href="CppFor.htm">for</a></b> every hour, with the approximate angle<br/>
&nbsp;&nbsp; 1: ( 1,-2) :&nbsp;&nbsp;1/6 * pi<br/>
&nbsp;&nbsp; 2: ( 2,-1) :&nbsp;&nbsp;2/6 * pi<br/>
&nbsp;&nbsp; 3: ( 3, 0) :&nbsp;&nbsp;3/6 * pi<br/>
&nbsp;&nbsp; 4: ( 2, 1) :&nbsp;&nbsp;4/6 * pi<br/>
&nbsp;&nbsp; 5: ( 1, 2) :&nbsp;&nbsp;5/6 * pi<br/>
&nbsp;&nbsp; 6: ( 0, 3) :&nbsp;&nbsp;6/6 * pi<br/>
&nbsp;&nbsp; 7: (-1, 2) :&nbsp;&nbsp;7/6 * pi<br/>
&nbsp;&nbsp; 8: (-2, 1) :&nbsp;&nbsp;8/6 * pi<br/>
&nbsp;&nbsp; 9: (-3, 0) :&nbsp;&nbsp;9/6 * pi<br/>
&nbsp;&nbsp;10: (-2,-1) : 10/6 * pi<br/>
&nbsp;&nbsp;11: (-1,-2) : 11/6 * pi<br/>
&nbsp;&nbsp;12: ( 0,-3) : 12/6 * pi<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Are the <a href="CppPointer.htm">point</a>s ordered clockwise when seen from the observer<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsClockwise(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; center<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsClockwise(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; observer<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Are the <a href="CppPointer.htm">point</a>s ordered clockwise in the XY plane seen from above<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> (e.g. from coordinat {0,0,1} )<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsClockwiseHorizontal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Edge&gt; edge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; observer<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Are the <a href="CppPointer.htm">point</a>s ordered clockwise in the XY plane seen from above<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> (e.g. from coordinat {0,0,1} )<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsClockwiseHorizontal(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Are the <a href="CppPointer.htm">point</a>s ordered clockwise in the XY plane seen from above<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> (e.g. from coordinat {0,0,1} )<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsClockwiseVertical(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt;&amp; observer<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsHorizontal(<b><a href="CppConst.htm">const</a></b> Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsVertical(<b><a href="CppConst.htm">const</a></b> Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the edges to get a certain Winding,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/knowing that all edges are in the same XY plane<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/when viewed from above (at an infinite Z coordinat)<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWindingHorizontal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Winding winding<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Help adding constness a bit<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> T&gt; &gt; <a href="CppAdd.htm">Add</a>Const(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt; &gt; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> T&gt; &gt;(v.begin(),v.end());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCanLexicalCast.htm">CanLexicalCast</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> TargetType&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppCanLexicalCast.htm">CanLexicalCast</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; from)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;TargetType&gt;(from);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBoostBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Something unexpected happened");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHHELPER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshhelper.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshhelper.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIomanipH.htm">iomanip</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "constcoordinat2d.h"<br/>
<a href="CppInclude.htm">#include</a> "coordinat2d.h"<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshedge.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>factory.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::Helper::Helper::Helper()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::trim::Helper::CalcCenter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> edge: edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(edge-&gt;GetFrom());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(edge-&gt;GetTo());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> CalcCenter(<a href="CppPointer.htm">point</a>s);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::trim::Helper::CalcCenter(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;Coordinat3D sum;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: <a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D coordinat(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;CanGetZ() ? <a href="CppPointer.htm">point</a>-&gt;GetZ().value() : 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum <a href="CppOperatorPlusAssign.htm">+=</a> coordinat;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppPointer.htm">point</a>s.size()) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D center(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum.GetX() <a href="CppOperatorDivide.htm">/</a> n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum.GetY() <a href="CppOperatorDivide.htm">/</a> n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum.GetZ() <a href="CppOperatorDivide.htm">/</a> n<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> center;<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::trim::Helper::CalcNormal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges[0]-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> edges[1]-&gt;GetFrom());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges[1]-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> edges[2]-&gt;GetFrom());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges[2]-&gt;GetTo() <a href="CppOperatorEqual.htm">==</a> edges[0]-&gt;GetFrom());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ::<a href="CppRibi.htm">ribi</a>::CalcNormal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[0]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[0]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[0]-&gt;GetFrom()-&gt;CanGetZ() ? edges[0]-&gt;GetFrom()-&gt;GetZ().value() : 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[1]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[1]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[1]-&gt;GetFrom()-&gt;CanGetZ() ? edges[1]-&gt;GetFrom()-&gt;GetZ().value() : 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[2]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[2]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[2]-&gt;GetFrom()-&gt;CanGetZ() ? edges[2]-&gt;GetFrom()-&gt;GetZ().value() : 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::Winding <a href="CppRibi.htm">ribi</a>::trim::Helper::CalcWindingHorizontal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Are Edges nicely ordered<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 0: A-&gt;B (edge[0] has A at its m_<a href="CppPointer.htm">point</a>s[0] and has B at its m_<a href="CppPointer.htm">point</a>s[1])<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 1: B-&gt;C (edge[1] has B at its m_<a href="CppPointer.htm">point</a>s[0] and has C at its m_<a href="CppPointer.htm">point</a>s[1])<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 2: C-&gt;A (edge[2] has C at its m_<a href="CppPointer.htm">point</a>s[0] and has A at its m_<a href="CppPointer.htm">point</a>s[1])<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edges.size()) };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> <a href="CppIndeterminate.htm">indeterminate</a> ordering<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> j { (i <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> n_edges };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edges.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edges.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[i]-&gt;GetTo() <a href="CppOperatorNotEqual.htm">!=</a> edges[j]-&gt;GetFrom())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Winding::<a href="CppIndeterminate.htm">indeterminate</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Extract the <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D co(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[i]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[i]-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[i]-&gt;GetFrom()-&gt;GetZ().value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(co);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(co);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a> edges.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> Geometry().IsClockwise(<a href="CppPointer.htm">point</a>s, Co`ordinat3D(0.0,0.0,1.0))<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Geometry().IsClockwiseHorizontal(<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? Winding::clockwise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: Winding::<a href="CppCounter.htm">counter</a>_clockwise<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; <a href="CppRibi.htm">ribi</a>::trim::Helper::ExtractCoordinats(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s<br/>
)<br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: <a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppPointer.htm">point</a>-&gt;CanGetZ())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Extract these coordinats later: the Face must be as<b><a href="CppSigned.htm">signed</a></b> to a Layer first");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>-&gt;CanGetZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D c(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetZ().value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.insert(s.begin(),c);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; <a href="CppRibi.htm">ribi</a>::trim::Helper::ExtractCoordinats(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; face)<br/>
{<br/>
&nbsp;&nbsp;face.DoExtractCoordinats();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face.GetCoordinats();<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::<a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Geometry().<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::IsClockwise(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; observer<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; coordinats;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> edge: edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D coordinat(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()-&gt;GetZ().value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coordinats.push_back(coordinat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Geometry().IsClockwise(coordinats,observer);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::IsClockwise(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; observer) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; coordinats;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> <a href="CppPointer.htm">point</a>: <a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D coordinat(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;GetCoordinat()-&gt;GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>-&gt;CanGetZ() ? <a href="CppPointer.htm">point</a>-&gt;GetZ().value() : 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coordinats.push_back(coordinat);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Geometry().IsClockwise(coordinats,observer);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::IsClockwiseHorizontal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Edge&gt; edge,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; observer<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_clockwise {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Geometry().IsClockwise(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Geometry().<a href="CppGetAngle.htm">GetAngle</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetX() <a href="CppOperatorMinus.htm">-</a> observer.GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetFrom()-&gt;GetCoordinat()-&gt;GetY() <a href="CppOperatorMinus.htm">-</a> observer.GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Geometry().<a href="CppGetAngle.htm">GetAngle</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo()-&gt;GetCoordinat()-&gt;GetX() <a href="CppOperatorMinus.htm">-</a> observer.GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;GetTo()-&gt;GetCoordinat()-&gt;GetY() <a href="CppOperatorMinus.htm">-</a> observer.GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is_clockwise;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::IsClockwiseHorizontal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D center { CalcCenter(<a href="CppPointer.htm">point</a>s) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> center_x { center.GetX() };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> center_y { center.GetY() };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tau <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::two_pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; angles {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Geometry().<a href="CppGetAngle.htm">GetAngle</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[0]-&gt;GetCoordinat()-&gt;GetX() <a href="CppOperatorMinus.htm">-</a> center_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[0]-&gt;GetCoordinat()-&gt;GetY() <a href="CppOperatorMinus.htm">-</a> center_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Geometry().<a href="CppGetAngle.htm">GetAngle</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[1]-&gt;GetCoordinat()-&gt;GetX() <a href="CppOperatorMinus.htm">-</a> center_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[1]-&gt;GetCoordinat()-&gt;GetY() <a href="CppOperatorMinus.htm">-</a> center_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Geometry().<a href="CppGetAngle.htm">GetAngle</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[2]-&gt;GetCoordinat()-&gt;GetX() <a href="CppOperatorMinus.htm">-</a> center_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[2]-&gt;GetCoordinat()-&gt;GetY() <a href="CppOperatorMinus.htm">-</a> center_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> a { Geometry().IsClockwise(angles[0],angles[1]) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> b { Geometry().IsClockwise(angles[1],angles[2]) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_clockwise { a <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> b };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is_clockwise;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::IsHorizontal(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> answer_1 <a href="CppOperatorAssign.htm">=</a> face.GetOrientation() <a href="CppOperatorEqual.htm">==</a> FaceOrientation::horizontal;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; coordinats { ExtractCoordinats(face) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppRibi.htm">ribi</a>::Coordinat3D&gt;::<a href="CppIterator.htm">iterator</a> <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppIterator.htm">Iterator</a>,<a href="CppIterator.htm">Iterator</a>&gt; Pair;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Pair xs {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMinmax_element.htm">std::minmax_element</a>(coordinats.begin(),coordinats.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetX() &lt; rhs.GetX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx { <a href="CppStdAbs.htm">std::abs</a>((*xs.first).GetX() <a href="CppOperatorMinus.htm">-</a> (*xs.second).GetX()) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Pair ys {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMinmax_element.htm">std::minmax_element</a>(coordinats.begin(),coordinats.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetY() &lt; rhs.GetY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy { <a href="CppStdAbs.htm">std::abs</a>((*ys.first).GetY() <a href="CppOperatorMinus.htm">-</a> (*ys.second).GetY()) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Pair zs {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMinmax_element.htm">std::minmax_element</a>(coordinats.begin(),coordinats.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetZ() &lt; rhs.GetZ();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dz { <a href="CppStdAbs.htm">std::abs</a>((*zs.first).GetZ() <a href="CppOperatorMinus.htm">-</a> (*zs.second).GetZ()) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> answer_2 { dz * 1000.0 &lt; dx <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> dz * 1000.0 &lt; dy };<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(answer_1 <a href="CppOperatorEqual.htm">==</a> answer_2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> answer_1;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::IsVertical(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> answer_1 <a href="CppOperatorAssign.htm">=</a> face.GetOrientation() <a href="CppOperatorEqual.htm">==</a> FaceOrientation::vertical;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> answer_2 <a href="CppOperatorAssign.htm">=</a> !IsHorizontal(face);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(answer_1 <a href="CppOperatorEqual.htm">==</a> answer_2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> answer_1;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::SetWindingHorizontal(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; edges,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Winding winding<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcWindingHorizontal(<a href="CppAdd.htm">Add</a>Const(edges)) <a href="CppOperatorNotEqual.htm">!=</a> winding);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(winding)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::<a href="CppIndeterminate.htm">indeterminate</a>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges[1]-&gt;Reverse();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::clockwise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Otherwise I am not sure <b><a href="CppThis.htm">this</a></b> will work");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D center { CalcCenter(edges) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edges.size()) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fix winding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsClockwiseHorizontal(edges[i],center)) { edges[i]-&gt;Reverse(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsClockwiseHorizontal(edges[i],center));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fix ordering of elements<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try to swap the next element's order<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorPlus.htm">+</a> 1 &lt; n_edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[i+1]-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> edges[i]-&gt;GetTo()) { edges[i+1]-&gt;Reverse(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Swap the next and its next elements<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorPlus.htm">+</a> 2 &lt; n_edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[i+1]-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> edges[i]-&gt;GetTo()) { <a href="CppStdSwap.htm">std::swap</a>(edges[i+1],edges[i+2]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try to swap the next element's order<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[i+1]-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> edges[i]-&gt;GetTo()) { edges[i+1]-&gt;Reverse(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::<a href="CppCounter.htm">counter</a>_clockwise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Otherwise I am not sure <b><a href="CppThis.htm">this</a></b> will work");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D center { CalcCenter(edges) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(edges.size()) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_edges; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fix winding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsClockwiseHorizontal(edges[i],center)) { edges[i]-&gt;Reverse(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsClockwiseHorizontal(edges[i],center));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fix ordering of elements<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try to swap the next element's order<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorPlus.htm">+</a> 1 &lt; n_edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[i+1]-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> edges[i]-&gt;GetTo()) { edges[i+1]-&gt;Reverse(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Swap the next and its next elements<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorPlus.htm">+</a> 2 &lt; n_edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[i+1]-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> edges[i]-&gt;GetTo()) { <a href="CppStdSwap.htm">std::swap</a>(edges[i+1],edges[i+2]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try to swap the next element's order<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edges[i+1]-&gt;GetFrom() <a href="CppOperatorNotEqual.htm">!=</a> edges[i]-&gt;GetTo()) { edges[i+1]-&gt;Reverse(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges[(i+1) <a href="CppOperatorModulus.htm">%</a> n_edges]-&gt;GetFrom() <a href="CppOperatorEqual.htm">==</a> edges[i]-&gt;GetTo());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::trim::Helper::SetWindingHorizontal: unknown Winding");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcWindingHorizontal(<a href="CppAdd.htm">Add</a>Const(edges)) <a href="CppOperatorEqual.htm">==</a> winding);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Helper::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::Helper::<a href="CppPoint.htm">Point</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcCenter<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcWindingHorizontal<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppGetAngle.htm">GetAngle</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Helper h;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi { <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() };<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(0.0,-1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>North<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.0 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(1.0,-1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>North-East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.25 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.5 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(1.0,1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>South-East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.75 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(0.0,1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>South<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.0 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(-1.0,1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>South-West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.25 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(-1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.5 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(-1.0,-1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;h.<a href="CppGetAngle.htm">GetAngle</a>(<a href="CppPointer.htm">point</a>); <a href="CppComment.htm">//</a>North-West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.75 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsClockwiseHorizontal 1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsClockwiseHorizontal 2<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsClockwiseVertical<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>SetWindingHorizontal<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::Helper::<a href="CppPoint.htm">Point</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshpoint.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshpoint.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHPOINT_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHPOINT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/quantity.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/length.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "constcoordinat2d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>An OpenFOAM <a href="CppPointer.htm">point</a>, as in the file '<a href="CppPointer.htm">point</a>s'<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; GetCoordinat() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_coordinat; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetZ() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; GetBelongsTo() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_belongs_to; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; GetConnected() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_connected; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; GetZ() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the <a href="CppPoint.htm">Point</a> know its Z coordinat itself<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Similar to SetLayer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can be done exactly once<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetZ(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; z) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>; <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> due to <b><a href="CppMutable.htm">mutable</a></b><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppPoint.htm">Point</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppPoint.htm">Point</a>* x);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppPoint.htm">Point</a>Factory;<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; coordinat,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Factory&amp; lock<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> m_belongs_to must be <b><a href="CppMutable.htm">mutable</a></b>, because of the interdependent creation of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppPoint.htm">Point</a> and Edge: a <a href="CppPoint.htm">Point</a> needs to know the Edge it belongs to,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> an Edge consists of <a href="CppPoint.htm">Point</a> objects<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Edge<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_belongs_to;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> m_connected must be <b><a href="CppMutable.htm">mutable</a></b>, because of the interdependent creation of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppPoint.htm">Point</a> and Face: a <a href="CppPoint.htm">Point</a> needs to know the Face it is connected to,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> a Face consists of <a href="CppPoint.htm">Point</a> objects<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_connected;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; m_coordinat;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The index of <b><a href="CppThis.htm">this</a></b> <a href="CppPoint.htm">Point</a> in an TriangleMeshBuilder vector. It is determined at the end<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <b><a href="CppInt.htm">int</a></b> m_index;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_z;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> EdgeFactory;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppPoint.htm">Point</a>s are connected to Edge in the Edge's <a href="CppConstructor.htm">construct</a>ion<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>BelongsTo(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Edge&gt; edge);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> FaceFactory;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppPoint.htm">Point</a>s are connected to Faces in the Faces' <a href="CppConstructor.htm">construct</a>ion<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Connected(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Face&gt; face);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> TriangleMeshBuilder;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Determined in the end<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { m_index <a href="CppOperatorAssign.htm">=</a> index; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; n);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; rhs);<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; n);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHPOINT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshpoint.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshpoint.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::<a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; coordinat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Factory&amp;<br/>
)<br/>
&nbsp;&nbsp;: m_belongs_to{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_connected{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_coordinat(coordinat),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_index{index},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_z{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_coordinat <a href="CppOperatorEqual.htm">==</a> coordinat<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A shallow copy please");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::<a href="CppAdd.htm">Add</a>BelongsTo(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Edge&gt; edge)<br/>
{<br/>
&nbsp;&nbsp;m_belongs_to.insert(edge);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::<a href="CppAdd.htm">Add</a>Connected(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;Face&gt; face)<br/>
{<br/>
&nbsp;&nbsp;m_connected.insert(face);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::CanGetZ() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_z.get();<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::GetZ() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanGetZ())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetZ());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *m_z;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::SetZ(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt; z) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_z<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_z can be set exactly once");<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::length&gt;(z)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;m_z <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_z);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetCoordinat() <a href="CppOperatorEqual.htm">==</a> rhs.GetCoordinat()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::trim::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; n)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("<a href="CppPointer.htm">point</a>_index",n.GetIndex())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("coordinat",*n.GetCoordinat())<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshpointfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshpointfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHPOINTFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHPOINTFACTORY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "constcoordinat2d.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwinding.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>Factory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppPoint.htm">Point</a> with an undetermined Z coordinat<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; CreateFromXy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This way is used in mesh creation: every 3D <a href="CppPointer.htm">point</a> shares the same<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ConstCoordinat2D<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppPoint.htm">Point</a> with an undetermined Z coordinat<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; coordinat<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; CreateFrom3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D&gt; coordinat<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the <a href="CppPointer.htm">point</a>s of a testing prism<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;D---E<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| | |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| C |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a> \|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A---B<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates a triangle <b><a href="CppFor.htm">for</a></b> a certain winding (when viewed from above)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Clockwise:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 1 2<br/>
&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> 0&nbsp;&nbsp; where Z <a href="CppOperatorAssign.htm">=</a> 1.0 <b><a href="CppFor.htm">for</a></b> all <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| |\<br/>
&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> 2-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCounter.htm">Counter</a>-clockwise:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 1 2<br/>
&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> 0&nbsp;&nbsp; where Z <a href="CppOperatorAssign.htm">=</a> 1.0 <b><a href="CppFor.htm">for</a></b> all <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| |\<br/>
&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> 1-2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestTriangle(<b><a href="CppConst.htm">const</a></b> Winding winding) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHPOINTFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshpointfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshpointfactory.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>factory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwindings.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::<a href="CppPoint.htm">Point</a>Factory()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppComment.htm">///</a>Create a <a href="CppPoint.htm">Point</a> with an undetermined Z coordinat<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&gt; <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::CreateFromXy(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; coordinat {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(x,y)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Create(coordinat);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>&gt; <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; coordinat<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give every <a href="CppPoint.htm">Point</a> some index at creation<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> cnt;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coordinat,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPointer.htm">point</a>;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::CreateTestPrism() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; co_a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.0,0.0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; co_b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(1.0,0.0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; co_c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.0,1.0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; co_d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.0,0.0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; co_e {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(1.0,0.0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; co_f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.0,1.0)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_a)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_b)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_c)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_d)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; e {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_e)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_f)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;a-&gt;SetZ(0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;b-&gt;SetZ(0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;c-&gt;SetZ(0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;d-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;e-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;f-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;a-&gt;SetIndex(1);<br/>
&nbsp;&nbsp;b-&gt;SetIndex(2);<br/>
&nbsp;&nbsp;c-&gt;SetIndex(3);<br/>
&nbsp;&nbsp;d-&gt;SetIndex(4);<br/>
&nbsp;&nbsp;e-&gt;SetIndex(5);<br/>
&nbsp;&nbsp;f-&gt;SetIndex(6);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a,b,c,d,e,f<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> prism;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::CreateTestTriangle(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::trim::Winding winding<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(winding <a href="CppOperatorEqual.htm">==</a> Winding::clockwise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> winding <a href="CppOperatorEqual.htm">==</a> Winding::<a href="CppCounter.htm">counter</a>_clockwise);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Clockwise:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 1 2<br/>
&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> 0&nbsp;&nbsp; where Z <a href="CppOperatorAssign.htm">=</a> 1.0 <b><a href="CppFor.htm">for</a></b> all <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| |\<br/>
&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> 2-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCounter.htm">Counter</a>-clockwise:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 1 2<br/>
&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> 0&nbsp;&nbsp; where Z <a href="CppOperatorAssign.htm">=</a> 1.0 <b><a href="CppFor.htm">for</a></b> all <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| |\<br/>
&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> 1-2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Y<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ConstCoordinat2D&gt; co_a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(1.0,1.0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ConstCoordinat2D&gt; co_b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(2.0,2.0)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;ConstCoordinat2D&gt; co_c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(1.0,2.0)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (winding <a href="CppOperatorEqual.htm">==</a> Winding::<a href="CppCounter.htm">counter</a>_clockwise) { <a href="CppStdSwap.htm">std::swap</a>(co_b,co_c); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_a)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_b)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(co_c)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;a-&gt;SetIndex(1);<br/>
&nbsp;&nbsp;b-&gt;SetIndex(2);<br/>
&nbsp;&nbsp;c-&gt;SetIndex(3);<br/>
&nbsp;&nbsp;a-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;b-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;c-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> triangle { a,b,c };<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(Helper().IsClockwiseHorizontal(triangle)&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> (winding <a href="CppOperatorEqual.htm">==</a> Winding::clockwise)))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Windings().ToStr(winding));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Helper().IsClockwiseHorizontal(triangle));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(triangle)&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> (winding <a href="CppOperatorEqual.htm">==</a> Winding::clockwise));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(Geometry().IsClockwiseHorizontal({co_a,co_b,co_c}) <a href="CppOperatorEqual.htm">==</a> (winding <a href="CppOperatorEqual.htm">==</a> Winding::clockwise));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> triangle;<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> prism {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().CreateTestPrism()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prism.size() <a href="CppOperatorEqual.htm">==</a> 6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A prism has 6 <a href="CppPointer.htm">point</a>s");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::<a href="CppPoint.htm">Point</a>Factory::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshtemplate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshtemplate.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESH<a href="CppQmakeTemplate.htm">TEMPLATE</a>_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESH<a href="CppQmakeTemplate.htm">TEMPLATE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>Template is a bare-bone layer, consisting of <a href="CppPoint.htm">Point</a>s and Faces only<br/>
<a href="CppComment.htm">///</a>It <a href="CppConstructor.htm">construct</a>s itself from a TemplateFile its output (.node and .ele) files<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The next step will be to create a multiple layers of Cells by CellsCreator<br/>
<b><a href="CppStruct.htm">struct</a></b> Template<br/>
{<br/>
&nbsp;&nbsp;Template(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_node,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_ele<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> CountFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size() ); }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> CountNodes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppPointer.htm">point</a>s.size()); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; CreateTest(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; GetEdges() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_edges; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_faces; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; GetFace<a href="CppPoint.htm">Point</a>Indices() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_face_<a href="CppPointer.htm">point</a>_indices; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Template(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>_indices,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ints are m_<a href="CppPointer.htm">point</a>s indices<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_edges;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_faces;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_face_<a href="CppPointer.htm">point</a>_indices;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; CreateTest2x3() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; CreateTest3x3() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; CreateTestSquare2x2() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; CreateTestTriangle2x2() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Split a string<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESH<a href="CppQmakeTemplate.htm">TEMPLATE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshtemplate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshtemplate.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemesh<b><a href="CppTemplate.htm">template</a></b>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Shiny.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshface.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshfacefactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "trianglemesh<a href="CppPointer.htm">point</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::Template::Template(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_node,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename_ele<br/>
)<br/>
&nbsp;&nbsp;: m_edges{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_face_<a href="CppPointer.htm">point</a>_indices{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Load the <a href="CppPointer.htm">point</a>s and faces created by Triangle");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileToVector.htm">FileToVector</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename_node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> percent <a href="CppOperatorAssign.htm">=</a> sz <a href="CppOperatorDivide.htm">/</a> 100 ? sz <a href="CppOperatorDivide.htm">/</a> 100: 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> n=0; n<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_BLOCK(Load_the_<a href="CppPointer.htm">point</a>s_and_faces_created_by_Triangle);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n <a href="CppOperatorModulus.htm">%</a> percent <a href="CppOperatorEqual.htm">==</a> 0) <a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '%';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> line <a href="CppOperatorAssign.htm">=</a> v[n];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(n<a href="CppOperatorEqual.htm">==</a>0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>No idea why <b><a href="CppThis.htm">this</a></b> has to be skipped<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w { <a href="CppSeperateString.htm">SeperateString</a>(line) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w.empty() <a href="CppOperatorLogicalOr.htm">||</a> w[0].empty() <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp;w[0] <a href="CppOperatorEqual.htm">==</a> "#")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The <b><a href="CppFinal.htm">final</a></b> comment line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(w[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(w[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(w[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(w[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; bottom {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(x,y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; node {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(bottom)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s.push_back(node);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Load and translate faces");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileToVector.htm">FileToVector</a>(filename_ele)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> percent <a href="CppOperatorAssign.htm">=</a> sz <a href="CppOperatorDivide.htm">/</a> 100 ? sz <a href="CppOperatorDivide.htm">/</a> 100: 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> n=0; n<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_BLOCK(Load_and_translate_faces);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n <a href="CppOperatorModulus.htm">%</a> percent <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '%';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> line <a href="CppOperatorAssign.htm">=</a> v[n];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(n<a href="CppOperatorEqual.htm">==</a>0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w { <a href="CppSeperateString.htm">SeperateString</a>(line) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w.empty() <a href="CppOperatorLogicalOr.htm">||</a> w[0].empty() <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp;w[0] <a href="CppOperatorEqual.htm">==</a> "#")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The <b><a href="CppFinal.htm">final</a></b> comment line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCanLexicalCast.htm">CanLexicalCast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[3]));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I <b><a href="CppDo.htm">do</a></b> not correct <b><a href="CppFor.htm">for</a></b> one-base Triangle.exe output<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(w[3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>1 &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>2 &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>3 &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; face_<a href="CppPointer.htm">point</a>_indices {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1-1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2-1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>3-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_edges.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(face_<a href="CppPointer.htm">point</a>_indices[0],face_<a href="CppPointer.htm">point</a>_indices[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_edges.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(face_<a href="CppPointer.htm">point</a>_indices[0],face_<a href="CppPointer.htm">point</a>_indices[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_edges.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(face_<a href="CppPointer.htm">point</a>_indices[1],face_<a href="CppPointer.htm">point</a>_indices[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>1-1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>2-1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>3-1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(face_<a href="CppPointer.htm">point</a>s.begin(),face_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_faces.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_face_<a href="CppPointer.htm">point</a>_indices.push_back(face_<a href="CppPointer.htm">point</a>_indices);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdUnique.htm">std::unique</a>(m_face_<a href="CppPointer.htm">point</a>_indices.begin(),m_face_<a href="CppPointer.htm">point</a>_indices.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_face_<a href="CppPointer.htm">point</a>_indices.end()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Every face should have unique <a href="CppPointer.htm">point</a> indices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Checking the result");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_faces.size() <a href="CppOperatorEqual.htm">==</a> m_face_<a href="CppPointer.htm">point</a>_indices.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face <a href="CppOperatorAssign.htm">=</a> m_faces[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> indices <a href="CppOperatorAssign.htm">=</a> m_face_<a href="CppPointer.htm">point</a>_indices[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> indices.size());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b>&amp; p: m_edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.first &gt; p.second) <a href="CppStdSwap.htm">std::swap</a>(p.first,p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first &lt; p.second);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(m_edges.begin(),m_edges.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> new_end <a href="CppOperatorAssign.htm">=</a> <a href="CppStdUnique.htm">std::unique</a>(m_edges.begin(),m_edges.end());<br/>
&nbsp;&nbsp;m_edges.erase(new_end,m_edges.end());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_edges.empty());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::trim::Template::Template(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> edges,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>_indices,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s<br/>
) : m_edges{edges}, m_faces{faces}, m_face_<a href="CppPointer.htm">point</a>_indices{face_<a href="CppPointer.htm">point</a>_indices}, m_<a href="CppPointer.htm">point</a>s{<a href="CppPointer.htm">point</a>s}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Template&gt; <a href="CppRibi.htm">ribi</a>::trim::Template::CreateTest(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> CreateTestTriangle2x2();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> CreateTestSquare2x2();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> CreateTest2x3();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <b><a href="CppReturn.htm">return</a></b> CreateTest3x3();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt;();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Template&gt; <a href="CppRibi.htm">ribi</a>::trim::Template::CreateTestSquare2x2() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>_indices;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> width * height;<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.reserve(n_<a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorModulus.htm">%</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorDivide.htm">/</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> boundary_type <a href="CppOperatorAssign.htm">=</a> "two_<a href="CppTime.htm">time</a>s_two";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; bottom {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(x,y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(bottom)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that there is no coordinat present twice<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; a { <a href="CppPointer.htm">point</a>s[i]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; b { <a href="CppPointer.htm">point</a>s[j]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &gt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load and translate faces<br/>
&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices <a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1,2 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,2,3 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,2 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,2 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,3 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 2,3 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppAuto.htm">auto</a></b> v: face_<a href="CppPointer.htm">point</a>_indices)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I <b><a href="CppDo.htm">do</a></b> not correct <b><a href="CppFor.htm">for</a></b> one-base Triangle.exe output<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[ v[0] ],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[ v[1] ],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[ v[2] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(face_<a href="CppPointer.htm">point</a>s.begin(),face_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(faces.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> face_<a href="CppPointer.htm">point</a>_indices.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face <a href="CppOperatorAssign.htm">=</a> faces[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> indices <a href="CppOperatorAssign.htm">=</a> face_<a href="CppPointer.htm">point</a>_indices[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only <b><a href="CppTrue.htm">true</a></b> when <a href="CppPointer.htm">point</a>s are not reversed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s()[j] <a href="CppOperatorEqual.htm">==</a> <a href="CppPointer.htm">point</a>s[ indices[j] ]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A square consists of 2 triangles");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A square with a diagonal has 5 edges");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A square has 4 nodes");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Template(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_<b><a href="CppTemplate.htm">template</a></b>;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Template&gt; <a href="CppRibi.htm">ribi</a>::trim::Template::CreateTestTriangle2x2() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>_indices;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Triangle<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.reserve(n_<a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorModulus.htm">%</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorDivide.htm">/</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> boundary_type <a href="CppOperatorAssign.htm">=</a> "two_<a href="CppTime.htm">time</a>s_two";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; bottom {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(x,y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(bottom)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that there is no coordinat present twice<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; a { <a href="CppPointer.htm">point</a>s[i]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; b { <a href="CppPointer.htm">point</a>s[j]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &gt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load and translate faces<br/>
&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices <a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1,2 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,2 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,2 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppAuto.htm">auto</a></b> v: face_<a href="CppPointer.htm">point</a>_indices)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I <b><a href="CppDo.htm">do</a></b> not correct <b><a href="CppFor.htm">for</a></b> one-base Triangle.exe output<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[ v[0] ],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[ v[1] ],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[ v[2] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(face_<a href="CppPointer.htm">point</a>s.begin(),face_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*face_<a href="CppPointer.htm">point</a>s[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*face_<a href="CppPointer.htm">point</a>s[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*face_<a href="CppPointer.htm">point</a>s[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::horizontal <a href="CppComment.htm">//</a>?20140224<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(faces.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> face_<a href="CppPointer.htm">point</a>_indices.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face <a href="CppOperatorAssign.htm">=</a> faces[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> indices <a href="CppOperatorAssign.htm">=</a> face_<a href="CppPointer.htm">point</a>_indices[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only <b><a href="CppTrue.htm">true</a></b> when <a href="CppPointer.htm">point</a>s are not reversed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s()[j] <a href="CppOperatorEqual.htm">==</a> <a href="CppPointer.htm">point</a>s[ indices[j] ]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A triangle is only 1 triangle");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A triangle has 3 edges");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A triangle has 3 nodes");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Template(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_<b><a href="CppTemplate.htm">template</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Template&gt; <a href="CppRibi.htm">ribi</a>::trim::Template::CreateTest2x3() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>_indices;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> width * height;<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.reserve(n_<a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorModulus.htm">%</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorDivide.htm">/</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; bottom {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(x,y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(bottom)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that there is no coordinat present twice<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; a { <a href="CppPointer.htm">point</a>s[i]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; b { <a href="CppPointer.htm">point</a>s[j]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &gt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load and translate faces<br/>
&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices <a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1,3 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,3,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,2,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 2,4,5 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,3 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,2 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,3 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 2,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 2,5 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 3,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 4,5 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppAuto.htm">auto</a></b> v: face_<a href="CppPointer.htm">point</a>_indices)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I <b><a href="CppDo.htm">do</a></b> not correct <b><a href="CppFor.htm">for</a></b> one-base Triangle.exe output<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>3 <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>3 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; face_<a href="CppPointer.htm">point</a>_indices {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>3]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(face_<a href="CppPointer.htm">point</a>s.begin(),face_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(faces.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> face_<a href="CppPointer.htm">point</a>_indices.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face <a href="CppOperatorAssign.htm">=</a> faces[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> indices <a href="CppOperatorAssign.htm">=</a> face_<a href="CppPointer.htm">point</a>_indices[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only <b><a href="CppTrue.htm">true</a></b> when <a href="CppPointer.htm">point</a>s are not reversed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s()[j] <a href="CppOperatorEqual.htm">==</a> <a href="CppPointer.htm">point</a>s[ indices[j] ]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Two adjacent squares consist of 4 triangles");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Two adjacent squares (with diagonals) have 9 edges");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a> 6 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Two adjacent squares have 6 nodes");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Template(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_<b><a href="CppTemplate.htm">template</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Template&gt; <a href="CppRibi.htm">ribi</a>::trim::Template::CreateTest3x3() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>_indices;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> width * height;<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.reserve(n_<a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorModulus.htm">%</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorDivide.htm">/</a> width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> boundary_type <a href="CppOperatorAssign.htm">=</a> "three_<a href="CppTime.htm">time</a>s_three";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; bottom {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(x,y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(bottom)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that there is no coordinat present twice<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; a { <a href="CppPointer.htm">point</a>s[i]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; b { <a href="CppPointer.htm">point</a>s[j]-&gt;GetCoordinat() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::Distance(*a,*b) &gt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Load and translate faces<br/>
&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices <a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1,3 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,2,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,3,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 2,4,5 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 3,4,6 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 4,5,7 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 4,6,7 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 5,7,8 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; edges {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,1 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 0,3 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,2 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,3 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 1,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 2,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 2,5 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 3,4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 3,6 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 4,5 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 4,6 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 4,7 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 5,7 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 5,8 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 6,7 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ 7,8 }<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppAuto.htm">auto</a></b> v: face_<a href="CppPointer.htm">point</a>_indices)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I <b><a href="CppDo.htm">do</a></b> not correct <b><a href="CppFor.htm">for</a></b> one-base Triangle.exe output<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppPointer.htm">point</a>3 <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>3 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; face_<a href="CppPointer.htm">point</a>_indices {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_<a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>3]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(face_<a href="CppPointer.htm">point</a>s.begin(),face_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(face_<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceFactory().Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FaceOrientation::horizontal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(faces.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> face_<a href="CppPointer.htm">point</a>_indices.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> face <a href="CppOperatorAssign.htm">=</a> faces[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> indices <a href="CppOperatorAssign.htm">=</a> face_<a href="CppPointer.htm">point</a>_indices[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s().size() <a href="CppOperatorEqual.htm">==</a> indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(indices.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only <b><a href="CppTrue.htm">true</a></b> when <a href="CppPointer.htm">point</a>s are not reversed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;Get<a href="CppPoint.htm">Point</a>s()[j] <a href="CppOperatorEqual.htm">==</a> <a href="CppPointer.htm">point</a>s[ indices[j] ]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "2x2 adjacent squares consist of 8 triangles");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(edges.size()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 16 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "2x2 adjacent squares (with diagonals) have 16 edges");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;9 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "2x2 adjacent squares have 9 nodes");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Template(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face_<a href="CppPointer.htm">point</a>_indices,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_<b><a href="CppTemplate.htm">template</a></b>;<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::trim::Template::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input_original) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;PRO<a href="CppCfile.htm">FILE</a>_FUNC();<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> input <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(input_original,"\t"," ");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>8; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;input <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::replace_all_copy(input,"&nbsp;&nbsp;"," ");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;input <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::trim_copy(input_original);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ' ';<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppBoostSplit.htm">boost::algorithm::split</a>(v,input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(),seperator),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::token_compress_on);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::trim::Template::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::trim::Template::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsClockWise<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>12 o'clock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.0,-1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>4 o'clock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.83,0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>8 o'clock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(-0.83,0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(a),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(b),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[0]-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[1]-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[2]-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Helper().IsClockwiseHorizontal(<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>12 o'clock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; a {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.0,-1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>8 o'clock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; b {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(-0.83,0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>4 o'clock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; c {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D(0.83,0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(a),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(b),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Factory().Create(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[0]-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[1]-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s[2]-&gt;SetZ(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Helper().IsClockwiseHorizontal(<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReverse.htm">std::reverse</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Template&gt; my_<b><a href="CppTemplate.htm">template</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateTest(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_<b><a href="CppTemplate.htm">template</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> face: my_<b><a href="CppTemplate.htm">template</a></b>-&gt;GetFaces())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Helper().IsClockwiseHorizontal(face-&gt;Get<a href="CppPoint.htm">Point</a>s()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().IsClockwiseHorizontal(face-&gt;Get<a href="CppPoint.htm">Point</a>s()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::trim::Template::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshwinding.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshwinding.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHWINDING_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHWINDING_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<a href="CppComment.htm">///</a>The winding the <a href="CppPoint.htm">Point</a>s of a Face have, when viewed from the inside of a Cell<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Winding<br/>
{<br/>
&nbsp;&nbsp;clockwise,<br/>
&nbsp;&nbsp;<a href="CppCounter.htm">counter</a>_clockwise,<br/>
&nbsp;&nbsp;<a href="CppIndeterminate.htm">indeterminate</a> ,<br/>
&nbsp;&nbsp;n_types <a href="CppComment.htm">//</a>To be used in <a href="CppDebug.htm">debugging</a> only<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHWINDING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshwinding.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshwinding.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshwinding.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshwindings.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshwindings.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> TRIANGLEMESHWINDINGS_H<br/>
<a href="CppDefine.htm">#define</a> TRIANGLEMESHWINDINGS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshwinding.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> trim {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Windings<br/>
{<br/>
&nbsp;&nbsp;Windings() {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Winding&gt; GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> Winding winding) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> trim<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TRIANGLEMESHWINDINGS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTriangleMesh/trianglemeshwindings.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTriangleMesh/trianglemeshwindings.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "trianglemeshwindings.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::trim::Winding&gt; <a href="CppRibi.htm">ribi</a>::trim::Windings::GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Winding&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Winding::clockwise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Winding::<a href="CppCounter.htm">counter</a>_clockwise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Winding::<a href="CppIndeterminate.htm">indeterminate</a><br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Winding::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::Windings::ToStr(<b><a href="CppConst.htm">const</a></b> Winding winding) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (winding)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::clockwise: <b><a href="CppReturn.htm">return</a></b> "clockwise";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::<a href="CppCounter.htm">counter</a>_clockwise: <b><a href="CppReturn.htm">return</a></b> "<a href="CppCounter.htm">counter</a>_clockwise";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Winding::<a href="CppIndeterminate.htm">indeterminate</a>: <b><a href="CppReturn.htm">return</a></b> "<a href="CppIndeterminate.htm">indeterminate</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::trim::Windings::ToStr: unknown Winding");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
