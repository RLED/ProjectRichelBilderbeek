<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>pointer</title>
  <meta name="description" content="C++ pointer"/>
  <meta name="keywords" content="C++ pointer"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPointer.htm">pointer</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppPointer.htm">pointer</a> is a type that holds an <a href="CppAddress.htm">address</a>.</p>
<p>&nbsp;</p>
<p>When a <a href="CppPointer.htm">pointer</a> is uninitialized, it should <a href="CppPointer.htm">point</a> to <a href="CppNULL.htm">NULL</a>. You initialize a <a href="CppPointer.htm">pointer</a> using <b><a href="CppNew.htm">new</a></b>, which reserves free space for the dynamically allocated <a href="CppInstance.htm">instance</a> and <b><a href="CppReturn.htm">return</a></b>s the <a href="CppAddress.htm">address</a> to it.</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">C++</a> does not free this <a href="CppMemory.htm">memory</a> on its own. Therefore, you have to call <b><a href="CppDelete.htm">delete</a></b> to do so.</p>
<p>&nbsp;</p>
<p>Reading/writing from/to an uninitialized <a href="CppPointer.htm">pointer</a> results in an <a href="CppAccessViolation.htm">access violation</a>.</p>
<p>&nbsp;</p>
<p>Prefer using a <a href="CppSmartPointer.htm">smart pointer</a> over a plain <a href="CppPointer.htm">pointer</a> [1-3], e.g. use an <a href="CppAuto_ptr.htm">std::auto_ptr</a> or <a href="CppShared_ptr.htm">boost::shared_ptr</a>. Use 0 rather than <a href="CppNULL.htm">NULL</a> [4].</p>
<p>&nbsp;</p>
<p>Avoid non-trivial <a href="CppPointer.htm">pointer</a> arithmetic [5].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example with plain pointer</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> MyClass { <a href="CppComment.htm">/*</a> some <a href="CppClass.htm">class</a> <a href="CppDefinition.htm">definition</a> <a href="CppComment.htm">*/</a> };<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;MyClass * pClass <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> MyClass;<br/>
&nbsp;&nbsp;pClass-&gt;doStuff();<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> pClass<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example with <a href="CppAuto_ptr.htm">std::auto_ptr</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass { <a href="CppComment.htm">/*</a> some <a href="CppClass.htm">class</a> <a href="CppDefinition.htm">definition</a> <a href="CppComment.htm">*/</a> };<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;MyClass&gt; pClass(<b><a href="CppNew.htm">new</a></b> MyClass);<br/>
&nbsp;&nbsp;pClass-&gt;doStuff(); <a href="CppComment.htm">//</a>Hey, the same way of accessing the <a href="CppPointer.htm">pointed</a> <a href="CppInstance.htm">instance</a>!<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Done, <a href="CppAuto_ptr.htm">std::auto_ptr</a> <a href="CppDelete.htm">deletes</a> itself when going out of scope<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 13: 'Use objects to manage resources'.</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 17: 'Store <a href="CppNew.htm">new</a>ed objects in <a href="CppSmartPointer.htm">smart pointer</a>s in standalone statements'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Chapter 13: 'Ensure resources are owned by objects. Use explicit RAII and smart pointers.</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Section 5.8.3: 'Use 0 rather than <a href="CppNULL.htm">NULL</a>'.</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Section 5.8.1: 'Avoid non-trivial <a href="CppPointer.htm">pointer</a> arithmetic'.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
