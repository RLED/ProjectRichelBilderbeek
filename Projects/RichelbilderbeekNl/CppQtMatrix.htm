<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtMatrix</title>
  <meta name="description" content="C++ QtMatrix"/>
  <meta name="keywords" content="C++ QtMatrix code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtMatrix.htm">QtMatrix</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppQtMatrix.htm">QtMatrix</a> is a <a href="CppQt.htm">Qt</a>
<a href="CppClass.htm">class</a> to display an <a href="CppMatrix.htm">Matrix</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmatrix.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmatrix.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> QTMATRIX_H<br/>
<a href="CppDefine.html">#define</a> QTMATRIX_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/<a href="CppUblas.html">ublas</a>/<a href="CppMatrix.html">matrix</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/<a href="CppUblas.html">ublas</a>/vector<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppQTableWidget.html">QTableWidget</a>;<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Helper <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.html">matrix</a> operations<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppQtMatrix.html">QtMatrix</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write a uBLAS <a href="CppMatrix.html">matrix</a> of <b><a href="CppDouble.html">double</a></b>s to a <a href="CppQTableWidget.html">QTableWidget</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppMatrix.html">Matrix</a>ToTable(<b><a href="CppConst.html">const</a></b> <a href="CppUblasMatrix.html">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; m, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write a vector of <b><a href="CppDouble.html">double</a></b>s to a <a href="CppQTableWidget.html">QTableWidget</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> StdVector<a href="CppDouble.html">Double</a>ToTable(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; v, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write a vector of strings to a <a href="CppQTableWidget.html">QTableWidget</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> StrVectorToTable(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; v, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test these <a href="CppFunction.html">function</a>s<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.html">Convert</a> a <a href="CppQTableWidget.html">QTableWidget</a> to a uBLAS <a href="CppMatrix.html">matrix</a> of <b><a href="CppDouble.html">double</a></b>s<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppUblasMatrix.html">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; To<a href="CppMatrix.html">Matrix</a>(<b><a href="CppConst.html">const</a></b> <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.html">Convert</a> a <a href="CppQTableWidget.html">QTableWidget</a> to a vector of strings<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; ToStrVector(<b><a href="CppConst.html">const</a></b> <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.html">Convert</a> a <a href="CppQTableWidget.html">QTableWidget</a> to a uBLAS vector of <b><a href="CppDouble.html">double</a></b>s<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppUblasVector.html">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; ToVector(<b><a href="CppConst.html">const</a></b> <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write a uBLAS vector of <b><a href="CppDouble.html">double</a></b>s to a <a href="CppQTableWidget.html">QTableWidget</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> UblasVector<a href="CppDouble.html">Double</a>ToTable(<b><a href="CppConst.html">const</a></b> <a href="CppUblasVector.html">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; v, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> QTMATRIX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmatrix.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmatrix.cpp" border = "1"><tr><td><code>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppQtMatrix.html">qtmatrix</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppLexical_cast.html">lexical_cast</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQTableWidget.html">QTableWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-13: <a href="CppVersion.html">version</a> 1.1: improved support <b><a href="CppFor.htm">for</a></b> empty tables/vectors/matrices"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::<a href="CppMatrix.html">Matrix</a>ToTable(<b><a href="CppConst.html">const</a></b> <a href="CppUblasMatrix.html">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; m, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(m.size1() <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0); <a href="CppComment.htm">//</a>Inevitable <b><a href="CppFor.htm">for</a></b> <a href="CppSize_t.html">std::size_t</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(m.size2() <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0); <a href="CppComment.htm">//</a>Inevitable <b><a href="CppFor.htm">for</a></b> <a href="CppSize_t.html">std::size_t</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> m.size1();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> m.size2();<br/>
&nbsp;&nbsp;table-&gt;setRowCount(&nbsp;&nbsp; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size1()));<br/>
&nbsp;&nbsp;table-&gt;setColumnCount(<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size2()));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size2()));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.html">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.html">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.html">QTableWidget</a>Item * <b><a href="CppConst.html">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.html">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(row &lt; m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(col &lt; m.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(m(row,col)).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,col,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>((m.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> m.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <a href="CppUblas.html">boost::numeric::ublas</a>::detail::equals(To<a href="CppMatrix.html">Matrix</a>(table),m,0.00001,0.00001));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::StrVectorToTable(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; v, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!v.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;table-&gt;setRowCount(sz);<br/>
&nbsp;&nbsp;table-&gt;setColumnCount(1);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.html">QTableWidget</a>Item * <b><a href="CppConst.html">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.html">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(i &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(i &lt; table-&gt;rowCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(i,0,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz); <a href="CppComment.htm">//</a>FAILS???<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::ToStrVector(table) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::StdVector<a href="CppDouble.html">Double</a>ToTable(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; v, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppUblasVector.html">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; w(v.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(w.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v.size());<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(v.begin(),v.end(),w.begin());<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v.empty()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> v[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> w(0));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v.size() &lt; 1 <a href="CppOperatorLogicalOr.htm">||</a> v[1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> w(1));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v.size() &lt; 2 <a href="CppOperatorLogicalOr.htm">||</a> v[2] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> w(2));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v.size() &lt; 3 <a href="CppOperatorLogicalOr.htm">||</a> v[3] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> w(3));<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;UblasVector<a href="CppDouble.html">Double</a>ToTable(w,table);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.html">#ifdef</a> REALLY_WANNA_CHECK_2463986504397503<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> {};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.html">QTableWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StrVectorToTable(v,table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "X" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.html">QTableWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StrVectorToTable(v,table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "A","B" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.html">QTableWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StrVectorToTable(v,table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "A","BB","CCC" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.html">QTableWidget</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StrVectorToTable(v,table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppUblasMatrix.html">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::To<a href="CppMatrix.html">Matrix</a>(<b><a href="CppConst.html">const</a></b> <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> table-&gt;rowCount();&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>n_rows can be zero<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> table-&gt;columnCount(); <a href="CppComment.htm">//</a>n_cols can be zero<br/>
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.html">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; v(n_rows,n_cols);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> col=0;col<a href="CppOperatorNotEqual.htm">!=</a>n_cols;<a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> row=0;row<a href="CppOperatorNotEqual.htm">!=</a>n_rows;<a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(row &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(col &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppAuto.htm">auto</a></b> item <a href="CppOperatorAssign.htm">=</a> table-&gt;item(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> text <a href="CppOperatorAssign.htm">=</a> item-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row,col) <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row,col) <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::ToStrVector(<b><a href="CppConst.html">const</a></b> <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0) { <b><a href="CppReturn.html">return</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;(); }<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> table-&gt;rowCount(); <a href="CppComment.htm">//</a>n_rows can be zero<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(row &lt; table-&gt;rowCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppQTableWidget.html">QTableWidget</a>Item * <b><a href="CppConst.html">const</a></b> item <a href="CppOperatorAssign.htm">=</a> table-&gt;item(row,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> item ? item-&gt;text().toStdString() : <a href="CppString.html">std::string</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppUblasVector.html">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::ToVector(<b><a href="CppConst.html">const</a></b> <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table)<br/>
{<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> table-&gt;rowCount(); <a href="CppComment.htm">//</a>n_rows can be zero<br/>
&nbsp;&nbsp;<a href="CppUblasVector.html">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; v(n_rows);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> row=0;row<a href="CppOperatorNotEqual.htm">!=</a>n_rows;<a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppAuto.htm">auto</a></b> item <a href="CppOperatorAssign.htm">=</a> table-&gt;item(row,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> text <a href="CppOperatorAssign.htm">=</a> item-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(row &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row) <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(row &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row) <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtMatrix.html">QtMatrix</a>::UblasVector<a href="CppDouble.html">Double</a>ToTable(<b><a href="CppConst.html">const</a></b> <a href="CppUblasVector.html">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; v, <a href="CppQTableWidget.html">QTableWidget</a> * <b><a href="CppConst.html">const</a></b> table)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!v.empty());<br/>
&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;table-&gt;setColumnCount(1);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.html">QTableWidget</a>Item * <b><a href="CppConst.html">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.html">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(i &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(i &lt; table-&gt;rowCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b>(<a href="CppBad_lexical_cast.html">boost::bad_lexical_cast</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!"Should never get here: con<a href="CppVersion.html">version</a> from <b><a href="CppDouble.html">double</a></b> to <a href="CppString.html">std::string</a> must always succeed");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(i,0,item);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppUblas.html">boost::numeric::ublas</a>::detail::equals(ToVector(table),v,0.00001,0.00001));<br/>
<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
