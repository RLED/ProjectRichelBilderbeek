&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
&lt;head&gt;
&nbsp;&nbsp;&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"/&gt;
&nbsp;&nbsp;&lt;title&gt;Matrix&lt;/title&gt;
&nbsp;&nbsp;&lt;meta name="description" content="C++ Matrix"/&gt;
&nbsp;&nbsp;&lt;meta name="keywords" content="C++ Matrix "/&gt;
&nbsp;&nbsp;&lt;link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/&gt;
&lt;/head&gt;
&lt;!-- End of head, start of body --&gt;
&lt;body&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- Page header --&gt;
&lt;h1&gt;(&lt;a href="Cpp.htm"&gt;C++&lt;/a&gt;) &lt;a href="CppMatrix.htm"&gt;Matrix&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppMatrix/CppMatrix.pri&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppMatrix/CppMatrix.pri" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
INCLUDEPATH += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppMatrix&lt;br/&gt;
&lt;br/&gt;
SOURCES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppMatrix/matrix.cpp&lt;br/&gt;
&lt;br/&gt;
HEADERS&amp;nbsp;&amp;nbsp;+= \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppMatrix/matrix.h&lt;br/&gt;
&lt;br/&gt;
OTHER_FILES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppMatrix/Licence.txt&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppMatrix/Licence.txt&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppMatrix/Licence.txt" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU GENERAL PUBLIC LICENSE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Version 3, 29 June 2007&lt;br/&gt;
&lt;br/&gt;
 Copyright (C) 2007 Free Software Foundation, Inc. &amp;lt;http://fsf.org/&amp;gt;&lt;br/&gt;
 Everyone is permitted to copy and distribute verbatim copies&lt;br/&gt;
 of this license document, but changing it is not allowed.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Preamble&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License is a free, copyleft license for&lt;br/&gt;
software and other kinds of works.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The licenses for most software and other practical works are designed&lt;br/&gt;
to take away your freedom to share and change the works.&amp;nbsp;&amp;nbsp;By contrast,&lt;br/&gt;
the GNU General Public License is intended to guarantee your freedom to&lt;br/&gt;
share and change all versions of a program--to make sure it remains free&lt;br/&gt;
software for all its users.&amp;nbsp;&amp;nbsp;We, the Free Software Foundation, use the&lt;br/&gt;
GNU General Public License for most of our software; it applies also to&lt;br/&gt;
any other work released this way by its authors.&amp;nbsp;&amp;nbsp;You can apply it to&lt;br/&gt;
your programs, too.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When we speak of free software, we are referring to freedom, not&lt;br/&gt;
price.&amp;nbsp;&amp;nbsp;Our General Public Licenses are designed to make sure that you&lt;br/&gt;
have the freedom to distribute copies of free software (and charge for&lt;br/&gt;
them if you wish), that you receive source code or can get it if you&lt;br/&gt;
want it, that you can change the software or use pieces of it in new&lt;br/&gt;
free programs, and that you know you can do these things.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To protect your rights, we need to prevent others from denying you&lt;br/&gt;
these rights or asking you to surrender the rights.&amp;nbsp;&amp;nbsp;Therefore, you have&lt;br/&gt;
certain responsibilities if you distribute copies of the software, or if&lt;br/&gt;
you modify it: responsibilities to respect the freedom of others.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For example, if you distribute copies of such a program, whether&lt;br/&gt;
gratis or for a fee, you must pass on to the recipients the same&lt;br/&gt;
freedoms that you received.&amp;nbsp;&amp;nbsp;You must make sure that they, too, receive&lt;br/&gt;
or can get the source code.&amp;nbsp;&amp;nbsp;And you must show them these terms so they&lt;br/&gt;
know their rights.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Developers that use the GNU GPL protect your rights with two steps:&lt;br/&gt;
(1) assert copyright on the software, and (2) offer you this License&lt;br/&gt;
giving you legal permission to copy, distribute and/or modify it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For the developers' and authors' protection, the GPL clearly explains&lt;br/&gt;
that there is no warranty for this free software.&amp;nbsp;&amp;nbsp;For both users' and&lt;br/&gt;
authors' sake, the GPL requires that modified versions be marked as&lt;br/&gt;
changed, so that their problems will not be attributed erroneously to&lt;br/&gt;
authors of previous versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Some devices are designed to deny users access to install or run&lt;br/&gt;
modified versions of the software inside them, although the manufacturer&lt;br/&gt;
can do so.&amp;nbsp;&amp;nbsp;This is fundamentally incompatible with the aim of&lt;br/&gt;
protecting users' freedom to change the software.&amp;nbsp;&amp;nbsp;The systematic&lt;br/&gt;
pattern of such abuse occurs in the area of products for individuals to&lt;br/&gt;
use, which is precisely where it is most unacceptable.&amp;nbsp;&amp;nbsp;Therefore, we&lt;br/&gt;
have designed this version of the GPL to prohibit the practice for those&lt;br/&gt;
products.&amp;nbsp;&amp;nbsp;If such problems arise substantially in other domains, we&lt;br/&gt;
stand ready to extend this provision to those domains in future versions&lt;br/&gt;
of the GPL, as needed to protect the freedom of users.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Finally, every program is threatened constantly by software patents.&lt;br/&gt;
States should not allow patents to restrict development and use of&lt;br/&gt;
software on general-purpose computers, but in those that do, we wish to&lt;br/&gt;
avoid the special danger that patents applied to a free program could&lt;br/&gt;
make it effectively proprietary.&amp;nbsp;&amp;nbsp;To prevent this, the GPL assures that&lt;br/&gt;
patents cannot be used to render the program non-free.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The precise terms and conditions for copying, distribution and&lt;br/&gt;
modification follow.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0. Definitions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"This License" refers to version 3 of the GNU General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Copyright" also means copyright-like laws that apply to other kinds of&lt;br/&gt;
works, such as semiconductor masks.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"The Program" refers to any copyrightable work licensed under this&lt;br/&gt;
License.&amp;nbsp;&amp;nbsp;Each licensee is addressed as "you".&amp;nbsp;&amp;nbsp;"Licensees" and&lt;br/&gt;
"recipients" may be individuals or organizations.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "modify" a work means to copy from or adapt all or part of the work&lt;br/&gt;
in a fashion requiring copyright permission, other than the making of an&lt;br/&gt;
exact copy.&amp;nbsp;&amp;nbsp;The resulting work is called a "modified version" of the&lt;br/&gt;
earlier work or a work "based on" the earlier work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "covered work" means either the unmodified Program or a work based&lt;br/&gt;
on the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "propagate" a work means to do anything with it that, without&lt;br/&gt;
permission, would make you directly or secondarily liable for&lt;br/&gt;
infringement under applicable copyright law, except executing it on a&lt;br/&gt;
computer or modifying a private copy.&amp;nbsp;&amp;nbsp;Propagation includes copying,&lt;br/&gt;
distribution (with or without modification), making available to the&lt;br/&gt;
public, and in some countries other activities as well.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "convey" a work means any kind of propagation that enables other&lt;br/&gt;
parties to make or receive copies.&amp;nbsp;&amp;nbsp;Mere interaction with a user through&lt;br/&gt;
a computer network, with no transfer of a copy, is not conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An interactive user interface displays "Appropriate Legal Notices"&lt;br/&gt;
to the extent that it includes a convenient and prominently visible&lt;br/&gt;
feature that (1) displays an appropriate copyright notice, and (2)&lt;br/&gt;
tells the user that there is no warranty for the work (except to the&lt;br/&gt;
extent that warranties are provided), that licensees may convey the&lt;br/&gt;
work under this License, and how to view a copy of this License.&amp;nbsp;&amp;nbsp;If&lt;br/&gt;
the interface presents a list of user commands or options, such as a&lt;br/&gt;
menu, a prominent item in the list meets this criterion.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;1. Source Code.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "source code" for a work means the preferred form of the work&lt;br/&gt;
for making modifications to it.&amp;nbsp;&amp;nbsp;"Object code" means any non-source&lt;br/&gt;
form of a work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "Standard Interface" means an interface that either is an official&lt;br/&gt;
standard defined by a recognized standards body, or, in the case of&lt;br/&gt;
interfaces specified for a particular programming language, one that&lt;br/&gt;
is widely used among developers working in that language.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "System Libraries" of an executable work include anything, other&lt;br/&gt;
than the work as a whole, that (a) is included in the normal form of&lt;br/&gt;
packaging a Major Component, but which is not part of that Major&lt;br/&gt;
Component, and (b) serves only to enable use of the work with that&lt;br/&gt;
Major Component, or to implement a Standard Interface for which an&lt;br/&gt;
implementation is available to the public in source code form.&amp;nbsp;&amp;nbsp;A&lt;br/&gt;
"Major Component", in this context, means a major essential component&lt;br/&gt;
(kernel, window system, and so on) of the specific operating system&lt;br/&gt;
(if any) on which the executable work runs, or a compiler used to&lt;br/&gt;
produce the work, or an object code interpreter used to run it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "Corresponding Source" for a work in object code form means all&lt;br/&gt;
the source code needed to generate, install, and (for an executable&lt;br/&gt;
work) run the object code and to modify the work, including scripts to&lt;br/&gt;
control those activities.&amp;nbsp;&amp;nbsp;However, it does not include the work's&lt;br/&gt;
System Libraries, or general-purpose tools or generally available free&lt;br/&gt;
programs which are used unmodified in performing those activities but&lt;br/&gt;
which are not part of the work.&amp;nbsp;&amp;nbsp;For example, Corresponding Source&lt;br/&gt;
includes interface definition files associated with source files for&lt;br/&gt;
the work, and the source code for shared libraries and dynamically&lt;br/&gt;
linked subprograms that the work is specifically designed to require,&lt;br/&gt;
such as by intimate data communication or control flow between those&lt;br/&gt;
subprograms and other parts of the work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source need not include anything that users&lt;br/&gt;
can regenerate automatically from other parts of the Corresponding&lt;br/&gt;
Source.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source for a work in source code form is that&lt;br/&gt;
same work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;2. Basic Permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All rights granted under this License are granted for the term of&lt;br/&gt;
copyright on the Program, and are irrevocable provided the stated&lt;br/&gt;
conditions are met.&amp;nbsp;&amp;nbsp;This License explicitly affirms your unlimited&lt;br/&gt;
permission to run the unmodified Program.&amp;nbsp;&amp;nbsp;The output from running a&lt;br/&gt;
covered work is covered by this License only if the output, given its&lt;br/&gt;
content, constitutes a covered work.&amp;nbsp;&amp;nbsp;This License acknowledges your&lt;br/&gt;
rights of fair use or other equivalent, as provided by copyright law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may make, run and propagate covered works that you do not&lt;br/&gt;
convey, without conditions so long as your license otherwise remains&lt;br/&gt;
in force.&amp;nbsp;&amp;nbsp;You may convey covered works to others for the sole purpose&lt;br/&gt;
of having them make modifications exclusively for you, or provide you&lt;br/&gt;
with facilities for running those works, provided that you comply with&lt;br/&gt;
the terms of this License in conveying all material for which you do&lt;br/&gt;
not control copyright.&amp;nbsp;&amp;nbsp;Those thus making or running the covered works&lt;br/&gt;
for you must do so exclusively on your behalf, under your direction&lt;br/&gt;
and control, on terms that prohibit them from making any copies of&lt;br/&gt;
your copyrighted material outside their relationship with you.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Conveying under any other circumstances is permitted solely under&lt;br/&gt;
the conditions stated below.&amp;nbsp;&amp;nbsp;Sublicensing is not allowed; section 10&lt;br/&gt;
makes it unnecessary.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;No covered work shall be deemed part of an effective technological&lt;br/&gt;
measure under any applicable law fulfilling obligations under article&lt;br/&gt;
11 of the WIPO copyright treaty adopted on 20 December 1996, or&lt;br/&gt;
similar laws prohibiting or restricting circumvention of such&lt;br/&gt;
measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a covered work, you waive any legal power to forbid&lt;br/&gt;
circumvention of technological measures to the extent such circumvention&lt;br/&gt;
is effected by exercising rights under this License with respect to&lt;br/&gt;
the covered work, and you disclaim any intention to limit operation or&lt;br/&gt;
modification of the work as a means of enforcing, against the work's&lt;br/&gt;
users, your or third parties' legal rights to forbid circumvention of&lt;br/&gt;
technological measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;4. Conveying Verbatim Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey verbatim copies of the Program's source code as you&lt;br/&gt;
receive it, in any medium, provided that you conspicuously and&lt;br/&gt;
appropriately publish on each copy an appropriate copyright notice;&lt;br/&gt;
keep intact all notices stating that this License and any&lt;br/&gt;
non-permissive terms added in accord with section 7 apply to the code;&lt;br/&gt;
keep intact all notices of the absence of any warranty; and give all&lt;br/&gt;
recipients a copy of this License along with the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may charge any price or no price for each copy that you convey,&lt;br/&gt;
and you may offer support or warranty protection for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;5. Conveying Modified Source Versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a work based on the Program, or the modifications to&lt;br/&gt;
produce it from the Program, in the form of source code under the&lt;br/&gt;
terms of section 4, provided that you also meet all of these conditions:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) The work must carry prominent notices stating that you modified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it, and giving a relevant date.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) The work must carry prominent notices stating that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;released under this License and any conditions added under section&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.&amp;nbsp;&amp;nbsp;This requirement modifies the requirement in section 4 to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"keep intact all notices".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) You must license the entire work, as a whole, under this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License to anyone who comes into possession of a copy.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License will therefore apply, along with any applicable section 7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;additional terms, to the whole of the work, and all its parts,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;regardless of how they are packaged.&amp;nbsp;&amp;nbsp;This License gives no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;permission to license the work in any other way, but it does not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;invalidate such permission if you have separately received it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) If the work has interactive user interfaces, each must display&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Appropriate Legal Notices; however, if the Program has interactive&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interfaces that do not display Appropriate Legal Notices, your&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;work need not make them do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A compilation of a covered work with other separate and independent&lt;br/&gt;
works, which are not by their nature extensions of the covered work,&lt;br/&gt;
and which are not combined with it such as to form a larger program,&lt;br/&gt;
in or on a volume of a storage or distribution medium, is called an&lt;br/&gt;
"aggregate" if the compilation and its resulting copyright are not&lt;br/&gt;
used to limit the access or legal rights of the compilation's users&lt;br/&gt;
beyond what the individual works permit.&amp;nbsp;&amp;nbsp;Inclusion of a covered work&lt;br/&gt;
in an aggregate does not cause this License to apply to the other&lt;br/&gt;
parts of the aggregate.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;6. Conveying Non-Source Forms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a covered work in object code form under the terms&lt;br/&gt;
of sections 4 and 5, provided that you also convey the&lt;br/&gt;
machine-readable Corresponding Source under the terms of this License,&lt;br/&gt;
in one of these ways:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source fixed on a durable physical medium&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;customarily used for software interchange.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer, valid for at least three years and valid for as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long as you offer spare parts or customer support for that product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;model, to give anyone who possesses the object code either (1) a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy of the Corresponding Source for all the software in the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;product that is covered by this License, on a durable physical&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;medium customarily used for software interchange, for a price no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;more than your reasonable cost of physically performing this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;conveying of source, or (2) access to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source from a network server at no charge.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Convey individual copies of the object code with a copy of the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer to provide the Corresponding Source.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alternative is allowed only occasionally and noncommercially, and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;only if you received the object code with such an offer, in accord&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with subsection 6b.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Convey the object code by offering access from a designated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;place (gratis or for a charge), and offer equivalent access to the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source in the same way through the same place at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;further charge.&amp;nbsp;&amp;nbsp;You need not require recipients to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source along with the object code.&amp;nbsp;&amp;nbsp;If the place to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy the object code is a network server, the Corresponding Source&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;may be on a different server (operated by you or a third party)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that supports equivalent copying facilities, provided you maintain&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clear directions next to the object code saying where to find the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source.&amp;nbsp;&amp;nbsp;Regardless of what server hosts the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source, you remain obligated to ensure that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;available for as long as needed to satisfy these requirements.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Convey the object code using peer-to-peer transmission, provided&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you inform other peers where the object code and Corresponding&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Source of the work are being offered to the general public at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;charge under subsection 6d.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A separable portion of the object code, whose source code is excluded&lt;br/&gt;
from the Corresponding Source as a System Library, need not be&lt;br/&gt;
included in conveying the object code work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "User Product" is either (1) a "consumer product", which means any&lt;br/&gt;
tangible personal property which is normally used for personal, family,&lt;br/&gt;
or household purposes, or (2) anything designed or sold for incorporation&lt;br/&gt;
into a dwelling.&amp;nbsp;&amp;nbsp;In determining whether a product is a consumer product,&lt;br/&gt;
doubtful cases shall be resolved in favor of coverage.&amp;nbsp;&amp;nbsp;For a particular&lt;br/&gt;
product received by a particular user, "normally used" refers to a&lt;br/&gt;
typical or common use of that class of product, regardless of the status&lt;br/&gt;
of the particular user or of the way in which the particular user&lt;br/&gt;
actually uses, or expects or is expected to use, the product.&amp;nbsp;&amp;nbsp;A product&lt;br/&gt;
is a consumer product regardless of whether the product has substantial&lt;br/&gt;
commercial, industrial or non-consumer uses, unless such uses represent&lt;br/&gt;
the only significant mode of use of the product.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Installation Information" for a User Product means any methods,&lt;br/&gt;
procedures, authorization keys, or other information required to install&lt;br/&gt;
and execute modified versions of a covered work in that User Product from&lt;br/&gt;
a modified version of its Corresponding Source.&amp;nbsp;&amp;nbsp;The information must&lt;br/&gt;
suffice to ensure that the continued functioning of the modified object&lt;br/&gt;
code is in no case prevented or interfered with solely because&lt;br/&gt;
modification has been made.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey an object code work under this section in, or with, or&lt;br/&gt;
specifically for use in, a User Product, and the conveying occurs as&lt;br/&gt;
part of a transaction in which the right of possession and use of the&lt;br/&gt;
User Product is transferred to the recipient in perpetuity or for a&lt;br/&gt;
fixed term (regardless of how the transaction is characterized), the&lt;br/&gt;
Corresponding Source conveyed under this section must be accompanied&lt;br/&gt;
by the Installation Information.&amp;nbsp;&amp;nbsp;But this requirement does not apply&lt;br/&gt;
if neither you nor any third party retains the ability to install&lt;br/&gt;
modified object code on the User Product (for example, the work has&lt;br/&gt;
been installed in ROM).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The requirement to provide Installation Information does not include a&lt;br/&gt;
requirement to continue to provide support service, warranty, or updates&lt;br/&gt;
for a work that has been modified or installed by the recipient, or for&lt;br/&gt;
the User Product in which it has been modified or installed.&amp;nbsp;&amp;nbsp;Access to a&lt;br/&gt;
network may be denied when the modification itself materially and&lt;br/&gt;
adversely affects the operation of the network or violates the rules and&lt;br/&gt;
protocols for communication across the network.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Corresponding Source conveyed, and Installation Information provided,&lt;br/&gt;
in accord with this section must be in a format that is publicly&lt;br/&gt;
documented (and with an implementation available to the public in&lt;br/&gt;
source code form), and must require no special password or key for&lt;br/&gt;
unpacking, reading or copying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;7. Additional Terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Additional permissions" are terms that supplement the terms of this&lt;br/&gt;
License by making exceptions from one or more of its conditions.&lt;br/&gt;
Additional permissions that are applicable to the entire Program shall&lt;br/&gt;
be treated as though they were included in this License, to the extent&lt;br/&gt;
that they are valid under applicable law.&amp;nbsp;&amp;nbsp;If additional permissions&lt;br/&gt;
apply only to part of the Program, that part may be used separately&lt;br/&gt;
under those permissions, but the entire Program remains governed by&lt;br/&gt;
this License without regard to the additional permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a copy of a covered work, you may at your option&lt;br/&gt;
remove any additional permissions from that copy, or from any part of&lt;br/&gt;
it.&amp;nbsp;&amp;nbsp;(Additional permissions may be written to require their own&lt;br/&gt;
removal in certain cases when you modify the work.)&amp;nbsp;&amp;nbsp;You may place&lt;br/&gt;
additional permissions on material, added by you to a covered work,&lt;br/&gt;
for which you have or can give appropriate copyright permission.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, for material you&lt;br/&gt;
add to a covered work, you may (if authorized by the copyright holders of&lt;br/&gt;
that material) supplement the terms of this License with terms:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Disclaiming warranty or limiting liability differently from the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;terms of sections 15 and 16 of this License; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Requiring preservation of specified reasonable legal notices or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;author attributions in that material or in the Appropriate Legal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Notices displayed by works containing it; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Prohibiting misrepresentation of the origin of that material, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requiring that modified versions of such material be marked in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reasonable ways as different from the original version; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Limiting the use for publicity purposes of names of licensors or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authors of the material; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Declining to grant rights under trademark law for use of some&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;trade names, trademarks, or service marks; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f) Requiring indemnification of licensors and authors of that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;material by anyone who conveys the material (or modified versions of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it) with contractual assumptions of liability to the recipient, for&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;any liability that these contractual assumptions directly impose on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;those licensors and authors.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All other non-permissive additional terms are considered "further&lt;br/&gt;
restrictions" within the meaning of section 10.&amp;nbsp;&amp;nbsp;If the Program as you&lt;br/&gt;
received it, or any part of it, contains a notice stating that it is&lt;br/&gt;
governed by this License along with a term that is a further&lt;br/&gt;
restriction, you may remove that term.&amp;nbsp;&amp;nbsp;If a license document contains&lt;br/&gt;
a further restriction but permits relicensing or conveying under this&lt;br/&gt;
License, you may add to a covered work material governed by the terms&lt;br/&gt;
of that license document, provided that the further restriction does&lt;br/&gt;
not survive such relicensing or conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you add terms to a covered work in accord with this section, you&lt;br/&gt;
must place, in the relevant source files, a statement of the&lt;br/&gt;
additional terms that apply to those files, or a notice indicating&lt;br/&gt;
where to find the applicable terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Additional terms, permissive or non-permissive, may be stated in the&lt;br/&gt;
form of a separately written license, or stated as exceptions;&lt;br/&gt;
the above requirements apply either way.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;8. Termination.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not propagate or modify a covered work except as expressly&lt;br/&gt;
provided under this License.&amp;nbsp;&amp;nbsp;Any attempt otherwise to propagate or&lt;br/&gt;
modify it is void, and will automatically terminate your rights under&lt;br/&gt;
this License (including any patent licenses granted under the third&lt;br/&gt;
paragraph of section 11).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;However, if you cease all violation of this License, then your&lt;br/&gt;
license from a particular copyright holder is reinstated (a)&lt;br/&gt;
provisionally, unless and until the copyright holder explicitly and&lt;br/&gt;
finally terminates your license, and (b) permanently, if the copyright&lt;br/&gt;
holder fails to notify you of the violation by some reasonable means&lt;br/&gt;
prior to 60 days after the cessation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Moreover, your license from a particular copyright holder is&lt;br/&gt;
reinstated permanently if the copyright holder notifies you of the&lt;br/&gt;
violation by some reasonable means, this is the first time you have&lt;br/&gt;
received notice of violation of this License (for any work) from that&lt;br/&gt;
copyright holder, and you cure the violation prior to 30 days after&lt;br/&gt;
your receipt of the notice.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Termination of your rights under this section does not terminate the&lt;br/&gt;
licenses of parties who have received copies or rights from you under&lt;br/&gt;
this License.&amp;nbsp;&amp;nbsp;If your rights have been terminated and not permanently&lt;br/&gt;
reinstated, you do not qualify to receive new licenses for the same&lt;br/&gt;
material under section 10.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;9. Acceptance Not Required for Having Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You are not required to accept this License in order to receive or&lt;br/&gt;
run a copy of the Program.&amp;nbsp;&amp;nbsp;Ancillary propagation of a covered work&lt;br/&gt;
occurring solely as a consequence of using peer-to-peer transmission&lt;br/&gt;
to receive a copy likewise does not require acceptance.&amp;nbsp;&amp;nbsp;However,&lt;br/&gt;
nothing other than this License grants you permission to propagate or&lt;br/&gt;
modify any covered work.&amp;nbsp;&amp;nbsp;These actions infringe copyright if you do&lt;br/&gt;
not accept this License.&amp;nbsp;&amp;nbsp;Therefore, by modifying or propagating a&lt;br/&gt;
covered work, you indicate your acceptance of this License to do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;10. Automatic Licensing of Downstream Recipients.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each time you convey a covered work, the recipient automatically&lt;br/&gt;
receives a license from the original licensors, to run, modify and&lt;br/&gt;
propagate that work, subject to this License.&amp;nbsp;&amp;nbsp;You are not responsible&lt;br/&gt;
for enforcing compliance by third parties with this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An "entity transaction" is a transaction transferring control of an&lt;br/&gt;
organization, or substantially all assets of one, or subdividing an&lt;br/&gt;
organization, or merging organizations.&amp;nbsp;&amp;nbsp;If propagation of a covered&lt;br/&gt;
work results from an entity transaction, each party to that&lt;br/&gt;
transaction who receives a copy of the work also receives whatever&lt;br/&gt;
licenses to the work the party's predecessor in interest had or could&lt;br/&gt;
give under the previous paragraph, plus a right to possession of the&lt;br/&gt;
Corresponding Source of the work from the predecessor in interest, if&lt;br/&gt;
the predecessor has it or can get it with reasonable efforts.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not impose any further restrictions on the exercise of the&lt;br/&gt;
rights granted or affirmed under this License.&amp;nbsp;&amp;nbsp;For example, you may&lt;br/&gt;
not impose a license fee, royalty, or other charge for exercise of&lt;br/&gt;
rights granted under this License, and you may not initiate litigation&lt;br/&gt;
(including a cross-claim or counterclaim in a lawsuit) alleging that&lt;br/&gt;
any patent claim is infringed by making, using, selling, offering for&lt;br/&gt;
sale, or importing the Program or any portion of it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;11. Patents.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "contributor" is a copyright holder who authorizes use under this&lt;br/&gt;
License of the Program or a work on which the Program is based.&amp;nbsp;&amp;nbsp;The&lt;br/&gt;
work thus licensed is called the contributor's "contributor version".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A contributor's "essential patent claims" are all patent claims&lt;br/&gt;
owned or controlled by the contributor, whether already acquired or&lt;br/&gt;
hereafter acquired, that would be infringed by some manner, permitted&lt;br/&gt;
by this License, of making, using, or selling its contributor version,&lt;br/&gt;
but do not include claims that would be infringed only as a&lt;br/&gt;
consequence of further modification of the contributor version.&amp;nbsp;&amp;nbsp;For&lt;br/&gt;
purposes of this definition, "control" includes the right to grant&lt;br/&gt;
patent sublicenses in a manner consistent with the requirements of&lt;br/&gt;
this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free&lt;br/&gt;
patent license under the contributor's essential patent claims, to&lt;br/&gt;
make, use, sell, offer for sale, import and otherwise run, modify and&lt;br/&gt;
propagate the contents of its contributor version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;In the following three paragraphs, a "patent license" is any express&lt;br/&gt;
agreement or commitment, however denominated, not to enforce a patent&lt;br/&gt;
(such as an express permission to practice a patent or covenant not to&lt;br/&gt;
sue for patent infringement).&amp;nbsp;&amp;nbsp;To "grant" such a patent license to a&lt;br/&gt;
party means to make such an agreement or commitment not to enforce a&lt;br/&gt;
patent against the party.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey a covered work, knowingly relying on a patent license,&lt;br/&gt;
and the Corresponding Source of the work is not available for anyone&lt;br/&gt;
to copy, free of charge and under the terms of this License, through a&lt;br/&gt;
publicly available network server or other readily accessible means,&lt;br/&gt;
then you must either (1) cause the Corresponding Source to be so&lt;br/&gt;
available, or (2) arrange to deprive yourself of the benefit of the&lt;br/&gt;
patent license for this particular work, or (3) arrange, in a manner&lt;br/&gt;
consistent with the requirements of this License, to extend the patent&lt;br/&gt;
license to downstream recipients.&amp;nbsp;&amp;nbsp;"Knowingly relying" means you have&lt;br/&gt;
actual knowledge that, but for the patent license, your conveying the&lt;br/&gt;
covered work in a country, or your recipient's use of the covered work&lt;br/&gt;
in a country, would infringe one or more identifiable patents in that&lt;br/&gt;
country that you have reason to believe are valid.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If, pursuant to or in connection with a single transaction or&lt;br/&gt;
arrangement, you convey, or propagate by procuring conveyance of, a&lt;br/&gt;
covered work, and grant a patent license to some of the parties&lt;br/&gt;
receiving the covered work authorizing them to use, propagate, modify&lt;br/&gt;
or convey a specific copy of the covered work, then the patent license&lt;br/&gt;
you grant is automatically extended to all recipients of the covered&lt;br/&gt;
work and works based on it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A patent license is "discriminatory" if it does not include within&lt;br/&gt;
the scope of its coverage, prohibits the exercise of, or is&lt;br/&gt;
conditioned on the non-exercise of one or more of the rights that are&lt;br/&gt;
specifically granted under this License.&amp;nbsp;&amp;nbsp;You may not convey a covered&lt;br/&gt;
work if you are a party to an arrangement with a third party that is&lt;br/&gt;
in the business of distributing software, under which you make payment&lt;br/&gt;
to the third party based on the extent of your activity of conveying&lt;br/&gt;
the work, and under which the third party grants, to any of the&lt;br/&gt;
parties who would receive the covered work from you, a discriminatory&lt;br/&gt;
patent license (a) in connection with copies of the covered work&lt;br/&gt;
conveyed by you (or copies made from those copies), or (b) primarily&lt;br/&gt;
for and in connection with specific products or compilations that&lt;br/&gt;
contain the covered work, unless you entered into that arrangement,&lt;br/&gt;
or that patent license was granted, prior to 28 March 2007.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Nothing in this License shall be construed as excluding or limiting&lt;br/&gt;
any implied license or other defenses to infringement that may&lt;br/&gt;
otherwise be available to you under applicable patent law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;12. No Surrender of Others' Freedom.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If conditions are imposed on you (whether by court order, agreement or&lt;br/&gt;
otherwise) that contradict the conditions of this License, they do not&lt;br/&gt;
excuse you from the conditions of this License.&amp;nbsp;&amp;nbsp;If you cannot convey a&lt;br/&gt;
covered work so as to satisfy simultaneously your obligations under this&lt;br/&gt;
License and any other pertinent obligations, then as a consequence you may&lt;br/&gt;
not convey it at all.&amp;nbsp;&amp;nbsp;For example, if you agree to terms that obligate you&lt;br/&gt;
to collect a royalty for further conveying from those to whom you convey&lt;br/&gt;
the Program, the only way you could satisfy both those terms and this&lt;br/&gt;
License would be to refrain entirely from conveying the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;13. Use with the GNU Affero General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, you have&lt;br/&gt;
permission to link or combine any covered work with a work licensed&lt;br/&gt;
under version 3 of the GNU Affero General Public License into a single&lt;br/&gt;
combined work, and to convey the resulting work.&amp;nbsp;&amp;nbsp;The terms of this&lt;br/&gt;
License will continue to apply to the part which is the covered work,&lt;br/&gt;
but the special requirements of the GNU Affero General Public License,&lt;br/&gt;
section 13, concerning interaction through a network will apply to the&lt;br/&gt;
combination as such.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14. Revised Versions of this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Free Software Foundation may publish revised and/or new versions of&lt;br/&gt;
the GNU General Public License from time to time.&amp;nbsp;&amp;nbsp;Such new versions will&lt;br/&gt;
be similar in spirit to the present version, but may differ in detail to&lt;br/&gt;
address new problems or concerns.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each version is given a distinguishing version number.&amp;nbsp;&amp;nbsp;If the&lt;br/&gt;
Program specifies that a certain numbered version of the GNU General&lt;br/&gt;
Public License "or any later version" applies to it, you have the&lt;br/&gt;
option of following the terms and conditions either of that numbered&lt;br/&gt;
version or of any later version published by the Free Software&lt;br/&gt;
Foundation.&amp;nbsp;&amp;nbsp;If the Program does not specify a version number of the&lt;br/&gt;
GNU General Public License, you may choose any version ever published&lt;br/&gt;
by the Free Software Foundation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the Program specifies that a proxy can decide which future&lt;br/&gt;
versions of the GNU General Public License can be used, that proxy's&lt;br/&gt;
public statement of acceptance of a version permanently authorizes you&lt;br/&gt;
to choose that version for the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Later license versions may give you additional or different&lt;br/&gt;
permissions.&amp;nbsp;&amp;nbsp;However, no additional obligations are imposed on any&lt;br/&gt;
author or copyright holder as a result of your choosing to follow a&lt;br/&gt;
later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;15. Disclaimer of Warranty.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY&lt;br/&gt;
APPLICABLE LAW.&amp;nbsp;&amp;nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT&lt;br/&gt;
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY&lt;br/&gt;
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,&lt;br/&gt;
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR&lt;br/&gt;
PURPOSE.&amp;nbsp;&amp;nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM&lt;br/&gt;
IS WITH YOU.&amp;nbsp;&amp;nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF&lt;br/&gt;
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;16. Limitation of Liability.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING&lt;br/&gt;
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS&lt;br/&gt;
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY&lt;br/&gt;
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE&lt;br/&gt;
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF&lt;br/&gt;
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD&lt;br/&gt;
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),&lt;br/&gt;
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF&lt;br/&gt;
SUCH DAMAGES.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;17. Interpretation of Sections 15 and 16.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the disclaimer of warranty and limitation of liability provided&lt;br/&gt;
above cannot be given local legal effect according to their terms,&lt;br/&gt;
reviewing courts shall apply local law that most closely approximates&lt;br/&gt;
an absolute waiver of all civil liability in connection with the&lt;br/&gt;
Program, unless a warranty or assumption of liability accompanies a&lt;br/&gt;
copy of the Program in return for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; END OF TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How to Apply These Terms to Your New Programs&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you develop a new program, and you want it to be of the greatest&lt;br/&gt;
possible use to the public, the best way to achieve this is to make it&lt;br/&gt;
free software which everyone can redistribute and change under these terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To do so, attach the following notices to the program.&amp;nbsp;&amp;nbsp;It is safest&lt;br/&gt;
to attach them to the start of each source file to most effectively&lt;br/&gt;
state the exclusion of warranty; and each file should have at least&lt;br/&gt;
the "copyright" line and a pointer to where the full notice is found.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;one line to give the program's name and a brief idea of what it does.&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is free software: you can redistribute it and/or modify&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it under the terms of the GNU General Public License as published by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is distributed in the hope that it will be useful,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&amp;nbsp;&amp;nbsp;See the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU General Public License for more details.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You should have received a copy of the GNU General Public License&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;along with this program.&amp;nbsp;&amp;nbsp;If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
Also add information on how to contact you by electronic and paper mail.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the program does terminal interaction, make it output a short&lt;br/&gt;
notice like this when it starts in an interactive mode:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;program&amp;gt;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is free software, and you are welcome to redistribute it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;under certain conditions; type `show c' for details.&lt;br/&gt;
&lt;br/&gt;
The hypothetical commands `show w' and `show c' should show the appropriate&lt;br/&gt;
parts of the General Public License.&amp;nbsp;&amp;nbsp;Of course, your program's commands&lt;br/&gt;
might be different; for a GUI interface, you would use an "about box".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You should also get your employer (if you work as a programmer) or school,&lt;br/&gt;
if any, to sign a "copyright disclaimer" for the program, if necessary.&lt;br/&gt;
For more information on this, and how to apply and follow the GNU GPL, see&lt;br/&gt;
&amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License does not permit incorporating your program&lt;br/&gt;
into proprietary programs.&amp;nbsp;&amp;nbsp;If your program is a subroutine library, you&lt;br/&gt;
may consider it more useful to permit linking proprietary applications with&lt;br/&gt;
the library.&amp;nbsp;&amp;nbsp;If this is what you want to do, use the GNU Lesser General&lt;br/&gt;
Public License instead of this License.&amp;nbsp;&amp;nbsp;But first, please read&lt;br/&gt;
&amp;lt;http://www.gnu.org/philosophy/why-not-lgpl.html&amp;gt;.&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppMatrix/matrix.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppMatrix/matrix.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Matrix, functions working on vectors and matrices&lt;br/&gt;
Copyright (C) 2013 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program. If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppMatrix.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "matrix.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/numeric/conversion/cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/ublas/io.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/ublas/lu.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/ublas/matrix.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/ublas/matrix_proxy.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/ublas/blas.hpp&amp;gt; //boost::numeric::ublas::equals&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
double ribi::Matrix::CalcDeterminant(boost::numeric::ublas::matrix&amp;lt;double&amp;gt; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m.size1() == m.size2() &amp;amp;&amp;amp; "Can only calculate the determinant of square matrices");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::permutation_matrix&amp;lt;std::size_t&amp;gt; pivots(m.size1() );&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int is_singular = boost::numeric::ublas::lu_factorize(m, pivots);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (is_singular) return 0.0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double d = 1.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t sz = pivots.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i != sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (pivots(i) != i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d *= -1.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d *= m(i,i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return d;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt; ribi::Matrix::Chop(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::range;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::matrix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::matrix_range;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;matrix&amp;lt;double&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.reserve(4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int midy = m.size1() / 2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int midx = m.size2() / 2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const matrix_range&amp;lt;const matrix&amp;lt;double&amp;gt; &amp;gt; top_left(&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m,range(0&amp;nbsp;&amp;nbsp; ,midy&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ),range(0&amp;nbsp;&amp;nbsp; ,midx&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const matrix_range&amp;lt;const matrix&amp;lt;double&amp;gt; &amp;gt; bottom_left( m,range(midy,m.size1()),range(0&amp;nbsp;&amp;nbsp; ,midx&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const matrix_range&amp;lt;const matrix&amp;lt;double&amp;gt; &amp;gt; top_right(&amp;nbsp;&amp;nbsp; m,range(0&amp;nbsp;&amp;nbsp; ,midy&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ),range(midx,m.size2()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const matrix_range&amp;lt;const matrix&amp;lt;double&amp;gt; &amp;gt; bottom_right(m,range(midy,m.size1()),range(midx,m.size2()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(matrix&amp;lt;double&amp;gt;(top_left));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(matrix&amp;lt;double&amp;gt;(top_right));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(matrix&amp;lt;double&amp;gt;(bottom_left));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(matrix&amp;lt;double&amp;gt;(bottom_right));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::CreateMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_rows,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_cols,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;double&amp;gt;&amp;amp; v) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n_rows * n_cols == v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; m(n_rows,n_cols);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t row = 0; row!=n_rows; ++row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t col = 0; col!=n_cols; ++col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m(row,col) = v[ (col * n_rows) + row];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::CreateRandomMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_rows, const std::size_t n_cols) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; m(n_rows,n_cols);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t row=0; row!=n_rows; ++row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t col=0; col!=n_cols; ++col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m(row,col) = boost::numeric_cast&amp;lt;double&amp;gt;(std::rand()) / boost::numeric_cast&amp;lt;double&amp;gt;(RAND_MAX);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::vector&amp;lt;double&amp;gt; ribi::Matrix::CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;double&amp;gt;&amp;amp; v) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::vector&amp;lt;double&amp;gt; w(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::copy(v.begin(),v.end(),w.begin());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return w;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::vector&amp;lt;int&amp;gt; ribi::Matrix::CreateVectorInt(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; v) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::vector&amp;lt;int&amp;gt; w(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::copy(v.begin(),v.end(),w.begin());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return w;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Matrix::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.3";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Matrix::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-04-28: version 1.0: initial version",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-06-11: version 1.1: fixed bugs in MatricesAreEqual and MatricesAreAboutEqual",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-06-27: version 1.2: added tests, renamed VectorsAreEqual to VectorsDoubleAreEqual and VectorsIntAreEqual"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-09-16: version 1.3: noexcept"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::Inverse(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m.size1() == m.size2() &amp;amp;&amp;amp; "Can only calculate the inverse of square matrices");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch(m.size1())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return m;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.size1() == 1 &amp;amp;&amp;amp; m.size2() == 1 &amp;amp;&amp;amp; "Only for 1x1 matrices");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double determinant = CalcDeterminant(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(determinant != 0.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,0) != 0.0 &amp;amp;&amp;amp; "Cannot take the inverse of matrix [0]");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; n(1,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(0,0) =&amp;nbsp;&amp;nbsp;1.0 / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.size1() == 2 &amp;amp;&amp;amp; m.size2() == 2 &amp;amp;&amp;amp; "Only for 2x2 matrices");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double determinant = CalcDeterminant(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(determinant != 0.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double a = m(0,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double b = m(0,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double c = m(1,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double d = m(1,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; n(2,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(0,0) =&amp;nbsp;&amp;nbsp;d / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(0,1) = -b / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(1,0) = -c / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(1,1) =&amp;nbsp;&amp;nbsp;a / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.size1() == 3 &amp;amp;&amp;amp; m.size2() == 3 &amp;amp;&amp;amp; "Only for 3x3 matrices");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double determinant = CalcDeterminant(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(determinant != 0.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double a = m(0,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double b = m(0,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double c = m(0,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double d = m(1,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double e = m(1,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double f = m(1,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double g = m(2,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double h = m(2,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double k = m(2,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; n(3,3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_a =&amp;nbsp;&amp;nbsp;((e*k)-(f*h)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_b = -((d*k)-(f*g)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_c =&amp;nbsp;&amp;nbsp;((d*h)-(e*g)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_d = -((b*k)-(c*h)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_e =&amp;nbsp;&amp;nbsp;((a*k)-(c*g)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_f = -((a*h)-(b*g)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_g =&amp;nbsp;&amp;nbsp;((b*f)-(c*e)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_h = -((a*f)-(c*d)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double new_k =&amp;nbsp;&amp;nbsp;((a*e)-(b*d)) / determinant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(0,0) = new_a;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(1,0) = new_b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(2,0) = new_c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(0,1) = new_d;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(1,1) = new_e;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(2,1) = new_f;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(0,2) = new_g;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(1,2) = new_h;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n(2,2) = new_k;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Use blockwise inversion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//ribi::Matrix::Chop returns a std::vector&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//[ A at [0]&amp;nbsp;&amp;nbsp; B at [1] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//[ C at [2]&amp;nbsp;&amp;nbsp; D at [4] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.size1() &amp;gt; 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.size2() &amp;gt; 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt; v = Chop(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a = v[0];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a.size1() == a.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;nbsp;&amp;nbsp;a_inv = Inverse(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b = v[1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; c = v[2];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; d = v[3];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; term&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(c,a_inv)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(term.size1() == term.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; term_inv = Inverse(term);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; new_a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= a_inv&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a_inv,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;term_inv)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; c)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a_inv));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; new_b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a_inv,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;term_inv));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; new_c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;(ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;term_inv,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a_inv));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; new_d = term_inv;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt; w = { new_a, new_b, new_c, new_d };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; result = Unchop(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return result;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::IsAboutEqual(const double a, const double b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double epsilon = 0.000001; //Rounding error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return a - epsilon &amp;lt; b &amp;amp;&amp;amp; a + epsilon &amp;gt; b;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::Power(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; m,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int exponent)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(exponent &amp;gt;= 0 &amp;amp;&amp;amp; "Can only take the power of matrices with a positive exponent");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m.size1() == m.size2() &amp;amp;&amp;amp; "Can only take the power of square matrices");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t sz = m.size1();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (exponent == 0) return boost::numeric::ublas::identity_matrix&amp;lt;double&amp;gt;(sz);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (exponent == 1) return m;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; n(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=exponent; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n = ribi::Matrix::Prod(n,m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return n;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::MatricesAreAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (a.size1() != b.size1()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (a.size2() != b.size2()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//return std::equal(a.begin1(),a.end1(),b.begin1(),&amp;amp;ribi::Matrix::IsAboutEqual); //DON'T USE STD::EQUAL!&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a.size1() == b.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a.size2() == b.size2());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_rows = a.size1();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_cols = a.size2();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t row = 0; row != n_rows; ++row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t col = 0; col != n_cols; ++col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!IsAboutEqual(a(row,col),b(row,col))) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::MatricesAreEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( a.size1() != b.size1()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| a.size2() != b.size2()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const bool is_equal = std::equal(a.begin1(),a.end1(),b.begin1()); //DON'T USE STD::EQUAL!&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a.size1() == b.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a.size2() == b.size2());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_rows = a.size1();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_cols = a.size2();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t row = 0; row != n_rows; ++row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t col = 0; col != n_cols; ++col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (a(row,col) != b(row,col)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::MatrixIsAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Deprecated naming");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return MatricesAreAboutEqual(a,b);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::MultiProd(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Prod(Prod(a,b),c);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a.size2() == b.size1() &amp;amp;&amp;amp; "A's width must be B's height");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::numeric::ublas::prod(a,b);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::vector&amp;lt;double&amp;gt; ribi::Matrix::Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a.size2() == b.size() &amp;amp;&amp;amp; "A's width must be B's height");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::numeric::ublas::prod(a,b);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::SimplifyMatrixOfMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt;&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [A B]&amp;nbsp;&amp;nbsp;[I J] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [C D]&amp;nbsp;&amp;nbsp;[K L] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A B I J]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C D K L]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [E F]&amp;nbsp;&amp;nbsp;[M N] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ E F M N]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [G H]&amp;nbsp;&amp;nbsp;[O P] ] -&amp;gt; [ G H O P]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(m.size1() &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(m.size2() &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_sub_rows = boost::numeric_cast&amp;lt;int&amp;gt;(m.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_sub_cols = boost::numeric_cast&amp;lt;int&amp;gt;(m.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sub_rows&amp;nbsp;&amp;nbsp; = n_sub_rows != 0 &amp;amp;&amp;amp; n_sub_cols != 0 ? boost::numeric_cast&amp;lt;int&amp;gt;(m(0,0).size1()) : 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sub_cols&amp;nbsp;&amp;nbsp; = n_sub_cols != 0 &amp;amp;&amp;amp; n_sub_cols != 0 ? boost::numeric_cast&amp;lt;int&amp;gt;(m(0,0).size2()) : 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; v(n_sub_rows * sub_rows, n_sub_cols * sub_cols);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int sub_row=0; sub_row!=n_sub_rows; ++sub_row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int sub_col=0; sub_col!=n_sub_cols; ++sub_col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(sub_row &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(m.size1()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(sub_col &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(m.size2()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; sub = m(sub_row,sub_col);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int offset_x = sub_col * sub_cols;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int offset_y = sub_row * sub_rows;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int row=0; row!=sub_rows; ++row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int col=0; col!=sub_cols; ++col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(offset_y + row &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(v.size1()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(offset_x + col &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(v.size2()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(row &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(sub.size1()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(col &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(sub.size2()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v(offset_y + row,offset_x + col) = sub(row,col);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::SimplifyVectorOfMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt;&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [A B] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [C D] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A B ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C D ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [E F] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ E F ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [G H] ] -&amp;gt; [ G H ]&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_subs&amp;nbsp;&amp;nbsp; = boost::numeric_cast&amp;lt;int&amp;gt;(m.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sub_rows = boost::numeric_cast&amp;lt;int&amp;gt;(m[0].size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sub_cols = boost::numeric_cast&amp;lt;int&amp;gt;(m[0].size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; v(n_subs * sub_rows, sub_cols);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int sub_index=0; sub_index!=n_subs; ++sub_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(sub_index &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(m.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; sub = m[sub_index];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int offset_x = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int offset_y = sub_index * sub_rows;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int row=0; row!=sub_rows; ++row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int col=0; col!=sub_cols; ++col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(offset_y + row &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(v.size1()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(offset_x + col &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(v.size2()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(row &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(sub.size1()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(col &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(sub.size2()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v(offset_y + row,offset_x + col) = sub(row,col);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::vector&amp;lt;double&amp;gt; ribi::Matrix::SimplifyVectorOfVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;boost::numeric::ublas::vector&amp;lt;double&amp;gt; &amp;gt;&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [A] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [B] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ B ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [C] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// [ [D] ] -&amp;gt; [ D ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(!m.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_subs = boost::numeric_cast&amp;lt;int&amp;gt;(m.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int subs_sz = n_subs &amp;gt; 0 ? boost::numeric_cast&amp;lt;int&amp;gt;(m[0].size()) : 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::vector&amp;lt;double&amp;gt; v(n_subs * subs_sz);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_subs; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(m.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; sub = m[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(sub.begin(),sub.end(),v.begin() + (i * subs_sz));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Matrix::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::Matrix::Test()");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::detail::equals;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::matrix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::vector;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test CreateMatrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [1,4]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [2,5]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [3,6]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;int&amp;gt; m = CreateMatrix(3,2, {1,2,3,4,5,6} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,0) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,0) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(2,0) == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,1) == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,1) == 5);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(2,1) == 6);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Simplify vector of vector&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [A] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [B] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ B ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [C] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [D] ] -&amp;gt; [ D ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::vector&amp;lt;boost::numeric::ublas::vector&amp;lt;double&amp;gt; &amp;gt; v(2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[0] = CreateVector( { 1.0, 2.0 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[1] = CreateVector( { 3.0, 4.0 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt; w&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= SimplifyVectorOfVector(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsAreAboutEqual(w, CreateVector( { 1.0, 2.0, 3.0, 4.0 } )));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///Simplify a structure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [A B] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [C D] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A B ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C D ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [E F] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ E F ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/// [ [G H] ] -&amp;gt; [ G H ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt; v(2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[0] = CreateMatrix(2,2, {1.0, 3.0, 2.0, 4.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[1] = CreateMatrix(2,2, {5.0, 7.0, 6.0, 8.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; w&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= SimplifyVectorOfMatrix(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w.size1() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w.size2() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(MatricesAreAboutEqual(w, CreateMatrix(4,2, { 1.0, 3.0, 5.0, 7.0, 2.0, 4.0, 6.0, 8.0 } )));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Simplify a structure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [A B]&amp;nbsp;&amp;nbsp;[I J] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [C D]&amp;nbsp;&amp;nbsp;[K L] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A B I J]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C D K L]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [E F]&amp;nbsp;&amp;nbsp;[M N] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ E F M N]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [G H]&amp;nbsp;&amp;nbsp;[O P] ] -&amp;gt; [ G H O P]&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [ 1&amp;nbsp;&amp;nbsp;2]&amp;nbsp;&amp;nbsp;[ 3&amp;nbsp;&amp;nbsp;4] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [ 5&amp;nbsp;&amp;nbsp;6]&amp;nbsp;&amp;nbsp;[ 7&amp;nbsp;&amp;nbsp;8] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A B I J]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C D K L]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [ 9 10]&amp;nbsp;&amp;nbsp;[11 12] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ E F M N]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ [13 14]&amp;nbsp;&amp;nbsp;[15 16] ] -&amp;gt; [ G H O P]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt; v(2,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v(0,0) = CreateMatrix(2,2, { 1.0,&amp;nbsp;&amp;nbsp;5.0,&amp;nbsp;&amp;nbsp;2.0,&amp;nbsp;&amp;nbsp;6.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v(1,0) = CreateMatrix(2,2, { 9.0, 13.0, 10.0, 14.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v(0,1) = CreateMatrix(2,2, { 3.0,&amp;nbsp;&amp;nbsp;7.0,&amp;nbsp;&amp;nbsp;4.0,&amp;nbsp;&amp;nbsp;8.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v(1,1) = CreateMatrix(2,2, {11.0, 15.0, 12.0, 16.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; w&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= SimplifyMatrixOfMatrix(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w.size1() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w.size2() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; expected&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= CreateMatrix(4,4,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.0, 5.0,&amp;nbsp;&amp;nbsp;9.0, 13.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.0, 6.0, 10.0, 14.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3.0, 7.0, 11.0, 15.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4.0, 8.0, 12.0, 16.0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!MatricesAreAboutEqual(w,expected))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "w: " &amp;lt;&amp;lt; w &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "e: " &amp;lt;&amp;lt; expected &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(MatricesAreAboutEqual(w,expected));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test Chop on 3x3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [ 1.0 ] | [ 2.0&amp;nbsp;&amp;nbsp; 3.0 ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 1.0 2.0 3.0 ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; --------+--------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 4.0 5.0 6.0 ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [ 4.0 ] | [ 5.0&amp;nbsp;&amp;nbsp; 6.0 ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 7.0 8.0 9.0 ] -&amp;gt;&amp;nbsp;&amp;nbsp;[ 7.0 ] | [ 8.0&amp;nbsp;&amp;nbsp; 9.0 ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = CreateMatrix(3,3, {1.0,4.0,7.0,2.0,5.0,8.0,3.0,6.0,9.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,0) == 1.0); assert(m(0,1) == 2.0); assert(m(0,2) == 3.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,0) == 4.0); assert(m(1,1) == 5.0); assert(m(1,2) == 6.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(2,0) == 7.0); assert(m(2,1) == 8.0); assert(m(2,2) == 9.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;matrix&amp;lt;double&amp;gt; &amp;gt; n = Chop(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size1() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size2() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[1].size1() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[1].size2() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[2].size1() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[2].size2() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[3].size1() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[3].size2() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size1() + n[2].size1() == m.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[1].size1() + n[3].size1() == m.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size2() + n[1].size2() == m.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[2].size2() + n[3].size2() == m.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test Chop on 5x5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = CreateMatrix(5,5,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.0, 6.0,11.0,16.0,21.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.0, 7.0,12.0,17.0,22.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3.0, 8.0,13.0,18.0,23.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4.0, 9.0,14.0,19.0,24.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5.0,10.0,15.0,20.0,25.0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,0) ==&amp;nbsp;&amp;nbsp;1.0); assert(m(0,1) ==&amp;nbsp;&amp;nbsp;2.0); assert(m(0,2) ==&amp;nbsp;&amp;nbsp;3.0); assert(m(0,3) ==&amp;nbsp;&amp;nbsp;4.0); assert(m(0,4) ==&amp;nbsp;&amp;nbsp;5.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,0) ==&amp;nbsp;&amp;nbsp;6.0); assert(m(1,1) ==&amp;nbsp;&amp;nbsp;7.0); assert(m(1,2) ==&amp;nbsp;&amp;nbsp;8.0); assert(m(1,3) ==&amp;nbsp;&amp;nbsp;9.0); assert(m(1,4) == 10.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(2,0) == 11.0); assert(m(2,1) == 12.0); assert(m(2,2) == 13.0); assert(m(2,3) == 14.0); assert(m(2,4) == 15.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(3,0) == 16.0); assert(m(3,1) == 17.0); assert(m(3,2) == 18.0); assert(m(3,3) == 19.0); assert(m(3,4) == 20.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(4,0) == 21.0); assert(m(4,1) == 22.0); assert(m(4,2) == 23.0); assert(m(4,3) == 24.0); assert(m(4,4) == 25.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;matrix&amp;lt;double&amp;gt; &amp;gt; n = Chop(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size1() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size2() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[1].size1() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[1].size2() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[2].size1() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[2].size2() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[3].size1() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[3].size2() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size1() + n[2].size1() == m.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[1].size1() + n[3].size1() == m.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0].size2() + n[1].size2() == m.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[2].size2() + n[3].size2() == m.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test VectorsAreAboutEqual&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const vector&amp;lt;double&amp;gt; m = CreateVector( {1.0,3.0,2.0,4.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsAreAboutEqual(m,m));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vector&amp;lt;double&amp;gt; n(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n *= 3.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n /= 6.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n *= 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsAreAboutEqual(m,n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test Power&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = 2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = CreateMatrix(sz,sz, {1.0,3.0,2.0,4.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; expected_0 = boost::numeric::ublas::identity_matrix&amp;lt;double&amp;gt;(sz);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; expected_1 = m;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; expected_2 = CreateMatrix(sz,sz, {7.0,15.0,10.0,22.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(m,m));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(Power(m,0),expected_0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(Power(m,1),expected_1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(Power(m,2),expected_2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test Unchop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check 0x0 to and including 9x9 matrices&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t n_rows = 0; n_rows!=10; ++n_rows)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t n_cols = 0; n_cols!=10; ++n_cols)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Epsilon is more or less the smallest round-off error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double epsilon = std::numeric_limits&amp;lt;double&amp;gt;::epsilon();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Create a random matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = ribi::Matrix::CreateRandomMatrix(n_rows,n_cols);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Assume it is found identical to itself&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(equals(m,m,epsilon,epsilon));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Chop and unchop the input matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; n = ribi::Matrix::Unchop(Chop(m));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Assume input matrix and result are identical&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(equals(m,n,epsilon,epsilon));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test Inverse on 2x2 matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 1.0 2.0 ] -1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ -2.0&amp;nbsp;&amp;nbsp; 1.0 ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 3.0 4.0 ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = [&amp;nbsp;&amp;nbsp;1.5&amp;nbsp;&amp;nbsp;-0.5 ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = ribi::Matrix::CreateMatrix(2,2, {1.0,3.0,2.0,4.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,0) == 1.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,0) == 3.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,1) == 2.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,1) == 4.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; n = ribi::Matrix::Inverse(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double epsilon = 0.0000001; //Rounding error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(0,0) &amp;gt; -2.0 - epsilon &amp;amp;&amp;amp; n(0,0) &amp;lt; -2.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(1,0) &amp;gt;&amp;nbsp;&amp;nbsp;1.5 - epsilon &amp;amp;&amp;amp; n(1,0) &amp;lt;&amp;nbsp;&amp;nbsp;1.5 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(0,1) &amp;gt;&amp;nbsp;&amp;nbsp;1.0 - epsilon &amp;amp;&amp;amp; n(0,1) &amp;lt;&amp;nbsp;&amp;nbsp;1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(1,1) &amp;gt; -0.5 - epsilon &amp;amp;&amp;amp; n(1,1) &amp;lt; -0.5 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::Prod(m,n)(0,0) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; ribi::Matrix::Prod(m,n)(0,0) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::Prod(m,n)(1,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; ribi::Matrix::Prod(m,n)(1,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::Prod(m,n)(0,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; ribi::Matrix::Prod(m,n)(0,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Matrix::Prod(m,n)(1,1) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; ribi::Matrix::Prod(m,n)(1,1) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 1.0 2.0 3.0] -1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ -24.0&amp;nbsp;&amp;nbsp; 18.0&amp;nbsp;&amp;nbsp; 5.0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 0.0 1.0 4.0]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [&amp;nbsp;&amp;nbsp;20.0&amp;nbsp;&amp;nbsp;-15.0&amp;nbsp;&amp;nbsp;-4.0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 5.0 6.0 0.0]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = [ - 5.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4.0&amp;nbsp;&amp;nbsp; 1.0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = ribi::Matrix::CreateMatrix(3,3, {1.0,0.0,5.0,2.0,1.0,6.0,3.0,4.0,0.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,0) == 1.0); assert(m(0,1) == 2.0); assert(m(0,2) == 3.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,0) == 0.0); assert(m(1,1) == 1.0); assert(m(1,2) == 4.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(2,0) == 5.0); assert(m(2,1) == 6.0); assert(m(2,2) == 0.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; n = ribi::Matrix::Inverse(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double epsilon = 0.0001; //Rounding error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(0,0) &amp;gt; -24.0 - epsilon &amp;amp;&amp;amp; n(0,0) &amp;lt; -24.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(1,0) &amp;gt;&amp;nbsp;&amp;nbsp;20.0 - epsilon &amp;amp;&amp;amp; n(1,0) &amp;lt;&amp;nbsp;&amp;nbsp;20.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(2,0) &amp;gt; - 5.0 - epsilon &amp;amp;&amp;amp; n(2,0) &amp;lt; - 5.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(0,1) &amp;gt;&amp;nbsp;&amp;nbsp;18.0 - epsilon &amp;amp;&amp;amp; n(0,1) &amp;lt;&amp;nbsp;&amp;nbsp;18.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(1,1) &amp;gt; -15.0 - epsilon &amp;amp;&amp;amp; n(1,1) &amp;lt; -15.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(2,1) &amp;gt;&amp;nbsp;&amp;nbsp; 4.0 - epsilon &amp;amp;&amp;amp; n(2,1) &amp;lt;&amp;nbsp;&amp;nbsp; 4.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(0,2) &amp;gt;&amp;nbsp;&amp;nbsp; 5.0 - epsilon &amp;amp;&amp;amp; n(0,2) &amp;lt;&amp;nbsp;&amp;nbsp; 5.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(1,2) &amp;gt;&amp;nbsp;&amp;nbsp;-4.0 - epsilon &amp;amp;&amp;amp; n(1,2) &amp;lt; - 4.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n(2,2) &amp;gt;&amp;nbsp;&amp;nbsp; 1.0 - epsilon &amp;amp;&amp;amp; n(2,2) &amp;lt;&amp;nbsp;&amp;nbsp; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; i = ribi::Matrix::Prod(m,n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,0) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(0,0) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(1,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(2,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(0,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,1) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(1,1) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(2,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,2) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(0,2) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,2) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(1,2) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,2) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(2,2) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test Inverse on 3x3 matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 1.0 2.0 3.0] -1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 4.0 4.0 6.0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// [ 7.0 8.0 9.0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Note: cannot make the center value equal to 5.0, as this makes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// the matrix un-invertible (the determinant becomes equal to zero)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = ribi::Matrix::CreateMatrix(3,3, {1.0,4.0,7.0,2.0,4.0,8.0,3.0,6.0,9.0} );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(0,0) == 1.0); assert(m(0,1) == 2.0); assert(m(0,2) == 3.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(1,0) == 4.0); assert(m(1,1) == 4.0); assert(m(1,2) == 6.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m(2,0) == 7.0); assert(m(2,1) == 8.0); assert(m(2,2) == 9.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; n = ribi::Matrix::Inverse(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double epsilon = 0.00001; //Rounding error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; i = ribi::Matrix::Prod(m,n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,0) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(0,0) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(1,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(2,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(0,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,1) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(1,1) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(2,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,2) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(0,2) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,2) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(1,2) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,2) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(2,2) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test Inverse on 4x4 matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = ribi::Matrix::CreateRandomMatrix(4,4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; n = ribi::Matrix::Inverse(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double epsilon = 0.00001; //Rounding error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; i = ribi::Matrix::Prod(m,n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test if i is identity matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,0) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(0,0) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(1,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(2,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(3,0) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(3,0) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(0,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,1) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(1,1) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(2,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(3,1) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(3,1) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,2) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(0,2) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,2) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(1,2) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,2) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(2,2) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(3,2) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(3,2) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(0,3) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(0,3) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(1,3) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(1,3) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(2,3) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(2,3) &amp;lt; 0.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i(3,3) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(3,3) &amp;lt; 1.0 + epsilon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE("Test Inverse on bigger matrices");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t sz = 5; sz!=20; ++sz)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; m = ribi::Matrix::CreateRandomMatrix(sz,sz);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; n = ribi::Matrix::Inverse(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double epsilon = 0.00001; //Rounding error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const matrix&amp;lt;double&amp;gt; i = ribi::Matrix::Prod(m,n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test if i is identity matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t y = 0; y!=sz; ++y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t x = 0; x!=sz; ++x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (x == y &amp;amp;&amp;amp; i(y,x) &amp;gt; 1.0 - epsilon &amp;amp;&amp;amp; i(y,x) &amp;lt; 1.0 + epsilon)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (x != y &amp;amp;&amp;amp; i(y,x) &amp;gt; 0.0 - epsilon &amp;amp;&amp;amp; i(y,x) &amp;lt; 0.0 + epsilon)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE("Test MatricesAreEqual");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a = boost::numeric::ublas::zero_matrix&amp;lt;double&amp;gt;(2,3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto b = boost::numeric::ublas::zero_matrix&amp;lt;double&amp;gt;(3,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto c = boost::numeric::ublas::zero_matrix&amp;lt;double&amp;gt;(2,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto d = boost::numeric::ublas::zero_matrix&amp;lt;double&amp;gt;(3,3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( MatricesAreEqual(a,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( MatricesAreEqual(b,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( MatricesAreEqual(c,c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( MatricesAreEqual(d,d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreEqual(a,c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreEqual(a,d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreEqual(b,c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreEqual(b,d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreEqual(c,d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a = CreateMatrix(2,2, { 1.0,0.0,0.0,1.0 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auto b = a;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(MatricesAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(MatricesAreAboutEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b(1,1) = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!MatricesAreAboutEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b(1,1) = 1.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(MatricesAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(MatricesAreAboutEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE("Test VectorsAreEqual (int)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a = boost::numeric::ublas::vector&amp;lt;int&amp;gt;(2,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto b = boost::numeric::ublas::vector&amp;lt;int&amp;gt;(3,0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( VectorsIntAreEqual(a,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( VectorsIntAreEqual(b,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsIntAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsIntAreEqual(b,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a = CreateVector( { 1,2,3 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auto b = a;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(a,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(b,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(b,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b(1) = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( VectorsIntAreEqual(a,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsIntAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsIntAreEqual(b,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( VectorsIntAreEqual(b,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b(1) = 2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(a,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(b,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsIntAreEqual(b,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE("Test VectorsAreEqual (double)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a = boost::numeric::ublas::zero_vector&amp;lt;double&amp;gt;(2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto b = boost::numeric::ublas::zero_vector&amp;lt;double&amp;gt;(3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( VectorsDoubleAreEqual(a,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( VectorsDoubleAreEqual(b,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsDoubleAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsDoubleAreEqual(b,a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto a = CreateVector( { 1.1,2.2,3.3 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auto b = a;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsDoubleAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsAreAboutEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b(1) = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsDoubleAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!VectorsAreAboutEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b(1) = 2.2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsDoubleAreEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(VectorsAreAboutEqual(a,b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::Matrix::Test()");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; ribi::Matrix::Unchop(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Chop returns a std::vector of sub-matrices&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[ A at [0]&amp;nbsp;&amp;nbsp; B at [1] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//[ C at [2]&amp;nbsp;&amp;nbsp; D at [4] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::range;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::matrix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;using boost::numeric::ublas::matrix_range;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[0].size1() == v[1].size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[2].size1() == v[3].size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[0].size2() == v[2].size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[1].size2() == v[3].size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; m(v[0].size1() + v[2].size1(),v[0].size2() + v[1].size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int quadrant=0; quadrant!=4; ++quadrant)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; w = v[quadrant];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_rows = v[quadrant].size1();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_cols = v[quadrant].size2();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int offset_x = quadrant % 2 ? v[0].size2() : 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int offset_y = quadrant / 2 ? v[0].size1() : 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t row=0; row!=n_rows; ++row)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t col=0; col!=n_cols; ++col)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m(offset_y + row, offset_x + col) = w(row,col);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[0].size1() + v[2].size1() == m.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[1].size1() + v[3].size1() == m.size1());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[0].size2() + v[1].size2() == m.size2());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[2].size2() + v[3].size2() == m.size2());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::VectorIsAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Deprecated naming");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return VectorsAreAboutEqual(a,b);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::VectorsAreAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (a.size() != b.size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(a.begin(),a.end(),b.begin(),&amp;amp;ribi::Matrix::IsAboutEqual);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::VectorsDoubleAreEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (a.size() != b.size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(a.begin(),a.end(),b.begin());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Matrix::VectorsIntAreEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;int&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;int&amp;gt;&amp;amp; b) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (a.size() != b.size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(a.begin(),a.end(),b.begin());&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppMatrix/matrix.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppMatrix/matrix.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Matrix, functions working on vectors and matrices&lt;br/&gt;
Copyright (C) 2013 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program. If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppMatrix.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef MATRIX_H&lt;br/&gt;
#define MATRIX_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/numeric/ublas/matrix.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/ublas/vector.hpp&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
///Helper class for matrix operations&lt;br/&gt;
struct Matrix&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Calculate the determinant&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Adapted from the code Maik Beckmann posted at&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;http://boost.2283326.n4.nabble.com/How-to-compute-determinant-td2710896.html&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static double CalcDeterminant(boost::numeric::ublas::matrix&amp;lt;double&amp;gt; m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Chop returns a std::vector of sub-matrices&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///[ A at [0]&amp;nbsp;&amp;nbsp; B at [1] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///[ C at [2]&amp;nbsp;&amp;nbsp; D at [4] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt; Chop(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a n_rows x n_cols sized matrix from a std::vector,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///used for easy initialization&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; CreateMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_rows,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_cols,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;double&amp;gt;&amp;amp; v) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a random-filled matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; CreateRandomMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_rows, const std::size_t n_cols) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a uBLAS vector from a std::vector,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///used for easy initialization&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::vector&amp;lt;double&amp;gt; CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;double&amp;gt;&amp;amp; v) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a uBLAS vector from a std::vector,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///used for easy initialization&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::vector&amp;lt;int&amp;gt; CreateVectorInt(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; v) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Calculate the inverse of a matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; Inverse(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two doubles are about equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool IsAboutEqual(const double a, const double b) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two matrices are equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///This is only suitable to test for exact copies.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Use MatricesAreAboutEqual to allow for a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///small difference between the matrix elements.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool MatricesAreEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two matrices are about equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool MatricesAreAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two matrices are about equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool MatrixIsAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Calculates the matrix product a * b * c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; MultiProd(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Take the power of a square matrix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; Power(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; m,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int exponent);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Calculates the matrix product a * b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///with checking for correct dimensions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Calculates the matrix product a * b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///with checking for correct dimensions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::vector&amp;lt;double&amp;gt; Prod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Simplify a structure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [A] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [B] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ B ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [C] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [D] ] -&amp;gt; [ D ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::vector&amp;lt;double&amp;gt; SimplifyVectorOfVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::vector&amp;lt;double&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt;&amp;amp; m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Simplify a structure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [A B] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [C D] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A B ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C D ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [E F] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ E F ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [G H] ] -&amp;gt; [ G H ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; SimplifyVectorOfMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt;&amp;amp; m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Simplify a structure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [A B]&amp;nbsp;&amp;nbsp;[I J] ]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [C D]&amp;nbsp;&amp;nbsp;[K L] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ A B I J]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ C D K L]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [E F]&amp;nbsp;&amp;nbsp;[M N] ]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[ E F M N]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// [ [G H]&amp;nbsp;&amp;nbsp;[O P] ] -&amp;gt; [ G H O P]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; SimplifyMatrixOfMatrix(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::matrix&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::numeric::ublas::matrix&amp;lt;double&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt;&amp;amp; m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test these functions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Unchop merges the 4 std::vector of sub-matrices produced by Chop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::numeric::ublas::matrix&amp;lt;double&amp;gt; Unchop(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::numeric::ublas::matrix&amp;lt;double&amp;gt; &amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two vectors are about equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool VectorsAreAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two vectors are about equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool VectorIsAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two vector are equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///This is only suitable to test for exact copies.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Use VectorsAreAboutEqual to allow for a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///small difference between the vector elements.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool VectorsDoubleAreEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;double&amp;gt;&amp;amp; b) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if two vector are equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool VectorsIntAreEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;int&amp;gt;&amp;amp; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::numeric::ublas::vector&amp;lt;int&amp;gt;&amp;amp; b) noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // MATRIX_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://validator.w3.org/check?uri=referer"&gt;&lt;img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This page has been created by the &lt;a href="Tools.htm"&gt;tool&lt;/a&gt; &lt;a href="ToolCodeToHtml.htm"&gt;CodeToHtml&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
