<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Matrix</title>
  <meta name="description" content="C++ Matrix"/>
  <meta name="keywords" content="C++ Matrix "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMatrix.htm">Matrix</a></h1>
<p>&nbsp;</p>
<h2>./CppMatrix/CppMatrix.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMatrix/CppMatrix.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMatrix<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMatrix/matrix.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMatrix/matrix.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMatrix/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMatrix/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMatrix/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMatrix/matrix.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMatrix/matrix.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Matrix, functions working on vectors and matrices<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppMatrix.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "matrix.h"<br/>
<br/>
#include &lt;iostream&gt;<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#include &lt;boost/numeric/ublas/io.hpp&gt;<br/>
#include &lt;boost/numeric/ublas/lu.hpp&gt;<br/>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;<br/>
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;<br/>
#include &lt;boost/numeric/ublas/blas.hpp&gt; //boost::numeric::ublas::equals<br/>
#pragma GCC diagnostic pop<br/>
<br/>
#include "trace.h"<br/>
<br/>
double ribi::Matrix::CalcDeterminant(boost::numeric::ublas::matrix&lt;double&gt; m)<br/>
{<br/>
&nbsp;&nbsp;assert(m.size1() == m.size2() &amp;&amp; "Can only calculate the determinant of square matrices");<br/>
&nbsp;&nbsp;boost::numeric::ublas::permutation_matrix&lt;std::size_t&gt; pivots(m.size1() );<br/>
<br/>
&nbsp;&nbsp;const int is_singular = boost::numeric::ublas::lu_factorize(m, pivots);<br/>
<br/>
&nbsp;&nbsp;if (is_singular) return 0.0;<br/>
<br/>
&nbsp;&nbsp;double d = 1.0;<br/>
&nbsp;&nbsp;const std::size_t sz = pivots.size();<br/>
&nbsp;&nbsp;for (std::size_t i=0; i != sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (pivots(i) != i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d *= -1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d *= m(i,i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return d;<br/>
}<br/>
<br/>
const std::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt; ribi::Matrix::Chop(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;using boost::numeric::ublas::range;<br/>
&nbsp;&nbsp;using boost::numeric::ublas::matrix;<br/>
&nbsp;&nbsp;using boost::numeric::ublas::matrix_range;<br/>
&nbsp;&nbsp;std::vector&lt;matrix&lt;double&gt; &gt; v;<br/>
&nbsp;&nbsp;v.reserve(4);<br/>
&nbsp;&nbsp;const int midy = m.size1() / 2;<br/>
&nbsp;&nbsp;const int midx = m.size2() / 2;<br/>
&nbsp;&nbsp;const matrix_range&lt;const matrix&lt;double&gt; &gt; top_left(&nbsp;&nbsp;&nbsp;&nbsp;m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;const matrix_range&lt;const matrix&lt;double&gt; &gt; bottom_left( m,range(midy,m.size1()),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;const matrix_range&lt;const matrix&lt;double&gt; &gt; top_right(&nbsp;&nbsp; m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(midx,m.size2()));<br/>
&nbsp;&nbsp;const matrix_range&lt;const matrix&lt;double&gt; &gt; bottom_right(m,range(midy,m.size1()),range(midx,m.size2()));<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;double&gt;(top_left));<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;double&gt;(top_right));<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;double&gt;(bottom_left));<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;double&gt;(bottom_right));<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::CreateMatrix(<br/>
&nbsp;&nbsp;const std::size_t n_rows,<br/>
&nbsp;&nbsp;const std::size_t n_cols,<br/>
&nbsp;&nbsp;const std::vector&lt;double&gt;&amp; v) noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(n_rows * n_cols == v.size());<br/>
&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; m(n_rows,n_cols);<br/>
&nbsp;&nbsp;for (std::size_t row = 0; row!=n_rows; ++row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t col = 0; col!=n_cols; ++col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) = v[ (col * n_rows) + row];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return m;<br/>
}<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::CreateRandomMatrix(<br/>
&nbsp;&nbsp;const std::size_t n_rows, const std::size_t n_cols) noexcept<br/>
{<br/>
&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; m(n_rows,n_cols);<br/>
&nbsp;&nbsp;for (std::size_t row=0; row!=n_rows; ++row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t col=0; col!=n_cols; ++col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) = boost::numeric_cast&lt;double&gt;(std::rand()) / boost::numeric_cast&lt;double&gt;(RAND_MAX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return m;<br/>
}<br/>
<br/>
const boost::numeric::ublas::vector&lt;double&gt; ribi::Matrix::CreateVector(<br/>
&nbsp;&nbsp;const std::vector&lt;double&gt;&amp; v) noexcept<br/>
{<br/>
&nbsp;&nbsp;boost::numeric::ublas::vector&lt;double&gt; w(v.size());<br/>
&nbsp;&nbsp;std::copy(v.begin(),v.end(),w.begin());<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
const boost::numeric::ublas::vector&lt;int&gt; ribi::Matrix::CreateVectorInt(<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; v) noexcept<br/>
{<br/>
&nbsp;&nbsp;boost::numeric::ublas::vector&lt;int&gt; w(v.size());<br/>
&nbsp;&nbsp;std::copy(v.begin(),v.end(),w.begin());<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
const std::string ribi::Matrix::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.3";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Matrix::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: version 1.0: initial version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-11: version 1.1: fixed bugs in MatricesAreEqual and MatricesAreAboutEqual",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-27: version 1.2: added tests, renamed VectorsAreEqual to VectorsDoubleAreEqual and VectorsIntAreEqual"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-16: version 1.3: noexcept"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::Inverse(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;assert(m.size1() == m.size2() &amp;&amp; "Can only calculate the inverse of square matrices");<br/>
<br/>
&nbsp;&nbsp;switch(m.size1())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m.size1() == 1 &amp;&amp; m.size2() == 1 &amp;&amp; "Only for 1x1 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double determinant = CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(determinant != 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,0) != 0.0 &amp;&amp; "Cannot take the inverse of matrix [0]");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; n(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) =&nbsp;&nbsp;1.0 / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m.size1() == 2 &amp;&amp; m.size2() == 2 &amp;&amp; "Only for 2x2 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double determinant = CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(determinant != 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double a = m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double b = m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double c = m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double d = m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; n(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) =&nbsp;&nbsp;d / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) = -b / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) = -c / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) =&nbsp;&nbsp;a / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m.size1() == 3 &amp;&amp; m.size2() == 3 &amp;&amp; "Only for 3x3 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double determinant = CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(determinant != 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double a = m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double b = m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double c = m(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double d = m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double e = m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double f = m(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double g = m(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double h = m(2,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double k = m(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; n(3,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_a =&nbsp;&nbsp;((e*k)-(f*h)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_b = -((d*k)-(f*g)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_c =&nbsp;&nbsp;((d*h)-(e*g)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_d = -((b*k)-(c*h)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_e =&nbsp;&nbsp;((a*k)-(c*g)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_f = -((a*h)-(b*g)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_g =&nbsp;&nbsp;((b*f)-(c*e)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_h = -((a*f)-(c*d)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double new_k =&nbsp;&nbsp;((a*e)-(b*d)) / determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) = new_a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) = new_b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,0) = new_c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) = new_d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) = new_e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,1) = new_f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,2) = new_g;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,2) = new_h;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,2) = new_k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Use blockwise inversion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//ribi::Matrix::Chop returns a std::vector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m.size1() &gt; 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m.size2() &gt; 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt; v = Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a = v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a.size1() == a.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&nbsp;&nbsp;a_inv = Inverse(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b = v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; c = v[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; d = v[3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; term<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(c,a_inv)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(term.size1() == term.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; term_inv = Inverse(term);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; new_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= a_inv<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; new_b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; new_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;(ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; new_d = term_inv;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt; w = { new_a, new_b, new_c, new_d };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; result = Unchop(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
bool ribi::Matrix::IsAboutEqual(const double a, const double b) noexcept<br/>
{<br/>
&nbsp;&nbsp;const double epsilon = 0.000001; //Rounding error<br/>
&nbsp;&nbsp;return a - epsilon &lt; b &amp;&amp; a + epsilon &gt; b;<br/>
}<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::Power(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; m,<br/>
&nbsp;&nbsp;const int exponent)<br/>
{<br/>
&nbsp;&nbsp;assert(exponent &gt;= 0 &amp;&amp; "Can only take the power of matrices with a positive exponent");<br/>
&nbsp;&nbsp;assert(m.size1() == m.size2() &amp;&amp; "Can only take the power of square matrices");<br/>
&nbsp;&nbsp;const std::size_t sz = m.size1();<br/>
&nbsp;&nbsp;if (exponent == 0) return boost::numeric::ublas::identity_matrix&lt;double&gt;(sz);<br/>
&nbsp;&nbsp;if (exponent == 1) return m;<br/>
&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; n(m);<br/>
&nbsp;&nbsp;for (int i=1; i!=exponent; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n = ribi::Matrix::Prod(n,m);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return n;<br/>
}<br/>
<br/>
bool ribi::Matrix::MatricesAreAboutEqual(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (a.size1() != b.size1()) return false;<br/>
&nbsp;&nbsp;if (a.size2() != b.size2()) return false;<br/>
&nbsp;&nbsp;//return std::equal(a.begin1(),a.end1(),b.begin1(),&amp;ribi::Matrix::IsAboutEqual); //DON'T USE STD::EQUAL!<br/>
<br/>
&nbsp;&nbsp;assert(a.size1() == b.size1());<br/>
&nbsp;&nbsp;assert(a.size2() == b.size2());<br/>
<br/>
&nbsp;&nbsp;const std::size_t n_rows = a.size1();<br/>
&nbsp;&nbsp;const std::size_t n_cols = a.size2();<br/>
&nbsp;&nbsp;for (std::size_t row = 0; row != n_rows; ++row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t col = 0; col != n_cols; ++col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsAboutEqual(a(row,col),b(row,col))) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
bool ribi::Matrix::MatricesAreEqual(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b) noexcept<br/>
{<br/>
&nbsp;&nbsp;if ( a.size1() != b.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| a.size2() != b.size2()) return false;<br/>
&nbsp;&nbsp;//const bool is_equal = std::equal(a.begin1(),a.end1(),b.begin1()); //DON'T USE STD::EQUAL!<br/>
<br/>
&nbsp;&nbsp;assert(a.size1() == b.size1());<br/>
&nbsp;&nbsp;assert(a.size2() == b.size2());<br/>
<br/>
&nbsp;&nbsp;const std::size_t n_rows = a.size1();<br/>
&nbsp;&nbsp;const std::size_t n_cols = a.size2();<br/>
&nbsp;&nbsp;for (std::size_t row = 0; row != n_rows; ++row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t col = 0; col != n_cols; ++col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a(row,col) != b(row,col)) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
bool ribi::Matrix::MatrixIsAboutEqual(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b) noexcept<br/>
{<br/>
&nbsp;&nbsp;TRACE("Deprecated naming");<br/>
&nbsp;&nbsp;return MatricesAreAboutEqual(a,b);<br/>
}<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::MultiProd(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; c)<br/>
{<br/>
&nbsp;&nbsp;return Prod(Prod(a,b),c);<br/>
}<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;assert(a.size2() == b.size1() &amp;&amp; "A's width must be B's height");<br/>
&nbsp;&nbsp;return boost::numeric::ublas::prod(a,b);<br/>
}<br/>
<br/>
const boost::numeric::ublas::vector&lt;double&gt; ribi::Matrix::Prod(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;assert(a.size2() == b.size() &amp;&amp; "A's width must be B's height");<br/>
&nbsp;&nbsp;return boost::numeric::ublas::prod(a,b);<br/>
}<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::SimplifyMatrixOfMatrix(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;// [ [A B]&nbsp;&nbsp;[I J] ]<br/>
&nbsp;&nbsp;// [ [C D]&nbsp;&nbsp;[K L] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;// [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;// [ [E F]&nbsp;&nbsp;[M N] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;// [ [G H]&nbsp;&nbsp;[O P] ] -&gt; [ G H O P]<br/>
&nbsp;&nbsp;//assert(m.size1() &gt; 0);<br/>
&nbsp;&nbsp;//assert(m.size2() &gt; 0);<br/>
&nbsp;&nbsp;//<br/>
&nbsp;&nbsp;const int n_sub_rows = boost::numeric_cast&lt;int&gt;(m.size1());<br/>
&nbsp;&nbsp;const int n_sub_cols = boost::numeric_cast&lt;int&gt;(m.size2());<br/>
&nbsp;&nbsp;const int sub_rows&nbsp;&nbsp; = n_sub_rows != 0 &amp;&amp; n_sub_cols != 0 ? boost::numeric_cast&lt;int&gt;(m(0,0).size1()) : 0;<br/>
&nbsp;&nbsp;const int sub_cols&nbsp;&nbsp; = n_sub_cols != 0 &amp;&amp; n_sub_cols != 0 ? boost::numeric_cast&lt;int&gt;(m(0,0).size2()) : 0;<br/>
&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; v(n_sub_rows * sub_rows, n_sub_cols * sub_cols);<br/>
&nbsp;&nbsp;for (int sub_row=0; sub_row!=n_sub_rows; ++sub_row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int sub_col=0; sub_col!=n_sub_cols; ++sub_col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(sub_row &lt; boost::numeric_cast&lt;int&gt;(m.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(sub_col &lt; boost::numeric_cast&lt;int&gt;(m.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; sub = m(sub_row,sub_col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int offset_x = sub_col * sub_cols;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int offset_y = sub_row * sub_rows;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int row=0; row!=sub_rows; ++row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int col=0; col!=sub_cols; ++col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(offset_y + row &lt; boost::numeric_cast&lt;int&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(offset_x + col &lt; boost::numeric_cast&lt;int&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(row &lt; boost::numeric_cast&lt;int&gt;(sub.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(col &lt; boost::numeric_cast&lt;int&gt;(sub.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(offset_y + row,offset_x + col) = sub(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::SimplifyVectorOfMatrix(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;// [ [A B] ]<br/>
&nbsp;&nbsp;// [ [C D] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B ]<br/>
&nbsp;&nbsp;// [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ C D ]<br/>
&nbsp;&nbsp;// [ [E F] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F ]<br/>
&nbsp;&nbsp;// [ [G H] ] -&gt; [ G H ]<br/>
<br/>
&nbsp;&nbsp;assert(!m.empty());<br/>
&nbsp;&nbsp;const int n_subs&nbsp;&nbsp; = boost::numeric_cast&lt;int&gt;(m.size());<br/>
&nbsp;&nbsp;const int sub_rows = boost::numeric_cast&lt;int&gt;(m[0].size1());<br/>
&nbsp;&nbsp;const int sub_cols = boost::numeric_cast&lt;int&gt;(m[0].size2());<br/>
&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; v(n_subs * sub_rows, sub_cols);<br/>
&nbsp;&nbsp;for (int sub_index=0; sub_index!=n_subs; ++sub_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sub_index &lt; boost::numeric_cast&lt;int&gt;(m.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; sub = m[sub_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int offset_x = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int offset_y = sub_index * sub_rows;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int row=0; row!=sub_rows; ++row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int col=0; col!=sub_cols; ++col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(offset_y + row &lt; boost::numeric_cast&lt;int&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(offset_x + col &lt; boost::numeric_cast&lt;int&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(row &lt; boost::numeric_cast&lt;int&gt;(sub.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(col &lt; boost::numeric_cast&lt;int&gt;(sub.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(offset_y + row,offset_x + col) = sub(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
<br/>
const boost::numeric::ublas::vector&lt;double&gt; ribi::Matrix::SimplifyVectorOfVector(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;boost::numeric::ublas::vector&lt;double&gt; &gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;// [ [A] ]<br/>
&nbsp;&nbsp;// [ [B] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;// [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;// [ [C] ]&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;// [ [D] ] -&gt; [ D ]<br/>
&nbsp;&nbsp;//assert(!m.empty());<br/>
&nbsp;&nbsp;const int n_subs = boost::numeric_cast&lt;int&gt;(m.size());<br/>
&nbsp;&nbsp;const int subs_sz = n_subs &gt; 0 ? boost::numeric_cast&lt;int&gt;(m[0].size()) : 0;<br/>
&nbsp;&nbsp;boost::numeric::ublas::vector&lt;double&gt; v(n_subs * subs_sz);<br/>
&nbsp;&nbsp;for (int i=0; i!=n_subs; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &lt; boost::numeric_cast&lt;int&gt;(m.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; sub = m[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(sub.begin(),sub.end(),v.begin() + (i * subs_sz));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
<br/>
}<br/>
<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Matrix::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//<br/>
&nbsp;&nbsp;TRACE("Starting ribi::Matrix::Test()");<br/>
&nbsp;&nbsp;using boost::numeric::ublas::detail::equals;<br/>
&nbsp;&nbsp;using boost::numeric::ublas::matrix;<br/>
&nbsp;&nbsp;using boost::numeric::ublas::vector;<br/>
&nbsp;&nbsp;//Test CreateMatrix<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [1,4]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [2,5]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [3,6]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;int&gt; m = CreateMatrix(3,2, {1,2,3,4,5,6} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,0) == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,0) == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(2,0) == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,1) == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,1) == 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(2,1) == 6);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Simplify vector of vector<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [A] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [B] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [C] ]&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [D] ] -&gt; [ D ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::vector&lt;boost::numeric::ublas::vector&lt;double&gt; &gt; v(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] = CreateVector( { 1.0, 2.0 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] = CreateVector( { 3.0, 4.0 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= SimplifyVectorOfVector(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsAreAboutEqual(w, CreateVector( { 1.0, 2.0, 3.0, 4.0 } )));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///Simplify a structure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [A B] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [C D] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ C D ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [E F] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/// [ [G H] ] -&gt; [ G H ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt; v(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] = CreateMatrix(2,2, {1.0, 3.0, 2.0, 4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] = CreateMatrix(2,2, {5.0, 7.0, 6.0, 8.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= SimplifyVectorOfMatrix(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w.size1() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w.size2() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(MatricesAreAboutEqual(w, CreateMatrix(4,2, { 1.0, 3.0, 5.0, 7.0, 2.0, 4.0, 6.0, 8.0 } )));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Simplify a structure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [A B]&nbsp;&nbsp;[I J] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [C D]&nbsp;&nbsp;[K L] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [E F]&nbsp;&nbsp;[M N] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [G H]&nbsp;&nbsp;[O P] ] -&gt; [ G H O P]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [ 1&nbsp;&nbsp;2]&nbsp;&nbsp;[ 3&nbsp;&nbsp;4] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [ 5&nbsp;&nbsp;6]&nbsp;&nbsp;[ 7&nbsp;&nbsp;8] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [ 9 10]&nbsp;&nbsp;[11 12] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ [13 14]&nbsp;&nbsp;[15 16] ] -&gt; [ G H O P]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt; v(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(0,0) = CreateMatrix(2,2, { 1.0,&nbsp;&nbsp;5.0,&nbsp;&nbsp;2.0,&nbsp;&nbsp;6.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(1,0) = CreateMatrix(2,2, { 9.0, 13.0, 10.0, 14.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(0,1) = CreateMatrix(2,2, { 3.0,&nbsp;&nbsp;7.0,&nbsp;&nbsp;4.0,&nbsp;&nbsp;8.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(1,1) = CreateMatrix(2,2, {11.0, 15.0, 12.0, 16.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= SimplifyMatrixOfMatrix(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w.size1() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w.size2() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt; expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= CreateMatrix(4,4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 5.0,&nbsp;&nbsp;9.0, 13.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 6.0, 10.0, 14.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0, 7.0, 11.0, 15.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0, 8.0, 12.0, 16.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!MatricesAreAboutEqual(w,expected))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "w: " &lt;&lt; w &lt;&lt; '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "e: " &lt;&lt; expected &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(MatricesAreAboutEqual(w,expected));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Test Chop on 3x3<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1.0 ] | [ 2.0&nbsp;&nbsp; 3.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 1.0 2.0 3.0 ]&nbsp;&nbsp;&nbsp;&nbsp; --------+--------------<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 4.0 5.0 6.0 ]&nbsp;&nbsp;&nbsp;&nbsp; [ 4.0 ] | [ 5.0&nbsp;&nbsp; 6.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 7.0 8.0 9.0 ] -&gt;&nbsp;&nbsp;[ 7.0 ] | [ 8.0&nbsp;&nbsp; 9.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = CreateMatrix(3,3, {1.0,4.0,7.0,2.0,5.0,8.0,3.0,6.0,9.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,0) == 1.0); assert(m(0,1) == 2.0); assert(m(0,2) == 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,0) == 4.0); assert(m(1,1) == 5.0); assert(m(1,2) == 6.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(2,0) == 7.0); assert(m(2,1) == 8.0); assert(m(2,2) == 9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;matrix&lt;double&gt; &gt; n = Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size1() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size2() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[1].size1() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[1].size2() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[2].size1() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[2].size2() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[3].size1() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[3].size2() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size1() + n[2].size1() == m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[1].size1() + n[3].size1() == m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size2() + n[1].size2() == m.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[2].size2() + n[3].size2() == m.size2());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test Chop on 5x5<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = CreateMatrix(5,5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 6.0,11.0,16.0,21.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 7.0,12.0,17.0,22.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0, 8.0,13.0,18.0,23.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0, 9.0,14.0,19.0,24.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.0,10.0,15.0,20.0,25.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,0) ==&nbsp;&nbsp;1.0); assert(m(0,1) ==&nbsp;&nbsp;2.0); assert(m(0,2) ==&nbsp;&nbsp;3.0); assert(m(0,3) ==&nbsp;&nbsp;4.0); assert(m(0,4) ==&nbsp;&nbsp;5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,0) ==&nbsp;&nbsp;6.0); assert(m(1,1) ==&nbsp;&nbsp;7.0); assert(m(1,2) ==&nbsp;&nbsp;8.0); assert(m(1,3) ==&nbsp;&nbsp;9.0); assert(m(1,4) == 10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(2,0) == 11.0); assert(m(2,1) == 12.0); assert(m(2,2) == 13.0); assert(m(2,3) == 14.0); assert(m(2,4) == 15.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(3,0) == 16.0); assert(m(3,1) == 17.0); assert(m(3,2) == 18.0); assert(m(3,3) == 19.0); assert(m(3,4) == 20.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(4,0) == 21.0); assert(m(4,1) == 22.0); assert(m(4,2) == 23.0); assert(m(4,3) == 24.0); assert(m(4,4) == 25.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;matrix&lt;double&gt; &gt; n = Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size1() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size2() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[1].size1() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[1].size2() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[2].size1() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[2].size2() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[3].size1() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[3].size2() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size1() + n[2].size1() == m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[1].size1() + n[3].size1() == m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0].size2() + n[1].size2() == m.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[2].size2() + n[3].size2() == m.size2());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test VectorsAreAboutEqual<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const vector&lt;double&gt; m = CreateVector( {1.0,3.0,2.0,4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsAreAboutEqual(m,m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt; n(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n *= 3.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n /= 6.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n *= 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsAreAboutEqual(m,n));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test Power<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = CreateMatrix(sz,sz, {1.0,3.0,2.0,4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; expected_0 = boost::numeric::ublas::identity_matrix&lt;double&gt;(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; expected_1 = m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; expected_2 = CreateMatrix(sz,sz, {7.0,15.0,10.0,22.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(m,m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(Power(m,0),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(Power(m,1),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::MatricesAreAboutEqual(Power(m,2),expected_2));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test Unchop<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check 0x0 to and including 9x9 matrices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t n_rows = 0; n_rows!=10; ++n_rows)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t n_cols = 0; n_cols!=10; ++n_cols)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Epsilon is more or less the smallest round-off error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = std::numeric_limits&lt;double&gt;::epsilon();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create a random matrix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = ribi::Matrix::CreateRandomMatrix(n_rows,n_cols);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Assume it is found identical to itself<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(equals(m,m,epsilon,epsilon));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Chop and unchop the input matrix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; n = ribi::Matrix::Unchop(Chop(m));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Assume input matrix and result are identical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(equals(m,n,epsilon,epsilon));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test Inverse on 2x2 matrix<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 1.0 2.0 ] -1&nbsp;&nbsp;&nbsp;&nbsp;[ -2.0&nbsp;&nbsp; 1.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 3.0 4.0 ]&nbsp;&nbsp;&nbsp;&nbsp; = [&nbsp;&nbsp;1.5&nbsp;&nbsp;-0.5 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = ribi::Matrix::CreateMatrix(2,2, {1.0,3.0,2.0,4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,0) == 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,0) == 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,1) == 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,1) == 4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; n = ribi::Matrix::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.0000001; //Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(0,0) &gt; -2.0 - epsilon &amp;&amp; n(0,0) &lt; -2.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(1,0) &gt;&nbsp;&nbsp;1.5 - epsilon &amp;&amp; n(1,0) &lt;&nbsp;&nbsp;1.5 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(0,1) &gt;&nbsp;&nbsp;1.0 - epsilon &amp;&amp; n(0,1) &lt;&nbsp;&nbsp;1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(1,1) &gt; -0.5 - epsilon &amp;&amp; n(1,1) &lt; -0.5 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::Prod(m,n)(0,0) &gt; 1.0 - epsilon &amp;&amp; ribi::Matrix::Prod(m,n)(0,0) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::Prod(m,n)(1,0) &gt; 0.0 - epsilon &amp;&amp; ribi::Matrix::Prod(m,n)(1,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::Prod(m,n)(0,1) &gt; 0.0 - epsilon &amp;&amp; ribi::Matrix::Prod(m,n)(0,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Matrix::Prod(m,n)(1,1) &gt; 1.0 - epsilon &amp;&amp; ribi::Matrix::Prod(m,n)(1,1) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 1.0 2.0 3.0] -1&nbsp;&nbsp;&nbsp;&nbsp;[ -24.0&nbsp;&nbsp; 18.0&nbsp;&nbsp; 5.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 0.0 1.0 4.0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;20.0&nbsp;&nbsp;-15.0&nbsp;&nbsp;-4.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 5.0 6.0 0.0]&nbsp;&nbsp;&nbsp;&nbsp; = [ - 5.0&nbsp;&nbsp;&nbsp;&nbsp;4.0&nbsp;&nbsp; 1.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = ribi::Matrix::CreateMatrix(3,3, {1.0,0.0,5.0,2.0,1.0,6.0,3.0,4.0,0.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,0) == 1.0); assert(m(0,1) == 2.0); assert(m(0,2) == 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,0) == 0.0); assert(m(1,1) == 1.0); assert(m(1,2) == 4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(2,0) == 5.0); assert(m(2,1) == 6.0); assert(m(2,2) == 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; n = ribi::Matrix::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.0001; //Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(0,0) &gt; -24.0 - epsilon &amp;&amp; n(0,0) &lt; -24.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(1,0) &gt;&nbsp;&nbsp;20.0 - epsilon &amp;&amp; n(1,0) &lt;&nbsp;&nbsp;20.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(2,0) &gt; - 5.0 - epsilon &amp;&amp; n(2,0) &lt; - 5.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(0,1) &gt;&nbsp;&nbsp;18.0 - epsilon &amp;&amp; n(0,1) &lt;&nbsp;&nbsp;18.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(1,1) &gt; -15.0 - epsilon &amp;&amp; n(1,1) &lt; -15.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(2,1) &gt;&nbsp;&nbsp; 4.0 - epsilon &amp;&amp; n(2,1) &lt;&nbsp;&nbsp; 4.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(0,2) &gt;&nbsp;&nbsp; 5.0 - epsilon &amp;&amp; n(0,2) &lt;&nbsp;&nbsp; 5.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(1,2) &gt;&nbsp;&nbsp;-4.0 - epsilon &amp;&amp; n(1,2) &lt; - 4.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n(2,2) &gt;&nbsp;&nbsp; 1.0 - epsilon &amp;&amp; n(2,2) &lt;&nbsp;&nbsp; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; i = ribi::Matrix::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,0) &gt; 1.0 - epsilon &amp;&amp; i(0,0) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,0) &gt; 0.0 - epsilon &amp;&amp; i(1,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,0) &gt; 0.0 - epsilon &amp;&amp; i(2,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,1) &gt; 0.0 - epsilon &amp;&amp; i(0,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,1) &gt; 1.0 - epsilon &amp;&amp; i(1,1) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,1) &gt; 0.0 - epsilon &amp;&amp; i(2,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,2) &gt; 0.0 - epsilon &amp;&amp; i(0,2) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,2) &gt; 0.0 - epsilon &amp;&amp; i(1,2) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,2) &gt; 1.0 - epsilon &amp;&amp; i(2,2) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test Inverse on 3x3 matrix<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 1.0 2.0 3.0] -1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 4.0 4.0 6.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// [ 7.0 8.0 9.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// Note: cannot make the center value equal to 5.0, as this makes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// the matrix un-invertible (the determinant becomes equal to zero)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = ribi::Matrix::CreateMatrix(3,3, {1.0,4.0,7.0,2.0,4.0,8.0,3.0,6.0,9.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(0,0) == 1.0); assert(m(0,1) == 2.0); assert(m(0,2) == 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(1,0) == 4.0); assert(m(1,1) == 4.0); assert(m(1,2) == 6.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m(2,0) == 7.0); assert(m(2,1) == 8.0); assert(m(2,2) == 9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; n = ribi::Matrix::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.00001; //Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; i = ribi::Matrix::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,0) &gt; 1.0 - epsilon &amp;&amp; i(0,0) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,0) &gt; 0.0 - epsilon &amp;&amp; i(1,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,0) &gt; 0.0 - epsilon &amp;&amp; i(2,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,1) &gt; 0.0 - epsilon &amp;&amp; i(0,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,1) &gt; 1.0 - epsilon &amp;&amp; i(1,1) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,1) &gt; 0.0 - epsilon &amp;&amp; i(2,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,2) &gt; 0.0 - epsilon &amp;&amp; i(0,2) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,2) &gt; 0.0 - epsilon &amp;&amp; i(1,2) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,2) &gt; 1.0 - epsilon &amp;&amp; i(2,2) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test Inverse on 4x4 matrix<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = ribi::Matrix::CreateRandomMatrix(4,4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; n = ribi::Matrix::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.00001; //Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; i = ribi::Matrix::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test if i is identity matrix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,0) &gt; 1.0 - epsilon &amp;&amp; i(0,0) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,0) &gt; 0.0 - epsilon &amp;&amp; i(1,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,0) &gt; 0.0 - epsilon &amp;&amp; i(2,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(3,0) &gt; 0.0 - epsilon &amp;&amp; i(3,0) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,1) &gt; 0.0 - epsilon &amp;&amp; i(0,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,1) &gt; 1.0 - epsilon &amp;&amp; i(1,1) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,1) &gt; 0.0 - epsilon &amp;&amp; i(2,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(3,1) &gt; 0.0 - epsilon &amp;&amp; i(3,1) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,2) &gt; 0.0 - epsilon &amp;&amp; i(0,2) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,2) &gt; 0.0 - epsilon &amp;&amp; i(1,2) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,2) &gt; 1.0 - epsilon &amp;&amp; i(2,2) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(3,2) &gt; 0.0 - epsilon &amp;&amp; i(3,2) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(0,3) &gt; 0.0 - epsilon &amp;&amp; i(0,3) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(1,3) &gt; 0.0 - epsilon &amp;&amp; i(1,3) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(2,3) &gt; 0.0 - epsilon &amp;&amp; i(2,3) &lt; 0.0 + epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i(3,3) &gt; 1.0 - epsilon &amp;&amp; i(3,3) &lt; 1.0 + epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//TRACE("Test Inverse on bigger matrices");<br/>
&nbsp;&nbsp;for (std::size_t sz = 5; sz!=20; ++sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; m = ribi::Matrix::CreateRandomMatrix(sz,sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; n = ribi::Matrix::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double epsilon = 0.00001; //Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const matrix&lt;double&gt; i = ribi::Matrix::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test if i is identity matrix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t y = 0; y!=sz; ++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t x = 0; x!=sz; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (x == y &amp;&amp; i(y,x) &gt; 1.0 - epsilon &amp;&amp; i(y,x) &lt; 1.0 + epsilon)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (x != y &amp;&amp; i(y,x) &gt; 0.0 - epsilon &amp;&amp; i(y,x) &lt; 0.0 + epsilon)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//TRACE("Test MatricesAreEqual");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a = boost::numeric::ublas::zero_matrix&lt;double&gt;(2,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto b = boost::numeric::ublas::zero_matrix&lt;double&gt;(3,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto c = boost::numeric::ublas::zero_matrix&lt;double&gt;(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto d = boost::numeric::ublas::zero_matrix&lt;double&gt;(3,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( MatricesAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( MatricesAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( MatricesAreEqual(c,c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( MatricesAreEqual(d,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreEqual(a,c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreEqual(a,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreEqual(b,c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreEqual(b,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreEqual(c,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a = CreateMatrix(2,2, { 1.0,0.0,0.0,1.0 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auto b = a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(MatricesAreAboutEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1,1) = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!MatricesAreAboutEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1,1) = 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(MatricesAreAboutEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//TRACE("Test VectorsAreEqual (int)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a = boost::numeric::ublas::vector&lt;int&gt;(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto b = boost::numeric::ublas::vector&lt;int&gt;(3,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a = CreateVector( { 1,2,3 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auto b = a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) = 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//TRACE("Test VectorsAreEqual (double)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a = boost::numeric::ublas::zero_vector&lt;double&gt;(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto b = boost::numeric::ublas::zero_vector&lt;double&gt;(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( VectorsDoubleAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( VectorsDoubleAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsDoubleAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsDoubleAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto a = CreateVector( { 1.1,2.2,3.3 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auto b = a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsDoubleAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsAreAboutEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsDoubleAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!VectorsAreAboutEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) = 2.2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsDoubleAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(VectorsAreAboutEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Finished ribi::Matrix::Test()");<br/>
}<br/>
#endif<br/>
<br/>
const boost::numeric::ublas::matrix&lt;double&gt; ribi::Matrix::Unchop(<br/>
&nbsp;&nbsp;const std::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;//Chop returns a std::vector of sub-matrices<br/>
&nbsp;&nbsp;//[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;//[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;using boost::numeric::ublas::range;<br/>
&nbsp;&nbsp;using boost::numeric::ublas::matrix;<br/>
&nbsp;&nbsp;using boost::numeric::ublas::matrix_range;<br/>
&nbsp;&nbsp;assert(v.size() == 4);<br/>
&nbsp;&nbsp;assert(v[0].size1() == v[1].size1());<br/>
&nbsp;&nbsp;assert(v[2].size1() == v[3].size1());<br/>
&nbsp;&nbsp;assert(v[0].size2() == v[2].size2());<br/>
&nbsp;&nbsp;assert(v[1].size2() == v[3].size2());<br/>
&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt; m(v[0].size1() + v[2].size1(),v[0].size2() + v[1].size2());<br/>
&nbsp;&nbsp;for (int quadrant=0; quadrant!=4; ++quadrant)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; w = v[quadrant];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_rows = v[quadrant].size1();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_cols = v[quadrant].size2();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int offset_x = quadrant % 2 ? v[0].size2() : 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int offset_y = quadrant / 2 ? v[0].size1() : 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t row=0; row!=n_rows; ++row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t col=0; col!=n_cols; ++col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(offset_y + row, offset_x + col) = w(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(v[0].size1() + v[2].size1() == m.size1());<br/>
&nbsp;&nbsp;assert(v[1].size1() + v[3].size1() == m.size1());<br/>
&nbsp;&nbsp;assert(v[0].size2() + v[1].size2() == m.size2());<br/>
&nbsp;&nbsp;assert(v[2].size2() + v[3].size2() == m.size2());<br/>
<br/>
&nbsp;&nbsp;return m;<br/>
}<br/>
<br/>
bool ribi::Matrix::VectorIsAboutEqual(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b) noexcept<br/>
{<br/>
&nbsp;&nbsp;TRACE("Deprecated naming");<br/>
&nbsp;&nbsp;return VectorsAreAboutEqual(a,b);<br/>
}<br/>
<br/>
bool ribi::Matrix::VectorsAreAboutEqual(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (a.size() != b.size()) return false;<br/>
&nbsp;&nbsp;return std::equal(a.begin(),a.end(),b.begin(),&amp;ribi::Matrix::IsAboutEqual);<br/>
}<br/>
<br/>
bool ribi::Matrix::VectorsDoubleAreEqual(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (a.size() != b.size()) return false;<br/>
&nbsp;&nbsp;return std::equal(a.begin(),a.end(),b.begin());<br/>
}<br/>
<br/>
bool ribi::Matrix::VectorsIntAreEqual(<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;int&gt;&amp; a,<br/>
&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;int&gt;&amp; b) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (a.size() != b.size()) return false;<br/>
&nbsp;&nbsp;return std::equal(a.begin(),a.end(),b.begin());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMatrix/matrix.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMatrix/matrix.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Matrix, functions working on vectors and matrices<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppMatrix.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef MATRIX_H<br/>
#define MATRIX_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;<br/>
#include &lt;boost/numeric/ublas/vector.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
///Helper class for matrix operations<br/>
struct Matrix<br/>
{<br/>
&nbsp;&nbsp;///Calculate the determinant<br/>
&nbsp;&nbsp;//Adapted from the code Maik Beckmann posted at<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;http://boost.2283326.n4.nabble.com/How-to-compute-determinant-td2710896.html<br/>
&nbsp;&nbsp;static double CalcDeterminant(boost::numeric::ublas::matrix&lt;double&gt; m);<br/>
<br/>
&nbsp;&nbsp;///Chop returns a std::vector of sub-matrices<br/>
&nbsp;&nbsp;///[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;///[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt; Chop(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;///Create a n_rows x n_cols sized matrix from a std::vector,<br/>
&nbsp;&nbsp;///used for easy initialization<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; CreateMatrix(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_rows,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_cols,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;double&gt;&amp; v) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Create a random-filled matrix<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; CreateRandomMatrix(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t n_rows, const std::size_t n_cols) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Create a uBLAS vector from a std::vector,<br/>
&nbsp;&nbsp;///used for easy initialization<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::vector&lt;double&gt; CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;double&gt;&amp; v) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Create a uBLAS vector from a std::vector,<br/>
&nbsp;&nbsp;///used for easy initialization<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::vector&lt;int&gt; CreateVectorInt(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; v) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Calculate the inverse of a matrix<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; Inverse(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;///Check if two doubles are about equal<br/>
&nbsp;&nbsp;static bool IsAboutEqual(const double a, const double b) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Check if two matrices are equal<br/>
&nbsp;&nbsp;///This is only suitable to test for exact copies.<br/>
&nbsp;&nbsp;///Use MatricesAreAboutEqual to allow for a<br/>
&nbsp;&nbsp;///small difference between the matrix elements.<br/>
&nbsp;&nbsp;static bool MatricesAreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Check if two matrices are about equal<br/>
&nbsp;&nbsp;static bool MatricesAreAboutEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Check if two matrices are about equal<br/>
&nbsp;&nbsp;static bool MatrixIsAboutEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Calculates the matrix product a * b * c<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; MultiProd(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;///Take the power of a square matrix<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; Power(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; m,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int exponent);<br/>
<br/>
&nbsp;&nbsp;///Calculates the matrix product a * b<br/>
&nbsp;&nbsp;///with checking for correct dimensions<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;///Calculates the matrix product a * b<br/>
&nbsp;&nbsp;///with checking for correct dimensions<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::vector&lt;double&gt; Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;///Simplify a structure<br/>
&nbsp;&nbsp;/// [ [A] ]<br/>
&nbsp;&nbsp;/// [ [B] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;/// [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;/// [ [C] ]&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;/// [ [D] ] -&gt; [ D ]<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::vector&lt;double&gt; SimplifyVectorOfVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::vector&lt;double&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;///Simplify a structure<br/>
&nbsp;&nbsp;/// [ [A B] ]<br/>
&nbsp;&nbsp;/// [ [C D] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B ]<br/>
&nbsp;&nbsp;/// [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ C D ]<br/>
&nbsp;&nbsp;/// [ [E F] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F ]<br/>
&nbsp;&nbsp;/// [ [G H] ] -&gt; [ G H ]<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; SimplifyVectorOfMatrix(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;///Simplify a structure<br/>
&nbsp;&nbsp;/// [ [A B]&nbsp;&nbsp;[I J] ]<br/>
&nbsp;&nbsp;/// [ [C D]&nbsp;&nbsp;[K L] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;/// [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;/// [ [E F]&nbsp;&nbsp;[M N] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;/// [ [G H]&nbsp;&nbsp;[O P] ] -&gt; [ G H O P]<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; SimplifyMatrixOfMatrix(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::matrix&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::numeric::ublas::matrix&lt;double&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test these functions<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Unchop merges the 4 std::vector of sub-matrices produced by Chop<br/>
&nbsp;&nbsp;static const boost::numeric::ublas::matrix&lt;double&gt; Unchop(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::numeric::ublas::matrix&lt;double&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///Check if two vectors are about equal<br/>
&nbsp;&nbsp;static bool VectorsAreAboutEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Check if two vectors are about equal<br/>
&nbsp;&nbsp;static bool VectorIsAboutEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Check if two vector are equal<br/>
&nbsp;&nbsp;///This is only suitable to test for exact copies.<br/>
&nbsp;&nbsp;///Use VectorsAreAboutEqual to allow for a<br/>
&nbsp;&nbsp;///small difference between the vector elements.<br/>
&nbsp;&nbsp;static bool VectorsDoubleAreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;double&gt;&amp; b) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Check if two vector are equal<br/>
&nbsp;&nbsp;static bool VectorsIntAreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;int&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::numeric::ublas::vector&lt;int&gt;&amp; b) noexcept;<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // MATRIX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
