<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Matrix</title>
  <meta name="description" content="C++ Matrix"/>
  <meta name="keywords" content="C++ Matrix matrices 2d std::vector vector 2d-vector"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMatrix.htm">Matrix</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppMatrix.htm">matrix</a> is a two-dimensional <a href="CppContainer.htm">container</a> (that is a <a href="CppContainer.htm">container</a> in which two values are needed to retrieve an element). For one-dimensional containers, <a href="CppContainer.htm">go to the container page</a>.</p>
<p>&nbsp;</p>
<p>There exists no std::matrix (yet).</p>
<p>&nbsp;</p>
<p>Possibilities are:</p>
<ol>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;</li>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppMulti_array.htm">boost::multi_array</a></li>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a></li>
  <li><img src="PicSpacer.png" alt=" "/>blitz::Array</li>
  <li><img src="PicSpacer.png" alt=" "/><a href="http://www.techsoftpl.com/matrix">Techsoft</a>'s matrix</li>
  <li><img src="PicSpacer.png" alt=" "/>Flood::Matrix</li>
</ol>
<p>&nbsp;</p>
<p>These possibilities are described below in more detail.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicStl.png" alt="STL"/> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;</h2>
<p>&nbsp;</p>
<p>A <a href="CppVector.htm">std::vector</a> can contain a collection of <a href="CppVector.htm">std::vector</a>s. If all <a href="CppVector.htm">std::vector</a>s in this collection are of the same size, one has a matrix.</p>
<p>&nbsp;</p>
<p>When using <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; for a two-dimensional matrix, the choice between x-y-ordering or y-x-ordering must be made. The run-time speed difference does not reside in individual element read/write, but when obtaining a row or collumn: in a y-x-ordered <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; an individual row can be obtained, in an x-y-ordered <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; an individual collumn can be obtained.</p>
<p>&nbsp;</p>
<p>Below is an example of a y-x-ordered <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the y-x-ordered 2D-vector<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v(n_rows, <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n_cols,0));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v[y].size()));<br/>
&nbsp;&nbsp;v[y][x] <a href="CppOperatorAssign.htm">=</a> 10; <a href="CppComment.htm">//</a>y-x-ordered<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppInt.htm">int</a>&gt; &gt; <a href="CppCodeSnippets.htm">code snippets</a></h3>
<p>&nbsp;</p>
<p>Note that some of these <a href="CppCodeSnippets.htm">code snippets</a> also work on other <a href="CppContainer.htm">containers</a>.</p>
<p>&nbsp;</p>
<ol>
  <li><a href="CppConvertMatrix.htm">Convert Matrix&lt;X&gt; to Matrix&lt;Y&gt;, ConvertMatrix</a></li>
  <li><a href="CppConvertMatrix.htm">Convert std::vector&lt;std::vector&lt;X&gt; &gt; to std::vector&lt;std::vector&lt;Y&gt; &gt;, ConvertMatrix</a></li>
  <li><a href="CppConvertMatrix.htm">Convert two 2D std::vector&lt;X&gt; to 2D std::vector&lt;Y&gt;, ConvertMatrix</a></li>
  <li><a href="CppConvertMatrix.htm">ConvertMatrix, convert Matrix&lt;X&gt; to Matrix&lt;Y&gt;</a></li>
  <li><a href="CppConvertMatrix.htm">ConvertMatrix, convert std::vector&lt;std::vector&lt;X&gt; &gt; to std::vector&lt;std::vector&lt;Y&gt; &gt;</a></li>
  <li><a href="CppConvertMatrix.htm">ConvertMatrix, convert two 2D std::vector&lt;X&gt; to 2D std::vector&lt;Y&gt;</a></li>
  <li><a href="CppMaxElement.htm">Get the maximal element of a 2D container, MaxElement</a></li>
  <li><a href="CppMinElement.htm">Get the minimum element of a 2D container, MinElement</a></li>
  <li><a href="CppGetSizes.htm">Get the sizes of the std::vectors in a 2D std::vector, GetSizes</a></li>
  <li><a href="CppGetSumMatrix.htm">Get the sum of a 2D std::vector, GetSum</a></li>
  <li><a href="CppGetSizes.htm">GetSizes, get the sizes of the std::vectors in a 2D std::vector</a></li>
  <li><a href="CppGetSumMatrix.htm">GetSum, get the sum of a 2D std::vector</a></li>
  <li><a href="CppMaxElement.htm">MaxElement, get the maximal element of a 2D container</a></li>
  <li><a href="CppMinElement.htm">MinElement, get the minimum element of a 2D container</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppMulti_array.htm">boost::multi_array</a></h2>
<p>&nbsp;</p>
<p>The <a href="CppMulti_array.htm">boost::multi_array</a> (part of the <a href="CppBoost.htm">Boost</a> library) is not only support a two-dimensional matrix, but to many more dimensions.</p>
<p>&nbsp;</p>
<p>When using <a href="CppBuilder.htm">C++ Builder</a> 6.0, this does not <a href="CppCompile.htm">compile</a> (it results in the <a href="CppCompileError.htm">compile error</a> <a href="CppCompileErrorBorlandHppOnlyMemberFunctionsMayBeConstOrVolatile.htm">borland.hpp: Only member functions may be 'const' or 'volatile'</a>).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a></h2>
<p>&nbsp;</p>
<p>The <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a> (part of the 
<a href="CppUblas.htm">Boost.uBLAS</a> <a href="CppLibrary.htm">library</a>) support a two-dimensional matrix.</p>
<p>&nbsp;</p>
<p>See <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><img src="PicGreen.png" alt="OKAY"/><img src="PicQtCreator.png" alt="Qt Creator"/> In <a href="CppQtCreator.htm">Qt Creator</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a> works fine</li>
  <li><img src="PicRed.png" alt="FAIL"/><img src="PicCppBuilder.png" alt="C++ Builder"/> In <a href="CppBuilder.htm">C++ Builder</a> 6.0, this does not <a href="CppCompile.htm">compile</a> (it results in the <a href="CppCompileError.htm">compile error</a> <a href="CppCompileErrorYourCompilerAndOrConfigurationIsUnsupportedByThisVerionsOfUblas.htm">Your compiler and/or configuration is unsupported by this verions of uBLAS</a>)</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>blitz::Array</h2>
<p>&nbsp;</p>
<p>The blitz::Array (part of the <a href="CppBlitzpp.htm">Blitz++</a> <a href="CppLibrary.htm">library</a>) is not only support a two-dimensional matrix, but to many more dimensions.</p>
<p>&nbsp;</p>
<p>When using <a href="CppBuilder.htm">C++ Builder</a> 6.0, this does not <a href="CppCompile.htm">compile</a> (it results in the <a href="CppCompileError.htm">compile error</a> <a href="CppCompileErrorBzconfigHunknownCompiler.htm">bzconfig.h: Unknown compiler</a>).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="http://www.techsoftpl.com/matrix">Techsoft</a>'s matrix</h2>
<p>&nbsp;</p>
<p><a href="http://www.techsoftpl.com/matrix">Techsoft</a>'s matrix supports a x-y-ordered two-dimensional matrix.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;techsoft/matrix.h&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;math::matrix&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(n_rows,n_cols);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v(x,y)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;v(x,y) <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v(x,y)<a href="CppOperatorEqual.htm">==</a>10);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Flood::Matrix</h2>
<p>&nbsp;</p>
<p>The Flood::Matrix (from the <a href="CppFlood.htm">Flood</a> library) supports a x-y-ordered two-dimensional matrix.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;flood/utilities/matrix.h&gt;<br/>
&nbsp;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;Flood::Matrix&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(n_rows,n_cols);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; v.getNumberOfRows());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; v.getNumberOfColumns());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[x][y]<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;v[x][y] <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[x][y]<a href="CppOperatorEqual.htm">==</a>10);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://en.wikipedia.org/wiki/Matrix_%28mathematics%29">Wikipedia page about matrices</a></li>
  <li><a href="http://www.boost.org/doc/libs/1_42_0/libs/multi_array/doc/index.html">Boost page about boost::multi_array</a></li>
  <li><a href="http://www.oonumerics.org/blitz">Blitz++ homepage</a></li>
  <li><a href="http://www.techsoftpl.com/matrix">Techsoft homepage</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://en.wikipedia.org/wiki/Matrix_%28mathematics%29">Wikipedia page about matrices</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
