<title>Create Form Dynamically</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ Code Snippet Create Form Dynamically</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Code Snippet Richel Bilderbeek Create Form Dynamically TForm VCL Builder CLX Turbo</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
 </o:DocumentProperties>
</xml><![endif]-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Create Forms Dynamically</title>
  <meta name="description" content="C++ Create Forms Dynamically"/>
  <meta name="keywords" content="C++ Builder Create Forms Dynamically"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCreateFormsDynamically.htm">Create Forms Dynamically</a></h1>
<p>&nbsp;</p>
<p>The C++ Builder (and Turbo C++) TForm class ('Form' from now on) can be created either statically or dynamically.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppCreateFormsDynamically.txt">View the code of 'Create Forms Dynamically' in plain text</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>When to consider creating Forms dynamically</h2>
<p>&nbsp;</p>
<p>Consider creating Forms dynamically when:</p>
<p>&nbsp;</p>
<ul>
  <li>you want to create multiple instances of the same Form</li>
  <li>you've added additional constructor parameters</li>
  <li>you want to have a hierarchy in your Forms</li>
  <li>you want to create Forms one by one</li>
  <li>you want to create Forms in idle time</li>
  <li>you want Forms to be created by a seperate thread</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Do's and don'ts when creating Forms dynamically</h2>
<p>&nbsp;</p>
<p>When you want to dynamically create a Form</p>
<p>&nbsp;</p>
<ul>
  <li>do make it an 'Available Form' ('Project | Options | Forms'), instead of an automatically created Form</li>
  <li>do make a Form refer to itself as 'this', instead of using, for example 'Form1'</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>How to create a Form dynamically</h2>
<p>&nbsp;</p>
<p>A Form can be created dynamically as follows:</p>
<p>&nbsp;</p>
 

<p>//Put this line among the other
#includes</p>

<p>#include &lt;memory&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>//Your method</p>

<p><b> void __fastcall </b>  TFormMain::YourMethod()</p>

<p>{</p>

<p>
 std::auto_ptr&lt;TFormDynamic&gt; f(<b>new</b> TFormDynamic(<b>this</b>));</p>

<p>
 f-&gt;ShowModal();</p>

<p>}</p>

</div>

<p>&nbsp;</p>

<p>Sure you can use a plain <a href="CppPointer.htm">pointer</a>, but then don't forget to <a href="CppDelete.htm">delete</a> it. 
And if you don't want to forget to <a href="CppDelete.htm">delete</a> this <a href="CppPointer.htm">pointer</a> (among others), 
use a <a href="CppAuto_ptr.htm">std::auto_ptr</a>.</p>
<p>&nbsp;</p>
<p>Instead of passing '<a href="CppThis.htm">this</a>', you might sometimes consider passing '0' as an argument to the <a hred="CppConstructor.htm">constructor</a> of TFormDynamic.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Communicate with the creator of a Form</h2>
<p>&nbsp;</p>
<p>In the code snippet above, the Form called TFormDynamic is constructed using a pointer to the TFormMain Form. This enables the newly created TFormDynamic to
be potentially able to communicate with the TFormMain.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Communicate with the creator of a Form in the constructor only</h3>
<p>&nbsp;</p>
<p>The constructor of a Form takes as an argument the TComponent that has created it. Therefore, you can easily use it locally:</p>
<p>&nbsp;</p>
 

<p>//Put this line among the other
#includes</p>

<p>#include &lt;cassert&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>__<b>fastcall</b>
TFormDynamic::TFormDynamic(TComponent* Owner)</p>

<p>       : TForm(Owner)</p>

<p>{</p>

<p>
 TFormMain * <b>const</b> formMain = <b>dynamic_cast</b>&lt;TFormMain&gt;(Owner);</p>

<p>
 assert(formMain!=0); //Assume cast succeeded</p>

<p>&nbsp;</p>

<p>
 //Use formMain</p>

<p>}</p>

</div>

<p>&nbsp;</p>

<h3><a name="_Toc186867873"> Communicate with the creator of a
Form using a member variable</a></h3>

<p>&nbsp;</p>

<p>You
can also make the TFormMain pointer a member variable of TFormDynamic:</p>

<p>&nbsp;</p>

 

<p>//The file UnitFormDynamic.h</p>

<p>&nbsp;</p>

<p>//A forward declaration</p>

<p>//Put it after the #includes and
before the next line</p>

<p><b> class </b>  TFormMain;</p>

<p>&nbsp;</p>

<p><b> class </b>  TFormDynamic : <b>public</b> TForm</p>

<p>{</p>

<p>
 __<b>published</b>:<span style='mso-tab-count:1'>  // IDE-managed
Components</p>

<p> 
 //Stuff</p>

<p>
 <b>private</b>:<span style='mso-tab-count:1'>     // User
declarations</p>

<p> 
 TFormMain * <b>const</b> mFormMain;</p>

<p>
 <b>public</b>:<span style='mso-tab-count:2'>      // User
declarations</p>

<p>       __<b>fastcall</b> TFormDynamic(TComponent* Owner);</p>

<p>};</p>

</div>

<p>&nbsp;</p>

 

<p>//The file UnitFormDynamic.cpp</p>

<p>&nbsp;</p>

<p>//Put this line among the other
#includes</p>

<p>#include &lt;cassert&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>__<b>fastcall</b>
TFormDynamic::TFormDynamic(TComponent* Owner)</p>

<p>
 : TForm(Owner),</p>

<p> 
 mFormMain(<b>dynamic_cast</b>&lt;TFormMain&gt;(Owner)</p>

<p>{</p>

<p>
 assert(mFormMain!=0); //Assume cast succeeded</p>

<p>&nbsp;</p>

<p>
 //Use mFormMain</p>

<p>}</p>

</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
