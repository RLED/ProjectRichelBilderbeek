<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Newick</title>
  <meta name="description" content="C++ Newick"/>
  <meta name="keywords" content="C++ Newick "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppNewick.htm">Newick</a></h1>
<p>&nbsp;</p>
<h2>./CppNewick/CppNewick.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppNewick/CppNewick.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppNewick<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppNewick/newick.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppNewick/newickcpp98.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppNewick/newick.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppNewick/newickcpp98.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppNewick/newickstorage.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppNewick/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppNewick/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppNewick/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppNewick/newick.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppNewick/newick.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Newick, Newick functions<br/>
Copyright (C) 2010-2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "newick.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;deque&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;functional&gt;<br/>
#include &lt;map&gt;<br/>
#include &lt;numeric&gt;<br/>
#include &lt;stdexcept&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;sstream&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include "BigIntegerLibrary.hh"<br/>
<br/>
#include "newickcpp98.h"<br/>
#include "trace.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
//From http://www.richelbilderbeek.nl/CppAccumulate_if.htm<br/>
template<br/>
&nbsp;&nbsp;&lt;<br/>
&nbsp;&nbsp;typename InputIterator,<br/>
&nbsp;&nbsp;typename ElementType,<br/>
&nbsp;&nbsp;typename Predicate<br/>
&nbsp;&nbsp;&gt;<br/>
const ElementType Accumulate_if(<br/>
&nbsp;&nbsp;InputIterator first,<br/>
&nbsp;&nbsp;const InputIterator last,<br/>
&nbsp;&nbsp;ElementType init,<br/>
&nbsp;&nbsp;const Predicate predicate)<br/>
{<br/>
&nbsp;&nbsp;for (; first != last; ++first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (predicate(*first)) init += *first;<br/>
&nbsp;&nbsp;return init;<br/>
}<br/>
<br/>
///Copy_if was dropped from the standard library by accident.<br/>
///From http://www.richelbilderbeek.nl/CppCopy_if.htm<br/>
template&lt;typename In, typename Out, typename Pred&gt;<br/>
Out Copy_if(In first, In last, Out res, Pred Pr)<br/>
{<br/>
&nbsp;&nbsp;while (first != last)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (Pr(*first))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*res++ = *first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++first;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return res;<br/>
}<br/>
<br/>
//From http://www.richelbilderbeek.nl/CppFunctorIncrease.htm<br/>
struct Increase //: public std::unary_function&lt;void,int&gt;<br/>
{<br/>
&nbsp;&nbsp;explicit Increase(const int&amp; initValue = 0) noexcept : mValue(initValue) {}<br/>
&nbsp;&nbsp;void operator()(int&amp; anything) noexcept<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;anything = mValue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++mValue;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;int mValue;<br/>
};<br/>
<br/>
<br/>
bool ribi::Newick::AllAboutEqual(<br/>
&nbsp;&nbsp;const std::vector&lt;double&gt;&amp; v,<br/>
&nbsp;&nbsp;const double tolerance)<br/>
{<br/>
&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;return std::count_if(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::bind2nd(fuzzy_equal_to(tolerance),v[0]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;== boost::numeric_cast&lt;int&gt;(v.size());<br/>
<br/>
}<br/>
<br/>
const BigInteger ribi::Newick::CalcComplexity(const std::vector&lt;int&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;if (v.empty()) return 0;<br/>
&nbsp;&nbsp;//assert(IsNewick(v));<br/>
&nbsp;&nbsp;BigInteger complexity = 1;<br/>
&nbsp;&nbsp;int n_frequencies = 0;<br/>
&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x &lt; 0) continue; //Ignore if x is not a number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++n_frequencies;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;complexity*=x;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;complexity*=n_frequencies;<br/>
&nbsp;&nbsp;return complexity;<br/>
}<br/>
<br/>
double ribi::Newick::CalcDenominator(const std::vector&lt;int&gt;&amp; v,const double theta)<br/>
{<br/>
&nbsp;&nbsp;int sum_above_zero = 0;<br/>
&nbsp;&nbsp;int sum_above_one&nbsp;&nbsp;= 0;<br/>
&nbsp;&nbsp;for(const int&amp; i: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 0) sum_above_zero+= i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 1) sum_above_one += i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const double d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= boost::numeric_cast&lt;double&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_above_zero * (sum_above_zero - 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ (boost::numeric_cast&lt;double&gt;(sum_above_one)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * theta);<br/>
&nbsp;&nbsp;return d;<br/>
}<br/>
<br/>
const BigInteger ribi::Newick::CalcNumOfCombinationsBinary(const std::vector&lt;int&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;assert(Newick::IsNewick(v));<br/>
<br/>
&nbsp;&nbsp;//Get all positives<br/>
&nbsp;&nbsp;std::vector&lt;BigInteger&gt; positives;<br/>
&nbsp;&nbsp;Copy_if(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(positives),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::bind2nd(std::greater&lt;BigInteger&gt;(),0));<br/>
<br/>
&nbsp;&nbsp;//Obtain numerator = (SUM(x))!<br/>
&nbsp;&nbsp;const int sum_values = Accumulate_if(v.begin(),v.end(),0,std::bind2nd(std::greater&lt;int&gt;(),0));<br/>
<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "sum_values:" &lt;&lt; sum_values &lt;&lt; '\n';<br/>
&nbsp;&nbsp;BigInteger numerator = FactorialBigInt(sum_values);<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "Numerator:" &lt;&lt; numerator &lt;&lt; '\n';<br/>
<br/>
&nbsp;&nbsp;//Obtain factorialated positives<br/>
&nbsp;&nbsp;BigInteger denominator = 1;<br/>
&nbsp;&nbsp;for(const int&amp; i: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i&lt;=0) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const BigInteger i_temp = FactorialBigInt(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;denominator*=i_temp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::clog &lt;&lt; "Denominator:" &lt;&lt; denominator &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Obtain number_of_symmetries<br/>
&nbsp;&nbsp;const BigInteger number_of_symmetries = CalcNumOfSymmetriesBinary(v);<br/>
<br/>
&nbsp;&nbsp;//Add number_of_symmetries times a 2 to denominator terms<br/>
&nbsp;&nbsp;for(BigInteger i=0; i!=number_of_symmetries; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;denominator*=2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::clog &lt;&lt; "Denominator:" &lt;&lt; denominator &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Return the division<br/>
&nbsp;&nbsp;numerator/=denominator;<br/>
&nbsp;&nbsp;return numerator;<br/>
}<br/>
<br/>
const BigInteger ribi::Newick::CalcNumOfSymmetriesBinary(std::vector&lt;int&gt; v)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(v));<br/>
&nbsp;&nbsp;assert(IsBinaryNewick(v));<br/>
&nbsp;&nbsp;if (v.size() == 3) return 0;<br/>
&nbsp;&nbsp;if (v.size() == 4) return (v[1] &gt; 0 &amp;&amp; v[1]==v[2] ? 1 : 0);<br/>
<br/>
&nbsp;&nbsp;const int n_reserved<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= *std::max_element(v.begin(),v.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ std::count_if(v.begin(), v.end(), std::bind2nd(std::greater&lt;int&gt;(),0));<br/>
<br/>
&nbsp;&nbsp;BigInteger n_symmetries = 0;<br/>
&nbsp;&nbsp;int id = n_reserved + 1;<br/>
<br/>
&nbsp;&nbsp;std::map&lt;std::pair&lt;int,int&gt;,int&gt; ids;<br/>
<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::copy(v.begin(),v.end(),std::ostream_iterator&lt;int&gt;(std::clog," ")); std::clog &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Count number of symmetries<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sz &gt;= 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t j = sz - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=j; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v[i] &gt; 0 &amp;&amp; v[i]==v[i+1]) ++n_symmetries;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Collect all leaves and store new leaves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::pair&lt;int,int&gt; &gt; leaves;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=j; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v[i] &gt; 0 &amp;&amp; v[i+1] &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Keep pair sorted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;int,int&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= (v[i] &lt;= v[i+1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? std::make_pair(v[i+0],v[i+1])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: std::make_pair(v[i+1],v[i+0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If this leaf is new, store it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ids.find(p)==ids.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ids[p] = id;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++id;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Generalize all leaves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i &lt; v.size()-1; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size()&gt;2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v[i] &gt; 0 &amp;&amp; v[i+1] &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Keep pair sorted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;int,int&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= (v[i] &lt;= v[i+1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? std::make_pair(v[i+0],v[i+1])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: std::make_pair(v[i+1],v[i+0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If this leaf is new, store it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ids.find(p)!=ids.end() &amp;&amp; "Leaf should have been stored already");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; v_new;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.begin() + i - 1,std::back_inserter(v_new));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int id = ids[p];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(id);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin() + i + 3,v.end(),std::back_inserter(v_new));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v_new;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = (i-1 &gt; 0 ? i-1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check if there are more leaves to be generalized<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v.size()&lt;=4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check if the last (X,Y) is symmetrical...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n_symmetries + (v[1] &gt; 0 &amp;&amp; v[1]==v[2] ? 1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
double ribi::Newick::CalcProbabilitySimpleNewick(<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; v,<br/>
&nbsp;&nbsp;const double theta)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(v));<br/>
&nbsp;&nbsp;assert(IsSimple(v));<br/>
&nbsp;&nbsp;const int sz = v.size();<br/>
<br/>
&nbsp;&nbsp;int n=0;<br/>
&nbsp;&nbsp;int k=0;<br/>
<br/>
&nbsp;&nbsp;double probability = 1.0;<br/>
<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v[i]&gt;0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int ni = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int p=1; p!=ni; ++p, ++n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probability *= (static_cast&lt;double&gt;(p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/ ( static_cast&lt;double&gt;(n) + theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probability /= ( static_cast&lt;double&gt;(n) + theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;probability *= (static_cast&lt;double&gt;(n)+theta)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* std::pow(theta,static_cast&lt;double&gt;(k-1));<br/>
&nbsp;&nbsp;return probability;<br/>
}<br/>
<br/>
void ribi::Newick::CheckNewick(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;//std::clog<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; "Researching Newick string: '"<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; s &lt;&lt; "'\n";<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;if (s.size()&lt;3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::string must have a size of at least three characters");<br/>
&nbsp;&nbsp;if (s[0]!='(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::string must start with an opening bracket ('(').");<br/>
&nbsp;&nbsp;if (s[s.size()-1]!=')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::string must end with a closing bracket (')').");<br/>
&nbsp;&nbsp;if (std::count(s.begin(),s.end(),'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!=std::count(s.begin(),s.end(),')'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "The Newick std::string must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "as closing brackets #1");<br/>
&nbsp;&nbsp;if (s.find("(0")!=std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A std::string Newick frequency cannot be or "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"start with a zero (#1)");<br/>
&nbsp;&nbsp;if (s.find(",0")!=std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A std::string Newick frequency cannot be or "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"start with a zero (#2)");<br/>
&nbsp;&nbsp;if (s.find("()")!=std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::string cannot have "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a consecutive opening and closing bracket");<br/>
&nbsp;&nbsp;if (s.find(",,")!=std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A Newick std::string can have no consecutive comma's");<br/>
&nbsp;&nbsp;if (s.find("(,")!=std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A Newick std::string cannot have comma "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"directly after an opening bracket");<br/>
&nbsp;&nbsp;if (s.find(",)")!=std::string::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A Newick std::string cannot have comma "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"directly before a closing bracket");<br/>
<br/>
&nbsp;&nbsp;std::string s_copy = s;<br/>
&nbsp;&nbsp;while(s_copy.size()&gt;2) //Find a leaf and cut it until the string is empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::clog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; "Researching Newick string leaf: '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; s_copy<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; "'\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find a leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find index i (starting opening bracket) and j (closing bracket)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = s_copy.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t i = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t j = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (i=0 ; i!=sz; ++i) //Index of opening bracket<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s_copy[i]!='(') continue;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s_copy[i]=='(');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i+1 &lt; s_copy.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=i+1; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s_copy[j]=='(') { j = 0; break; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s_copy[j]!=')') continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j ==&nbsp;&nbsp;0) continue; //j cannot be 0 after previous for loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::string must have as much opening as closing brackets #2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s_copy[i]!='(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::string must have as much opening as closing brackets #3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Indices i and j found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Is range between i and j valid?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s_copy[i]!='(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[i]=='('");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s_copy[j]!=')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[j]==')'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check the range<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (size_t k=i+1; k!=j; ++k)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( s_copy[k]!='0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='1'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='2'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='3'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='4'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='5'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='6'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='7'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='8'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='9'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!='0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; s_copy[k]!=',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream err_msg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err_msg &lt;&lt; "Invalid non-number character in input: '" &lt;&lt; s_copy[k] &lt;&lt; "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(err_msg.str().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 0 &amp;&amp; s_copy[i-1]=='(' &amp;&amp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j +1 &lt; sz &amp;&amp; s_copy[j + 1] == ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Newicks must not have the form ((X))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check if there is a comma somewhere between brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 0 //&lt; (1) is valid, (1,(2)) not, ((1),2) not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; std::find(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_copy.begin()+i,s_copy.begin()+j,',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== s_copy.begin()+j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::string cannot have the sequence "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"of an opening bracket, a value and a closing bracket "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"as a \'complex\' leaf");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Range is assumed valid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Cut the leaf (turns '(1,2)' to (9) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(s_copy[i]=='(');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(s_copy[j]==')');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s_new_1 = s_copy.substr(0,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s_new_2 = s_copy.substr(j+1,sz-j-1); //OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s_new =&nbsp;&nbsp;s_new_1 + "9" + s_new_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s_copy = s_new;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::Newick::CheckNewick(const std::vector&lt;int&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "Researching newick: '"<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; DumbNewickToString(v) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;if (v.size()&lt;3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::vector&lt;int&gt; must have a size of at least three characters");<br/>
&nbsp;&nbsp;if (v[0]!=bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::vector&lt;int&gt; must start with an opening bracket ('(').");<br/>
&nbsp;&nbsp;if (v[v.size()-1]!=bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::vector&lt;int&gt; must end with a closing bracket (')').");<br/>
&nbsp;&nbsp;if (std::count(v.begin(),v.end(),static_cast&lt;int&gt;(bracket_open))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!=std::count(v.begin(),v.end(),static_cast&lt;int&gt;(bracket_close)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "The Newick std::string must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "as closing brackets #1");<br/>
&nbsp;&nbsp;if (std::count(v.begin(),v.end(),0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A std::vector&lt;int&gt; Newick frequency cannot be "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"zero");<br/>
<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v_copy = v;<br/>
&nbsp;&nbsp;while(v_copy.size()&gt;2) //Find a leaf and cut it until the string is empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::clog &lt;&lt; "Researching leaf: '";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::copy(v_copy.begin(),v_copy.end(),std::ostream_iterator&lt;int&gt;(std::clog," "));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::clog &lt;&lt; "'\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find a leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find index i (starting opening bracket) and j (closing bracket)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = v_copy.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t i = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t j = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (i=0 ; i!=sz; ++i) //Index of opening bracket<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[i]!=bracket_open) continue;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(v_copy[i]==bracket_open);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i+1 &lt; v_copy.size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[i+1]==bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::vector&lt;int&gt; cannot have "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a consecutive opening and closing bracket");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=i+1; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[j]==bracket_open) { j = 0; break; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[j]!=bracket_close) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i + 2 == j &amp;&amp; j &lt; sz - 1) //&lt; (1) is valid, (1,(2)) not, ((1),2) not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::vector&lt;int&gt; cannot have the sequence"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"of an opening bracket, a value and a closing bracket"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"as a \'complex\' leaf");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j ==&nbsp;&nbsp;0) continue; //j cannot be 0 after previous for loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::vector&lt;int&gt; must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"as closing brackets #2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[i]!=bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The Newick std::vector&lt;int&gt; must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"as closing brackets #3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Indices i and j found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Is range between i and j valid?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[i]!=bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[i]=='('");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[j]!=bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[j]==')'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check the range<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (size_t k=i+1; k!=j; ++k)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v_copy[k] &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::ostringstream err_msg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err_msg &lt;&lt; "Invalid non-number in input: '" &lt;&lt; v_copy[k] &lt;&lt; "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::invalid_argument(err_msg.str().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Range is assumed valid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Cut the leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Changes '(1,2)' to '(999)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v_copy[i]==bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v_copy[j]==bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; v_new(v_copy.begin(),v_copy.begin() + i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(999);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v_copy.begin() + j + 1, v_copy.end(),std::back_inserter(v_new));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_copy = v_new;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Newick::CreateInvalidNewicks() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("(");<br/>
&nbsp;&nbsp;v.push_back(")");<br/>
&nbsp;&nbsp;v.push_back("1");<br/>
&nbsp;&nbsp;v.push_back("1234");<br/>
&nbsp;&nbsp;v.push_back(")1234(");<br/>
&nbsp;&nbsp;v.push_back("()1234()");<br/>
&nbsp;&nbsp;v.push_back("(1234,)");<br/>
&nbsp;&nbsp;v.push_back("(,1234,)");<br/>
&nbsp;&nbsp;v.push_back("()");<br/>
&nbsp;&nbsp;v.push_back("(0)");<br/>
&nbsp;&nbsp;v.push_back("(-)");<br/>
&nbsp;&nbsp;v.push_back("(-1)");<br/>
&nbsp;&nbsp;v.push_back("(0,0)");<br/>
&nbsp;&nbsp;v.push_back("(1,0)");<br/>
&nbsp;&nbsp;v.push_back("(0,1)");<br/>
&nbsp;&nbsp;v.push_back("(0,(1,1))");<br/>
&nbsp;&nbsp;v.push_back("(1,(0,1))");<br/>
&nbsp;&nbsp;v.push_back("(1,(1,0))");<br/>
&nbsp;&nbsp;v.push_back("((0,1),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,0),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,1),0)");<br/>
&nbsp;&nbsp;v.push_back("((2))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2,3)");<br/>
&nbsp;&nbsp;v.push_back("(1,(2))");<br/>
&nbsp;&nbsp;v.push_back("(1,((3)))");<br/>
&nbsp;&nbsp;v.push_back("(11,(22,33)");<br/>
&nbsp;&nbsp;v.push_back("(22,33),33)");<br/>
&nbsp;&nbsp;v.push_back("1,2");<br/>
&nbsp;&nbsp;v.push_back("(1,1),");<br/>
&nbsp;&nbsp;v.push_back("(2,2),");<br/>
&nbsp;&nbsp;v.push_back("((2,2),2),");<br/>
&nbsp;&nbsp;v.push_back(",(1,1)");<br/>
&nbsp;&nbsp;v.push_back(",(2,2)");<br/>
&nbsp;&nbsp;v.push_back(",((2,2),2)");<br/>
&nbsp;&nbsp;v.push_back(",(1,1),");<br/>
&nbsp;&nbsp;v.push_back(",(2,2),");<br/>
&nbsp;&nbsp;v.push_back("(2,(1,1)),");<br/>
&nbsp;&nbsp;v.push_back(",((2,2),2),");<br/>
&nbsp;&nbsp;v.push_back("(1,2");<br/>
&nbsp;&nbsp;v.push_back("(-1,2");<br/>
&nbsp;&nbsp;v.push_back("(1,-2");<br/>
&nbsp;&nbsp;v.push_back("(0,-2");<br/>
&nbsp;&nbsp;v.push_back("(-0,2");<br/>
&nbsp;&nbsp;v.push_back("(1,,2)");<br/>
&nbsp;&nbsp;v.push_back("(1,2))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2),3)");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4))()");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::Newick::CreateRandomNewick(const int n,const int max)<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; v = CreateRandomBinaryNewickVector(n,max);<br/>
&nbsp;&nbsp;return NewickToString(v);<br/>
}<br/>
<br/>
const std::vector&lt;int&gt; ribi::Newick::CreateRandomBinaryNewickVector(const int n,const int max)<br/>
{<br/>
&nbsp;&nbsp;assert(n&gt;0);<br/>
&nbsp;&nbsp;assert(max&gt;1);<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v;<br/>
&nbsp;&nbsp;v.reserve(2 + (n*2));<br/>
<br/>
&nbsp;&nbsp;v.push_back(bracket_open);<br/>
<br/>
&nbsp;&nbsp;v.push_back(1 + (std::rand() % (max-1) ));<br/>
&nbsp;&nbsp;if (n==1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back(1 + (std::rand() % (max-1) ));<br/>
<br/>
&nbsp;&nbsp;v.push_back(bracket_close); //??? IntVector format has no trailing bracket<br/>
<br/>
&nbsp;&nbsp;if (n==2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;for (int i=2; i!=n; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((std::rand() &gt;&gt; 4) % 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Append<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.reserve(2 + v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.push_back(bracket_open);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.end(),std::back_inserter(new_v));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.push_back(1 + (std::rand() % (max-1)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.push_back(bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::swap(v,new_v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Prepend<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.reserve(2 + v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.push_back(bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.push_back(1 + (std::rand() % (max-1)));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.end(),std::back_inserter(new_v));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_v.push_back(bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::swap(v,new_v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),static_cast&lt;int&gt;(bracket_open ))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== std::count(v.begin(),v.end(),static_cast&lt;int&gt;(bracket_close)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(IsNewick(v));<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Newick::CreateValidBinaryNewicks() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("(1,2)");<br/>
&nbsp;&nbsp;v.push_back("(11,22)");<br/>
&nbsp;&nbsp;v.push_back("(1,(1,1))");<br/>
&nbsp;&nbsp;v.push_back("(1,(1,2))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2,1))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2,2))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2,3))");<br/>
&nbsp;&nbsp;v.push_back("(2,(1,1))");<br/>
&nbsp;&nbsp;v.push_back("(2,(1,2))");<br/>
&nbsp;&nbsp;v.push_back("(2,(2,1))");<br/>
&nbsp;&nbsp;v.push_back("(2,(2,2))");<br/>
&nbsp;&nbsp;v.push_back("(4,(2,3))");<br/>
&nbsp;&nbsp;v.push_back("((2,3),4)");<br/>
&nbsp;&nbsp;v.push_back("(2,((2,3),4))");<br/>
&nbsp;&nbsp;v.push_back("(11,(22,33))");<br/>
&nbsp;&nbsp;v.push_back("((22,33),33)");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4))");<br/>
&nbsp;&nbsp;v.push_back("(((1,2),(3,4)),5)");<br/>
&nbsp;&nbsp;v.push_back("(1,((2,3),(4,5)))");<br/>
&nbsp;&nbsp;v.push_back("((11,2),(3,44))");<br/>
&nbsp;&nbsp;v.push_back("(((1,22),(33,4)),(55,6))");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Newick::CreateValidTrinaryNewicks() noexcept<br/>
{<br/>
&nbsp;&nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__<br/>
&nbsp;&nbsp;///\note<br/>
&nbsp;&nbsp;///The tests below must be put back in again once<br/>
&nbsp;&nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(1,1,1)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(1,2,3)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,1),1,1)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(1,(1,1),1)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(1,1,(1,1))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(1,(2,3,4))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(1,2,(3,4))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(1,2,(3,4,5))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2,3),4,5)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(11,22,33)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(11,(22,33,44))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(11,22,(33,44))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(11,22,(33,44,55))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((11,22,33),44,55)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2),(3,4),(5,6))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2,3),(4,5),(6,7))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2),(3,4,5),(6,7))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2),(3,4),(5,6,7))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2,3),(4,5),(6,7))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2),(3,4,5),(6,7))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2),(3,4),(5,6,7))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2,3),(4,5,6),(7,8))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2),(3,4,5),(6,7,8))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2,3),(4,5),(6,7,8))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((1,2,3),(4,5,6),(7,8,9))",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((11,22,33),(44,55,66),(77,88,99))"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return NewickCpp98::CreateValidTrinaryNewicks();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Newick::CreateValidNewicks() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; w = CreateValidUnaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; w = CreateValidBinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; w = CreateValidTrinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back("(1,2,3,4)");<br/>
&nbsp;&nbsp;v.push_back("(1,2,3,4,5)");<br/>
&nbsp;&nbsp;v.push_back("(1,2,3,4,5,6)");<br/>
&nbsp;&nbsp;v.push_back("(1,2,3,4,5,6,7)");<br/>
&nbsp;&nbsp;v.push_back("(1,2,3,4,5,6,7,8)");<br/>
&nbsp;&nbsp;v.push_back("((1,2,3,4,5,6,7,8),(1,2,3,4,5,6,7,8),(1,2,3,4,5,6,7,8))");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Newick::CreateValidUnaryNewicks() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("(1)");<br/>
&nbsp;&nbsp;v.push_back("(9)");<br/>
&nbsp;&nbsp;v.push_back("(123)");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::Newick::DumbNewickToString(const std::vector&lt;int&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;s.reserve(2 * v.size()); //Just a guess<br/>
&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x &gt;= 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=boost::lexical_cast&lt;std::string&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int next = v[i+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (next &gt; 0 || next == bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (x==bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+="(";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (x==bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=")";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Final closing bracket?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i+1==sz) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int next = v[i+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (next &gt; 0 || next == bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+="x"; //Unknown character<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
const std::vector&lt;int&gt; ribi::Newick::Factorial(const std::vector&lt;int&gt;&amp; v_original) noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v(v_original);<br/>
&nbsp;&nbsp;std::transform(v.begin(),v.end(),v.begin(),std::ptr_fun&lt;int,int&gt;(Factorial));<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
int ribi::Newick::Factorial(const int n) noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(n&gt;=0);<br/>
&nbsp;&nbsp;int result = 1;<br/>
&nbsp;&nbsp;for (int i=1; i&lt;=n; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result*=i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return result;<br/>
}<br/>
<br/>
const BigInteger ribi::Newick::FactorialBigInt(const int n) noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(n&gt;=0);<br/>
&nbsp;&nbsp;BigInteger result = 1;<br/>
&nbsp;&nbsp;for (int i=1; i&lt;=n; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result*=i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return result;<br/>
}<br/>
<br/>
int ribi::Newick::FindPosAfter(const std::vector&lt;int&gt;&amp; v,const int x, const int index)<br/>
{<br/>
&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;for (int i=index+1; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &lt; sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v[i]==x) return i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return sz;<br/>
}<br/>
<br/>
int ribi::Newick::FindPosBefore(const std::vector&lt;int&gt;&amp; v,const int x, const int index)<br/>
{<br/>
&nbsp;&nbsp;for (int i=index-1; i!=-1; --i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (v[i]==x) return i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return -1;<br/>
}<br/>
<br/>
const std::vector&lt;int&gt; ribi::Newick::GetDepth(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v;<br/>
&nbsp;&nbsp;int depth = -1;<br/>
&nbsp;&nbsp;for(const int&amp; x: n)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x == Newick::bracket_open) ++depth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(depth);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x == Newick::bracket_close) --depth;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(n.size() == v.size());<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;int&gt; ribi::Newick::GetFactorialTerms(const int n)<br/>
{<br/>
&nbsp;&nbsp;assert(n &gt; 0);<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v(n);<br/>
&nbsp;&nbsp;std::for_each(v.begin(), v.end(),Increase(1));<br/>
&nbsp;&nbsp;assert(std::count(v.begin(),v.end(),0)==0);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
std::vector&lt;boost::tuple&lt;std::string,double,double&gt; &gt; ribi::Newick::GetKnownProbabilities()<br/>
{<br/>
&nbsp;&nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__<br/>
&nbsp;&nbsp;///\note<br/>
&nbsp;&nbsp;///The tests below must be put back in again once<br/>
&nbsp;&nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438<br/>
&nbsp;&nbsp;const std::vector&lt;boost::tuple&lt;std::string,double,double&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Sum equals 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1)"&nbsp;&nbsp;, 10.0, 1.0000000 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Sum equals 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2)"&nbsp;&nbsp;, 10.0, 0.0909091 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1)", 10.0, 0.9090909 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Sum equals 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0151515 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,2)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0757576 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,1)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0757576 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1))", 10.0, 0.2525253 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1),1)", 10.0, 0.2525253 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,1)"&nbsp;&nbsp;, 10.0, 0.7575758 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Sum equals 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(4)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0034965 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,3)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0116550 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,2)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0058275 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3,1)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0116550 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,2))", 10.0, 0.0194250 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,1))", 10.0, 0.0194250 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,1))", 10.0, 0.0194250 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,2),1)", 10.0, 0.0194250 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((2,1),1)", 10.0, 0.0194250 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1),2)", 10.0, 0.0194250 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,2)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0582751 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,2,1)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0582751 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,1,1)"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0582751 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(1,1))", 10.0, 0.1295001 }, //(1)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1),1)", 10.0, 0.1295001 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1),1,1)", 10.0, 0.1295001 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,1))", 10.0, 0.0971251 }, //(2)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1),1)", 10.0, 0.0971251 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Quadrary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,1,1)", 10.0, 0.5827505 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Sum equals 5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,4)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0024975 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,3)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0008325 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3,2)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0008325 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(4,1)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0024975 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,3))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0028305 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,2))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0012950 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(3,1))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0028305 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,2))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0014338 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(2,1))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0014338 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3,(1,1))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0026640 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(1,2))"&nbsp;&nbsp;, 10.0, 0.0092731 }, //(3)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(2,1))"&nbsp;&nbsp;, 10.0, 0.0092731 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(1,1,1))", 10.0, 0.0348263 }, //(4)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,1),1)", 10.0, 0.0348263 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1),1,1)", 10.0, 0.0348263 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,1,1))"&nbsp;&nbsp;, 10.0, 0.0070069 }, //(5)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1),2)"&nbsp;&nbsp;, 10.0, 0.0070069 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,1,(1,1))", 10.0, 0.0692918 }, //(6)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,2,(1,1))"&nbsp;&nbsp;, 10.0, 0.0092223 }, //(7)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,1,(1,1))"&nbsp;&nbsp;, 10.0, 0.0092223 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1),2)"&nbsp;&nbsp;, 10.0, 0.0092223 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,1),1)"&nbsp;&nbsp;, 10.0, 0.0092223 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1),1,2)"&nbsp;&nbsp;, 10.0, 0.0092223 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1),2,1)"&nbsp;&nbsp;, 10.0, 0.0092223 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,2))"&nbsp;&nbsp;, 10.0, 0.0069190 }, //(9)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,2,1))"&nbsp;&nbsp;, 10.0, 0.0069190 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,1,1))"&nbsp;&nbsp;, 10.0, 0.0069190 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,2),1)"&nbsp;&nbsp;, 10.0, 0.0069190 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,2,1),1)"&nbsp;&nbsp;, 10.0, 0.0069190 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((2,1,1),1)"&nbsp;&nbsp;, 10.0, 0.0069190 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Quadrary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,1,1))", 10.0, 0.0415140 }, //(8)(confirmed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Pentary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,1,1,1)"&nbsp;&nbsp;, 10.0, 0.4162504 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Sum equals 6<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,5)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0006660 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,4)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001665 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3,3)"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001110 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,4))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0005804 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,3))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001679 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(3,2))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001679 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(4,1))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0005804 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,3))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001991 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(2,2))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0000925 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(3,1))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001991 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3,(1,2))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001880 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3,(2,1))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0001880 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(4,(1,1))"&nbsp;&nbsp;&nbsp;&nbsp;, 10.0, 0.0005043 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(1,3))"&nbsp;&nbsp;, 10.0, 0.0012712 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(2,2))"&nbsp;&nbsp;, 10.0, 0.0005563 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(3,1))"&nbsp;&nbsp;, 10.0, 0.0012712 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,3),1)"&nbsp;&nbsp;, 10.0, 0.0012712 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,2),1)"&nbsp;&nbsp;, 10.0, 0.0005563 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(3,1),1)"&nbsp;&nbsp;, 10.0, 0.0012712 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,3),1,1)"&nbsp;&nbsp;, 10.0, 0.0012712 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((2,2),1,1)"&nbsp;&nbsp;, 10.0, 0.0005563 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((3,1),1,1)"&nbsp;&nbsp;, 10.0, 0.0012712 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,2,(1,2))"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,1,(1,2))"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,2,(2,1))"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,1,(2,1))"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,1),2)"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,2),2)"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(2,1),1)"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,2),1)"&nbsp;&nbsp;, 10.0, 0.0006346 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,3,(1,1))"&nbsp;&nbsp;, 10.0, 0.0011913 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1),3)"&nbsp;&nbsp;, 10.0, 0.0011913 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1),1,3)"&nbsp;&nbsp;, 10.0, 0.0011913 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(3,(1,1),1)"&nbsp;&nbsp;, 10.0, 0.0011913 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1),3,1)"&nbsp;&nbsp;, 10.0, 0.0011913 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(1,1,2))", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(1,2,1))", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,(2,1,1))", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,2),1)", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,2,1),1)", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,1,1),1)", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,2),1,1)", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,2,1),1,1)", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((2,1,1),1,1)", 10.0, 0.0023165 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,2,(1,1,1))", 10.0, 0.0023323 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,1,(1,1,1))", 10.0, 0.0023323 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,1),2)", 10.0, 0.0023323 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,1,1),1)", 10.0, 0.0023323 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1),1,2)", 10.0, 0.0023323 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1),2,1)", 10.0, 0.0023323 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Quadrary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,1,2))"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,2,1))"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,2,1,1))"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(2,1,1,1))"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1,2),1)"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,2,1),1)"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,2,1,1),1)"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((2,1,1,1),1)"&nbsp;&nbsp;, 10.0, 0.0027574 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(2,(1,1,1,1))"&nbsp;&nbsp;, 10.0, 0.0028154 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1,1),2)"&nbsp;&nbsp;, 10.0, 0.0028154 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Pentary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,(1,1,1,1,1))", 10.0, 0.0183824 }, //(7)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "((1,1,1,1,1),1)", 10.0, 0.0183824 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Hexary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ "(1,1,1,1,1,1)"&nbsp;&nbsp;, 10.0, 0.2775003 }<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return NewickCpp98::GetKnownProbabilities();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
int ribi::Newick::GetLeafMaxArity(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;if (IsSimple(n)) return size - 2;<br/>
<br/>
&nbsp;&nbsp;int max = 0;<br/>
&nbsp;&nbsp;for (int from = 0; from!=size; ++from)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[from] != Newick::bracket_open) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int to = from+1; to!=size; ++to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[to] == Newick::bracket_open) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[to]&nbsp;&nbsp;&gt; 0) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[to] == Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(from &lt; to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = to - from - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return max;<br/>
}<br/>
<br/>
const std::vector&lt;std::vector&lt;int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Newick::GetRootBranches(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__<br/>
&nbsp;&nbsp;///\note<br/>
&nbsp;&nbsp;///The tests below must be put back in again once<br/>
&nbsp;&nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438<br/>
<br/>
&nbsp;&nbsp;//#define DEBUG_GETROOTBRANCHES<br/>
&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_GETROOTBRANCHES<br/>
&nbsp;&nbsp;TRACE_FUNC();<br/>
&nbsp;&nbsp;TRACE(Newick::NewickToString(n));<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
&nbsp;&nbsp;assert(!IsUnaryNewick(n));<br/>
<br/>
&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;int&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;if (IsSimple(n))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=1; i!=size-1; ++i) //Skip brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[i],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_close)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(v.back()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Complex newick<br/>
&nbsp;&nbsp;assert(!IsSimple(n));<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; depth = GetDepth(n);<br/>
<br/>
&nbsp;&nbsp;assert(depth.size() == n.size());<br/>
&nbsp;&nbsp;//Search for open and closing brackets in depth 1<br/>
&nbsp;&nbsp;for (int i=0; i!=size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (depth[i] == 0 &amp;&amp; n[i] &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//C++0x initialization list<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::bracket_open,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[i],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::bracket_close<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(v.back()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (depth[i] != 1 || n[i]!=Newick::bracket_open) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=i+1; j!=size; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (depth[j] != 1 || n[j]!=Newick::bracket_close) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(n.begin() + i + 1,n.begin() + j,std::back_inserter(w));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(w));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Set from index i after current end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(v.size() &gt; 1);<br/>
&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;return NewickCpp98::GetRootBranches(n);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const std::pair&lt;std::vector&lt;int&gt;,std::vector&lt;int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Newick::GetRootBranchesBinary(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
&nbsp;&nbsp;assert(IsBinaryNewick(n) &amp;&amp; "Only binary Newicks can have two roots");<br/>
<br/>
&nbsp;&nbsp;assert(n[0] == bracket_open);<br/>
&nbsp;&nbsp;assert(n[n.size()-1] == bracket_close);<br/>
&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;//Return the answer directly is Newick consists<br/>
&nbsp;&nbsp;//out of two values only<br/>
&nbsp;&nbsp;if (sz==4)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[1] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[2] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return std::make_pair(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_close)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_close)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;typedef std::vector&lt;int&gt;::const_iterator Iterator;<br/>
&nbsp;&nbsp;const Iterator j = n.end() - 1;<br/>
&nbsp;&nbsp;for (Iterator i = n.begin() + 2; i!=j; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; lhs(n.begin() + 1,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; rhs(i,n.end() - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ( lhs.front() != Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| lhs.back()&nbsp;&nbsp;!= Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lhs = Surround(lhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ( rhs.front() != Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| rhs.back()&nbsp;&nbsp;!= Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rhs = Surround(rhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//std::clog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; NewickToString(lhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; " and "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; NewickToString(rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (IsNewick(lhs) &amp;&amp; IsNewick(rhs))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return std::make_pair(lhs,rhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Should not get here");<br/>
}<br/>
<br/>
const std::vector&lt;std::vector&lt;int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Newick::GetSimplerBinaryNewicks(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
&nbsp;&nbsp;assert(IsUnaryNewick(n) || IsBinaryNewick(n));<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;int&gt; &gt; newicks;<br/>
<br/>
&nbsp;&nbsp;//If newick is simple (by counting the number of opening brackets),<br/>
&nbsp;&nbsp;//there are no simpler Newicks<br/>
&nbsp;&nbsp;if (std::count( n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open))==1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Simple newicks do not need to be simplified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size()==3 || n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0]==bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[n.size()-1]==bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n.size() == 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[1]&gt;1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return newicks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size()==4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[1] == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[2]+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_close));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[2] == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[1]+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_close));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return newicks;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//newick is complex<br/>
&nbsp;&nbsp;//Generate other Newicks and their coefficients<br/>
&nbsp;&nbsp;const int sz = n.size();<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = n[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x &lt; 0) //x is not a digit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If x is not next to a digit, there is no simplification<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[i-1]&lt;0 &amp;&amp; n[i+1]&lt;1) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If next to the x in a digit, merge these and remove their brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Is the 1 left of a value?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[i-1]==bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i+1] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int new_value = n[i+1] + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n.begin(),n.begin() + i - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.push_back(new_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i+2] &lt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(n.begin() + i + 3,n.end(),std::back_inserter(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsNewick(next))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; DumbNewickToString(n)&nbsp;&nbsp;&lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; DumbNewickToString(next) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InspectInvalidNewick(std::cerr,next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Is the 1 to the right of a value?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i-1] &gt; 0); //&lt; The other value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int new_value = n[i-1] + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n.begin(),n.begin()+i-2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.push_back(new_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i+1] &lt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(n.begin() + i + 2,n.end(),std::back_inserter(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next = n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return newicks;<br/>
}<br/>
<br/>
const std::vector&lt;std::vector&lt;int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Newick::GetSimplerNewicks(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;//#define DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
<br/>
&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;TRACE_FUNC();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; depths = GetDepth(n);<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;int&gt; &gt; newicks;<br/>
<br/>
&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;for (int i = 0; i!=size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &lt; size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &lt; 1) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string stored = Newick::NewickToString(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(stored);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] == 1); //Most difficult...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int depth = depths[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//j must first decrement, later increment with the same code<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int j_end&nbsp;&nbsp;= -1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int j_step = -1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=i-1; ; j+=j_step)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//j must first decrement, later increment with the same code<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == j_end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//|| depths[j] &lt; depth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (depths[j] == depth &amp;&amp; n[j] &lt; 0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j_step == -1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = i + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j_end = size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j_step = 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i!=j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &lt; size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Only take frequencies of the same depth into account<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[j] &lt; 1 || depths[j] != depth) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick_with_zero(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick_with_zero[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(new_newick_with_zero[i] == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++new_newick_with_zero[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove brackets after possibly lonely value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_with_zeroes = Newick::DumbNewickToString(new_newick_with_zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_with_zeroes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string dist_i_j = boost::lexical_cast&lt;std::string&gt;(std::abs(i - j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(dist_i_j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If there is only one or two values between<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the brackets, and one of these values was a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1 becoming added to the other, nullify the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1 and both brackets:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//'((1,1),2)' -&gt; '(00102)' -&gt; '(1,2)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (std::abs(i - j) == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//|| (std::abs(i - j) == 2 &amp;&amp; n[i] == 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_open&nbsp;&nbsp;= std::min(i,j) - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_close = std::max(i,j) + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;== Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;= 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_close] = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_with_more_zeroes = Newick::DumbNewickToString(new_newick_with_zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_with_more_zeroes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove decremented i and possibly nullified brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::remove_copy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(new_newick),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Add brackets if these are removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (new_newick.front() != Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| new_newick.back() != Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick = Surround(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_done = Newick::DumbNewickToString(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_done);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define DEBUG_2436964926435498753298216832187<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_2436964926435498753298216832187<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsNewick(new_newick))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::DumbNewickToString(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return newicks;<br/>
}<br/>
<br/>
const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Newick::GetSimplerNewicksFrequencyPairs(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__<br/>
&nbsp;&nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438<br/>
<br/>
&nbsp;&nbsp;//#define DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;TRACE_FUNC();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; newicks;<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; depths = GetDepth(n);<br/>
<br/>
<br/>
&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;for (int i = 0; i!=size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &lt; size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &lt; 1) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string stored = Newick::NewickToString(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(stored);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back( { new_newick,n[i] } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] == 1); //Most difficult...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int depth = depths[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//j must first decrement, later increment with the same code<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int j_end&nbsp;&nbsp;= -1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int j_step = -1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=i-1; ; j+=j_step)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//j must first decrement, later increment with the same code<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == j_end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//|| depths[j] &lt; depth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (depths[j] == depth &amp;&amp; n[j] &lt; 0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j_step == -1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = i + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j_end = size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j_step = 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i!=j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &lt; size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Only take frequencies of the same depth into account<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[j] &lt; 1 || depths[j] != depth) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick_with_zero(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick_with_zero[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(new_newick_with_zero[i] == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++new_newick_with_zero[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove brackets after possibly lonely value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_with_zeroes = Newick::DumbNewickToString(new_newick_with_zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_with_zeroes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string dist_i_j = boost::lexical_cast&lt;std::string&gt;(std::abs(i - j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(dist_i_j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If there is only one or two values between<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the brackets, and one of these values was a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1 becoming added to the other, nullify the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1 and both brackets:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//'((1,1),2)' -&gt; '(00102)' -&gt; '(1,2)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (std::abs(i - j) == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//|| (std::abs(i - j) == 2 &amp;&amp; n[i] == 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_open&nbsp;&nbsp;= std::min(i,j) - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_close = std::max(i,j) + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;== Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;= 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_close] = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_with_more_zeroes = Newick::DumbNewickToString(new_newick_with_zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_with_more_zeroes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove decremented i and possibly nullified brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::remove_copy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(new_newick),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Add brackets if these are removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (new_newick.front() != Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| new_newick.back() != Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick = Surround(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_done = Newick::DumbNewickToString(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_done);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define DEBUG_2436964926435498753298216832187<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_2436964926435498753298216832187<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsNewick(new_newick))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::DumbNewickToString(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back( { new_newick, 1 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return newicks;<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;return NewickCpp98::GetSimplerNewicksFrequencyPairs(n);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
<br/>
const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Newick::GetSimplerBinaryNewicksFrequencyPairs(<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
&nbsp;&nbsp;assert(IsBinaryNewick(n));<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;assert(IsNewick(n));<br/>
&nbsp;&nbsp;assert(IsBinaryNewick(n));<br/>
<br/>
&nbsp;&nbsp;//If newick is simple (by counting the number of opening brackets),<br/>
&nbsp;&nbsp;//there are no simpler Newicks<br/>
&nbsp;&nbsp;if (std::count( n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open))==1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Simple newicks do not need to be simplified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size()==3 || n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[0]==bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[n.size()-1]==bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n.size() == 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[1]&gt;1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,n[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size()==4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[1] == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[2]+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_close));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,n[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[2] == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[1]+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_close));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,n[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//newick is complex<br/>
&nbsp;&nbsp;//Generate other Newicks and their coefficients<br/>
&nbsp;&nbsp;const int sz = n.size();<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = n[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x &lt; 0) //x is not a digit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If x is not next to a digit, there is no simplification<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[i-1]&lt;0 &amp;&amp; n[i+1]&lt;1) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If next to the x in a digit, merge these and remove their brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Is the 1 left of a value?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[i-1]==bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i+1] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int new_value = n[i+1] + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n.begin(),n.begin() + i - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.push_back(new_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i+2] &lt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(n.begin() + i + 3,n.end(),std::back_inserter(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!IsNewick(next))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; DumbNewickToString(n)&nbsp;&nbsp;&lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; DumbNewickToString(next) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InspectInvalidNewick(std::cerr,next);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,x));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Is the 1 to the right of a value?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i-1] &gt; 0); //&lt; The other value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int new_value = n[i-1] + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next(n.begin(),n.begin()+i-2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.push_back(new_value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i+1] &lt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(n.begin() + i + 2,n.end(),std::back_inserter(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,x));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; next = n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--next[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(std::make_pair(next,x));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::Newick::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.1";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Newick::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"20xx-xx-xx: Version 1.0: initial version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-29: Version 1.1: version history"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
void ribi::Newick::InspectInvalidNewick(std::ostream&amp; os, const std::vector&lt;int&gt;&amp; v) noexcept<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; "InspectInvalidNewick on: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; DumbNewickToString(v) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CheckNewick(v);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os &lt;&lt; "Invalidity caused by: " &lt;&lt; e.what() &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Newick::IsNewick(const std::string&amp; s) noexcept<br/>
{<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CheckNewick(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (const std::exception&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
bool ribi::Newick::IsSimple(const std::vector&lt;int&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(v));<br/>
&nbsp;&nbsp;//A Newick is simple if it contains no '(' after the initial one<br/>
&nbsp;&nbsp;return std::count(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin()+1,v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(bracket_open)<br/>
&nbsp;&nbsp;) == 0;<br/>
}<br/>
<br/>
bool ribi::Newick::IsBinaryNewick(std::vector&lt;int&gt; v)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(v));<br/>
&nbsp;&nbsp;if (IsUnaryNewick(v)) return false;<br/>
<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Only numbers?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (IsSimple(v))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Binary Newick has size 4, for example '(1,2)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sz == 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (GetLeafMaxArity(v) &gt; 2) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v = Newick::ReplaceLeave(v,42);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Newick::IsNewick(const std::vector&lt;int&gt;&amp; v) noexcept<br/>
{<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CheckNewick(v);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
///IsTrinaryNewick checks if a Newick is a trinary tree,<br/>
///that is: each node splits in three or less branches<br/>
///From http://www.richelbilderbeek.nl/CppIsTrinaryNewick.htm<br/>
bool ribi::Newick::IsTrinaryNewick(std::vector&lt;int&gt; v)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(v));<br/>
&nbsp;&nbsp;if (IsUnaryNewick(v)) return false;<br/>
&nbsp;&nbsp;if (IsBinaryNewick(v)) return false;<br/>
<br/>
&nbsp;&nbsp;bool trinarity_found = false;<br/>
<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Only numbers?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (IsSimple(v))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Ternary Newick has size 5, for example '(1,2,3)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return trinarity_found || sz == 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int leaf_max_arity = GetLeafMaxArity(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (leaf_max_arity &gt; 3) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (leaf_max_arity == 3) trinarity_found = true;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v = Newick::ReplaceLeave(v,42);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Newick::IsUnaryNewick(const std::vector&lt;int&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(v));<br/>
&nbsp;&nbsp;return v.size() == 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; v[0] == Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; v[1] &gt;&nbsp;&nbsp;0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; v[2] == Newick::bracket_close;<br/>
}<br/>
<br/>
const std::string ribi::Newick::NewickToString(const std::vector&lt;int&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;assert(v.size() &gt; 2 &amp;&amp; "A Newick must at least have one single value");<br/>
&nbsp;&nbsp;assert(v[0] == bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "A std::vector&lt;int&gt; Newick must start with a bracket_open");<br/>
&nbsp;&nbsp;assert(v[v.size() - 1] == bracket_close<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "A std::vector&lt;int&gt; Newick must end with a bracket_close");<br/>
&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;s.reserve(2 * v.size()); //Just a guess<br/>
&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (x &gt;= 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=boost::lexical_cast&lt;std::string&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i+1&lt;sz &amp;&amp; "Must not end with number");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int next = v[i+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (next &gt; 0 || next == bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (x==bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+="(";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (x==bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=")";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Final closing bracket?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i+1==sz) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int next = v[i+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (next &gt; 0 || next == bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s+=",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "A std::vector&lt;int&gt; Newick must consist of brackets and values only");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
///SortNewick orders a Newick is such a way<br/>
///that all opening brackets are at the left side.<br/>
///For example (1,(2,3)) becomes ((2,3),1)<br/>
/*<br/>
std::string SortNewick(const std::string&amp; newick)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(newick));<br/>
&nbsp;&nbsp;//All leaves are 'cut' by replacing them with an x<br/>
&nbsp;&nbsp;std::string s = newick;<br/>
&nbsp;&nbsp;std::string n = "";<br/>
&nbsp;&nbsp;//Find initial leaf and replace it with x<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::xpressive::sregex r("\\(\\d+,\\d+\\)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string::const_iterator start = s.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string::const_iterator end = s.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::match_results&lt;std::string::const_iterator&gt; what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::regex_search(start, end, what, r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n = what.str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s = boost::regex_replace(s,r,"x");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//When all leaves are cut, s == 'x'<br/>
&nbsp;&nbsp;while (s!="x")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Obtain leaf with x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::xpressive::sregex r("(\\(x,\\d+\\))|(\\(\\d+,x\\))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string::const_iterator start = s.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string::const_iterator end = s.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::match_results&lt;std::string::const_iterator&gt; what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Search for inner leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::regex_search(start, end, what, r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string l = what.str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Search leaf for digit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::regex_search(l.begin(), l.end(), what,boost::regex("\\d+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Add digit to n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n = "(" + n + "," + what.str() + ")";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Replace the leaf by an x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s = boost::regex_replace(s,r,"x");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return n;<br/>
}<br/>
*/<br/>
<br/>
const std::vector&lt;int&gt; ribi::Newick::ReplaceLeave(<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; newick,<br/>
&nbsp;&nbsp;const int value)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(newick) &amp;&amp; "Only a valid Newick can have its leaves replaced");<br/>
&nbsp;&nbsp;assert(!IsSimple(newick) &amp;&amp; "There must a leaf to simplify");<br/>
&nbsp;&nbsp;typedef std::vector&lt;int&gt;::const_iterator Iterator;<br/>
&nbsp;&nbsp;const Iterator end = newick.end();<br/>
&nbsp;&nbsp;for (Iterator from = newick.begin(); from!=end; ++from)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*from != Newick::bracket_open) continue;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (Iterator to = from + 1; to!=end; ++to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (*to &gt; 0) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (*to == Newick::bracket_open) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (*to == Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick(newick.begin(),from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick.push_back(value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(to + 1,newick.end(),std::back_inserter(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new_newick;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Should not get here");<br/>
}<br/>
<br/>
const std::vector&lt;int&gt; ribi::Newick::StringToNewick(const std::string&amp; newick)<br/>
{<br/>
&nbsp;&nbsp;assert(IsNewick(newick));<br/>
&nbsp;&nbsp;assert(!newick.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "s must not be empty");<br/>
&nbsp;&nbsp;assert(newick[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0]=='('<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "s must begin with a '('");<br/>
&nbsp;&nbsp;assert(newick[newick.size()-1]==')'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "s must end with a ')'");<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v;<br/>
&nbsp;&nbsp;int value = 0;<br/>
<br/>
&nbsp;&nbsp;for(const char i: newick)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i == '(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (value!=0) v.push_back(value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i == ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (value!=0) v.push_back(value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i == ',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (value!=0) v.push_back(value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &gt;= '0' &amp;&amp; i &lt;= '9'); //Should be a number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;value*=10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;value+=boost::lexical_cast&lt;int&gt;(i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(value == 0 &amp;&amp; "Final bracket close must set value to zero");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;int&gt; ribi::Newick::Surround(const std::vector&lt;int&gt;&amp; newick)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; new_newick;<br/>
&nbsp;&nbsp;new_newick.push_back(Newick::bracket_open);<br/>
&nbsp;&nbsp;std::copy(newick.begin(),newick.end(),std::back_inserter(new_newick));<br/>
&nbsp;&nbsp;new_newick.push_back(Newick::bracket_close);<br/>
&nbsp;&nbsp;return new_newick;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
///Test tests all Newick functions<br/>
void ribi::Newick::Test()<br/>
{<br/>
&nbsp;&nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__<br/>
&nbsp;&nbsp;///\note<br/>
&nbsp;&nbsp;///The tests below must be put back in again once<br/>
&nbsp;&nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438<br/>
<br/>
<br/>
&nbsp;&nbsp;TRACE("Testing basic Newick functionality");<br/>
&nbsp;&nbsp;//Check difference between C++98 and C++0x<br/>
&nbsp;&nbsp;assert(Newick::CreateValidTrinaryNewicks() == NewickCpp98::CreateValidTrinaryNewicks());<br/>
&nbsp;&nbsp;assert(Newick::GetKnownProbabilities() == NewickCpp98::GetKnownProbabilities());<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;//Check conversions from std::string to std::vector #1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::StringToNewick("(11,(22,33))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[0]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[1]==11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[2]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[3]==22);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[4]==33);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[5]==Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[6]==Newick::bracket_close);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if well-formed Newicks are accepted<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; s,v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_REJECTED_NEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string debug = "I must be accepted: " + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(debug);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if ill-formed Newicks are rejected<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateInvalidNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; s,v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_REJECTED_NEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string debug = "I must be rejected: " + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(debug);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot test if std::vector&lt;int&gt; versions are rejected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//because Newick::StringToNewick assumes a valid Newick<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const std::vector&lt;int&gt; v = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(!Newick::IsNewick(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check conversions from std::string to std::vector #2<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::StringToNewick("((11,22),33)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[0]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[1]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[2]==11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[3]==22);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[4]==Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[5]==33);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[6]==Newick::bracket_close);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,(3,1))"))==0);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(3,(1,1))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,((1,1),(1,1)))"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,((1,1),(2,2)))"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,(2,3))"))==0);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(99,99)"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(3,(2,2))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(2,(2,2))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("((3,3),(2,2))"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("((3,3),(3,3))"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("((3,3),(3,4))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((3,3),(4,4)),5)"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((3,3),(5,5)),5)"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((5,5),(5,5)),5)"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((5,5),(5,5)),(4,4))"))==4);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((5,5),(4,4)),(4,4))"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((4,4),(4,4)),(4,4))"))==4);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(3,(1,1))"))==10);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(1,(3,1))"))==20);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(1,(1,(1,(1,1))))"))==60);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(1,((1,1),(1,1)))"))==15);<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(1))=="1");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(2))=="2");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(3))=="6");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(4))=="24");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(5))=="120");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(6))=="720");<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1)"))&nbsp;&nbsp; == 1);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12)"))&nbsp;&nbsp;== 1);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123)")) == 1);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2)"))&nbsp;&nbsp; == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2)"))&nbsp;&nbsp;== 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2)")) == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2))"))&nbsp;&nbsp; == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2))"))&nbsp;&nbsp;== 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2))")) == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2),3)"))&nbsp;&nbsp; == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2),3)"))&nbsp;&nbsp;== 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2),3)")) == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2,3)"))&nbsp;&nbsp; == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2,3)"))&nbsp;&nbsp;== 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2,3)")) == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2,3))"))&nbsp;&nbsp; == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2,3))"))&nbsp;&nbsp;== 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2,3))")) == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2,3),4)"))&nbsp;&nbsp; == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2,3),4)"))&nbsp;&nbsp;== 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2,3),4)")) == 3);<br/>
<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(&nbsp;&nbsp;2.0,Newick::CalcDenominator(Newick::StringToNewick("(1,1)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(&nbsp;&nbsp;6.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),1)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 26.0,Newick::CalcDenominator(Newick::StringToNewick("(1,2)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),2)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,1))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 50.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),3)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),3)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((3,1),2)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),1)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(102.0,Newick::CalcDenominator(Newick::StringToNewick("((2,1),4)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(152.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,(3,3)))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(162.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),4)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),(3,4))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((4,1),(2,3))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((3,4),(1,2))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),(4,1))"),10.0)));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = { 0,1,2,3,4,5,6 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,3,2)==3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,4,2)==4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,5,2)==5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,6,2)==6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,3,4)==3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,2,4)==2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,1,4)==1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,0,4)==0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = Newick::GetDepth(Newick::StringToNewick("(9,(9,9))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; x = { 0,0,1,1,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w == x);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("((2,2),1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,1,1,1,1,0,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2),1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,1,1,0,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),4,(5,6))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,1,1,0,1,1,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),(5,6))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,1,1,1,1,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,(3,4)),((5,6),7))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,2,2,2,2,1,1,2,2,2,2,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test GetRootBranches<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(1)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2)")) != v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,(2,3))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(1)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2,3)")) != v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2,(3,4))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(1)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(3,4)")) != v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Compare C++98 and C++0x version<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidBinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; s,v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::GetRootBranches(n) == NewickCpp98::GetRootBranches(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Check if binary and trinary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidBinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; s,v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if unary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidUnaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; s,v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::GetLeafMaxArity(n)&lt;=1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::IsUnaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsTrinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if binary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidBinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; s,v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::GetLeafMaxArity(n)&lt;=2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsUnaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsTrinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if trinary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidTrinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; s,v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::GetLeafMaxArity(n)&lt;=3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsUnaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::IsTrinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test binary Newick<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(2,3))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = GetSimplerNewicks(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//#define DEBUG_1_BO_1_2_3_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_1_BO_1_2_3_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const auto&amp; t,n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(2,3,4))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = GetSimplerNewicks(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,3,3))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(1,3,4))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = GetSimplerNewicks(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//#define DEBUG_1_BO_1_3_4_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_1_BO_1_3_4_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(boost::lexical_cast&lt;std::string&gt;(n.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const auto&amp; t,n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(4,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(3,5))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,2,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,3))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(1,3,4))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_1_134<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; Newick::NewickToString(p.first) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(4,4))"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(3,5))"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(1,2,4))"),3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(1,3,3))"),4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((1,1),2)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//#define DEBUG_BO_1_1_BC_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_BO_1_1_BC_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const auto&amp; t,n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2,2)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((1,1),1)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((1,1),2)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Pair&gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_11_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; Newick::NewickToString(p.first) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(2,2)"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((1,1),1)"),2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,1),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(3,4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((1,1),4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((2,1),3)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,1),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Pair&gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_21_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(p.first));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(3,4)"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((1,1),4)"),2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((2,1),3)"),4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,3),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((1,3),4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((2,2),4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((2,3),3)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,3),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Pair&gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_23_4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; Newick::NewickToString(p.first) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((1,3),4)"),2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((2,2),4)"),3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((2,3),3)"),4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Compare GetSimplerNewicks and<br/>
&nbsp;&nbsp;//GetSimplerNewicksFrequencyPairs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; newicks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::CreateValidNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const std::string&amp; newick_str,newicks)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; newick<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::StringToNewick(newick_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::GetSimplerNewicks(newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; v2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::GetSimplerNewicksFrequencyPairs(newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(v1.size() == v2.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(v1.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=size; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define DEBUG_COMPARE_GSN_VS_GSNFP<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_COMPARE_GSN_VS_GSNFP<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v1[i] != v2[i].first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR: DIFFERENT NEWICK SIMPLIFICATIONS");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(v1[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(v2[i].first));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(v1[i] == v2[i].first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::GetSimplerNewicksFrequencyPairs(newick)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== NewickCpp98::GetSimplerNewicksFrequencyPairs(newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;NewickCpp98::Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppNewick/newick.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppNewick/newick.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Newick, Newick functions<br/>
Copyright (C) 2010-2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef NEWICK_H<br/>
#define NEWICK_H<br/>
<br/>
#include &lt;cmath&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;boost/tuple/tuple.hpp&gt;<br/>
<br/>
#include "BigIntegerLibrary.hh"<br/>
#include "newickcpp98.h"<br/>
#include "newickstorage.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
///namespace Newick contains general Newick functions,<br/>
///not using an Newick class<br/>
namespace Newick<br/>
{<br/>
&nbsp;&nbsp;enum { bracket_open&nbsp;&nbsp;= -1 };<br/>
&nbsp;&nbsp;enum { bracket_close = -2 };<br/>
&nbsp;&nbsp;enum { comma&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = -3 };<br/>
&nbsp;&nbsp;enum { new_line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= -4 };<br/>
&nbsp;&nbsp;enum { null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= -5 };<br/>
<br/>
&nbsp;&nbsp;///fuzzy_equal_to is a predicate to test two doubles for equality<br/>
&nbsp;&nbsp;///with a certain tolerance. A tolerance of 0.0 denotes that<br/>
&nbsp;&nbsp;///an exact match is requested. Note that the value of 0.0 cannot<br/>
&nbsp;&nbsp;///be compared fuzzily.<br/>
&nbsp;&nbsp;//From http://www.richelbilderbeek.nl/CppFuzzy_equal_to.htm<br/>
<br/>
&nbsp;&nbsp;#pragma GCC diagnostic push<br/>
&nbsp;&nbsp;#pragma GCC diagnostic ignored "-Weffc++"<br/>
&nbsp;&nbsp;struct fuzzy_equal_to : public std::binary_function&lt;double,double,bool&gt;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fuzzy_equal_to(const double tolerance = 0.01)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: m_tolerance(tolerance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(tolerance &gt;= 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bool operator()(const double lhs, const double rhs) const<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double d = std::fabs(m_tolerance * lhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rhs &gt; lhs - d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rhs &lt; lhs + d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double m_tolerance;<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;#pragma GCC diagnostic pop<br/>
<br/>
&nbsp;&nbsp;///CreateVector creates a std::vector from three arguments<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCreateVector.htm<br/>
<br/>
&nbsp;&nbsp;template &lt;class T&gt;<br/>
&nbsp;&nbsp;const std::vector&lt;T&gt; CreateVector(const T&amp; a, const T&amp; b, const T&amp; c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;T&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.reserve(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;///AllAboutEqual tests if all values in a std::vector are about equal.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppAllAboutEqual.htm<br/>
&nbsp;&nbsp;bool AllAboutEqual(const std::vector&lt;double&gt;&amp; v,const double tolerance = 0.01);<br/>
<br/>
&nbsp;&nbsp;///CalcComplexity calculates the complexity of a Newick.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCalcComplexity.htm<br/>
&nbsp;&nbsp;const BigInteger CalcComplexity(const std::vector&lt;int&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///CalcNumOfCombinations returns the number of combinations a Newick can have.<br/>
&nbsp;&nbsp;///<br/>
&nbsp;&nbsp;///The number of possible combinations equals<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp; !(v0 + v1 + v2 + etc)<br/>
&nbsp;&nbsp;/// N = -------------------------- / 2^number_of_symmetries<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp; !v0 * !v1 * !v2 * etc<br/>
&nbsp;&nbsp;///<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<br/>
&nbsp;&nbsp;///&nbsp;&nbsp; = --- / 2^number_of_symmetries<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d<br/>
&nbsp;&nbsp;///<br/>
&nbsp;&nbsp;/// where v denotes an element in vector v in range [1,-&gt; &gt;<br/>
&nbsp;&nbsp;/// where v0 denotes the first element in vector v<br/>
&nbsp;&nbsp;/// and where !v0 denotes the factorial of v0<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp; {factorial(!SUM(v)) product terms}<br/>
&nbsp;&nbsp;/// N = --------------------------------------------------<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp; {product terms} + { number_symmetries times a '2'}<br/>
&nbsp;&nbsp;///<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp; numerator_terms<br/>
&nbsp;&nbsp;/// N = --------------------------------------------------<br/>
&nbsp;&nbsp;///&nbsp;&nbsp;&nbsp;&nbsp; denominator_terms with appended number_symmetries times a '2'<br/>
&nbsp;&nbsp;///<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCalcNumOfCombinationsBinary.htm<br/>
&nbsp;&nbsp;const BigInteger CalcNumOfCombinationsBinary(const std::vector&lt;int&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///CalcNumOfSymmetries calculates the number of symmetries in a Newick.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCalcNumOfSymmetriesBinary.htm<br/>
&nbsp;&nbsp;const BigInteger CalcNumOfSymmetriesBinary(std::vector&lt;int&gt; v);<br/>
<br/>
&nbsp;&nbsp;double CalcDenominator(const std::vector&lt;int&gt;&amp; v,const double theta);<br/>
<br/>
&nbsp;&nbsp;///CalcProbabilitySimpleNewick returns the probability of<br/>
&nbsp;&nbsp;///a Newick for a value of theta<br/>
&nbsp;&nbsp;///using the Ewens formula<br/>
&nbsp;&nbsp;double CalcProbabilitySimpleNewick(const std::vector&lt;int&gt;&amp; v,const double theta);<br/>
<br/>
&nbsp;&nbsp;///CheckNewick checks if a std::string is a valid Newick.<br/>
&nbsp;&nbsp;///If this std::string is not a valid Newick,<br/>
&nbsp;&nbsp;///CheckNewick throws an exception with a detailed description<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCheckNewick.htm<br/>
&nbsp;&nbsp;void CheckNewick(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///CheckNewick checks if a std::vector&lt;int&gt; is a valid Newick.<br/>
&nbsp;&nbsp;///If this std::vector&lt;int&gt; is not a valid Newick,<br/>
&nbsp;&nbsp;///CheckNewick throws an exception with a detailed description<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCheckNewick.htm<br/>
&nbsp;&nbsp;void CheckNewick(const std::vector&lt;int&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///CreateInvalidNewicks creates std::strings<br/>
&nbsp;&nbsp;///that cannot and must not be converted to a Newick<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCreateInvalidNewicks.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; CreateInvalidNewicks() noexcept;<br/>
<br/>
&nbsp;&nbsp;///CreateRandomNewick creates an unsorted Newick string,<br/>
&nbsp;&nbsp;///with n values, with each value e [0,max&gt;.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCreateRandomNewick.htm<br/>
&nbsp;&nbsp;const std::string CreateRandomNewick(const int n,const int max);<br/>
<br/>
<br/>
&nbsp;&nbsp;///CreateRandomBinaryNewickVector creates an unsorted Newick<br/>
&nbsp;&nbsp;///std::vector&lt;int&gt;, with n values, with each value e [0,max&gt;.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCreateRandomBinaryNewickVector.htm<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; CreateRandomBinaryNewickVector(const int n,const int max);<br/>
<br/>
&nbsp;&nbsp;///CreateValidBinaryNewicks creates std::strings<br/>
&nbsp;&nbsp;///that can be converted to a BinaryNewickVector.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCreateValidBinaryNewicks.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; CreateValidBinaryNewicks() noexcept;<br/>
<br/>
&nbsp;&nbsp;///CreateValidNewicks creates std::strings<br/>
&nbsp;&nbsp;///that are valid newicks.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCreateValidNewicks.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; CreateValidNewicks() noexcept;<br/>
<br/>
&nbsp;&nbsp;///CreateValidTrinaryNewicks creates std::strings<br/>
&nbsp;&nbsp;///that can be converted to a TrinaryNewickVector.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppCreateValidTinaryNewicks.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; CreateValidTrinaryNewicks() noexcept;<br/>
<br/>
&nbsp;&nbsp;///CreateValidUnaryNewicks creates unary Newick std::strings<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; CreateValidUnaryNewicks() noexcept;<br/>
<br/>
<br/>
&nbsp;&nbsp;///DumbNewickToString converts a Newick std::vector&lt;int&gt; to a<br/>
&nbsp;&nbsp;///standard-format std::string without error checking.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppDumbNewickToString.htm<br/>
&nbsp;&nbsp;const std::string DumbNewickToString(const std::vector&lt;int&gt;&amp; v);<br/>
<br/>
<br/>
&nbsp;&nbsp;///Factorial calculates the factorial of all std::vector elements.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppFactorial.htm<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; Factorial(const std::vector&lt;int&gt;&amp; v_original) noexcept;<br/>
<br/>
&nbsp;&nbsp;///FactorialBigInt returns the factorial of an integer<br/>
&nbsp;&nbsp;///as a BigInteger.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppFactorialBigInt.htm<br/>
&nbsp;&nbsp;const BigInteger FactorialBigInt(const int n) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Factorial calculates the factorial of a value.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppFactorial.htm<br/>
&nbsp;&nbsp;int Factorial(const int n) noexcept;<br/>
<br/>
&nbsp;&nbsp;int FindPosAfter(const std::vector&lt;int&gt;&amp; v,const int index,const int value);<br/>
&nbsp;&nbsp;int FindPosBefore(const std::vector&lt;int&gt;&amp; v,const int index,const int value);<br/>
<br/>
&nbsp;&nbsp;///GetDepth returns the depth of each Newick element<br/>
&nbsp;&nbsp;///Example #1<br/>
&nbsp;&nbsp;///(1,2,3)<br/>
&nbsp;&nbsp;///01 1 10<br/>
&nbsp;&nbsp;///Example #2<br/>
&nbsp;&nbsp;///((1,2),(3,(4,5)))<br/>
&nbsp;&nbsp;///000 00 00 00 0000 &lt;- depth layer 0 (comma's are skipped)<br/>
&nbsp;&nbsp;///.11 11 11 11 111. &lt;- depth layer 1<br/>
&nbsp;&nbsp;///... .. .. .2 22.. &lt;- depth layer 2<br/>
&nbsp;&nbsp;///011 11 11 22 2210 &lt;- result of GetDepth<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; GetDepth(const std::vector&lt;int&gt;&amp; n);<br/>
<br/>
<br/>
&nbsp;&nbsp;///GetFactorialTerms returns all terms from a factorial.<br/>
&nbsp;&nbsp;///For example, 4! return {1,2,3,4}<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppGetFactorialTerms.htm<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; GetFactorialTerms(const int n);<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::tuple&lt;std::string,double,double&gt; &gt; GetKnownProbabilities();<br/>
&nbsp;&nbsp;int GetLeafMaxArity(const std::vector&lt;int&gt;&amp; n);<br/>
<br/>
<br/>
&nbsp;&nbsp;///GetRootBranches obtains the root branches from a non-unary Newick.<br/>
&nbsp;&nbsp;///Examples:<br/>
&nbsp;&nbsp;///(1,2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; { 1&nbsp;&nbsp;&nbsp;&nbsp; , 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;///(1,2,3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; { 1&nbsp;&nbsp;&nbsp;&nbsp; , 2&nbsp;&nbsp;&nbsp;&nbsp; , 3&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;///((1,1),(2,2),(3,3)) -&gt; { (1,1) , (2,2) , (3,3) }<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppGetRootBranchesBinary.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetRootBranches(const std::vector&lt;int&gt;&amp; n);<br/>
<br/>
&nbsp;&nbsp;///GetRootBranchesBinary obtains the two root branches from a binary Newick.<br/>
&nbsp;&nbsp;///Examples:<br/>
&nbsp;&nbsp;///(1,2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; { 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , 2&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;///(1,(2,3))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; { 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , (2,3) }<br/>
&nbsp;&nbsp;///((1,2),(3,4))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; { (1,2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , (3,4) }<br/>
&nbsp;&nbsp;///(((1,2),(3,4)),(5,6)) -&gt; { ((1,2),(3,4)) , (5,6) }<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppGetRootBranchesBinary.htm<br/>
&nbsp;&nbsp;const std::pair&lt;std::vector&lt;int&gt;,std::vector&lt;int&gt; &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetRootBranchesBinary(const std::vector&lt;int&gt;&amp; n);<br/>
<br/>
&nbsp;&nbsp;///GetSimplerBinaryNewicks creates simpler, derived Newicks from a binary Newick.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerBinaryNewicks.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; GetSimplerBinaryNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; n);<br/>
<br/>
&nbsp;&nbsp;///GetSimplerNewicks creates simpler, derived Newicks from a Newick.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerNewicks.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; GetSimplerNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; n);<br/>
<br/>
&nbsp;&nbsp;///GetSimplerNewicksFrequencyPairs creates simpler, derived Newicks from a Newick.<br/>
&nbsp;&nbsp;///Its simpler Newicks are identical to those created by GetSimplerNewicks.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerNewicksFrequencyPairs.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetSimplerNewicksFrequencyPairs(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; n);<br/>
<br/>
&nbsp;&nbsp;///GetSimplerBinaryNewicksFrequencyPairs creates simpler, derived Newicks from a<br/>
&nbsp;&nbsp;///binary Newick as well as the frequency that is simplified.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerBinaryNewicksFrequencyPairs.htm<br/>
&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetSimplerBinaryNewicksFrequencyPairs(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; n);<br/>
&nbsp;&nbsp;const std::string GetVersion() noexcept;<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///InspectInvalidNewick writes the cause of the Newick invalidity<br/>
&nbsp;&nbsp;///to the std::ostream.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppInspectInvalidNewick.htm<br/>
&nbsp;&nbsp;void InspectInvalidNewick(std::ostream&amp; os, const std::vector&lt;int&gt;&amp; v) noexcept;<br/>
<br/>
&nbsp;&nbsp;///IsBinaryNewick checks if a Newick is a binary tree,<br/>
&nbsp;&nbsp;///that is: each node splits in two (not more) branches<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppIsBinaryNewick.htm<br/>
&nbsp;&nbsp;bool IsBinaryNewick(std::vector&lt;int&gt; v);<br/>
<br/>
&nbsp;&nbsp;bool IsTrinaryNewick(std::vector&lt;int&gt; v);<br/>
<br/>
&nbsp;&nbsp;///IsUnaryNewick checks if a Newick is a unary tree,<br/>
&nbsp;&nbsp;///that is: there is only one node.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppIsUnaryNewick.htm<br/>
&nbsp;&nbsp;bool IsUnaryNewick(const std::vector&lt;int&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///IsNewick returns true if a std::string is a valid Newick<br/>
&nbsp;&nbsp;///and false otherwise.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppIsNewick.htm<br/>
&nbsp;&nbsp;bool IsNewick(const std::string&amp; s) noexcept;<br/>
<br/>
&nbsp;&nbsp;///IsNewick returns true if a std::vector&lt;int&gt; is a valid Newick<br/>
&nbsp;&nbsp;///and false otherwise.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppIsNewick.htm<br/>
&nbsp;&nbsp;bool IsNewick(const std::vector&lt;int&gt;&amp; v) noexcept;<br/>
<br/>
&nbsp;&nbsp;///IsSimple returns true if the Newick std::vector contains<br/>
&nbsp;&nbsp;///leaves only. For example, the Newick '(1,2,3)' is simple,<br/>
&nbsp;&nbsp;///the Newick '((1,2),3)' is not simple<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppIsNewick.htm<br/>
&nbsp;&nbsp;bool IsSimple(const std::vector&lt;int&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///NewickToString converts a Newick std::vector&lt;int&gt; to a<br/>
&nbsp;&nbsp;///standard-format std::string.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppNewickToString.htm<br/>
&nbsp;&nbsp;const std::string NewickToString(const std::vector&lt;int&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///ReplaceLeave replaces the first leaf that it finds by a value.<br/>
&nbsp;&nbsp;///For example, using ReplaceLeave on '((1,2),(3,4))' with a value<br/>
&nbsp;&nbsp;///of 42 results in '(42,(3,4))'.<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; ReplaceLeave(const std::vector&lt;int&gt;&amp; newick,const int value);<br/>
<br/>
&nbsp;&nbsp;///StringToNewick converts a std::string to a Newick std::vector&lt;int&gt;<br/>
&nbsp;&nbsp;///StringToNewick assumes that the input is well-formed and<br/>
&nbsp;&nbsp;///has both trailing and tailing brackets.<br/>
&nbsp;&nbsp;///From http://www.richelbilderbeek.nl/CppNewickToVector.htm<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; StringToNewick(const std::string&amp; newick);<br/>
<br/>
&nbsp;&nbsp;///Surround surrounds the Newick with brackets<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; Surround(const std::vector&lt;int&gt;&amp; newick);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;void Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;char ValueToChar(const int value);<br/>
<br/>
&nbsp;&nbsp;template &lt;class NewickType&gt;<br/>
&nbsp;&nbsp;double CalculateProbability(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const NewickType&amp; n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double theta,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NewickStorage&lt;NewickType&gt;&amp; storage)<br/>
{<br/>
&nbsp;&nbsp;//#define TRACE_NEWICK_CALCULATEPROBABILITY<br/>
&nbsp;&nbsp;while(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Is n already known?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double p = storage.Find(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p!=0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check for simple phylogeny<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n.IsSimple())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double p = n.CalcProbabilitySimpleNewick(theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.Store(n,p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Complex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Generate other Newicks and their coefficients<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;double&gt; coefficients;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;NewickType&gt; newicks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double d = n.CalcDenominator(theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_NEWICK_CALCULATEPROBABILITY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("Denominator for "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ n.ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " = "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; NewickFrequencyPair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;NewickFrequencyPair&gt; newick_freqs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::GetSimplerNewicksFrequencyPairs(n.Peek());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(const NewickFrequencyPair&amp; p: newick_freqs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int frequency = p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(frequency &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (frequency == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(p.first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coefficients.push_back(theta / d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double f_d = static_cast&lt;double&gt;(frequency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(p.first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coefficients.push_back( (f_d*(f_d-1.0)) / d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_NEWICK_CALCULATEPROBABILITY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(std::string("BinaryNewickVector ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ Newick::NewickToString(p.first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " has coefficient "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(coefficients.back()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Ask help about these new Newicks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = newicks.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(newicks.size() == coefficients.size() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double p = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Recursive function call<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p+=(coefficients[i] * CalculateProbability(newicks[i],theta,storage));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.Store(n,p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::bad_alloc&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "std::bad_alloc\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "std::exception";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "Unknown exception\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;template &lt;class NewickType&gt;<br/>
&nbsp;&nbsp;double CalculateProbabilityMessy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const NewickType&amp; n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double theta,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NewickStorage&lt;NewickType&gt;&amp; storage)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;//#define TRACE_CALCULATEPROBABILITYMESSY<br/>
&nbsp;&nbsp;while(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Is n already known?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double p = storage.Find(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p!=0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check for simple phylogeny<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n.IsSimple())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double p = n.CalcProbabilitySimpleNewick(theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.Store(n,p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Complex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Generate other Newicks and their coefficients<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;NewickType&gt; newicks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;double&gt; coefficients;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double d = n.CalcDenominator(theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_CALCULATEPROBABILITYMESSY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("Denominator for "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ n.ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " = "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; v = n.Peek();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int x = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x &lt; 0) //x is not a digit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NewickType next_newick = n.TermIsOne(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!next_newick.Empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coefficients.push_back(theta / d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NewickType next_newick = n.TermIsNotOne(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!next_newick.Empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(next_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const double x_d = static_cast&lt;double&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coefficients.push_back( (x_d*(x_d-1.0)) / d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Ask help about these new Newicks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sz = newicks.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(newicks.size() == coefficients.size() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double p = 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Recursive function call<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p+=(coefficients[i] * CalculateProbabilityMessy(newicks[i],theta,storage));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.Store(n,p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::bad_alloc&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "std::bad_alloc\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "std::exception";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "Unknown exception\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
*/<br/>
//#endif<br/>
<br/>
<br/>
} //~namespace Newick<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // NEWICK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppNewick/newickcpp98.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppNewick/newickcpp98.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "newickcpp98.h"<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#include &lt;boost/tuple/tuple.hpp&gt;<br/>
#include &lt;boost/tuple/tuple_comparison.hpp&gt;<br/>
<br/>
#include "fuzzy_equal_to.h"<br/>
#include "newick.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///CreateValidTrinaryNewicks creates std::strings<br/>
///that can be converted to a TrinaryNewickVector.<br/>
///From http://www.richelbilderbeek.nl/CppCreateValidTinaryNewicks.htm<br/>
const std::vector&lt;std::string&gt; ribi::NewickCpp98::CreateValidTrinaryNewicks()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("(1,1,1)");<br/>
&nbsp;&nbsp;v.push_back("(1,2,3)");<br/>
&nbsp;&nbsp;v.push_back("((1,1),1,1)");<br/>
&nbsp;&nbsp;v.push_back("(1,(1,1),1)");<br/>
&nbsp;&nbsp;v.push_back("(1,1,(1,1))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2,3,4))");<br/>
&nbsp;&nbsp;v.push_back("(1,2,(3,4))");<br/>
&nbsp;&nbsp;v.push_back("(1,2,(3,4,5))");<br/>
&nbsp;&nbsp;v.push_back("((1,2,3),4,5)");<br/>
&nbsp;&nbsp;v.push_back("(11,22,33)");<br/>
&nbsp;&nbsp;v.push_back("(11,(22,33,44))");<br/>
&nbsp;&nbsp;v.push_back("(11,22,(33,44))");<br/>
&nbsp;&nbsp;v.push_back("(11,22,(33,44,55))");<br/>
&nbsp;&nbsp;v.push_back("((11,22,33),44,55)");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4),(5,6))");<br/>
&nbsp;&nbsp;v.push_back("((1,2,3),(4,5),(6,7))");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4,5),(6,7))");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4),(5,6,7))");<br/>
&nbsp;&nbsp;v.push_back("((1,2,3),(4,5),(6,7))");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4,5),(6,7))");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4),(5,6,7))");<br/>
&nbsp;&nbsp;v.push_back("((1,2,3),(4,5,6),(7,8))");<br/>
&nbsp;&nbsp;v.push_back("((1,2),(3,4,5),(6,7,8))");<br/>
&nbsp;&nbsp;v.push_back("((1,2,3),(4,5),(6,7,8))");<br/>
&nbsp;&nbsp;v.push_back("((1,2,3),(4,5,6),(7,8,9))");<br/>
&nbsp;&nbsp;v.push_back("((11,22,33),(44,55,66),(77,88,99))");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
std::vector&lt;boost::tuple&lt;std::string,double,double&gt; &gt; ribi::NewickCpp98::GetKnownProbabilities()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::tuple&lt;std::string,double,double&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;//Sum equals 1<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1)"&nbsp;&nbsp;, 10.0, 1.0000000));<br/>
&nbsp;&nbsp;//Sum equals 2<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2)"&nbsp;&nbsp;, 10.0, 0.0909091));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1)", 10.0, 0.9090909));<br/>
&nbsp;&nbsp;//Sum equals 3<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3)"&nbsp;&nbsp;, 10.0, 0.0151515));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,2)", 10.0, 0.0757576));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,1)", 10.0, 0.0757576));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1))", 10.0, 0.2525253));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1),1)", 10.0, 0.2525253));<br/>
&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,1)"&nbsp;&nbsp;, 10.0, 0.7575758));<br/>
&nbsp;&nbsp;//Sum equals 4<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(4)"&nbsp;&nbsp;, 10.0, 0.0034965));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,3)", 10.0, 0.0116550));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,2)", 10.0, 0.0058275));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3,1)", 10.0, 0.0116550));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,2))", 10.0, 0.0194250));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,1))", 10.0, 0.0194250));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,1))", 10.0, 0.0194250));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,2),1)", 10.0, 0.0194250));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((2,1),1)", 10.0, 0.0194250));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1),2)", 10.0, 0.0194250));<br/>
&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,2)", 10.0, 0.0582751));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,2,1)", 10.0, 0.0582751));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,1,1)", 10.0, 0.0582751));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(1,1))", 10.0, 0.1295001));&nbsp;&nbsp; //(1)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1),1)", 10.0, 0.1295001));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1),1,1)", 10.0, 0.1295001));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,1))", 10.0, 0.0971251));&nbsp;&nbsp; //(2)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1),1)", 10.0, 0.0971251));<br/>
&nbsp;&nbsp;//Quadrary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,1,1)", 10.0, 0.5827505));<br/>
&nbsp;&nbsp;//Sum equals 5<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,4)", 10.0, 0.0024975));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,3)", 10.0, 0.0008325));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3,2)", 10.0, 0.0008325));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(4,1)", 10.0, 0.0024975));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,3))", 10.0, 0.0028305));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,2))", 10.0, 0.0012950));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(3,1))", 10.0, 0.0028305));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,2))", 10.0, 0.0014338));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(2,1))", 10.0, 0.0014338));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3,(1,1))", 10.0, 0.0026640));<br/>
&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(1,2))"&nbsp;&nbsp;, 10.0, 0.0092731));&nbsp;&nbsp; //(3)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(2,1))"&nbsp;&nbsp;, 10.0, 0.0092731));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(1,1,1))", 10.0, 0.0348263));&nbsp;&nbsp; //(4)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,1),1)", 10.0, 0.0348263));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1),1,1)", 10.0, 0.0348263));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,1,1))"&nbsp;&nbsp;, 10.0, 0.0070069));&nbsp;&nbsp; //(5)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1),2)"&nbsp;&nbsp;, 10.0, 0.0070069));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,1,(1,1))", 10.0, 0.0692918));&nbsp;&nbsp; //(6)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,2,(1,1))"&nbsp;&nbsp;, 10.0, 0.0092223));&nbsp;&nbsp; //(7)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,1,(1,1))"&nbsp;&nbsp;, 10.0, 0.0092223));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1),2)"&nbsp;&nbsp;, 10.0, 0.0092223));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,1),1)"&nbsp;&nbsp;, 10.0, 0.0092223));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1),1,2)"&nbsp;&nbsp;, 10.0, 0.0092223));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1),2,1)"&nbsp;&nbsp;, 10.0, 0.0092223));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,2))"&nbsp;&nbsp;, 10.0, 0.0069190));&nbsp;&nbsp; //(9)(confirmed)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,2,1))"&nbsp;&nbsp;, 10.0, 0.0069190));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,1,1))"&nbsp;&nbsp;, 10.0, 0.0069190));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,2),1)"&nbsp;&nbsp;, 10.0, 0.0069190));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,2,1),1)"&nbsp;&nbsp;, 10.0, 0.0069190));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((2,1,1),1)"&nbsp;&nbsp;, 10.0, 0.0069190));<br/>
&nbsp;&nbsp;//Quadrary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,1,1))", 10.0, 0.0415140));&nbsp;&nbsp; //(8)(confirmed)<br/>
&nbsp;&nbsp;//Pentary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,1,1,1)"&nbsp;&nbsp;, 10.0, 0.4162504));<br/>
&nbsp;&nbsp;//Sum equals 6<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,5)", 10.0, 0.0006660));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,4)", 10.0, 0.0001665));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3,3)", 10.0, 0.0001110));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,4))", 10.0, 0.0005804));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,3))", 10.0, 0.0001679));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(3,2))", 10.0, 0.0001679));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(4,1))", 10.0, 0.0005804));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,3))", 10.0, 0.0001991));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(2,2))", 10.0, 0.0000925));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(3,1))", 10.0, 0.0001991));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3,(1,2))", 10.0, 0.0001880));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3,(2,1))", 10.0, 0.0001880));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(4,(1,1))", 10.0, 0.0005043));<br/>
&nbsp;&nbsp;//Trinary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(1,3))"&nbsp;&nbsp;, 10.0, 0.0012712));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(2,2))"&nbsp;&nbsp;, 10.0, 0.0005563));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(3,1))"&nbsp;&nbsp;, 10.0, 0.0012712));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,3),1)"&nbsp;&nbsp;, 10.0, 0.0012712));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,2),1)"&nbsp;&nbsp;, 10.0, 0.0005563));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(3,1),1)"&nbsp;&nbsp;, 10.0, 0.0012712));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,3),1,1)"&nbsp;&nbsp;, 10.0, 0.0012712));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((2,2),1,1)"&nbsp;&nbsp;, 10.0, 0.0005563));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((3,1),1,1)"&nbsp;&nbsp;, 10.0, 0.0012712));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,2,(1,2))"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,1,(1,2))"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,2,(2,1))"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,1,(2,1))"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,1),2)"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,2),2)"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(2,1),1)"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,2),1)"&nbsp;&nbsp;, 10.0, 0.0006346));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,3,(1,1))"&nbsp;&nbsp;, 10.0, 0.0011913));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1),3)"&nbsp;&nbsp;, 10.0, 0.0011913));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1),1,3)"&nbsp;&nbsp;, 10.0, 0.0011913));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(3,(1,1),1)"&nbsp;&nbsp;, 10.0, 0.0011913));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1),3,1)"&nbsp;&nbsp;, 10.0, 0.0011913));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(1,1,2))", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(1,2,1))", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,(2,1,1))", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,2),1)", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,2,1),1)", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,1,1),1)", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,2),1,1)", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,2,1),1,1)", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((2,1,1),1,1)", 10.0, 0.0023165));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,2,(1,1,1))", 10.0, 0.0023323));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,1,(1,1,1))", 10.0, 0.0023323));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,1),2)", 10.0, 0.0023323));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,1,1),1)", 10.0, 0.0023323));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1),1,2)", 10.0, 0.0023323));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1),2,1)", 10.0, 0.0023323));<br/>
&nbsp;&nbsp;//Quadrary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,1,2))"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,2,1))"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,2,1,1))"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(2,1,1,1))"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1,2),1)"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,2,1),1)"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,2,1,1),1)"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((2,1,1,1),1)"&nbsp;&nbsp;, 10.0, 0.0027574));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(2,(1,1,1,1))"&nbsp;&nbsp;, 10.0, 0.0028154));<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1,1),2)"&nbsp;&nbsp;, 10.0, 0.0028154));<br/>
&nbsp;&nbsp;//Pentary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,(1,1,1,1,1))", 10.0, 0.0183824));&nbsp;&nbsp; //(7)<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("((1,1,1,1,1),1)", 10.0, 0.0183824));<br/>
&nbsp;&nbsp;//Hexary<br/>
&nbsp;&nbsp;v.push_back(boost::make_tuple("(1,1,1,1,1,1)"&nbsp;&nbsp;, 10.0, 0.2775003));<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
///GetRootBranches obtains the root branches from a non-unary Newick.<br/>
///Examples:<br/>
///(1,2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; { 1&nbsp;&nbsp;&nbsp;&nbsp; , 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
///(1,2,3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; { 1&nbsp;&nbsp;&nbsp;&nbsp; , 2&nbsp;&nbsp;&nbsp;&nbsp; , 3&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
///((1,1),(2,2),(3,3)) -&gt; { (1,1) , (2,2) , (3,3) }<br/>
///From http://www.richelbilderbeek.nl/CppGetRootBranchesBinary.htm<br/>
const std::vector&lt;std::vector&lt;int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::NewickCpp98::GetRootBranches(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;//#define DEBUG_GETROOTBRANCHES<br/>
&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_GETROOTBRANCHES<br/>
&nbsp;&nbsp;TRACE_FUNC();<br/>
&nbsp;&nbsp;TRACE(Newick::NewickToString(n));<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;assert(Newick::IsNewick(n));<br/>
&nbsp;&nbsp;assert(!Newick::IsUnaryNewick(n));<br/>
<br/>
&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;int&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;if (Newick::IsSimple(n))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=1; i!=size-1; ++i) //Skip brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(Newick::bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[i],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(Newick::bracket_close)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(v.back()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Complex newick<br/>
&nbsp;&nbsp;assert(!Newick::IsSimple(n));<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; depth = Newick::GetDepth(n);<br/>
<br/>
&nbsp;&nbsp;assert(depth.size() == n.size());<br/>
&nbsp;&nbsp;//Search for open and closing brackets in depth 1<br/>
&nbsp;&nbsp;for (int i=0; i!=size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (depth[i] == 0 &amp;&amp; n[i] &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//C++0x initialization list<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; tmp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp.push_back(static_cast&lt;int&gt;(Newick::bracket_open));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp.push_back(n[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp.push_back(static_cast&lt;int&gt;(Newick::bracket_close));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(tmp);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(v.back()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (depth[i] != 1 || n[i]!=Newick::bracket_open) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=i+1; j!=size; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (depth[j] != 1 || n[j]!=Newick::bracket_close) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(n.begin() + i + 1,n.begin() + j,std::back_inserter(w));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(w));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Set from index i after current end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(v.size() &gt; 1);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
///GetSimplerNewicksFrequencyPairs creates simpler, derived Newicks from a Newick.<br/>
///Its simpler Newicks are identical to those created by GetSimplerNewicks.<br/>
///From http://www.richelbilderbeek.nl/CppGetSimplerNewicksFrequencyPairs.htm<br/>
const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt;<br/>
&nbsp;&nbsp;ribi::NewickCpp98::GetSimplerNewicksFrequencyPairs(const std::vector&lt;int&gt;&amp; n)<br/>
{<br/>
&nbsp;&nbsp;//#define DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;TRACE_FUNC();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;assert(Newick::IsNewick(n));<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; newicks;<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt; depths = Newick::GetDepth(n);<br/>
<br/>
<br/>
&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;for (int i = 0; i!=size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &lt; size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &lt; 1) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string stored = Newick::NewickToString(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(stored);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back( std::make_pair(new_newick,n[i]) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] == 1); //Most difficult...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int depth = depths[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//j must first decrement, later increment with the same code<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int j_end&nbsp;&nbsp;= -1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;int j_step = -1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=i-1; ; j+=j_step)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//j must first decrement, later increment with the same code<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == j_end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//|| depths[j] &lt; depth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (depths[j] == depth &amp;&amp; n[j] &lt; 0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j_step == -1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = i + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j_end = size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j_step = 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(i!=j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(j &lt; size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Only take frequencies of the same depth into account<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[j] &lt; 1 || depths[j] != depth) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick_with_zero(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick_with_zero[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(new_newick_with_zero[i] == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++new_newick_with_zero[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove brackets after possibly lonely value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_with_zeroes = Newick::DumbNewickToString(new_newick_with_zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_with_zeroes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string dist_i_j = boost::lexical_cast&lt;std::string&gt;(std::abs(i - j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(dist_i_j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If there is only one or two values between<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the brackets, and one of these values was a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1 becoming added to the other, nullify the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1 and both brackets:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//'((1,1),2)' -&gt; '(00102)' -&gt; '(1,2)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (std::abs(i - j) == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//|| (std::abs(i - j) == 2 &amp;&amp; n[i] == 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_open&nbsp;&nbsp;= std::min(i,j) - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_close = std::max(i,j) + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;== Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;= 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_close] = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_with_more_zeroes = Newick::DumbNewickToString(new_newick_with_zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_with_more_zeroes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove decremented i and possibly nullified brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::remove_copy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(new_newick),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Add brackets if these are removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (new_newick.front() != Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| new_newick.back() != Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick = Newick::Surround(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string newick_str_done = Newick::DumbNewickToString(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(newick_str_done);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define DEBUG_2436964926435498753298216832187<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_2436964926435498753298216832187<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!Newick::IsNewick(new_newick))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::DumbNewickToString(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(std::make_pair(new_newick, 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return newicks;<br/>
<br/>
&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(n.size());<br/>
&nbsp;&nbsp;for (int i = 0; i!=size; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &lt; 1) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n[i] &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "Store: " &lt;&lt; Newick::NewickToString(new_newick) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(std::make_pair(new_newick,n[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] == 1); //Most difficult...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int depth = depths[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int j_start = FindPosBefore(n,Newick::bracket_open,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int j_end&nbsp;&nbsp; = FindPosAfter( n,Newick::bracket_close,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j_start &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j_end &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j_start &lt;= boost::numeric_cast&lt;int&gt;(n.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j_end &lt;= boost::numeric_cast&lt;int&gt;(n.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=j_start; j!=j_end; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i==j) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n[j] &lt; 1) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (depths[j] != depth) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Decrement index i to zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Increment index j<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick_with_zero(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--new_newick_with_zero[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(new_newick_with_zero[i] == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++new_newick_with_zero[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove brackets after possibly lonely value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "1: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; Newick::DumbNewickToString(new_newick_with_zero)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " -&gt; ["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "]="<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; new_newick_with_zero[i]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " - ["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; j<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "]="<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; new_newick_with_zero[j]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; " = "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; std::abs(i-j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (std::abs(i - j) == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_open&nbsp;&nbsp;= std::min(i,j) - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int index_bracket_close = std::max(i,j) + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; index_bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "]-["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; index_bracket_close<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "]\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;== Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_open]&nbsp;&nbsp;= 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero[index_bracket_close] = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "2.5: " &lt;&lt; Newick::DumbNewickToString(new_newick_with_zero) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "2: " &lt;&lt; Newick::DumbNewickToString(new_newick_with_zero) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Remove decremented i and possibly nullified brackets<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; new_newick;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::remove_copy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick_with_zero.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(new_newick),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Add brackets if these are removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (new_newick.front() != Newick::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| new_newick.back() != Newick::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_newick = Surround(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "Store: " &lt;&lt; Newick::DumbNewickToString(new_newick) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsNewick(new_newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n[i] == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newicks.push_back(std::make_pair(new_newick,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//newicks.push_back(new_newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*/<br/>
}<br/>
<br/>
<br/>
#ifndef NDEBUG<br/>
///Test tests all Newick functions<br/>
void ribi::NewickCpp98::Test()<br/>
{<br/>
&nbsp;&nbsp;TRACE("Testing basic Newick functionality");<br/>
&nbsp;&nbsp;//Check difference between C++98 and C++0x<br/>
&nbsp;&nbsp;assert(Newick::CreateValidTrinaryNewicks() == NewickCpp98::CreateValidTrinaryNewicks());<br/>
&nbsp;&nbsp;assert(Newick::GetKnownProbabilities() == NewickCpp98::GetKnownProbabilities());<br/>
<br/>
&nbsp;&nbsp;//Check conversions from std::string to std::vector #1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::StringToNewick("(11,(22,33))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[0]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[1]==11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[2]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[3]==22);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[4]==33);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[5]==Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[6]==Newick::bracket_close);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if well-formed Newicks are accepted<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_REJECTED_NEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string debug = "I must be accepted: " + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(debug);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Check if ill-formed Newicks are rejected<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateInvalidNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_REJECTED_NEWICKS<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string debug = "I must be rejected: " + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(debug);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot test if std::vector&lt;int&gt; versions are rejected,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//because Newick::StringToNewick assumes a valid Newick<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const std::vector&lt;int&gt; v = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(!Newick::IsNewick(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check conversions from std::string to std::vector #2<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::StringToNewick("((11,22),33)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[0]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[1]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[2]==11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[3]==22);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[4]==Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[5]==33);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[6]==Newick::bracket_close);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,(3,1))"))==0);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(3,(1,1))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,((1,1),(1,1)))"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,((1,1),(2,2)))"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,(2,3))"))==0);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(99,99)"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(3,(2,2))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(2,(2,2))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("((3,3),(2,2))"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("((3,3),(3,3))"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("((3,3),(3,4))"))==1);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((3,3),(4,4)),5)"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((3,3),(5,5)),5)"))==2);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((5,5),(5,5)),5)"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((5,5),(5,5)),(4,4))"))==4);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((5,5),(4,4)),(4,4))"))==3);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((4,4),(4,4)),(4,4))"))==4);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(3,(1,1))"))==10);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(1,(3,1))"))==20);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(1,(1,(1,(1,1))))"))==60);<br/>
&nbsp;&nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(1,((1,1),(1,1)))"))==15);<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(1))=="1");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(2))=="2");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(3))=="6");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(4))=="24");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(5))=="120");<br/>
&nbsp;&nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(6))=="720");<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1)"))&nbsp;&nbsp; == 1);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12)"))&nbsp;&nbsp;== 1);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123)")) == 1);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2)"))&nbsp;&nbsp; == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2)"))&nbsp;&nbsp;== 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2)")) == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2))"))&nbsp;&nbsp; == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2))"))&nbsp;&nbsp;== 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2))")) == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2),3)"))&nbsp;&nbsp; == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2),3)"))&nbsp;&nbsp;== 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2),3)")) == 2);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2,3)"))&nbsp;&nbsp; == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2,3)"))&nbsp;&nbsp;== 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2,3)")) == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2,3))"))&nbsp;&nbsp; == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2,3))"))&nbsp;&nbsp;== 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2,3))")) == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2,3),4)"))&nbsp;&nbsp; == 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2,3),4)"))&nbsp;&nbsp;== 3);<br/>
&nbsp;&nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2,3),4)")) == 3);<br/>
<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(&nbsp;&nbsp;2.0,Newick::CalcDenominator(Newick::StringToNewick("(1,1)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(&nbsp;&nbsp;6.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),1)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 26.0,Newick::CalcDenominator(Newick::StringToNewick("(1,2)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),2)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,1))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 50.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),3)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),3)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((3,1),2)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),1)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(102.0,Newick::CalcDenominator(Newick::StringToNewick("((2,1),4)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(152.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,(3,3)))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(162.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),4)"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),(3,4))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((4,1),(2,3))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((3,4),(1,2))"),10.0)));<br/>
&nbsp;&nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),(4,1))"),10.0)));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = { 0,1,2,3,4,5,6 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,3,2)==3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,4,2)==4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,5,2)==5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosAfter(v,6,2)==6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,3,4)==3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,2,4)==2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,1,4)==1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::FindPosBefore(v,0,4)==0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;/* C++98<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = Newick::GetDepth(Newick::StringToNewick("(9,(9,9))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; x = { 0,0,1,1,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(w == x);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("((2,2),1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,1,1,1,1,0,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2),1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,1,1,0,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),4,(5,6))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,1,1,0,1,1,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),(5,6))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,1,1,1,1,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,(3,4)),((5,6),7))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; w = { 0,0,1,1,2,2,2,2,1,1,2,2,2,2,1,1,0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v == w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;//Test GetRootBranches<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(1)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2)")) != v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,(2,3))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(1)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2,3)")) != v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2,(3,4))"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(1)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2)")) != v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(3,4)")) != v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Compare C++98 and C++0x version<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidBinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::GetRootBranches(n) == NewickCpp98::GetRootBranches(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Check if binary and trinary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidBinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if unary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidUnaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::GetLeafMaxArity(n)&lt;=1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::IsUnaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsTrinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if binary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidBinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::GetLeafMaxArity(n)&lt;=2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsUnaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsTrinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if trinary Newicks are detected correctly<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidTrinaryNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; n = Newick::StringToNewick(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::GetLeafMaxArity(n)&lt;=3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsUnaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!Newick::IsBinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( Newick::IsTrinaryNewick(n));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test binary Newick<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(2,3))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//#define DEBUG_1_BO_1_2_3_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_1_BO_1_2_3_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const auto&amp; t,n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(2,3,4))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,3,3))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(1,3,4))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//#define DEBUG_1_BO_1_3_4_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_1_BO_1_3_4_BC<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(boost::lexical_cast&lt;std::string&gt;(n.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const auto&amp; t,n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(4,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(3,5))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,2,4))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,3))"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("(1,(1,3,4))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_1_134<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; Newick::NewickToString(p.first) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(4,4))"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(3,5))"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(1,2,4))"),3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(1,(1,3,3))"),4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((1,1),2)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//#define DEBUG_BO_1_1_BC_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_BO_1_1_BC_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const auto&amp; t,n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(2,2)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((1,1),1)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((1,1),2)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Pair&gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_11_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; Newick::NewickToString(p.first) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(2,2)"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((1,1),1)"),2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,1),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("(3,4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((1,1),4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((2,1),3)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,1),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Pair&gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_21_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(p.first));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("(3,4)"),1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((1,1),4)"),2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((2,1),3)"),4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,3),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; n = Newick::GetSimplerNewicks(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((1,3),4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((2,2),4)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::StringToNewick("((2,3),3)"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s("((2,3),4)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::pair&lt;std::vector&lt;int&gt;,int&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Pair&gt; n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_23_4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BOOST_FOREACH(const Pair&amp; p, n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; Newick::NewickToString(p.first) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n.size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((1,3),4)"),2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((2,2),4)"),3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(n.begin(),n.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(Newick::StringToNewick("((2,3),3)"),4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= n.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Compare GetSimplerNewicks and<br/>
&nbsp;&nbsp;//GetSimplerNewicksFrequencyPairs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; newicks<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::CreateValidNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const std::string&amp; newick_str: newicks)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; newick<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::StringToNewick(newick_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt; v1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::GetSimplerNewicks(newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; v2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Newick::GetSimplerNewicksFrequencyPairs(newick);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(v1.size() == v2.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int size = boost::numeric_cast&lt;int&gt;(v1.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=size; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define DEBUG_COMPARE_GSN_VS_GSNFP<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifdef&nbsp;&nbsp;DEBUG_COMPARE_GSN_VS_GSNFP<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v1[i] != v2[i].first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR: DIFFERENT NEWICK SIMPLIFICATIONS");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(v1[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(Newick::NewickToString(v2[i].first));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(v1[i] == v2[i].first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::GetSimplerNewicksFrequencyPairs(newick)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== NewickCpp98::GetSimplerNewicksFrequencyPairs(newick));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppNewick/newickcpp98.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppNewick/newickcpp98.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
NewickCpp98, C++98 Newick functions<br/>
Copyright (C) 2010-2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef NEWICKCPP98_H<br/>
#define NEWICKCPP98_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/tuple/tuple.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace NewickCpp98 {<br/>
<br/>
//Functions that do not use the C++0x standard<br/>
const std::vector&lt;std::string&gt; CreateValidTrinaryNewicks();<br/>
std::vector&lt;boost::tuple&lt;std::string,double,double&gt; &gt; GetKnownProbabilities();<br/>
const std::vector&lt;std::pair&lt;std::vector&lt;int&gt;,int&gt; &gt; GetSimplerNewicksFrequencyPairs(const std::vector&lt;int&gt;&amp; n);<br/>
const std::vector&lt;std::vector&lt;int&gt; &gt; GetRootBranches(const std::vector&lt;int&gt;&amp; n);<br/>
#ifndef NDEBUG<br/>
void Test();<br/>
#endif<br/>
<br/>
} //~namespace NewickCpp98<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // NEWICKCPP98_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppNewick/newickstorage.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppNewick/newickstorage.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
&nbsp;&nbsp;The Rampal Etienne Project, calculates the probability of a phylogeny<br/>
&nbsp;&nbsp;(C) 2009 Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
// From http://www.richelbilderbeek.nl<br/>
//---------------------------------------------------------------------------<br/>
#ifndef NEWICKSTORAGE_H<br/>
#define NEWICKSTORAGE_H<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iterator&gt;<br/>
#include &lt;map&gt;<br/>
#include &lt;numeric&gt;<br/>
#include &lt;stdexcept&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "trace.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
template &lt;class NewickType&gt;<br/>
struct NewickStorage<br/>
{<br/>
&nbsp;&nbsp;typedef NewickType value_type;<br/>
&nbsp;&nbsp;NewickStorage(const NewickType&amp; n);<br/>
&nbsp;&nbsp;double Find(const NewickType&amp; n) const;<br/>
&nbsp;&nbsp;void Store(const NewickType&amp; n, const double p);<br/>
&nbsp;&nbsp;const std::vector&lt;std::map&lt;NewickType,double&gt; &gt;&amp; Peek() const { return m; }<br/>
&nbsp;&nbsp;int CountNewicks() const;<br/>
&nbsp;&nbsp;void CleanUp();<br/>
&nbsp;&nbsp;int GetMemoryUse() const;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;std::vector&lt;std::map&lt;NewickType,double&gt; &gt; m;<br/>
};<br/>
<br/>
template &lt;class T, class U&gt;<br/>
const std::vector&lt;int&gt; GetSizes(<br/>
&nbsp;&nbsp;const std::vector&lt;std::map&lt;T,U&gt; &gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;typedef typename std::vector&lt;std::map&lt;T,U&gt; &gt;::const_iterator Iter;<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v;<br/>
&nbsp;&nbsp;v.reserve(m.size());<br/>
<br/>
&nbsp;&nbsp;for (Iter i = m.begin(); i!=m.end(); ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back( (*i).size() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
template &lt;class T&gt;<br/>
NewickStorage&lt;T&gt;::NewickStorage(const T&amp; n)<br/>
&nbsp;&nbsp;: m(n.Size()+1)<br/>
{<br/>
<br/>
}<br/>
<br/>
template &lt;class T&gt;<br/>
double NewickStorage&lt;T&gt;::Find(const T&amp; n) const<br/>
{<br/>
&nbsp;&nbsp;typedef typename std::map&lt;T,double&gt;::const_iterator Iter;<br/>
&nbsp;&nbsp;const int n_sz = n.Size();<br/>
&nbsp;&nbsp;//Disallow resizing<br/>
&nbsp;&nbsp;assert(n_sz &lt; static_cast&lt;int&gt;(m.size()));<br/>
&nbsp;&nbsp;const Iter i = m[n_sz].find(n);<br/>
&nbsp;&nbsp;if (i!=m[n_sz].end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//n is already known, return probability<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert((*i).second&gt;0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return (*i).second;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return 0.0;<br/>
}<br/>
<br/>
template &lt;class T&gt;<br/>
void NewickStorage&lt;T&gt;::Store(const T&amp; n, const double p)<br/>
{<br/>
&nbsp;&nbsp;//TRACE("Stored probability for "<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;+ n.ToStr()<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;+ " = "<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(p));<br/>
<br/>
&nbsp;&nbsp;const int n_sz = n.Size();<br/>
&nbsp;&nbsp;//Disallow resizing<br/>
&nbsp;&nbsp;assert(n_sz &lt; static_cast&lt;int&gt;(m.size()));<br/>
<br/>
&nbsp;&nbsp;assert(Find(n)==0.0 || Find(n)==p);<br/>
<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m[n_sz][n]=p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::bad_alloc&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE("std::bad_alloc in NewickStorage&lt;T&gt;::Store");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE("std::exception in NewickStorage&lt;T&gt;::Store");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE_FILE("Unknown exception in NewickStorage&lt;T&gt;::Store");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CleanUp();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
template &lt;class T&gt;<br/>
int NewickStorage&lt;T&gt;::CountNewicks() const<br/>
{<br/>
&nbsp;&nbsp;int sum = 0;<br/>
&nbsp;&nbsp;const int sz = m.size();<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum+=m[i].size();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return sum;<br/>
}<br/>
<br/>
template &lt;class T&gt;<br/>
void NewickStorage&lt;T&gt;::CleanUp()<br/>
{<br/>
&nbsp;&nbsp;//Clear the simplest std::maps,<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;save the std::maps with most complex ones<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;(is this really wise?)<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;(but what is the alternative?)<br/>
&nbsp;&nbsp;//TRACE_FILE("Investigating std::map sizes - VERSION 2009-07-31-17:21");<br/>
&nbsp;&nbsp;const int m_sz = m.size();<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v(m_sz);<br/>
&nbsp;&nbsp;for (int i=0; i!=m_sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] = m[i].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//TRACE_FILE(v[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;for (int i=0; i!=m_sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int this_sz = m[i].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_sz = CountNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (this_sz == sum_sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//All cleared except last<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NTRACE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string trace = "Cleared index "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " with "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(m[i].size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " entries.";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE_FILE(trace);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m[i] = std::map&lt;T,double&gt;(); //Clear<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<br/>
//The memory used equals the sum of the memory used for each Newick size<br/>
<br/>
//For each size the memory use equals<br/>
// the number of Newicks of that size<br/>
// * the size of those Newicks<br/>
// * the size of an integer<br/>
template &lt;class T&gt;<br/>
/* const */ int NewickStorage&lt;T&gt;::GetMemoryUse() const<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v = GetSizes(m);<br/>
&nbsp;&nbsp;const int sz = v.size();<br/>
&nbsp;&nbsp;for (int i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i]*=i; //The size of those Newikcs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i]*=sizeof(int);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const int sum_of_newick_ints = std::accumulate(v.begin(),v.end(),0);<br/>
&nbsp;&nbsp;const int sum<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= sum_of_newick_ints<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ (sz * sizeof(std::vector&lt;int&gt;))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ sizeof(m);<br/>
&nbsp;&nbsp;return sum;<br/>
}<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif //NEWICKSTORAGE_H<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
