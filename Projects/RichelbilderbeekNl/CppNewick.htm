&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
&lt;head&gt;
&nbsp;&nbsp;&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"/&gt;
&nbsp;&nbsp;&lt;title&gt;Newick&lt;/title&gt;
&nbsp;&nbsp;&lt;meta name="description" content="C++ Newick"/&gt;
&nbsp;&nbsp;&lt;meta name="keywords" content="C++ Newick "/&gt;
&nbsp;&nbsp;&lt;link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/&gt;
&lt;/head&gt;
&lt;!-- End of head, start of body --&gt;
&lt;body&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- Page header --&gt;
&lt;h1&gt;(&lt;a href="Cpp.htm"&gt;C++&lt;/a&gt;) &lt;a href="CppNewick.htm"&gt;Newick&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppNewick/CppNewick.pri&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppNewick/CppNewick.pri" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
INCLUDEPATH += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppNewick&lt;br/&gt;
&lt;br/&gt;
SOURCES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppNewick/newick.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppNewick/newickcpp98.cpp&lt;br/&gt;
&lt;br/&gt;
HEADERS&amp;nbsp;&amp;nbsp;+= \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppNewick/newick.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppNewick/newickcpp98.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppNewick/newickstorage.h&lt;br/&gt;
&lt;br/&gt;
OTHER_FILES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppNewick/Licence.txt&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppNewick/Licence.txt&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppNewick/Licence.txt" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU GENERAL PUBLIC LICENSE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Version 3, 29 June 2007&lt;br/&gt;
&lt;br/&gt;
 Copyright (C) 2007 Free Software Foundation, Inc. &amp;lt;http://fsf.org/&amp;gt;&lt;br/&gt;
 Everyone is permitted to copy and distribute verbatim copies&lt;br/&gt;
 of this license document, but changing it is not allowed.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Preamble&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License is a free, copyleft license for&lt;br/&gt;
software and other kinds of works.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The licenses for most software and other practical works are designed&lt;br/&gt;
to take away your freedom to share and change the works.&amp;nbsp;&amp;nbsp;By contrast,&lt;br/&gt;
the GNU General Public License is intended to guarantee your freedom to&lt;br/&gt;
share and change all versions of a program--to make sure it remains free&lt;br/&gt;
software for all its users.&amp;nbsp;&amp;nbsp;We, the Free Software Foundation, use the&lt;br/&gt;
GNU General Public License for most of our software; it applies also to&lt;br/&gt;
any other work released this way by its authors.&amp;nbsp;&amp;nbsp;You can apply it to&lt;br/&gt;
your programs, too.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When we speak of free software, we are referring to freedom, not&lt;br/&gt;
price.&amp;nbsp;&amp;nbsp;Our General Public Licenses are designed to make sure that you&lt;br/&gt;
have the freedom to distribute copies of free software (and charge for&lt;br/&gt;
them if you wish), that you receive source code or can get it if you&lt;br/&gt;
want it, that you can change the software or use pieces of it in new&lt;br/&gt;
free programs, and that you know you can do these things.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To protect your rights, we need to prevent others from denying you&lt;br/&gt;
these rights or asking you to surrender the rights.&amp;nbsp;&amp;nbsp;Therefore, you have&lt;br/&gt;
certain responsibilities if you distribute copies of the software, or if&lt;br/&gt;
you modify it: responsibilities to respect the freedom of others.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For example, if you distribute copies of such a program, whether&lt;br/&gt;
gratis or for a fee, you must pass on to the recipients the same&lt;br/&gt;
freedoms that you received.&amp;nbsp;&amp;nbsp;You must make sure that they, too, receive&lt;br/&gt;
or can get the source code.&amp;nbsp;&amp;nbsp;And you must show them these terms so they&lt;br/&gt;
know their rights.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Developers that use the GNU GPL protect your rights with two steps:&lt;br/&gt;
(1) assert copyright on the software, and (2) offer you this License&lt;br/&gt;
giving you legal permission to copy, distribute and/or modify it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For the developers' and authors' protection, the GPL clearly explains&lt;br/&gt;
that there is no warranty for this free software.&amp;nbsp;&amp;nbsp;For both users' and&lt;br/&gt;
authors' sake, the GPL requires that modified versions be marked as&lt;br/&gt;
changed, so that their problems will not be attributed erroneously to&lt;br/&gt;
authors of previous versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Some devices are designed to deny users access to install or run&lt;br/&gt;
modified versions of the software inside them, although the manufacturer&lt;br/&gt;
can do so.&amp;nbsp;&amp;nbsp;This is fundamentally incompatible with the aim of&lt;br/&gt;
protecting users' freedom to change the software.&amp;nbsp;&amp;nbsp;The systematic&lt;br/&gt;
pattern of such abuse occurs in the area of products for individuals to&lt;br/&gt;
use, which is precisely where it is most unacceptable.&amp;nbsp;&amp;nbsp;Therefore, we&lt;br/&gt;
have designed this version of the GPL to prohibit the practice for those&lt;br/&gt;
products.&amp;nbsp;&amp;nbsp;If such problems arise substantially in other domains, we&lt;br/&gt;
stand ready to extend this provision to those domains in future versions&lt;br/&gt;
of the GPL, as needed to protect the freedom of users.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Finally, every program is threatened constantly by software patents.&lt;br/&gt;
States should not allow patents to restrict development and use of&lt;br/&gt;
software on general-purpose computers, but in those that do, we wish to&lt;br/&gt;
avoid the special danger that patents applied to a free program could&lt;br/&gt;
make it effectively proprietary.&amp;nbsp;&amp;nbsp;To prevent this, the GPL assures that&lt;br/&gt;
patents cannot be used to render the program non-free.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The precise terms and conditions for copying, distribution and&lt;br/&gt;
modification follow.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0. Definitions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"This License" refers to version 3 of the GNU General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Copyright" also means copyright-like laws that apply to other kinds of&lt;br/&gt;
works, such as semiconductor masks.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"The Program" refers to any copyrightable work licensed under this&lt;br/&gt;
License.&amp;nbsp;&amp;nbsp;Each licensee is addressed as "you".&amp;nbsp;&amp;nbsp;"Licensees" and&lt;br/&gt;
"recipients" may be individuals or organizations.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "modify" a work means to copy from or adapt all or part of the work&lt;br/&gt;
in a fashion requiring copyright permission, other than the making of an&lt;br/&gt;
exact copy.&amp;nbsp;&amp;nbsp;The resulting work is called a "modified version" of the&lt;br/&gt;
earlier work or a work "based on" the earlier work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "covered work" means either the unmodified Program or a work based&lt;br/&gt;
on the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "propagate" a work means to do anything with it that, without&lt;br/&gt;
permission, would make you directly or secondarily liable for&lt;br/&gt;
infringement under applicable copyright law, except executing it on a&lt;br/&gt;
computer or modifying a private copy.&amp;nbsp;&amp;nbsp;Propagation includes copying,&lt;br/&gt;
distribution (with or without modification), making available to the&lt;br/&gt;
public, and in some countries other activities as well.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "convey" a work means any kind of propagation that enables other&lt;br/&gt;
parties to make or receive copies.&amp;nbsp;&amp;nbsp;Mere interaction with a user through&lt;br/&gt;
a computer network, with no transfer of a copy, is not conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An interactive user interface displays "Appropriate Legal Notices"&lt;br/&gt;
to the extent that it includes a convenient and prominently visible&lt;br/&gt;
feature that (1) displays an appropriate copyright notice, and (2)&lt;br/&gt;
tells the user that there is no warranty for the work (except to the&lt;br/&gt;
extent that warranties are provided), that licensees may convey the&lt;br/&gt;
work under this License, and how to view a copy of this License.&amp;nbsp;&amp;nbsp;If&lt;br/&gt;
the interface presents a list of user commands or options, such as a&lt;br/&gt;
menu, a prominent item in the list meets this criterion.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;1. Source Code.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "source code" for a work means the preferred form of the work&lt;br/&gt;
for making modifications to it.&amp;nbsp;&amp;nbsp;"Object code" means any non-source&lt;br/&gt;
form of a work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "Standard Interface" means an interface that either is an official&lt;br/&gt;
standard defined by a recognized standards body, or, in the case of&lt;br/&gt;
interfaces specified for a particular programming language, one that&lt;br/&gt;
is widely used among developers working in that language.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "System Libraries" of an executable work include anything, other&lt;br/&gt;
than the work as a whole, that (a) is included in the normal form of&lt;br/&gt;
packaging a Major Component, but which is not part of that Major&lt;br/&gt;
Component, and (b) serves only to enable use of the work with that&lt;br/&gt;
Major Component, or to implement a Standard Interface for which an&lt;br/&gt;
implementation is available to the public in source code form.&amp;nbsp;&amp;nbsp;A&lt;br/&gt;
"Major Component", in this context, means a major essential component&lt;br/&gt;
(kernel, window system, and so on) of the specific operating system&lt;br/&gt;
(if any) on which the executable work runs, or a compiler used to&lt;br/&gt;
produce the work, or an object code interpreter used to run it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "Corresponding Source" for a work in object code form means all&lt;br/&gt;
the source code needed to generate, install, and (for an executable&lt;br/&gt;
work) run the object code and to modify the work, including scripts to&lt;br/&gt;
control those activities.&amp;nbsp;&amp;nbsp;However, it does not include the work's&lt;br/&gt;
System Libraries, or general-purpose tools or generally available free&lt;br/&gt;
programs which are used unmodified in performing those activities but&lt;br/&gt;
which are not part of the work.&amp;nbsp;&amp;nbsp;For example, Corresponding Source&lt;br/&gt;
includes interface definition files associated with source files for&lt;br/&gt;
the work, and the source code for shared libraries and dynamically&lt;br/&gt;
linked subprograms that the work is specifically designed to require,&lt;br/&gt;
such as by intimate data communication or control flow between those&lt;br/&gt;
subprograms and other parts of the work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source need not include anything that users&lt;br/&gt;
can regenerate automatically from other parts of the Corresponding&lt;br/&gt;
Source.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source for a work in source code form is that&lt;br/&gt;
same work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;2. Basic Permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All rights granted under this License are granted for the term of&lt;br/&gt;
copyright on the Program, and are irrevocable provided the stated&lt;br/&gt;
conditions are met.&amp;nbsp;&amp;nbsp;This License explicitly affirms your unlimited&lt;br/&gt;
permission to run the unmodified Program.&amp;nbsp;&amp;nbsp;The output from running a&lt;br/&gt;
covered work is covered by this License only if the output, given its&lt;br/&gt;
content, constitutes a covered work.&amp;nbsp;&amp;nbsp;This License acknowledges your&lt;br/&gt;
rights of fair use or other equivalent, as provided by copyright law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may make, run and propagate covered works that you do not&lt;br/&gt;
convey, without conditions so long as your license otherwise remains&lt;br/&gt;
in force.&amp;nbsp;&amp;nbsp;You may convey covered works to others for the sole purpose&lt;br/&gt;
of having them make modifications exclusively for you, or provide you&lt;br/&gt;
with facilities for running those works, provided that you comply with&lt;br/&gt;
the terms of this License in conveying all material for which you do&lt;br/&gt;
not control copyright.&amp;nbsp;&amp;nbsp;Those thus making or running the covered works&lt;br/&gt;
for you must do so exclusively on your behalf, under your direction&lt;br/&gt;
and control, on terms that prohibit them from making any copies of&lt;br/&gt;
your copyrighted material outside their relationship with you.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Conveying under any other circumstances is permitted solely under&lt;br/&gt;
the conditions stated below.&amp;nbsp;&amp;nbsp;Sublicensing is not allowed; section 10&lt;br/&gt;
makes it unnecessary.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;No covered work shall be deemed part of an effective technological&lt;br/&gt;
measure under any applicable law fulfilling obligations under article&lt;br/&gt;
11 of the WIPO copyright treaty adopted on 20 December 1996, or&lt;br/&gt;
similar laws prohibiting or restricting circumvention of such&lt;br/&gt;
measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a covered work, you waive any legal power to forbid&lt;br/&gt;
circumvention of technological measures to the extent such circumvention&lt;br/&gt;
is effected by exercising rights under this License with respect to&lt;br/&gt;
the covered work, and you disclaim any intention to limit operation or&lt;br/&gt;
modification of the work as a means of enforcing, against the work's&lt;br/&gt;
users, your or third parties' legal rights to forbid circumvention of&lt;br/&gt;
technological measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;4. Conveying Verbatim Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey verbatim copies of the Program's source code as you&lt;br/&gt;
receive it, in any medium, provided that you conspicuously and&lt;br/&gt;
appropriately publish on each copy an appropriate copyright notice;&lt;br/&gt;
keep intact all notices stating that this License and any&lt;br/&gt;
non-permissive terms added in accord with section 7 apply to the code;&lt;br/&gt;
keep intact all notices of the absence of any warranty; and give all&lt;br/&gt;
recipients a copy of this License along with the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may charge any price or no price for each copy that you convey,&lt;br/&gt;
and you may offer support or warranty protection for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;5. Conveying Modified Source Versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a work based on the Program, or the modifications to&lt;br/&gt;
produce it from the Program, in the form of source code under the&lt;br/&gt;
terms of section 4, provided that you also meet all of these conditions:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) The work must carry prominent notices stating that you modified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it, and giving a relevant date.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) The work must carry prominent notices stating that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;released under this License and any conditions added under section&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.&amp;nbsp;&amp;nbsp;This requirement modifies the requirement in section 4 to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"keep intact all notices".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) You must license the entire work, as a whole, under this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License to anyone who comes into possession of a copy.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License will therefore apply, along with any applicable section 7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;additional terms, to the whole of the work, and all its parts,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;regardless of how they are packaged.&amp;nbsp;&amp;nbsp;This License gives no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;permission to license the work in any other way, but it does not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;invalidate such permission if you have separately received it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) If the work has interactive user interfaces, each must display&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Appropriate Legal Notices; however, if the Program has interactive&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interfaces that do not display Appropriate Legal Notices, your&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;work need not make them do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A compilation of a covered work with other separate and independent&lt;br/&gt;
works, which are not by their nature extensions of the covered work,&lt;br/&gt;
and which are not combined with it such as to form a larger program,&lt;br/&gt;
in or on a volume of a storage or distribution medium, is called an&lt;br/&gt;
"aggregate" if the compilation and its resulting copyright are not&lt;br/&gt;
used to limit the access or legal rights of the compilation's users&lt;br/&gt;
beyond what the individual works permit.&amp;nbsp;&amp;nbsp;Inclusion of a covered work&lt;br/&gt;
in an aggregate does not cause this License to apply to the other&lt;br/&gt;
parts of the aggregate.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;6. Conveying Non-Source Forms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a covered work in object code form under the terms&lt;br/&gt;
of sections 4 and 5, provided that you also convey the&lt;br/&gt;
machine-readable Corresponding Source under the terms of this License,&lt;br/&gt;
in one of these ways:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source fixed on a durable physical medium&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;customarily used for software interchange.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer, valid for at least three years and valid for as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long as you offer spare parts or customer support for that product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;model, to give anyone who possesses the object code either (1) a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy of the Corresponding Source for all the software in the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;product that is covered by this License, on a durable physical&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;medium customarily used for software interchange, for a price no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;more than your reasonable cost of physically performing this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;conveying of source, or (2) access to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source from a network server at no charge.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Convey individual copies of the object code with a copy of the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer to provide the Corresponding Source.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alternative is allowed only occasionally and noncommercially, and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;only if you received the object code with such an offer, in accord&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with subsection 6b.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Convey the object code by offering access from a designated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;place (gratis or for a charge), and offer equivalent access to the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source in the same way through the same place at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;further charge.&amp;nbsp;&amp;nbsp;You need not require recipients to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source along with the object code.&amp;nbsp;&amp;nbsp;If the place to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy the object code is a network server, the Corresponding Source&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;may be on a different server (operated by you or a third party)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that supports equivalent copying facilities, provided you maintain&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clear directions next to the object code saying where to find the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source.&amp;nbsp;&amp;nbsp;Regardless of what server hosts the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source, you remain obligated to ensure that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;available for as long as needed to satisfy these requirements.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Convey the object code using peer-to-peer transmission, provided&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you inform other peers where the object code and Corresponding&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Source of the work are being offered to the general public at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;charge under subsection 6d.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A separable portion of the object code, whose source code is excluded&lt;br/&gt;
from the Corresponding Source as a System Library, need not be&lt;br/&gt;
included in conveying the object code work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "User Product" is either (1) a "consumer product", which means any&lt;br/&gt;
tangible personal property which is normally used for personal, family,&lt;br/&gt;
or household purposes, or (2) anything designed or sold for incorporation&lt;br/&gt;
into a dwelling.&amp;nbsp;&amp;nbsp;In determining whether a product is a consumer product,&lt;br/&gt;
doubtful cases shall be resolved in favor of coverage.&amp;nbsp;&amp;nbsp;For a particular&lt;br/&gt;
product received by a particular user, "normally used" refers to a&lt;br/&gt;
typical or common use of that class of product, regardless of the status&lt;br/&gt;
of the particular user or of the way in which the particular user&lt;br/&gt;
actually uses, or expects or is expected to use, the product.&amp;nbsp;&amp;nbsp;A product&lt;br/&gt;
is a consumer product regardless of whether the product has substantial&lt;br/&gt;
commercial, industrial or non-consumer uses, unless such uses represent&lt;br/&gt;
the only significant mode of use of the product.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Installation Information" for a User Product means any methods,&lt;br/&gt;
procedures, authorization keys, or other information required to install&lt;br/&gt;
and execute modified versions of a covered work in that User Product from&lt;br/&gt;
a modified version of its Corresponding Source.&amp;nbsp;&amp;nbsp;The information must&lt;br/&gt;
suffice to ensure that the continued functioning of the modified object&lt;br/&gt;
code is in no case prevented or interfered with solely because&lt;br/&gt;
modification has been made.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey an object code work under this section in, or with, or&lt;br/&gt;
specifically for use in, a User Product, and the conveying occurs as&lt;br/&gt;
part of a transaction in which the right of possession and use of the&lt;br/&gt;
User Product is transferred to the recipient in perpetuity or for a&lt;br/&gt;
fixed term (regardless of how the transaction is characterized), the&lt;br/&gt;
Corresponding Source conveyed under this section must be accompanied&lt;br/&gt;
by the Installation Information.&amp;nbsp;&amp;nbsp;But this requirement does not apply&lt;br/&gt;
if neither you nor any third party retains the ability to install&lt;br/&gt;
modified object code on the User Product (for example, the work has&lt;br/&gt;
been installed in ROM).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The requirement to provide Installation Information does not include a&lt;br/&gt;
requirement to continue to provide support service, warranty, or updates&lt;br/&gt;
for a work that has been modified or installed by the recipient, or for&lt;br/&gt;
the User Product in which it has been modified or installed.&amp;nbsp;&amp;nbsp;Access to a&lt;br/&gt;
network may be denied when the modification itself materially and&lt;br/&gt;
adversely affects the operation of the network or violates the rules and&lt;br/&gt;
protocols for communication across the network.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Corresponding Source conveyed, and Installation Information provided,&lt;br/&gt;
in accord with this section must be in a format that is publicly&lt;br/&gt;
documented (and with an implementation available to the public in&lt;br/&gt;
source code form), and must require no special password or key for&lt;br/&gt;
unpacking, reading or copying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;7. Additional Terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Additional permissions" are terms that supplement the terms of this&lt;br/&gt;
License by making exceptions from one or more of its conditions.&lt;br/&gt;
Additional permissions that are applicable to the entire Program shall&lt;br/&gt;
be treated as though they were included in this License, to the extent&lt;br/&gt;
that they are valid under applicable law.&amp;nbsp;&amp;nbsp;If additional permissions&lt;br/&gt;
apply only to part of the Program, that part may be used separately&lt;br/&gt;
under those permissions, but the entire Program remains governed by&lt;br/&gt;
this License without regard to the additional permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a copy of a covered work, you may at your option&lt;br/&gt;
remove any additional permissions from that copy, or from any part of&lt;br/&gt;
it.&amp;nbsp;&amp;nbsp;(Additional permissions may be written to require their own&lt;br/&gt;
removal in certain cases when you modify the work.)&amp;nbsp;&amp;nbsp;You may place&lt;br/&gt;
additional permissions on material, added by you to a covered work,&lt;br/&gt;
for which you have or can give appropriate copyright permission.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, for material you&lt;br/&gt;
add to a covered work, you may (if authorized by the copyright holders of&lt;br/&gt;
that material) supplement the terms of this License with terms:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Disclaiming warranty or limiting liability differently from the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;terms of sections 15 and 16 of this License; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Requiring preservation of specified reasonable legal notices or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;author attributions in that material or in the Appropriate Legal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Notices displayed by works containing it; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Prohibiting misrepresentation of the origin of that material, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requiring that modified versions of such material be marked in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reasonable ways as different from the original version; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Limiting the use for publicity purposes of names of licensors or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authors of the material; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Declining to grant rights under trademark law for use of some&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;trade names, trademarks, or service marks; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f) Requiring indemnification of licensors and authors of that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;material by anyone who conveys the material (or modified versions of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it) with contractual assumptions of liability to the recipient, for&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;any liability that these contractual assumptions directly impose on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;those licensors and authors.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All other non-permissive additional terms are considered "further&lt;br/&gt;
restrictions" within the meaning of section 10.&amp;nbsp;&amp;nbsp;If the Program as you&lt;br/&gt;
received it, or any part of it, contains a notice stating that it is&lt;br/&gt;
governed by this License along with a term that is a further&lt;br/&gt;
restriction, you may remove that term.&amp;nbsp;&amp;nbsp;If a license document contains&lt;br/&gt;
a further restriction but permits relicensing or conveying under this&lt;br/&gt;
License, you may add to a covered work material governed by the terms&lt;br/&gt;
of that license document, provided that the further restriction does&lt;br/&gt;
not survive such relicensing or conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you add terms to a covered work in accord with this section, you&lt;br/&gt;
must place, in the relevant source files, a statement of the&lt;br/&gt;
additional terms that apply to those files, or a notice indicating&lt;br/&gt;
where to find the applicable terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Additional terms, permissive or non-permissive, may be stated in the&lt;br/&gt;
form of a separately written license, or stated as exceptions;&lt;br/&gt;
the above requirements apply either way.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;8. Termination.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not propagate or modify a covered work except as expressly&lt;br/&gt;
provided under this License.&amp;nbsp;&amp;nbsp;Any attempt otherwise to propagate or&lt;br/&gt;
modify it is void, and will automatically terminate your rights under&lt;br/&gt;
this License (including any patent licenses granted under the third&lt;br/&gt;
paragraph of section 11).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;However, if you cease all violation of this License, then your&lt;br/&gt;
license from a particular copyright holder is reinstated (a)&lt;br/&gt;
provisionally, unless and until the copyright holder explicitly and&lt;br/&gt;
finally terminates your license, and (b) permanently, if the copyright&lt;br/&gt;
holder fails to notify you of the violation by some reasonable means&lt;br/&gt;
prior to 60 days after the cessation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Moreover, your license from a particular copyright holder is&lt;br/&gt;
reinstated permanently if the copyright holder notifies you of the&lt;br/&gt;
violation by some reasonable means, this is the first time you have&lt;br/&gt;
received notice of violation of this License (for any work) from that&lt;br/&gt;
copyright holder, and you cure the violation prior to 30 days after&lt;br/&gt;
your receipt of the notice.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Termination of your rights under this section does not terminate the&lt;br/&gt;
licenses of parties who have received copies or rights from you under&lt;br/&gt;
this License.&amp;nbsp;&amp;nbsp;If your rights have been terminated and not permanently&lt;br/&gt;
reinstated, you do not qualify to receive new licenses for the same&lt;br/&gt;
material under section 10.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;9. Acceptance Not Required for Having Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You are not required to accept this License in order to receive or&lt;br/&gt;
run a copy of the Program.&amp;nbsp;&amp;nbsp;Ancillary propagation of a covered work&lt;br/&gt;
occurring solely as a consequence of using peer-to-peer transmission&lt;br/&gt;
to receive a copy likewise does not require acceptance.&amp;nbsp;&amp;nbsp;However,&lt;br/&gt;
nothing other than this License grants you permission to propagate or&lt;br/&gt;
modify any covered work.&amp;nbsp;&amp;nbsp;These actions infringe copyright if you do&lt;br/&gt;
not accept this License.&amp;nbsp;&amp;nbsp;Therefore, by modifying or propagating a&lt;br/&gt;
covered work, you indicate your acceptance of this License to do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;10. Automatic Licensing of Downstream Recipients.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each time you convey a covered work, the recipient automatically&lt;br/&gt;
receives a license from the original licensors, to run, modify and&lt;br/&gt;
propagate that work, subject to this License.&amp;nbsp;&amp;nbsp;You are not responsible&lt;br/&gt;
for enforcing compliance by third parties with this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An "entity transaction" is a transaction transferring control of an&lt;br/&gt;
organization, or substantially all assets of one, or subdividing an&lt;br/&gt;
organization, or merging organizations.&amp;nbsp;&amp;nbsp;If propagation of a covered&lt;br/&gt;
work results from an entity transaction, each party to that&lt;br/&gt;
transaction who receives a copy of the work also receives whatever&lt;br/&gt;
licenses to the work the party's predecessor in interest had or could&lt;br/&gt;
give under the previous paragraph, plus a right to possession of the&lt;br/&gt;
Corresponding Source of the work from the predecessor in interest, if&lt;br/&gt;
the predecessor has it or can get it with reasonable efforts.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not impose any further restrictions on the exercise of the&lt;br/&gt;
rights granted or affirmed under this License.&amp;nbsp;&amp;nbsp;For example, you may&lt;br/&gt;
not impose a license fee, royalty, or other charge for exercise of&lt;br/&gt;
rights granted under this License, and you may not initiate litigation&lt;br/&gt;
(including a cross-claim or counterclaim in a lawsuit) alleging that&lt;br/&gt;
any patent claim is infringed by making, using, selling, offering for&lt;br/&gt;
sale, or importing the Program or any portion of it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;11. Patents.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "contributor" is a copyright holder who authorizes use under this&lt;br/&gt;
License of the Program or a work on which the Program is based.&amp;nbsp;&amp;nbsp;The&lt;br/&gt;
work thus licensed is called the contributor's "contributor version".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A contributor's "essential patent claims" are all patent claims&lt;br/&gt;
owned or controlled by the contributor, whether already acquired or&lt;br/&gt;
hereafter acquired, that would be infringed by some manner, permitted&lt;br/&gt;
by this License, of making, using, or selling its contributor version,&lt;br/&gt;
but do not include claims that would be infringed only as a&lt;br/&gt;
consequence of further modification of the contributor version.&amp;nbsp;&amp;nbsp;For&lt;br/&gt;
purposes of this definition, "control" includes the right to grant&lt;br/&gt;
patent sublicenses in a manner consistent with the requirements of&lt;br/&gt;
this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free&lt;br/&gt;
patent license under the contributor's essential patent claims, to&lt;br/&gt;
make, use, sell, offer for sale, import and otherwise run, modify and&lt;br/&gt;
propagate the contents of its contributor version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;In the following three paragraphs, a "patent license" is any express&lt;br/&gt;
agreement or commitment, however denominated, not to enforce a patent&lt;br/&gt;
(such as an express permission to practice a patent or covenant not to&lt;br/&gt;
sue for patent infringement).&amp;nbsp;&amp;nbsp;To "grant" such a patent license to a&lt;br/&gt;
party means to make such an agreement or commitment not to enforce a&lt;br/&gt;
patent against the party.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey a covered work, knowingly relying on a patent license,&lt;br/&gt;
and the Corresponding Source of the work is not available for anyone&lt;br/&gt;
to copy, free of charge and under the terms of this License, through a&lt;br/&gt;
publicly available network server or other readily accessible means,&lt;br/&gt;
then you must either (1) cause the Corresponding Source to be so&lt;br/&gt;
available, or (2) arrange to deprive yourself of the benefit of the&lt;br/&gt;
patent license for this particular work, or (3) arrange, in a manner&lt;br/&gt;
consistent with the requirements of this License, to extend the patent&lt;br/&gt;
license to downstream recipients.&amp;nbsp;&amp;nbsp;"Knowingly relying" means you have&lt;br/&gt;
actual knowledge that, but for the patent license, your conveying the&lt;br/&gt;
covered work in a country, or your recipient's use of the covered work&lt;br/&gt;
in a country, would infringe one or more identifiable patents in that&lt;br/&gt;
country that you have reason to believe are valid.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If, pursuant to or in connection with a single transaction or&lt;br/&gt;
arrangement, you convey, or propagate by procuring conveyance of, a&lt;br/&gt;
covered work, and grant a patent license to some of the parties&lt;br/&gt;
receiving the covered work authorizing them to use, propagate, modify&lt;br/&gt;
or convey a specific copy of the covered work, then the patent license&lt;br/&gt;
you grant is automatically extended to all recipients of the covered&lt;br/&gt;
work and works based on it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A patent license is "discriminatory" if it does not include within&lt;br/&gt;
the scope of its coverage, prohibits the exercise of, or is&lt;br/&gt;
conditioned on the non-exercise of one or more of the rights that are&lt;br/&gt;
specifically granted under this License.&amp;nbsp;&amp;nbsp;You may not convey a covered&lt;br/&gt;
work if you are a party to an arrangement with a third party that is&lt;br/&gt;
in the business of distributing software, under which you make payment&lt;br/&gt;
to the third party based on the extent of your activity of conveying&lt;br/&gt;
the work, and under which the third party grants, to any of the&lt;br/&gt;
parties who would receive the covered work from you, a discriminatory&lt;br/&gt;
patent license (a) in connection with copies of the covered work&lt;br/&gt;
conveyed by you (or copies made from those copies), or (b) primarily&lt;br/&gt;
for and in connection with specific products or compilations that&lt;br/&gt;
contain the covered work, unless you entered into that arrangement,&lt;br/&gt;
or that patent license was granted, prior to 28 March 2007.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Nothing in this License shall be construed as excluding or limiting&lt;br/&gt;
any implied license or other defenses to infringement that may&lt;br/&gt;
otherwise be available to you under applicable patent law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;12. No Surrender of Others' Freedom.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If conditions are imposed on you (whether by court order, agreement or&lt;br/&gt;
otherwise) that contradict the conditions of this License, they do not&lt;br/&gt;
excuse you from the conditions of this License.&amp;nbsp;&amp;nbsp;If you cannot convey a&lt;br/&gt;
covered work so as to satisfy simultaneously your obligations under this&lt;br/&gt;
License and any other pertinent obligations, then as a consequence you may&lt;br/&gt;
not convey it at all.&amp;nbsp;&amp;nbsp;For example, if you agree to terms that obligate you&lt;br/&gt;
to collect a royalty for further conveying from those to whom you convey&lt;br/&gt;
the Program, the only way you could satisfy both those terms and this&lt;br/&gt;
License would be to refrain entirely from conveying the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;13. Use with the GNU Affero General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, you have&lt;br/&gt;
permission to link or combine any covered work with a work licensed&lt;br/&gt;
under version 3 of the GNU Affero General Public License into a single&lt;br/&gt;
combined work, and to convey the resulting work.&amp;nbsp;&amp;nbsp;The terms of this&lt;br/&gt;
License will continue to apply to the part which is the covered work,&lt;br/&gt;
but the special requirements of the GNU Affero General Public License,&lt;br/&gt;
section 13, concerning interaction through a network will apply to the&lt;br/&gt;
combination as such.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14. Revised Versions of this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Free Software Foundation may publish revised and/or new versions of&lt;br/&gt;
the GNU General Public License from time to time.&amp;nbsp;&amp;nbsp;Such new versions will&lt;br/&gt;
be similar in spirit to the present version, but may differ in detail to&lt;br/&gt;
address new problems or concerns.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each version is given a distinguishing version number.&amp;nbsp;&amp;nbsp;If the&lt;br/&gt;
Program specifies that a certain numbered version of the GNU General&lt;br/&gt;
Public License "or any later version" applies to it, you have the&lt;br/&gt;
option of following the terms and conditions either of that numbered&lt;br/&gt;
version or of any later version published by the Free Software&lt;br/&gt;
Foundation.&amp;nbsp;&amp;nbsp;If the Program does not specify a version number of the&lt;br/&gt;
GNU General Public License, you may choose any version ever published&lt;br/&gt;
by the Free Software Foundation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the Program specifies that a proxy can decide which future&lt;br/&gt;
versions of the GNU General Public License can be used, that proxy's&lt;br/&gt;
public statement of acceptance of a version permanently authorizes you&lt;br/&gt;
to choose that version for the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Later license versions may give you additional or different&lt;br/&gt;
permissions.&amp;nbsp;&amp;nbsp;However, no additional obligations are imposed on any&lt;br/&gt;
author or copyright holder as a result of your choosing to follow a&lt;br/&gt;
later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;15. Disclaimer of Warranty.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY&lt;br/&gt;
APPLICABLE LAW.&amp;nbsp;&amp;nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT&lt;br/&gt;
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY&lt;br/&gt;
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,&lt;br/&gt;
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR&lt;br/&gt;
PURPOSE.&amp;nbsp;&amp;nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM&lt;br/&gt;
IS WITH YOU.&amp;nbsp;&amp;nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF&lt;br/&gt;
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;16. Limitation of Liability.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING&lt;br/&gt;
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS&lt;br/&gt;
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY&lt;br/&gt;
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE&lt;br/&gt;
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF&lt;br/&gt;
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD&lt;br/&gt;
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),&lt;br/&gt;
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF&lt;br/&gt;
SUCH DAMAGES.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;17. Interpretation of Sections 15 and 16.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the disclaimer of warranty and limitation of liability provided&lt;br/&gt;
above cannot be given local legal effect according to their terms,&lt;br/&gt;
reviewing courts shall apply local law that most closely approximates&lt;br/&gt;
an absolute waiver of all civil liability in connection with the&lt;br/&gt;
Program, unless a warranty or assumption of liability accompanies a&lt;br/&gt;
copy of the Program in return for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; END OF TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How to Apply These Terms to Your New Programs&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you develop a new program, and you want it to be of the greatest&lt;br/&gt;
possible use to the public, the best way to achieve this is to make it&lt;br/&gt;
free software which everyone can redistribute and change under these terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To do so, attach the following notices to the program.&amp;nbsp;&amp;nbsp;It is safest&lt;br/&gt;
to attach them to the start of each source file to most effectively&lt;br/&gt;
state the exclusion of warranty; and each file should have at least&lt;br/&gt;
the "copyright" line and a pointer to where the full notice is found.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;one line to give the program's name and a brief idea of what it does.&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is free software: you can redistribute it and/or modify&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it under the terms of the GNU General Public License as published by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is distributed in the hope that it will be useful,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&amp;nbsp;&amp;nbsp;See the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU General Public License for more details.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You should have received a copy of the GNU General Public License&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;along with this program.&amp;nbsp;&amp;nbsp;If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
Also add information on how to contact you by electronic and paper mail.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the program does terminal interaction, make it output a short&lt;br/&gt;
notice like this when it starts in an interactive mode:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;program&amp;gt;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is free software, and you are welcome to redistribute it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;under certain conditions; type `show c' for details.&lt;br/&gt;
&lt;br/&gt;
The hypothetical commands `show w' and `show c' should show the appropriate&lt;br/&gt;
parts of the General Public License.&amp;nbsp;&amp;nbsp;Of course, your program's commands&lt;br/&gt;
might be different; for a GUI interface, you would use an "about box".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You should also get your employer (if you work as a programmer) or school,&lt;br/&gt;
if any, to sign a "copyright disclaimer" for the program, if necessary.&lt;br/&gt;
For more information on this, and how to apply and follow the GNU GPL, see&lt;br/&gt;
&amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License does not permit incorporating your program&lt;br/&gt;
into proprietary programs.&amp;nbsp;&amp;nbsp;If your program is a subroutine library, you&lt;br/&gt;
may consider it more useful to permit linking proprietary applications with&lt;br/&gt;
the library.&amp;nbsp;&amp;nbsp;If this is what you want to do, use the GNU Lesser General&lt;br/&gt;
Public License instead of this License.&amp;nbsp;&amp;nbsp;But first, please read&lt;br/&gt;
&amp;lt;http://www.gnu.org/philosophy/why-not-lgpl.html&amp;gt;.&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppNewick/newick.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppNewick/newick.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Newick, Newick functions&lt;br/&gt;
Copyright (C) 2010-2011 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppNewick.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "newick.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;deque&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;functional&amp;gt;&lt;br/&gt;
#include &amp;lt;map&amp;gt;&lt;br/&gt;
#include &amp;lt;numeric&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/conversion/cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "BigIntegerLibrary.hh"&lt;br/&gt;
&lt;br/&gt;
#include "newickcpp98.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppAccumulate_if.htm&lt;br/&gt;
template&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typename InputIterator,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typename ElementType,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typename Predicate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;gt;&lt;br/&gt;
const ElementType Accumulate_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;InputIterator first,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const InputIterator last,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ElementType init,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Predicate predicate)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (; first != last; ++first)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (predicate(*first)) init += *first;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return init;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///Copy_if was dropped from the standard library by accident.&lt;br/&gt;
///From http://www.richelbilderbeek.nl/CppCopy_if.htm&lt;br/&gt;
template&amp;lt;typename In, typename Out, typename Pred&amp;gt;&lt;br/&gt;
Out Copy_if(In first, In last, Out res, Pred Pr)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (first != last)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (Pr(*first))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*res++ = *first;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++first;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return res;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppFunctorIncrease.htm&lt;br/&gt;
struct Increase //: public std::unary_function&amp;lt;void,int&amp;gt;&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Increase(const int&amp;amp; initValue = 0) noexcept : mValue(initValue) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void operator()(int&amp;amp; anything) noexcept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;anything = mValue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++mValue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int mValue;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
bool ribi::Newick::AllAboutEqual(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;double&amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double tolerance)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!v.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::count_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::bind2nd(fuzzy_equal_to(tolerance),v[0]))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== boost::numeric_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const BigInteger ribi::Newick::CalcComplexity(const std::vector&amp;lt;int&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.empty()) return 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BigInteger complexity = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n_frequencies = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x &amp;lt; 0) continue; //Ignore if x is not a number&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++n_frequencies;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;complexity*=x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;complexity*=n_frequencies;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return complexity;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
double ribi::Newick::CalcDenominator(const std::vector&amp;lt;int&amp;gt;&amp;amp; v,const double theta)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int sum_above_zero = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int sum_above_one&amp;nbsp;&amp;nbsp;= 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const int&amp;amp; i: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i &amp;gt; 0) sum_above_zero+= i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i &amp;gt; 1) sum_above_one += i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= boost::numeric_cast&amp;lt;double&amp;gt;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sum_above_zero * (sum_above_zero - 1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ (boost::numeric_cast&amp;lt;double&amp;gt;(sum_above_one)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * theta);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return d;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const BigInteger ribi::Newick::CalcNumOfCombinationsBinary(const std::vector&amp;lt;int&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(v));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Get all positives&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;BigInteger&amp;gt; positives;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Copy_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(positives),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::bind2nd(std::greater&amp;lt;BigInteger&amp;gt;(),0));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Obtain numerator = (SUM(x))!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sum_values = Accumulate_if(v.begin(),v.end(),0,std::bind2nd(std::greater&amp;lt;int&amp;gt;(),0));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "sum_values:" &amp;lt;&amp;lt; sum_values &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BigInteger numerator = FactorialBigInt(sum_values);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "Numerator:" &amp;lt;&amp;lt; numerator &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Obtain factorialated positives&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BigInteger denominator = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const int&amp;amp; i: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i&amp;lt;=0) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BigInteger i_temp = FactorialBigInt(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;denominator*=i_temp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "Denominator:" &amp;lt;&amp;lt; denominator &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Obtain number_of_symmetries&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BigInteger number_of_symmetries = CalcNumOfSymmetriesBinary(v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add number_of_symmetries times a 2 to denominator terms&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(BigInteger i=0; i!=number_of_symmetries; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;denominator*=2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "Denominator:" &amp;lt;&amp;lt; denominator &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Return the division&lt;br/&gt;
&amp;nbsp;&amp;nbsp;numerator/=denominator;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return numerator;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const BigInteger ribi::Newick::CalcNumOfSymmetriesBinary(std::vector&amp;lt;int&amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsBinaryNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() == 3) return 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() == 4) return (v[1] &amp;gt; 0 &amp;amp;&amp;amp; v[1]==v[2] ? 1 : 0);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_reserved&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= *std::max_element(v.begin(),v.end())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ std::count_if(v.begin(), v.end(), std::bind2nd(std::greater&amp;lt;int&amp;gt;(),0));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BigInteger n_symmetries = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int id = n_reserved + 1;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::map&amp;lt;std::pair&amp;lt;int,int&amp;gt;,int&amp;gt; ids;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::copy(v.begin(),v.end(),std::ostream_iterator&amp;lt;int&amp;gt;(std::clog," ")); std::clog &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Count number of symmetries&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!v.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(sz &amp;gt;= 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t j = sz - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=j; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v[i] &amp;gt; 0 &amp;amp;&amp;amp; v[i]==v[i+1]) ++n_symmetries;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Collect all leaves and store new leaves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::pair&amp;lt;int,int&amp;gt; &amp;gt; leaves;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=j; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v[i] &amp;gt; 0 &amp;amp;&amp;amp; v[i+1] &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Keep pair sorted&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::pair&amp;lt;int,int&amp;gt; p&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= (v[i] &amp;lt;= v[i+1]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;? std::make_pair(v[i+0],v[i+1])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: std::make_pair(v[i+1],v[i+0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If this leaf is new, store it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (ids.find(p)==ids.end())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ids[p] = id;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++id;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Generalize all leaves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i &amp;lt; v.size()-1; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size()&amp;gt;2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v[i] &amp;gt; 0 &amp;amp;&amp;amp; v[i+1] &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Keep pair sorted&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::pair&amp;lt;int,int&amp;gt; p&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= (v[i] &amp;lt;= v[i+1]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;? std::make_pair(v[i+0],v[i+1])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: std::make_pair(v[i+1],v[i+0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If this leaf is new, store it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ids.find(p)!=ids.end() &amp;amp;&amp;amp; "Leaf should have been stored already");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v_new;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(v.begin(),v.begin() + i - 1,std::back_inserter(v_new));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int id = ids[p];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v_new.push_back(id);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(v.begin() + i + 3,v.end(),std::back_inserter(v_new));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v = v_new;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i = (i-1 &amp;gt; 0 ? i-1 : 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check if there are more leaves to be generalized&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v.size()&amp;lt;=4)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check if the last (X,Y) is symmetrical...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return n_symmetries + (v[1] &amp;gt; 0 &amp;amp;&amp;amp; v[1]==v[2] ? 1 : 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
double ribi::Newick::CalcProbabilitySimpleNewick(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double theta)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsSimple(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n=0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int k=0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double probability = 1.0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v[i]&amp;gt;0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int ni = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++k;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int p=1; p!=ni; ++p, ++n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;probability *= (static_cast&amp;lt;double&amp;gt;(p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/ ( static_cast&amp;lt;double&amp;gt;(n) + theta));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;probability /= ( static_cast&amp;lt;double&amp;gt;(n) + theta);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;probability *= (static_cast&amp;lt;double&amp;gt;(n)+theta)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* std::pow(theta,static_cast&amp;lt;double&amp;gt;(k-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return probability;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Newick::CheckNewick(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::clog&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "Researching Newick string: '"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; s &amp;lt;&amp;lt; "'\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.size()&amp;lt;3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::string must have a size of at least three characters");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s[0]!='(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::string must start with an opening bracket ('(').");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s[s.size()-1]!=')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::string must end with a closing bracket (')').");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::count(s.begin(),s.end(),'(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!=std::count(s.begin(),s.end(),')'))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "The Newick std::string must have as much opening "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "as closing brackets #1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.find("(0")!=std::string::npos)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"A std::string Newick frequency cannot be or "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"start with a zero (#1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.find(",0")!=std::string::npos)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"A std::string Newick frequency cannot be or "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"start with a zero (#2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.find("()")!=std::string::npos)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::string cannot have "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a consecutive opening and closing bracket");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.find(",,")!=std::string::npos)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"A Newick std::string can have no consecutive comma's");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.find("(,")!=std::string::npos)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"A Newick std::string cannot have comma "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"directly after an opening bracket");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.find(",)")!=std::string::npos)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"A Newick std::string cannot have comma "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"directly before a closing bracket");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s_copy = s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while(s_copy.size()&amp;gt;2) //Find a leaf and cut it until the string is empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::clog&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "Researching Newick string leaf: '"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; s_copy&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "'\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find a leaf&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find index i (starting opening bracket) and j (closing bracket)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t sz = s_copy.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::size_t i = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::size_t j = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i=0 ; i!=sz; ++i) //Index of opening bracket&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s_copy[i]!='(') continue;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s_copy[i]=='(');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i+1 &amp;lt; s_copy.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (j=i+1; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s_copy[j]=='(') { j = 0; break; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s_copy[j]!=')') continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j ==&amp;nbsp;&amp;nbsp;0) continue; //j cannot be 0 after previous for loop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j == sz)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::string must have as much opening as closing brackets #2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s_copy[i]!='(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::string must have as much opening as closing brackets #3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Indices i and j found&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is range between i and j valid?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s_copy[i]!='(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bilderbikkel incorrectly assumes that s_copy[i]=='('");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s_copy[j]!=')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bilderbikkel incorrectly assumes that s_copy[j]==')'");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check the range&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (size_t k=i+1; k!=j; ++k)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( s_copy[k]!='0'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='1'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='2'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='3'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='4'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='5'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='6'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='7'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='8'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='9'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!='0'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; s_copy[k]!=',')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream err_msg;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;err_msg &amp;lt;&amp;lt; "Invalid non-number character in input: '" &amp;lt;&amp;lt; s_copy[k] &amp;lt;&amp;lt; "'";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(err_msg.str().c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i &amp;gt; 0 &amp;amp;&amp;amp; s_copy[i-1]=='(' &amp;amp;&amp;amp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j +1 &amp;lt; sz &amp;amp;&amp;amp; s_copy[j + 1] == ')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Newicks must not have the form ((X))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check if there is a comma somewhere between brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i &amp;gt; 0 //&amp;lt; (1) is valid, (1,(2)) not, ((1),2) not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; std::find(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s_copy.begin()+i,s_copy.begin()+j,',')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== s_copy.begin()+j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::string cannot have the sequence "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"of an opening bracket, a value and a closing bracket "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"as a \'complex\' leaf");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Range is assumed valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cut the leaf (turns '(1,2)' to (9) )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s_copy[i]=='(');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s_copy[j]==')');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s_new_1 = s_copy.substr(0,i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s_new_2 = s_copy.substr(j+1,sz-j-1); //OK&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s_new =&amp;nbsp;&amp;nbsp;s_new_1 + "9" + s_new_2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s_copy = s_new;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Newick::CheckNewick(const std::vector&amp;lt;int&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "Researching newick: '"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; DumbNewickToString(v) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size()&amp;lt;3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::vector&amp;lt;int&amp;gt; must have a size of at least three characters");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v[0]!=bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::vector&amp;lt;int&amp;gt; must start with an opening bracket ('(').");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v[v.size()-1]!=bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::vector&amp;lt;int&amp;gt; must end with a closing bracket (')').");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::count(v.begin(),v.end(),static_cast&amp;lt;int&amp;gt;(bracket_open))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!=std::count(v.begin(),v.end(),static_cast&amp;lt;int&amp;gt;(bracket_close)))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "The Newick std::string must have as much opening "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "as closing brackets #1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::count(v.begin(),v.end(),0))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"A std::vector&amp;lt;int&amp;gt; Newick frequency cannot be "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"zero");&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v_copy = v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while(v_copy.size()&amp;gt;2) //Find a leaf and cut it until the string is empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "Researching leaf: '";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::copy(v_copy.begin(),v_copy.end(),std::ostream_iterator&amp;lt;int&amp;gt;(std::clog," "));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::clog &amp;lt;&amp;lt; "'\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find a leaf&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find index i (starting opening bracket) and j (closing bracket)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t sz = v_copy.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::size_t i = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::size_t j = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (i=0 ; i!=sz; ++i) //Index of opening bracket&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[i]!=bracket_open) continue;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v_copy[i]==bracket_open);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i+1 &amp;lt; v_copy.size());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[i+1]==bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::vector&amp;lt;int&amp;gt; cannot have "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a consecutive opening and closing bracket");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (j=i+1; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[j]==bracket_open) { j = 0; break; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[j]!=bracket_close) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i + 2 == j &amp;amp;&amp;amp; j &amp;lt; sz - 1) //&amp;lt; (1) is valid, (1,(2)) not, ((1),2) not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::vector&amp;lt;int&amp;gt; cannot have the sequence"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"of an opening bracket, a value and a closing bracket"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"as a \'complex\' leaf");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j ==&amp;nbsp;&amp;nbsp;0) continue; //j cannot be 0 after previous for loop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j == sz)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::vector&amp;lt;int&amp;gt; must have as much opening "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"as closing brackets #2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[i]!=bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"The Newick std::vector&amp;lt;int&amp;gt; must have as much opening "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"as closing brackets #3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Indices i and j found&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is range between i and j valid?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[i]!=bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bilderbikkel incorrectly assumes that s_copy[i]=='('");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[j]!=bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bilderbikkel incorrectly assumes that s_copy[j]==')'");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check the range&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (size_t k=i+1; k!=j; ++k)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_copy[k] &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::ostringstream err_msg;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;err_msg &amp;lt;&amp;lt; "Invalid non-number in input: '" &amp;lt;&amp;lt; v_copy[k] &amp;lt;&amp;lt; "'";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(err_msg.str().c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Range is assumed valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cut the leaf&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Changes '(1,2)' to '(999)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v_copy[i]==bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v_copy[j]==bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v_new(v_copy.begin(),v_copy.begin() + i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v_new.push_back(999);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(v_copy.begin() + j + 1, v_copy.end(),std::back_inserter(v_new));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v_copy = v_new;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Newick::CreateInvalidNewicks() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(")");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("1234");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(")1234(");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("()1234()");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1234,)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(,1234,)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("()");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(-)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(-1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(0,0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(0,1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(0,(1,1))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(0,1))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(1,0))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((0,1),1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,0),1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,1),0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((2))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(2,3)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(2))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,((3)))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(11,(22,33)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(22,33),33)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("1,2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,1),");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(2,2),");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((2,2),2),");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(",(1,1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(",(2,2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(",((2,2),2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(",(1,1),");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(",(2,2),");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(2,(1,1)),");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(",((2,2),2),");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(-1,2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,-2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(0,-2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(-0,2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,,2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(2),3)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4))()");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Newick::CreateRandomNewick(const int n,const int max)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = CreateRandomBinaryNewickVector(n,max);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return NewickToString(v);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; ribi::Newick::CreateRandomBinaryNewickVector(const int n,const int max)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n&amp;gt;0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(max&amp;gt;1);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.reserve(2 + (n*2));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(bracket_open);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(1 + (std::rand() % (max-1) ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (n==1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(1 + (std::rand() % (max-1) ));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(bracket_close); //??? IntVector format has no trailing bracket&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (n==2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=2; i!=n; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((std::rand() &amp;gt;&amp;gt; 4) % 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Append&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.reserve(2 + v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.push_back(bracket_open);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(v.begin(),v.end(),std::back_inserter(new_v));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.push_back(1 + (std::rand() % (max-1)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.push_back(bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::swap(v,new_v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Prepend&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.reserve(2 + v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.push_back(bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.push_back(1 + (std::rand() % (max-1)));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(v.begin(),v.end(),std::back_inserter(new_v));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_v.push_back(bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::swap(v,new_v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),static_cast&amp;lt;int&amp;gt;(bracket_open ))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== std::count(v.begin(),v.end(),static_cast&amp;lt;int&amp;gt;(bracket_close)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Newick::CreateValidBinaryNewicks() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(11,22)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(1,1))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(1,2))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(2,1))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(2,2))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(2,3))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(2,(1,1))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(2,(1,2))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(2,(2,1))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(2,(2,2))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(4,(2,3))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((2,3),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(2,((2,3),4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(11,(22,33))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((22,33),33)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(((1,2),(3,4)),5)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,((2,3),(4,5)))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((11,2),(3,44))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(((1,22),(33,4)),(55,6))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Newick::CreateValidTrinaryNewicks() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///\note&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The tests below must be put back in again once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(1,1,1)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(1,2,3)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,1),1,1)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(1,(1,1),1)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(1,1,(1,1))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(1,(2,3,4))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(1,2,(3,4))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(1,2,(3,4,5))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2,3),4,5)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(11,22,33)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(11,(22,33,44))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(11,22,(33,44))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(11,22,(33,44,55))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((11,22,33),44,55)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2),(3,4),(5,6))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2,3),(4,5),(6,7))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2),(3,4,5),(6,7))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2),(3,4),(5,6,7))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2,3),(4,5),(6,7))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2),(3,4,5),(6,7))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2),(3,4),(5,6,7))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2,3),(4,5,6),(7,8))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2),(3,4,5),(6,7,8))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2,3),(4,5),(6,7,8))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((1,2,3),(4,5,6),(7,8,9))",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"((11,22,33),(44,55,66),(77,88,99))"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return NewickCpp98::CreateValidTrinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Newick::CreateValidNewicks() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; w = CreateValidUnaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; w = CreateValidBinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; w = CreateValidTrinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,3,4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,3,4,5)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,3,4,5,6)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,3,4,5,6,7)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,3,4,5,6,7,8)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2,3,4,5,6,7,8),(1,2,3,4,5,6,7,8),(1,2,3,4,5,6,7,8))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Newick::CreateValidUnaryNewicks() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(9)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(123)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Newick::DumbNewickToString(const std::vector&amp;lt;int&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s.reserve(2 * v.size()); //Just a guess&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x &amp;gt;= 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=boost::lexical_cast&amp;lt;std::string&amp;gt;(x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int next = v[i+1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (next &amp;gt; 0 || next == bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=",";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (x==bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+="(";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (x==bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=")";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Final closing bracket?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i+1==sz) break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int next = v[i+1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (next &amp;gt; 0 || next == bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=",";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+="x"; //Unknown character&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; ribi::Newick::Factorial(const std::vector&amp;lt;int&amp;gt;&amp;amp; v_original) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v(v_original);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),v.begin(),std::ptr_fun&amp;lt;int,int&amp;gt;(Factorial));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Newick::Factorial(const int n) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n&amp;gt;=0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int result = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i&amp;lt;=n; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result*=i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return result;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const BigInteger ribi::Newick::FactorialBigInt(const int n) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n&amp;gt;=0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BigInteger result = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i&amp;lt;=n; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result*=i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return result;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Newick::FindPosAfter(const std::vector&amp;lt;int&amp;gt;&amp;amp; v,const int x, const int index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!v.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=index+1; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;lt; sz);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v[i]==x) return i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return sz;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Newick::FindPosBefore(const std::vector&amp;lt;int&amp;gt;&amp;amp; v,const int x, const int index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=index-1; i!=-1; --i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v[i]==x) return i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return -1;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; ribi::Newick::GetDepth(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int depth = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const int&amp;amp; x: n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x == Newick::bracket_open) ++depth;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(depth);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x == Newick::bracket_close) --depth;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n.size() == v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; ribi::Newick::GetFactorialTerms(const int n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(v.begin(), v.end(),Increase(1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(std::count(v.begin(),v.end(),0)==0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::vector&amp;lt;boost::tuple&amp;lt;std::string,double,double&amp;gt; &amp;gt; ribi::Newick::GetKnownProbabilities()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///\note&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The tests below must be put back in again once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::tuple&amp;lt;std::string,double,double&amp;gt; &amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sum equals 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1)"&amp;nbsp;&amp;nbsp;, 10.0, 1.0000000 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sum equals 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0909091 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1)", 10.0, 0.9090909 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sum equals 3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0151515 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,2)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0757576 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,1)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0757576 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1))", 10.0, 0.2525253 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1),1)", 10.0, 0.2525253 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.7575758 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sum equals 4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(4)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0034965 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,3)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0116550 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,2)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0058275 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3,1)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0116550 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,2))", 10.0, 0.0194250 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,1))", 10.0, 0.0194250 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,1))", 10.0, 0.0194250 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,2),1)", 10.0, 0.0194250 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((2,1),1)", 10.0, 0.0194250 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1),2)", 10.0, 0.0194250 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,2)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0582751 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,2,1)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0582751 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,1,1)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0582751 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(1,1))", 10.0, 0.1295001 }, //(1)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1),1)", 10.0, 0.1295001 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1),1,1)", 10.0, 0.1295001 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,1))", 10.0, 0.0971251 }, //(2)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1),1)", 10.0, 0.0971251 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Quadrary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,1,1)", 10.0, 0.5827505 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sum equals 5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,4)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0024975 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,3)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0008325 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3,2)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0008325 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(4,1)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0024975 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,3))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0028305 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,2))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0012950 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(3,1))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0028305 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,2))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0014338 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(2,1))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0014338 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3,(1,1))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0026640 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092731 }, //(3)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092731 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(1,1,1))", 10.0, 0.0348263 }, //(4)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,1),1)", 10.0, 0.0348263 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1),1,1)", 10.0, 0.0348263 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0070069 }, //(5)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0070069 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,1,(1,1))", 10.0, 0.0692918 }, //(6)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,2,(1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223 }, //(7)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,1,(1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1),1,2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1),2,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190 }, //(9)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,2,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((2,1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Quadrary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,1,1))", 10.0, 0.0415140 }, //(8)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Pentary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,1,1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.4162504 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Sum equals 6&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,5)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0006660 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,4)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001665 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3,3)"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001110 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,4))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0005804 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,3))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001679 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(3,2))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001679 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(4,1))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0005804 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,3))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001991 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(2,2))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0000925 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(3,1))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001991 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3,(1,2))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001880 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3,(2,1))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0001880 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(4,(1,1))"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;, 10.0, 0.0005043 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(1,3))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(2,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0005563 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(3,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,3),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0005563 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(3,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,3),1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((2,2),1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0005563 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((3,1),1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,2,(1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,1,(1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,2,(2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,1,(2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,2),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(2,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,3,(1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1),3)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1),1,3)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(3,(1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1),3,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(1,1,2))", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(1,2,1))", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,(2,1,1))", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,2),1)", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,2,1),1)", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,1,1),1)", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,2),1,1)", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,2,1),1,1)", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((2,1,1),1,1)", 10.0, 0.0023165 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,2,(1,1,1))", 10.0, 0.0023323 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,1,(1,1,1))", 10.0, 0.0023323 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,1),2)", 10.0, 0.0023323 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,1,1),1)", 10.0, 0.0023323 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1),1,2)", 10.0, 0.0023323 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1),2,1)", 10.0, 0.0023323 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Quadrary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,2,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(2,1,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,2,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,2,1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((2,1,1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(2,(1,1,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0028154 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0028154 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Pentary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,(1,1,1,1,1))", 10.0, 0.0183824 }, //(7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "((1,1,1,1,1),1)", 10.0, 0.0183824 },&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Hexary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{ "(1,1,1,1,1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.2775003 }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return NewickCpp98::GetKnownProbabilities();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Newick::GetLeafMaxArity(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (IsSimple(n)) return size - 2;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int max = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int from = 0; from!=size; ++from)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[from] != Newick::bracket_open) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int to = from+1; to!=size; ++to)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[to] == Newick::bracket_open) break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[to]&amp;nbsp;&amp;nbsp;&amp;gt; 0) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[to] == Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(from &amp;lt; to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;max = to - from - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return max;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Newick::GetRootBranches(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///\note&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The tests below must be put back in again once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#define DEBUG_GETROOTBRANCHES&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_GETROOTBRANCHES&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE_FUNC();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!IsUnaryNewick(n));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (IsSimple(n))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=size-1; ++i) //Skip brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[i],&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_close)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(v.back()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() &amp;gt; 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Complex newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!IsSimple(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; depth = GetDepth(n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(depth.size() == n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Search for open and closing brackets in depth 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depth[i] == 0 &amp;amp;&amp;amp; n[i] &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//C++0x initialization list&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::bracket_open,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[i],&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::bracket_close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(v.back()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depth[i] != 1 || n[i]!=Newick::bracket_open) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=i+1; j!=size; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depth[j] != 1 || n[j]!=Newick::bracket_close) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(n.begin() + i + 1,n.begin() + j,std::back_inserter(w));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(w));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Set from index i after current end&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i = j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() &amp;gt; 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return NewickCpp98::GetRootBranches(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,std::vector&amp;lt;int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Newick::GetRootBranchesBinary(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsBinaryNewick(n) &amp;amp;&amp;amp; "Only binary Newicks can have two roots");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n[0] == bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n[n.size()-1] == bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Return the answer directly is Newick consists&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//out of two values only&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (sz==4)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[1] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[2] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return std::make_pair(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[1],&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_close)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[2],&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_close)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;int&amp;gt;::const_iterator Iterator;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Iterator j = n.end() - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (Iterator i = n.begin() + 2; i!=j; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; lhs(n.begin() + 1,i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; rhs(i,n.end() - 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( lhs.front() != Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| lhs.back()&amp;nbsp;&amp;nbsp;!= Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lhs = Surround(lhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( rhs.front() != Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| rhs.back()&amp;nbsp;&amp;nbsp;!= Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rhs = Surround(rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//std::clog&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; NewickToString(lhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " and "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; NewickToString(rhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (IsNewick(lhs) &amp;amp;&amp;amp; IsNewick(rhs))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return std::make_pair(lhs,rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Should not get here");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Newick::GetSimplerBinaryNewicks(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsUnaryNewick(n) || IsBinaryNewick(n));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; newicks;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//If newick is simple (by counting the number of opening brackets),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//there are no simpler Newicks&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::count( n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open))==1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Simple newicks do not need to be simplified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size()==3 || n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0]==bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[n.size()-1]==bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n.size() == 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[1]&amp;gt;1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return newicks;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size()==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[1] == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[2]+1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_close));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[2] == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[1]+1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_close));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[2];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return newicks;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//newick is complex&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Generate other Newicks and their coefficients&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = n.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = n[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x &amp;lt; 0) //x is not a digit&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If x is not next to a digit, there is no simplification&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i-1]&amp;lt;0 &amp;amp;&amp;amp; n[i+1]&amp;lt;1) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If next to the x in a digit, merge these and remove their brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is the 1 left of a value?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i-1]==bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i+1] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int new_value = n[i+1] + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n.begin(),n.begin() + i - 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.push_back(new_value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i+2] &amp;lt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(n.begin() + i + 3,n.end(),std::back_inserter(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!IsNewick(next))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; DumbNewickToString(n)&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; DumbNewickToString(next) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InspectInvalidNewick(std::cerr,next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is the 1 to the right of a value?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i-1] &amp;gt; 0); //&amp;lt; The other value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int new_value = n[i-1] + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n.begin(),n.begin()+i-2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.push_back(new_value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i+1] &amp;lt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(n.begin() + i + 2,n.end(),std::back_inserter(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next = n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return newicks;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Newick::GetSimplerNewicks(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#define DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE_FUNC();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; depths = GetDepth(n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; newicks;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i = 0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;lt; size);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;lt; 1) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string stored = Newick::NewickToString(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(stored);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] == 1); //Most difficult...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int depth = depths[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//j must first decrement, later increment with the same code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int j_end&amp;nbsp;&amp;nbsp;= -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int j_step = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=i-1; ; j+=j_step)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//j must first decrement, later increment with the same code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j == j_end&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//|| depths[j] &amp;lt; depth&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (depths[j] == depth &amp;amp;&amp;amp; n[j] &amp;lt; 0))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j_step == -1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j = i + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j_end = size;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j_step = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i!=j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;lt; size);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only take frequencies of the same depth into account&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[j] &amp;lt; 1 || depths[j] != depth) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick_with_zero(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick_with_zero[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(new_newick_with_zero[i] == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++new_newick_with_zero[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove brackets after possibly lonely value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_with_zeroes = Newick::DumbNewickToString(new_newick_with_zero);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_with_zeroes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string dist_i_j = boost::lexical_cast&amp;lt;std::string&amp;gt;(std::abs(i - j));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(dist_i_j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If there is only one or two values between&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//the brackets, and one of these values was a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//1 becoming added to the other, nullify the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//1 and both brackets:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//'((1,1),2)' -&amp;gt; '(00102)' -&amp;gt; '(1,2)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::abs(i - j) == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//|| (std::abs(i - j) == 2 &amp;amp;&amp;amp; n[i] == 1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_open&amp;nbsp;&amp;nbsp;= std::min(i,j) - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_close = std::max(i,j) + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;== Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;= 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_close] = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_with_more_zeroes = Newick::DumbNewickToString(new_newick_with_zero);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_with_more_zeroes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove decremented i and possibly nullified brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::remove_copy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(new_newick),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add brackets if these are removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (new_newick.front() != Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| new_newick.back() != Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick = Surround(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_done = Newick::DumbNewickToString(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_done);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#define DEBUG_2436964926435498753298216832187&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_2436964926435498753298216832187&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!IsNewick(new_newick))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::DumbNewickToString(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return newicks;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Newick::GetSimplerNewicksFrequencyPairs(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#define DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE_FUNC();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; newicks;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; depths = GetDepth(n);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i = 0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;lt; size);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;lt; 1) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string stored = Newick::NewickToString(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(stored);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back( { new_newick,n[i] } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] == 1); //Most difficult...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int depth = depths[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//j must first decrement, later increment with the same code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int j_end&amp;nbsp;&amp;nbsp;= -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int j_step = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=i-1; ; j+=j_step)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//j must first decrement, later increment with the same code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j == j_end&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//|| depths[j] &amp;lt; depth&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (depths[j] == depth &amp;amp;&amp;amp; n[j] &amp;lt; 0))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j_step == -1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j = i + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j_end = size;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j_step = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i!=j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;lt; size);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only take frequencies of the same depth into account&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[j] &amp;lt; 1 || depths[j] != depth) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick_with_zero(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick_with_zero[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(new_newick_with_zero[i] == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++new_newick_with_zero[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove brackets after possibly lonely value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_with_zeroes = Newick::DumbNewickToString(new_newick_with_zero);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_with_zeroes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string dist_i_j = boost::lexical_cast&amp;lt;std::string&amp;gt;(std::abs(i - j));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(dist_i_j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If there is only one or two values between&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//the brackets, and one of these values was a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//1 becoming added to the other, nullify the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//1 and both brackets:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//'((1,1),2)' -&amp;gt; '(00102)' -&amp;gt; '(1,2)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::abs(i - j) == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//|| (std::abs(i - j) == 2 &amp;amp;&amp;amp; n[i] == 1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_open&amp;nbsp;&amp;nbsp;= std::min(i,j) - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_close = std::max(i,j) + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;== Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;= 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_close] = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_with_more_zeroes = Newick::DumbNewickToString(new_newick_with_zero);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_with_more_zeroes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove decremented i and possibly nullified brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::remove_copy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(new_newick),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add brackets if these are removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (new_newick.front() != Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| new_newick.back() != Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick = Surround(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_done = Newick::DumbNewickToString(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_done);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#define DEBUG_2436964926435498753298216832187&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_2436964926435498753298216832187&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!IsNewick(new_newick))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::DumbNewickToString(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back( { new_newick, 1 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return newicks;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return NewickCpp98::GetSimplerNewicksFrequencyPairs(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Newick::GetSimplerBinaryNewicksFrequencyPairs(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsBinaryNewick(n));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//If newick is simple (by counting the number of opening brackets),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//there are no simpler Newicks&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::count( n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open))==1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Simple newicks do not need to be simplified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size()==3 || n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[0]==bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[n.size()-1]==bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n.size() == 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[1]&amp;gt;1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,n[1]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size()==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[1] == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[2]+1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_close));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,n[1]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[2] == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[1]+1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_close));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[2];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,n[2]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//newick is complex&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Generate other Newicks and their coefficients&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = n.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = n[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x &amp;lt; 0) //x is not a digit&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If x is not next to a digit, there is no simplification&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i-1]&amp;lt;0 &amp;amp;&amp;amp; n[i+1]&amp;lt;1) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If next to the x in a digit, merge these and remove their brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is the 1 left of a value?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i-1]==bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i+1] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int new_value = n[i+1] + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n.begin(),n.begin() + i - 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.push_back(new_value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i+2] &amp;lt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(n.begin() + i + 3,n.end(),std::back_inserter(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!IsNewick(next))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; DumbNewickToString(n)&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; DumbNewickToString(next) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InspectInvalidNewick(std::cerr,next);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,x));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is the 1 to the right of a value?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i-1] &amp;gt; 0); //&amp;lt; The other value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int new_value = n[i-1] + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next(n.begin(),n.begin()+i-2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.push_back(new_value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i+1] &amp;lt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(n.begin() + i + 2,n.end(),std::back_inserter(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,x));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; next = n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--next[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(next));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(std::make_pair(next,x));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Newick::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.1";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Newick::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"20xx-xx-xx: Version 1.0: initial version",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-05-29: Version 1.1: version history"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Newick::InspectInvalidNewick(std::ostream&amp;amp; os, const std::vector&amp;lt;int&amp;gt;&amp;amp; v) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "InspectInvalidNewick on: "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; DumbNewickToString(v) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CheckNewick(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "Invalidity caused by: " &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Newick::IsNewick(const std::string&amp;amp; s) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CheckNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (const std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Newick::IsSimple(const std::vector&amp;lt;int&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//A Newick is simple if it contains no '(' after the initial one&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::count(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.begin()+1,v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;) == 0;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Newick::IsBinaryNewick(std::vector&amp;lt;int&amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (IsUnaryNewick(v)) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = boost::numeric_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only numbers?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (IsSimple(v))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Binary Newick has size 4, for example '(1,2)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return sz == 4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetLeafMaxArity(v) &amp;gt; 2) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v = Newick::ReplaceLeave(v,42);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Newick::IsNewick(const std::vector&amp;lt;int&amp;gt;&amp;amp; v) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CheckNewick(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (...)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///IsTrinaryNewick checks if a Newick is a trinary tree,&lt;br/&gt;
///that is: each node splits in three or less branches&lt;br/&gt;
///From http://www.richelbilderbeek.nl/CppIsTrinaryNewick.htm&lt;br/&gt;
bool ribi::Newick::IsTrinaryNewick(std::vector&amp;lt;int&amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (IsUnaryNewick(v)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (IsBinaryNewick(v)) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool trinarity_found = false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = boost::numeric_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only numbers?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (IsSimple(v))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Ternary Newick has size 5, for example '(1,2,3)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return trinarity_found || sz == 5;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int leaf_max_arity = GetLeafMaxArity(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (leaf_max_arity &amp;gt; 3) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (leaf_max_arity == 3) trinarity_found = true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v = Newick::ReplaceLeave(v,42);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Newick::IsUnaryNewick(const std::vector&amp;lt;int&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v.size() == 3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; v[0] == Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; v[1] &amp;gt;&amp;nbsp;&amp;nbsp;0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; v[2] == Newick::bracket_close;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Newick::NewickToString(const std::vector&amp;lt;int&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() &amp;gt; 2 &amp;amp;&amp;amp; "A Newick must at least have one single value");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[0] == bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A std::vector&amp;lt;int&amp;gt; Newick must start with a bracket_open");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[v.size() - 1] == bracket_close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A std::vector&amp;lt;int&amp;gt; Newick must end with a bracket_close");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s.reserve(2 * v.size()); //Just a guess&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x &amp;gt;= 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=boost::lexical_cast&amp;lt;std::string&amp;gt;(x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i+1&amp;lt;sz &amp;amp;&amp;amp; "Must not end with number");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int next = v[i+1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (next &amp;gt; 0 || next == bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=",";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (x==bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+="(";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (x==bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=")";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Final closing bracket?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i+1==sz) break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int next = v[i+1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (next &amp;gt; 0 || next == bracket_open)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=",";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A std::vector&amp;lt;int&amp;gt; Newick must consist of brackets and values only");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///SortNewick orders a Newick is such a way&lt;br/&gt;
///that all opening brackets are at the left side.&lt;br/&gt;
///For example (1,(2,3)) becomes ((2,3),1)&lt;br/&gt;
/*&lt;br/&gt;
std::string SortNewick(const std::string&amp;amp; newick)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//All leaves are 'cut' by replacing them with an x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s = newick;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string n = "";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Find initial leaf and replace it with x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::xpressive::sregex r("\\(\\d+,\\d+\\)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string::const_iterator start = s.begin();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string::const_iterator end = s.end();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::match_results&amp;lt;std::string::const_iterator&amp;gt; what;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::regex_search(start, end, what, r);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n = what.str();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s = boost::regex_replace(s,r,"x");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//When all leaves are cut, s == 'x'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (s!="x")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Obtain leaf with x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::xpressive::sregex r("(\\(x,\\d+\\))|(\\(\\d+,x\\))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string::const_iterator start = s.begin();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string::const_iterator end = s.end();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::match_results&amp;lt;std::string::const_iterator&amp;gt; what;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Search for inner leaf&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::regex_search(start, end, what, r);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string l = what.str();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Search leaf for digit&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::regex_search(l.begin(), l.end(), what,boost::regex("\\d+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add digit to n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n = "(" + n + "," + what.str() + ")";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Replace the leaf by an x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s = boost::regex_replace(s,r,"x");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return n;&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; ribi::Newick::ReplaceLeave(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; newick,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int value)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(newick) &amp;amp;&amp;amp; "Only a valid Newick can have its leaves replaced");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!IsSimple(newick) &amp;amp;&amp;amp; "There must a leaf to simplify");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;int&amp;gt;::const_iterator Iterator;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Iterator end = newick.end();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (Iterator from = newick.begin(); from!=end; ++from)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*from != Newick::bracket_open) continue;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (Iterator to = from + 1; to!=end; ++to)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*to &amp;gt; 0) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*to == Newick::bracket_open) break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*to == Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Found&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick(newick.begin(),from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick.push_back(value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(to + 1,newick.end(),std::back_inserter(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return new_newick;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Should not get here");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; ribi::Newick::StringToNewick(const std::string&amp;amp; newick)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsNewick(newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!newick.empty()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "s must not be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(newick[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0]=='('&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "s must begin with a '('");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(newick[newick.size()-1]==')'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "s must end with a ')'");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int value = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const char i: newick)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == '(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (value!=0) v.push_back(value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == ')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (value!=0) v.push_back(value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == ',')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (value!=0) v.push_back(value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;gt;= '0' &amp;amp;&amp;amp; i &amp;lt;= '9'); //Should be a number&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value*=10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value+=boost::lexical_cast&amp;lt;int&amp;gt;(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(value == 0 &amp;amp;&amp;amp; "Final bracket close must set value to zero");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; ribi::Newick::Surround(const std::vector&amp;lt;int&amp;gt;&amp;amp; newick)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;new_newick.push_back(Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::copy(newick.begin(),newick.end(),std::back_inserter(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;new_newick.push_back(Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return new_newick;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
///Test tests all Newick functions&lt;br/&gt;
void ribi::Newick::Test()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#ifdef __GXX_EXPERIMENTAL_CXX0X__&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///\note&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The tests below must be put back in again once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_TEMP_REMOVE_2738236826438&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Testing basic Newick functionality");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check difference between C++98 and C++0x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CreateValidTrinaryNewicks() == NewickCpp98::CreateValidTrinaryNewicks());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetKnownProbabilities() == NewickCpp98::GetKnownProbabilities());&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check conversions from std::string to std::vector #1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick("(11,(22,33))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[0]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[1]==11);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[2]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[3]==22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[4]==33);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[5]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[6]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if well-formed Newicks are accepted&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; s,v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_REJECTED_NEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string debug = "I must be accepted: " + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(debug);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if ill-formed Newicks are rejected&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateInvalidNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; s,v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_REJECTED_NEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string debug = "I must be rejected: " + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(debug);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot test if std::vector&amp;lt;int&amp;gt; versions are rejected,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//because Newick::StringToNewick assumes a valid Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(!Newick::IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check conversions from std::string to std::vector #2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick("((11,22),33)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[0]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[1]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[2]==11);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[3]==22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[4]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[5]==33);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[6]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,(3,1))"))==0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(3,(1,1))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,((1,1),(1,1)))"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,((1,1),(2,2)))"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(1,(2,3))"))==0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(99,99)"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(3,(2,2))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(2,(2,2))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("((3,3),(2,2))"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("((3,3),(3,3))"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("((3,3),(3,4))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((3,3),(4,4)),5)"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((3,3),(5,5)),5)"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((5,5),(5,5)),5)"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((5,5),(5,5)),(4,4))"))==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((5,5),(4,4)),(4,4))"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(StringToNewick("(((4,4),(4,4)),(4,4))"))==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(3,(1,1))"))==10);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(1,(3,1))"))==20);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(1,(1,(1,(1,1))))"))==60);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(StringToNewick("(1,((1,1),(1,1)))"))==15);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(1))=="1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(2))=="2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(3))=="6");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(4))=="24");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(5))=="120");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(6))=="720");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1)"))&amp;nbsp;&amp;nbsp; == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12)"))&amp;nbsp;&amp;nbsp;== 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123)")) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2)"))&amp;nbsp;&amp;nbsp; == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2)"))&amp;nbsp;&amp;nbsp;== 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2)")) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2))"))&amp;nbsp;&amp;nbsp; == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2))"))&amp;nbsp;&amp;nbsp;== 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2))")) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2),3)"))&amp;nbsp;&amp;nbsp; == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2),3)"))&amp;nbsp;&amp;nbsp;== 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2),3)")) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2,3)"))&amp;nbsp;&amp;nbsp; == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2,3)"))&amp;nbsp;&amp;nbsp;== 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2,3)")) == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2,3))"))&amp;nbsp;&amp;nbsp; == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2,3))"))&amp;nbsp;&amp;nbsp;== 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2,3))")) == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2,3),4)"))&amp;nbsp;&amp;nbsp; == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2,3),4)"))&amp;nbsp;&amp;nbsp;== 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2,3),4)")) == 3);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(&amp;nbsp;&amp;nbsp;2.0,Newick::CalcDenominator(Newick::StringToNewick("(1,1)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(&amp;nbsp;&amp;nbsp;6.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),1)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 26.0,Newick::CalcDenominator(Newick::StringToNewick("(1,2)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),2)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,1))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 50.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),3)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),3)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((3,1),2)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),1)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(102.0,Newick::CalcDenominator(Newick::StringToNewick("((2,1),4)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(152.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,(3,3)))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(162.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),4)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),(3,4))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((4,1),(2,3))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((3,4),(1,2))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),(4,1))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = { 0,1,2,3,4,5,6 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,3,2)==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,4,2)==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,5,2)==5);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,6,2)==6);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,3,4)==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,2,4)==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,1,4)==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,0,4)==0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = Newick::GetDepth(Newick::StringToNewick("(9,(9,9))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; x = { 0,0,1,1,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("((2,2),1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,1,1,1,1,0,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2),1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,1,1,0,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),4,(5,6))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,1,1,0,1,1,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),(5,6))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,1,1,1,1,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,(3,4)),((5,6),7))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,2,2,2,2,1,1,2,2,2,2,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test GetRootBranches&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(1)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,(2,3))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(1)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2,3)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2,(3,4))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(1)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(3,4)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Compare C++98 and C++0x version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidBinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; s,v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::GetRootBranches(n) == NewickCpp98::GetRootBranches(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if binary and trinary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidBinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; s,v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if unary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidUnaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; s,v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::GetLeafMaxArity(n)&amp;lt;=1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::IsUnaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsTrinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if binary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidBinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; s,v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::GetLeafMaxArity(n)&amp;lt;=2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsUnaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsTrinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if trinary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidTrinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; s,v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::GetLeafMaxArity(n)&amp;lt;=3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsUnaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::IsTrinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test binary Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(2,3))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = GetSimplerNewicks(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//#define DEBUG_1_BO_1_2_3_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_1_BO_1_2_3_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const auto&amp;amp; t,n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(t));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(2,3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = GetSimplerNewicks(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,3,3))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(1,3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = GetSimplerNewicks(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//#define DEBUG_1_BO_1_3_4_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_1_BO_1_3_4_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(boost::lexical_cast&amp;lt;std::string&amp;gt;(n.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const auto&amp;amp; t,n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(t));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(4,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(3,5))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,2,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,3))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(1,3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_1_134&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; Newick::NewickToString(p.first) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(4,4))"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(3,5))"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(1,2,4))"),3))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(1,3,3))"),4))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((1,1),2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//#define DEBUG_BO_1_1_BC_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_BO_1_1_BC_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const auto&amp;amp; t,n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(t));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2,2)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((1,1),1)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((1,1),2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pair&amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_11_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; Newick::NewickToString(p.first) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(2,2)"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((1,1),1)"),2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,1),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(3,4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((1,1),4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((2,1),3)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,1),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pair&amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_21_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(p.first));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(3,4)"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((1,1),4)"),2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((2,1),3)"),4))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,3),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((1,3),4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((2,2),4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((2,3),3)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,3),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pair&amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_23_4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; Newick::NewickToString(p.first) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((1,3),4)"),2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((2,2),4)"),3))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((2,3),3)"),4))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Compare GetSimplerNewicks and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//GetSimplerNewicksFrequencyPairs&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; newicks&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::CreateValidNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const std::string&amp;amp; newick_str,newicks)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::StringToNewick(newick_str);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::GetSimplerNewicks(newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; v2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::GetSimplerNewicksFrequencyPairs(newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v1.size() == v2.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(v1.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#define DEBUG_COMPARE_GSN_VS_GSNFP&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_COMPARE_GSN_VS_GSNFP&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v1[i] != v2[i].first)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR: DIFFERENT NEWICK SIMPLIFICATIONS");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(v1[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(v2[i].first));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v1[i] == v2[i].first);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::GetSimplerNewicksFrequencyPairs(newick)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== NewickCpp98::GetSimplerNewicksFrequencyPairs(newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;NewickCpp98::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppNewick/newick.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppNewick/newick.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Newick, Newick functions&lt;br/&gt;
Copyright (C) 2010-2011 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppNewick.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef NEWICK_H&lt;br/&gt;
#define NEWICK_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cmath&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/tuple/tuple.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "BigIntegerLibrary.hh"&lt;br/&gt;
#include "newickcpp98.h"&lt;br/&gt;
#include "newickstorage.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
///namespace Newick contains general Newick functions,&lt;br/&gt;
///not using an Newick class&lt;br/&gt;
namespace Newick&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum { bracket_open&amp;nbsp;&amp;nbsp;= -1 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum { bracket_close = -2 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum { comma&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = -3 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum { new_line&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= -4 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum { null&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= -5 };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///fuzzy_equal_to is a predicate to test two doubles for equality&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///with a certain tolerance. A tolerance of 0.0 denotes that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///an exact match is requested. Note that the value of 0.0 cannot&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///be compared fuzzily.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//From http://www.richelbilderbeek.nl/CppFuzzy_equal_to.htm&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#pragma GCC diagnostic push&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;struct fuzzy_equal_to : public std::binary_function&amp;lt;double,double,bool&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fuzzy_equal_to(const double tolerance = 0.01)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: m_tolerance(tolerance)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(tolerance &amp;gt;= 0.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool operator()(const double lhs, const double rhs) const&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double d = std::fabs(m_tolerance * lhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return rhs &amp;gt; lhs - d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; rhs &amp;lt; lhs + d;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double m_tolerance;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateVector creates a std::vector from three arguments&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCreateVector.htm&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;template &amp;lt;class T&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;T&amp;gt; CreateVector(const T&amp;amp; a, const T&amp;amp; b, const T&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;T&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.reserve(3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///AllAboutEqual tests if all values in a std::vector are about equal.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppAllAboutEqual.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool AllAboutEqual(const std::vector&amp;lt;double&amp;gt;&amp;amp; v,const double tolerance = 0.01);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CalcComplexity calculates the complexity of a Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCalcComplexity.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BigInteger CalcComplexity(const std::vector&amp;lt;int&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CalcNumOfCombinations returns the number of combinations a Newick can have.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The number of possible combinations equals&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; !(v0 + v1 + v2 + etc)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// N = -------------------------- / 2^number_of_symmetries&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; !v0 * !v1 * !v2 * etc&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp; = --- / 2^number_of_symmetries&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// where v denotes an element in vector v in range [1,-&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// where v0 denotes the first element in vector v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// and where !v0 denotes the factorial of v0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {factorial(!SUM(v)) product terms}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// N = --------------------------------------------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {product terms} + { number_symmetries times a '2'}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; numerator_terms&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/// N = --------------------------------------------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; denominator_terms with appended number_symmetries times a '2'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCalcNumOfCombinationsBinary.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BigInteger CalcNumOfCombinationsBinary(const std::vector&amp;lt;int&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CalcNumOfSymmetries calculates the number of symmetries in a Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCalcNumOfSymmetriesBinary.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BigInteger CalcNumOfSymmetriesBinary(std::vector&amp;lt;int&amp;gt; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double CalcDenominator(const std::vector&amp;lt;int&amp;gt;&amp;amp; v,const double theta);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CalcProbabilitySimpleNewick returns the probability of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///a Newick for a value of theta&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///using the Ewens formula&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double CalcProbabilitySimpleNewick(const std::vector&amp;lt;int&amp;gt;&amp;amp; v,const double theta);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CheckNewick checks if a std::string is a valid Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If this std::string is not a valid Newick,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CheckNewick throws an exception with a detailed description&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCheckNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void CheckNewick(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CheckNewick checks if a std::vector&amp;lt;int&amp;gt; is a valid Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If this std::vector&amp;lt;int&amp;gt; is not a valid Newick,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CheckNewick throws an exception with a detailed description&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCheckNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void CheckNewick(const std::vector&amp;lt;int&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateInvalidNewicks creates std::strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that cannot and must not be converted to a Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCreateInvalidNewicks.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; CreateInvalidNewicks() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateRandomNewick creates an unsorted Newick string,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///with n values, with each value e [0,max&amp;gt;.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCreateRandomNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string CreateRandomNewick(const int n,const int max);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateRandomBinaryNewickVector creates an unsorted Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///std::vector&amp;lt;int&amp;gt;, with n values, with each value e [0,max&amp;gt;.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCreateRandomBinaryNewickVector.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; CreateRandomBinaryNewickVector(const int n,const int max);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateValidBinaryNewicks creates std::strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that can be converted to a BinaryNewickVector.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCreateValidBinaryNewicks.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; CreateValidBinaryNewicks() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateValidNewicks creates std::strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that are valid newicks.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCreateValidNewicks.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; CreateValidNewicks() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateValidTrinaryNewicks creates std::strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that can be converted to a TrinaryNewickVector.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppCreateValidTinaryNewicks.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; CreateValidTrinaryNewicks() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateValidUnaryNewicks creates unary Newick std::strings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; CreateValidUnaryNewicks() noexcept;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///DumbNewickToString converts a Newick std::vector&amp;lt;int&amp;gt; to a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///standard-format std::string without error checking.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppDumbNewickToString.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string DumbNewickToString(const std::vector&amp;lt;int&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Factorial calculates the factorial of all std::vector elements.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppFactorial.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; Factorial(const std::vector&amp;lt;int&amp;gt;&amp;amp; v_original) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///FactorialBigInt returns the factorial of an integer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///as a BigInteger.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppFactorialBigInt.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BigInteger FactorialBigInt(const int n) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Factorial calculates the factorial of a value.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppFactorial.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int Factorial(const int n) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int FindPosAfter(const std::vector&amp;lt;int&amp;gt;&amp;amp; v,const int index,const int value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int FindPosBefore(const std::vector&amp;lt;int&amp;gt;&amp;amp; v,const int index,const int value);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetDepth returns the depth of each Newick element&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Example #1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(1,2,3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///01 1 10&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Example #2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///((1,2),(3,(4,5)))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///000 00 00 00 0000 &amp;lt;- depth layer 0 (comma's are skipped)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///.11 11 11 11 111. &amp;lt;- depth layer 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///... .. .. .2 22.. &amp;lt;- depth layer 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///011 11 11 22 2210 &amp;lt;- result of GetDepth&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; GetDepth(const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetFactorialTerms returns all terms from a factorial.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example, 4! return {1,2,3,4}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppGetFactorialTerms.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; GetFactorialTerms(const int n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::tuple&amp;lt;std::string,double,double&amp;gt; &amp;gt; GetKnownProbabilities();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetLeafMaxArity(const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetRootBranches obtains the root branches from a non-unary Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Examples:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(1,2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; { 1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , 2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(1,2,3)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; { 1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , 2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , 3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///((1,1),(2,2),(3,3)) -&amp;gt; { (1,1) , (2,2) , (3,3) }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppGetRootBranchesBinary.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GetRootBranches(const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetRootBranchesBinary obtains the two root branches from a binary Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Examples:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(1,2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; { 1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , 2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(1,(2,3))&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; { 1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , (2,3) }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///((1,2),(3,4))&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; { (1,2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , (3,4) }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(((1,2),(3,4)),(5,6)) -&amp;gt; { ((1,2),(3,4)) , (5,6) }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppGetRootBranchesBinary.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,std::vector&amp;lt;int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GetRootBranchesBinary(const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetSimplerBinaryNewicks creates simpler, derived Newicks from a binary Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerBinaryNewicks.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; GetSimplerBinaryNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetSimplerNewicks creates simpler, derived Newicks from a Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerNewicks.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; GetSimplerNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetSimplerNewicksFrequencyPairs creates simpler, derived Newicks from a Newick.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Its simpler Newicks are identical to those created by GetSimplerNewicks.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerNewicksFrequencyPairs.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GetSimplerNewicksFrequencyPairs(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetSimplerBinaryNewicksFrequencyPairs creates simpler, derived Newicks from a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///binary Newick as well as the frequency that is simplified.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppGetSimplerBinaryNewicksFrequencyPairs.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GetSimplerBinaryNewicksFrequencyPairs(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetVersion() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///InspectInvalidNewick writes the cause of the Newick invalidity&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///to the std::ostream.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppInspectInvalidNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void InspectInvalidNewick(std::ostream&amp;amp; os, const std::vector&amp;lt;int&amp;gt;&amp;amp; v) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsBinaryNewick checks if a Newick is a binary tree,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that is: each node splits in two (not more) branches&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppIsBinaryNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsBinaryNewick(std::vector&amp;lt;int&amp;gt; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsTrinaryNewick(std::vector&amp;lt;int&amp;gt; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsUnaryNewick checks if a Newick is a unary tree,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that is: there is only one node.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppIsUnaryNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsUnaryNewick(const std::vector&amp;lt;int&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsNewick returns true if a std::string is a valid Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///and false otherwise.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppIsNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsNewick(const std::string&amp;amp; s) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsNewick returns true if a std::vector&amp;lt;int&amp;gt; is a valid Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///and false otherwise.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppIsNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsNewick(const std::vector&amp;lt;int&amp;gt;&amp;amp; v) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsSimple returns true if the Newick std::vector contains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///leaves only. For example, the Newick '(1,2,3)' is simple,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///the Newick '((1,2),3)' is not simple&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppIsNewick.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsSimple(const std::vector&amp;lt;int&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///NewickToString converts a Newick std::vector&amp;lt;int&amp;gt; to a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///standard-format std::string.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppNewickToString.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string NewickToString(const std::vector&amp;lt;int&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///ReplaceLeave replaces the first leaf that it finds by a value.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example, using ReplaceLeave on '((1,2),(3,4))' with a value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///of 42 results in '(42,(3,4))'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; ReplaceLeave(const std::vector&amp;lt;int&amp;gt;&amp;amp; newick,const int value);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///StringToNewick converts a std::string to a Newick std::vector&amp;lt;int&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///StringToNewick assumes that the input is well-formed and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///has both trailing and tailing brackets.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///From http://www.richelbilderbeek.nl/CppNewickToVector.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; StringToNewick(const std::string&amp;amp; newick);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Surround surrounds the Newick with brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; Surround(const std::vector&amp;lt;int&amp;gt;&amp;amp; newick);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char ValueToChar(const int value);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;template &amp;lt;class NewickType&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double CalculateProbability(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NewickType&amp;amp; n,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double theta,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NewickStorage&amp;lt;NewickType&amp;gt;&amp;amp; storage)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#define TRACE_NEWICK_CALCULATEPROBABILITY&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while(1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is n already known?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double p = storage.Find(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p!=0.0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for simple phylogeny&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n.IsSimple())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double p = n.CalcProbabilitySimpleNewick(theta);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.Store(n,p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Complex&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Generate other Newicks and their coefficients&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;double&amp;gt; coefficients;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;NewickType&amp;gt; newicks;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double d = n.CalcDenominator(theta);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_NEWICK_CALCULATEPROBABILITY&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("Denominator for "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ n.ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " = "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; NewickFrequencyPair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;NewickFrequencyPair&amp;gt; newick_freqs&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::GetSimplerNewicksFrequencyPairs(n.Peek());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const NewickFrequencyPair&amp;amp; p: newick_freqs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int frequency = p.second;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(frequency &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (frequency == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(p.first);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;coefficients.push_back(theta / d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double f_d = static_cast&amp;lt;double&amp;gt;(frequency);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(p.first);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;coefficients.push_back( (f_d*(f_d-1.0)) / d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_NEWICK_CALCULATEPROBABILITY&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(std::string("BinaryNewickVector ")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ Newick::NewickToString(p.first)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " has coefficient "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(coefficients.back()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Ask help about these new Newicks&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = newicks.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(newicks.size() == coefficients.size() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double p = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Recursive function call&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p+=(coefficients[i] * CalculateProbability(newicks[i],theta,storage));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.Store(n,p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::bad_alloc&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; "std::bad_alloc\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; "std::exception";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (...)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; "Unknown exception\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;template &amp;lt;class NewickType&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double CalculateProbabilityMessy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NewickType&amp;amp; n,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double theta,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NewickStorage&amp;lt;NewickType&amp;gt;&amp;amp; storage)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#define TRACE_CALCULATEPROBABILITYMESSY&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while(1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is n already known?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double p = storage.Find(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p!=0.0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for simple phylogeny&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n.IsSimple())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double p = n.CalcProbabilitySimpleNewick(theta);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.Store(n,p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Complex&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Generate other Newicks and their coefficients&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;NewickType&amp;gt; newicks;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;double&amp;gt; coefficients;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double d = n.CalcDenominator(theta);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_CALCULATEPROBABILITYMESSY&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("Denominator for "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ n.ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " = "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt;&amp;amp; v = n.Peek();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x &amp;lt; 0) //x is not a digit&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (x == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NewickType next_newick = n.TermIsOne(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!next_newick.Empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;coefficients.push_back(theta / d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NewickType next_newick = n.TermIsNotOne(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!next_newick.Empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(next_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double x_d = static_cast&amp;lt;double&amp;gt;(x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;coefficients.push_back( (x_d*(x_d-1.0)) / d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Ask help about these new Newicks&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sz = newicks.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(newicks.size() == coefficients.size() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double p = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Recursive function call&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p+=(coefficients[i] * CalculateProbabilityMessy(newicks[i],theta,storage));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.Store(n,p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::bad_alloc&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; "std::bad_alloc\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; "std::exception";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (...)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storage.CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cerr &amp;lt;&amp;lt; "Unknown exception\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
//#endif&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
} //~namespace Newick&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // NEWICK_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppNewick/newickcpp98.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppNewick/newickcpp98.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "newickcpp98.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/numeric/conversion/cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/tuple/tuple.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/tuple/tuple_comparison.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "fuzzy_equal_to.h"&lt;br/&gt;
#include "newick.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
///CreateValidTrinaryNewicks creates std::strings&lt;br/&gt;
///that can be converted to a TrinaryNewickVector.&lt;br/&gt;
///From http://www.richelbilderbeek.nl/CppCreateValidTinaryNewicks.htm&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::NewickCpp98::CreateValidTrinaryNewicks()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,1,1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,3)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,1),1,1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(1,1),1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,1,(1,1))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,(2,3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,(3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(1,2,(3,4,5))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2,3),4,5)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(11,22,33)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(11,(22,33,44))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(11,22,(33,44))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("(11,22,(33,44,55))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((11,22,33),44,55)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4),(5,6))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2,3),(4,5),(6,7))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4,5),(6,7))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4),(5,6,7))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2,3),(4,5),(6,7))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4,5),(6,7))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4),(5,6,7))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2,3),(4,5,6),(7,8))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2),(3,4,5),(6,7,8))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2,3),(4,5),(6,7,8))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((1,2,3),(4,5,6),(7,8,9))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("((11,22,33),(44,55,66),(77,88,99))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::vector&amp;lt;boost::tuple&amp;lt;std::string,double,double&amp;gt; &amp;gt; ribi::NewickCpp98::GetKnownProbabilities()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::tuple&amp;lt;std::string,double,double&amp;gt; &amp;gt; v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Sum equals 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1)"&amp;nbsp;&amp;nbsp;, 10.0, 1.0000000));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Sum equals 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0909091));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1)", 10.0, 0.9090909));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Sum equals 3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0151515));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,2)", 10.0, 0.0757576));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,1)", 10.0, 0.0757576));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1))", 10.0, 0.2525253));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1),1)", 10.0, 0.2525253));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.7575758));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Sum equals 4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(4)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0034965));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,3)", 10.0, 0.0116550));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,2)", 10.0, 0.0058275));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3,1)", 10.0, 0.0116550));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,2))", 10.0, 0.0194250));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,1))", 10.0, 0.0194250));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,1))", 10.0, 0.0194250));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,2),1)", 10.0, 0.0194250));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((2,1),1)", 10.0, 0.0194250));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1),2)", 10.0, 0.0194250));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,2)", 10.0, 0.0582751));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,2,1)", 10.0, 0.0582751));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,1,1)", 10.0, 0.0582751));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(1,1))", 10.0, 0.1295001));&amp;nbsp;&amp;nbsp; //(1)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1),1)", 10.0, 0.1295001));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1),1,1)", 10.0, 0.1295001));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,1))", 10.0, 0.0971251));&amp;nbsp;&amp;nbsp; //(2)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1),1)", 10.0, 0.0971251));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Quadrary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,1,1)", 10.0, 0.5827505));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Sum equals 5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,4)", 10.0, 0.0024975));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,3)", 10.0, 0.0008325));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3,2)", 10.0, 0.0008325));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(4,1)", 10.0, 0.0024975));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,3))", 10.0, 0.0028305));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,2))", 10.0, 0.0012950));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(3,1))", 10.0, 0.0028305));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,2))", 10.0, 0.0014338));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(2,1))", 10.0, 0.0014338));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3,(1,1))", 10.0, 0.0026640));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092731));&amp;nbsp;&amp;nbsp; //(3)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092731));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(1,1,1))", 10.0, 0.0348263));&amp;nbsp;&amp;nbsp; //(4)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,1),1)", 10.0, 0.0348263));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1),1,1)", 10.0, 0.0348263));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0070069));&amp;nbsp;&amp;nbsp; //(5)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0070069));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,1,(1,1))", 10.0, 0.0692918));&amp;nbsp;&amp;nbsp; //(6)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,2,(1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223));&amp;nbsp;&amp;nbsp; //(7)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,1,(1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1),1,2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1),2,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0092223));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190));&amp;nbsp;&amp;nbsp; //(9)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,2,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((2,1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0069190));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Quadrary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,1,1))", 10.0, 0.0415140));&amp;nbsp;&amp;nbsp; //(8)(confirmed)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Pentary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,1,1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.4162504));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Sum equals 6&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,5)", 10.0, 0.0006660));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,4)", 10.0, 0.0001665));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3,3)", 10.0, 0.0001110));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,4))", 10.0, 0.0005804));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,3))", 10.0, 0.0001679));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(3,2))", 10.0, 0.0001679));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(4,1))", 10.0, 0.0005804));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,3))", 10.0, 0.0001991));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(2,2))", 10.0, 0.0000925));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(3,1))", 10.0, 0.0001991));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3,(1,2))", 10.0, 0.0001880));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3,(2,1))", 10.0, 0.0001880));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(4,(1,1))", 10.0, 0.0005043));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Trinary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(1,3))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(2,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0005563));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(3,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,3),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0005563));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(3,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,3),1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((2,2),1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0005563));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((3,1),1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0012712));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,2,(1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,1,(1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,2,(2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,1,(2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,2),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(2,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0006346));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,3,(1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1),3)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1),1,3)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(3,(1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1),3,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0011913));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(1,1,2))", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(1,2,1))", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,(2,1,1))", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,2),1)", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,2,1),1)", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,1,1),1)", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,2),1,1)", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,2,1),1,1)", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((2,1,1),1,1)", 10.0, 0.0023165));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,2,(1,1,1))", 10.0, 0.0023323));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,1,(1,1,1))", 10.0, 0.0023323));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,1),2)", 10.0, 0.0023323));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,1,1),1)", 10.0, 0.0023323));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1),1,2)", 10.0, 0.0023323));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1),2,1)", 10.0, 0.0023323));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Quadrary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,1,2))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,2,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,2,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(2,1,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1,2),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,2,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,2,1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((2,1,1,1),1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0027574));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(2,(1,1,1,1))"&amp;nbsp;&amp;nbsp;, 10.0, 0.0028154));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1,1),2)"&amp;nbsp;&amp;nbsp;, 10.0, 0.0028154));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Pentary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,(1,1,1,1,1))", 10.0, 0.0183824));&amp;nbsp;&amp;nbsp; //(7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("((1,1,1,1,1),1)", 10.0, 0.0183824));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Hexary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(boost::make_tuple("(1,1,1,1,1,1)"&amp;nbsp;&amp;nbsp;, 10.0, 0.2775003));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///GetRootBranches obtains the root branches from a non-unary Newick.&lt;br/&gt;
///Examples:&lt;br/&gt;
///(1,2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; { 1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , 2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;
///(1,2,3)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -&amp;gt; { 1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , 2&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; , 3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;
///((1,1),(2,2),(3,3)) -&amp;gt; { (1,1) , (2,2) , (3,3) }&lt;br/&gt;
///From http://www.richelbilderbeek.nl/CppGetRootBranchesBinary.htm&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::NewickCpp98::GetRootBranches(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#define DEBUG_GETROOTBRANCHES&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_GETROOTBRANCHES&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE_FUNC();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!Newick::IsUnaryNewick(n));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Newick::IsSimple(n))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=size-1; ++i) //Skip brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::CreateVector(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(Newick::bracket_open),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n[i],&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(Newick::bracket_close)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(v.back()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() &amp;gt; 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Complex newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!Newick::IsSimple(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; depth = Newick::GetDepth(n);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(depth.size() == n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Search for open and closing brackets in depth 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depth[i] == 0 &amp;amp;&amp;amp; n[i] &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//C++0x initialization list&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; tmp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tmp.push_back(static_cast&amp;lt;int&amp;gt;(Newick::bracket_open));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tmp.push_back(n[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tmp.push_back(static_cast&amp;lt;int&amp;gt;(Newick::bracket_close));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(tmp);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(v.back()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depth[i] != 1 || n[i]!=Newick::bracket_open) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=i+1; j!=size; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depth[j] != 1 || n[j]!=Newick::bracket_close) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(n.begin() + i + 1,n.begin() + j,std::back_inserter(w));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(w));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Set from index i after current end&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i = j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() &amp;gt; 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///GetSimplerNewicksFrequencyPairs creates simpler, derived Newicks from a Newick.&lt;br/&gt;
///Its simpler Newicks are identical to those created by GetSimplerNewicks.&lt;br/&gt;
///From http://www.richelbilderbeek.nl/CppGetSimplerNewicksFrequencyPairs.htm&lt;br/&gt;
const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::NewickCpp98::GetSimplerNewicksFrequencyPairs(const std::vector&amp;lt;int&amp;gt;&amp;amp; n)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//#define DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE_FUNC();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(n));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; newicks;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; depths = Newick::GetDepth(n);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i = 0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;lt; size);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;lt; 1) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string stored = Newick::NewickToString(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(stored);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back( std::make_pair(new_newick,n[i]) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] == 1); //Most difficult...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int depth = depths[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//j must first decrement, later increment with the same code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int j_end&amp;nbsp;&amp;nbsp;= -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int j_step = -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=i-1; ; j+=j_step)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//j must first decrement, later increment with the same code&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j == j_end&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//|| depths[j] &amp;lt; depth&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (depths[j] == depth &amp;amp;&amp;amp; n[j] &amp;lt; 0))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j_step == -1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j = i + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j_end = size;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j_step = 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i!=j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;lt; size);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only take frequencies of the same depth into account&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[j] &amp;lt; 1 || depths[j] != depth) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick_with_zero(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick_with_zero[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(new_newick_with_zero[i] == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++new_newick_with_zero[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove brackets after possibly lonely value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_with_zeroes = Newick::DumbNewickToString(new_newick_with_zero);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_with_zeroes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string dist_i_j = boost::lexical_cast&amp;lt;std::string&amp;gt;(std::abs(i - j));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(dist_i_j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If there is only one or two values between&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//the brackets, and one of these values was a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//1 becoming added to the other, nullify the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//1 and both brackets:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//'((1,1),2)' -&amp;gt; '(00102)' -&amp;gt; '(1,2)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::abs(i - j) == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//|| (std::abs(i - j) == 2 &amp;amp;&amp;amp; n[i] == 1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_open&amp;nbsp;&amp;nbsp;= std::min(i,j) - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_close = std::max(i,j) + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;== Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;= 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_close] = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_with_more_zeroes = Newick::DumbNewickToString(new_newick_with_zero);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_with_more_zeroes);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove decremented i and possibly nullified brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::remove_copy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(new_newick),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add brackets if these are removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (new_newick.front() != Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| new_newick.back() != Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick = Newick::Surround(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string newick_str_done = Newick::DumbNewickToString(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(newick_str_done);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#define DEBUG_2436964926435498753298216832187&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_2436964926435498753298216832187&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!Newick::IsNewick(new_newick))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::DumbNewickToString(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(std::make_pair(new_newick, 1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return newicks;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(n.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i = 0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;lt; 1) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[i] &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; "Store: " &amp;lt;&amp;lt; Newick::NewickToString(new_newick) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(std::make_pair(new_newick,n[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] == 1); //Most difficult...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int depth = depths[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int j_start = FindPosBefore(n,Newick::bracket_open,i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int j_end&amp;nbsp;&amp;nbsp; = FindPosAfter( n,Newick::bracket_close,i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j_start &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j_end &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j_start &amp;lt;= boost::numeric_cast&amp;lt;int&amp;gt;(n.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j_end &amp;lt;= boost::numeric_cast&amp;lt;int&amp;gt;(n.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=j_start; j!=j_end; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i==j) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n[j] &amp;lt; 1) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (depths[j] != depth) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Decrement index i to zero&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Increment index j&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick_with_zero(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--new_newick_with_zero[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(new_newick_with_zero[i] == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++new_newick_with_zero[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove brackets after possibly lonely value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; "1: "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; Newick::DumbNewickToString(new_newick_with_zero)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " -&amp;gt; ["&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; i&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "]="&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; new_newick_with_zero[i]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " - ["&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; j&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "]="&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; new_newick_with_zero[j]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " = "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; std::abs(i-j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::abs(i - j) == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_open&amp;nbsp;&amp;nbsp;= std::min(i,j) - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index_bracket_close = std::max(i,j) + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "["&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; index_bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "]-["&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; index_bracket_close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "]\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;== Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; new_newick_with_zero[index_bracket_close] == Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_open]&amp;nbsp;&amp;nbsp;= 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero[index_bracket_close] = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; "2.5: " &amp;lt;&amp;lt; Newick::DumbNewickToString(new_newick_with_zero) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; "2: " &amp;lt;&amp;lt; Newick::DumbNewickToString(new_newick_with_zero) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Remove decremented i and possibly nullified brackets&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; new_newick;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::remove_copy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick_with_zero.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(new_newick),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add brackets if these are removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (new_newick.front() != Newick::bracket_open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| new_newick.back() != Newick::bracket_close)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new_newick = Surround(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef DEBUG_GETSIMPLERNEWICKSFREQUENCYPAIRS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; "Store: " &amp;lt;&amp;lt; Newick::DumbNewickToString(new_newick) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsNewick(new_newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n[i] == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newicks.push_back(std::make_pair(new_newick,1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//newicks.push_back(new_newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
///Test tests all Newick functions&lt;br/&gt;
void ribi::NewickCpp98::Test()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Testing basic Newick functionality");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check difference between C++98 and C++0x&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CreateValidTrinaryNewicks() == NewickCpp98::CreateValidTrinaryNewicks());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetKnownProbabilities() == NewickCpp98::GetKnownProbabilities());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check conversions from std::string to std::vector #1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick("(11,(22,33))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[0]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[1]==11);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[2]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[3]==22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[4]==33);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[5]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[6]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if well-formed Newicks are accepted&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_REJECTED_NEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string debug = "I must be accepted: " + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(debug);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if ill-formed Newicks are rejected&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateInvalidNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_REJECTED_NEWICKS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string debug = "I must be rejected: " + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(debug);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot test if std::vector&amp;lt;int&amp;gt; versions are rejected,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//because Newick::StringToNewick assumes a valid Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(!Newick::IsNewick(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check conversions from std::string to std::vector #2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::StringToNewick("((11,22),33)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[0]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[1]==Newick::bracket_open);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[2]==11);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[3]==22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[4]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[5]==33);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v[6]==Newick::bracket_close);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,(3,1))"))==0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(3,(1,1))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,((1,1),(1,1)))"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,((1,1),(2,2)))"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(1,(2,3))"))==0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(99,99)"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(3,(2,2))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(2,(2,2))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("((3,3),(2,2))"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("((3,3),(3,3))"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("((3,3),(3,4))"))==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((3,3),(4,4)),5)"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((3,3),(5,5)),5)"))==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((5,5),(5,5)),5)"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((5,5),(5,5)),(4,4))"))==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((5,5),(4,4)),(4,4))"))==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfSymmetriesBinary(Newick::StringToNewick("(((4,4),(4,4)),(4,4))"))==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(3,(1,1))"))==10);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(1,(3,1))"))==20);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(1,(1,(1,(1,1))))"))==60);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::CalcNumOfCombinationsBinary(Newick::StringToNewick("(1,((1,1),(1,1)))"))==15);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(1))=="1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(2))=="2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(3))=="6");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(4))=="24");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(5))=="120");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(bigIntegerToString(Newick::FactorialBigInt(6))=="720");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1)"))&amp;nbsp;&amp;nbsp; == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12)"))&amp;nbsp;&amp;nbsp;== 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123)")) == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2)"))&amp;nbsp;&amp;nbsp; == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2)"))&amp;nbsp;&amp;nbsp;== 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2)")) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2))"))&amp;nbsp;&amp;nbsp; == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2))"))&amp;nbsp;&amp;nbsp;== 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2))")) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2),3)"))&amp;nbsp;&amp;nbsp; == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2),3)"))&amp;nbsp;&amp;nbsp;== 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2),3)")) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,2,3)"))&amp;nbsp;&amp;nbsp; == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(12,2,3)"))&amp;nbsp;&amp;nbsp;== 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(123,2,3)")) == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(1,2,3))"))&amp;nbsp;&amp;nbsp; == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(12,2,3))"))&amp;nbsp;&amp;nbsp;== 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("(1,(123,2,3))")) == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((1,2,3),4)"))&amp;nbsp;&amp;nbsp; == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((12,2,3),4)"))&amp;nbsp;&amp;nbsp;== 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Newick::GetLeafMaxArity(Newick::StringToNewick("((123,2,3),4)")) == 3);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(&amp;nbsp;&amp;nbsp;2.0,Newick::CalcDenominator(Newick::StringToNewick("(1,1)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(&amp;nbsp;&amp;nbsp;6.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),1)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 26.0,Newick::CalcDenominator(Newick::StringToNewick("(1,2)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),2)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 32.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,1))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 50.0,Newick::CalcDenominator(Newick::StringToNewick("((1,1),3)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),3)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((3,1),2)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()( 80.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),1)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(102.0,Newick::CalcDenominator(Newick::StringToNewick("((2,1),4)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(152.0,Newick::CalcDenominator(Newick::StringToNewick("(2,(1,(3,3)))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(162.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),4)"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((1,2),(3,4))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((4,1),(2,3))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((3,4),(1,2))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fuzzy_equal_to()(180.0,Newick::CalcDenominator(Newick::StringToNewick("((2,3),(4,1))"),10.0)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = { 0,1,2,3,4,5,6 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,3,2)==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,4,2)==4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,5,2)==5);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosAfter(v,6,2)==6);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,3,4)==3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,2,4)==2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,1,4)==1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::FindPosBefore(v,0,4)==0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/* C++98&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = Newick::GetDepth(Newick::StringToNewick("(9,(9,9))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; x = { 0,0,1,1,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(w == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("((2,2),1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,1,1,1,1,0,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,2),1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,1,1,0,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),4,(5,6))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,1,1,0,1,1,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,3),(5,6))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,1,1,1,1,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = Newick::GetDepth(Newick::StringToNewick("(1,(2,(3,4)),((5,6),7))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; w = { 0,0,1,1,2,2,2,2,1,1,2,2,2,2,1,1,0 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v == w);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test GetRootBranches&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(1)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,(2,3))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(1)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2,3)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v = Newick::GetRootBranches(Newick::StringToNewick("(1,2,(3,4))"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(1)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(3,4)")) != v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Compare C++98 and C++0x version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidBinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::GetRootBranches(n) == NewickCpp98::GetRootBranches(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if binary and trinary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidBinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if unary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidUnaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::GetLeafMaxArity(n)&amp;lt;=1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::IsUnaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsTrinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if binary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidBinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::GetLeafMaxArity(n)&amp;lt;=2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsUnaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsTrinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if trinary Newicks are detected correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Newick::CreateValidTrinaryNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; s: v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n = Newick::StringToNewick(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::GetLeafMaxArity(n)&amp;lt;=3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsUnaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!Newick::IsBinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( Newick::IsTrinaryNewick(n));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test binary Newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(2,3))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//#define DEBUG_1_BO_1_2_3_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_1_BO_1_2_3_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const auto&amp;amp; t,n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(t));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(2,3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,2,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(2,3,3))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(1,3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//#define DEBUG_1_BO_1_3_4_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_1_BO_1_3_4_BC&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(boost::lexical_cast&amp;lt;std::string&amp;gt;(n.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const auto&amp;amp; t,n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(t));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(4,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(3,5))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,2,4))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),Newick::StringToNewick("(1,(1,3,3))"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("(1,(1,3,4))");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_1_134&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; Newick::NewickToString(p.first) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(4,4))"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(3,5))"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(1,2,4))"),3))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(1,(1,3,3))"),4))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((1,1),2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//#define DEBUG_BO_1_1_BC_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_BO_1_1_BC_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const auto&amp;amp; t,n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(t));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(2,2)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((1,1),1)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((1,1),2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pair&amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_11_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; Newick::NewickToString(p.first) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(2,2)"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((1,1),1)"),2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,1),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("(3,4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((1,1),4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((2,1),3)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,1),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pair&amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_21_2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(p.first));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("(3,4)"),1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((1,1),4)"),2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((2,1),3)"),4))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,3),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; n = Newick::GetSimplerNewicks(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((1,3),4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((2,2),4)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Newick::StringToNewick("((2,3),3)"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s("((2,3),4)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; Pair;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pair&amp;gt; n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetSimplerNewicksFrequencyPairs(Newick::StringToNewick(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef TRACE_GETSIMPLERNEWICKSFREQUENCYPAIRS_23_4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BOOST_FOREACH(const Pair&amp;amp; p, n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; Newick::NewickToString(p.first) &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n.size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((1,3),4)"),2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((2,2),4)"),3))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(n.begin(),n.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::make_pair(Newick::StringToNewick("((2,3),3)"),4))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= n.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Compare GetSimplerNewicks and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//GetSimplerNewicksFrequencyPairs&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; newicks&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::CreateValidNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(const std::string&amp;amp; newick_str: newicks)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; newick&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::StringToNewick(newick_str);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; v1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::GetSimplerNewicks(newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; v2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Newick::GetSimplerNewicksFrequencyPairs(newick);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v1.size() == v2.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int size = boost::numeric_cast&amp;lt;int&amp;gt;(v1.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=size; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#define DEBUG_COMPARE_GSN_VS_GSNFP&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifdef&amp;nbsp;&amp;nbsp;DEBUG_COMPARE_GSN_VS_GSNFP&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v1[i] != v2[i].first)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR: DIFFERENT NEWICK SIMPLIFICATIONS");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(v1[i]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(Newick::NewickToString(v2[i].first));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v1[i] == v2[i].first);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Newick::GetSimplerNewicksFrequencyPairs(newick)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== NewickCpp98::GetSimplerNewicksFrequencyPairs(newick));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppNewick/newickcpp98.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppNewick/newickcpp98.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
NewickCpp98, C++98 Newick functions&lt;br/&gt;
Copyright (C) 2010-2011 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppNewick.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef NEWICKCPP98_H&lt;br/&gt;
#define NEWICKCPP98_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/tuple/tuple.hpp&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace NewickCpp98 {&lt;br/&gt;
&lt;br/&gt;
//Functions that do not use the C++0x standard&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; CreateValidTrinaryNewicks();&lt;br/&gt;
std::vector&amp;lt;boost::tuple&amp;lt;std::string,double,double&amp;gt; &amp;gt; GetKnownProbabilities();&lt;br/&gt;
const std::vector&amp;lt;std::pair&amp;lt;std::vector&amp;lt;int&amp;gt;,int&amp;gt; &amp;gt; GetSimplerNewicksFrequencyPairs(const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; GetRootBranches(const std::vector&amp;lt;int&amp;gt;&amp;amp; n);&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void Test();&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
} //~namespace NewickCpp98&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // NEWICKCPP98_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppNewick/newickstorage.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppNewick/newickstorage.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Rampal Etienne Project, calculates the probability of a phylogeny&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(C) 2009 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This program is free software: you can redistribute it and/or modify&lt;br/&gt;
&amp;nbsp;&amp;nbsp;it under the terms of the GNU General Public License as published by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This program is distributed in the hope that it will be useful,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&amp;nbsp;&amp;nbsp;See the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;GNU General Public License for more details.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You should have received a copy of the GNU General Public License&lt;br/&gt;
&amp;nbsp;&amp;nbsp;along with this program.&amp;nbsp;&amp;nbsp;If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
// From http://www.richelbilderbeek.nl&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef NEWICKSTORAGE_H&lt;br/&gt;
#define NEWICKSTORAGE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iterator&amp;gt;&lt;br/&gt;
#include &amp;lt;map&amp;gt;&lt;br/&gt;
#include &amp;lt;numeric&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
template &amp;lt;class NewickType&amp;gt;&lt;br/&gt;
struct NewickStorage&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef NewickType value_type;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;NewickStorage(const NewickType&amp;amp; n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;double Find(const NewickType&amp;amp; n) const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Store(const NewickType&amp;amp; n, const double p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::map&amp;lt;NewickType,double&amp;gt; &amp;gt;&amp;amp; Peek() const { return m; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int CountNewicks() const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetMemoryUse() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::map&amp;lt;NewickType,double&amp;gt; &amp;gt; m;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
template &amp;lt;class T, class U&amp;gt;&lt;br/&gt;
const std::vector&amp;lt;int&amp;gt; GetSizes(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::map&amp;lt;T,U&amp;gt; &amp;gt;&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef typename std::vector&amp;lt;std::map&amp;lt;T,U&amp;gt; &amp;gt;::const_iterator Iter;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.reserve(m.size());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (Iter i = m.begin(); i!=m.end(); ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back( (*i).size() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
NewickStorage&amp;lt;T&amp;gt;::NewickStorage(const T&amp;amp; n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m(n.Size()+1)&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
double NewickStorage&amp;lt;T&amp;gt;::Find(const T&amp;amp; n) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef typename std::map&amp;lt;T,double&amp;gt;::const_iterator Iter;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_sz = n.Size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Disallow resizing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n_sz &amp;lt; static_cast&amp;lt;int&amp;gt;(m.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Iter i = m[n_sz].find(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (i!=m[n_sz].end())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//n is already known, return probability&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*i).second&amp;gt;0.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (*i).second;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return 0.0;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
void NewickStorage&amp;lt;T&amp;gt;::Store(const T&amp;amp; n, const double p)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE("Stored probability for "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;+ n.ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;+ " = "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(p));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_sz = n.Size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Disallow resizing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n_sz &amp;lt; static_cast&amp;lt;int&amp;gt;(m.size()));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Find(n)==0.0 || Find(n)==p);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m[n_sz][n]=p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::bad_alloc&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("std::bad_alloc in NewickStorage&amp;lt;T&amp;gt;::Store");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("std::exception in NewickStorage&amp;lt;T&amp;gt;::Store");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(e.what());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (...)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE_FILE("Unknown exception in NewickStorage&amp;lt;T&amp;gt;::Store");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CleanUp();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
int NewickStorage&amp;lt;T&amp;gt;::CountNewicks() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int sum = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = m.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sum+=m[i].size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return sum;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
void NewickStorage&amp;lt;T&amp;gt;::CleanUp()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Clear the simplest std::maps,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;save the std::maps with most complex ones&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;(is this really wise?)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;(but what is the alternative?)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE_FILE("Investigating std::map sizes - VERSION 2009-07-31-17:21");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int m_sz = m.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v(m_sz);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=m_sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[i] = m[i].size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE_FILE(v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=m_sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int this_sz = m[i].size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int sum_sz = CountNewicks();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (this_sz == sum_sz)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//All cleared except last&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NTRACE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string trace = "Cleared index "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " with "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(m[i].size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " entries.";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE_FILE(trace);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m[i] = std::map&amp;lt;T,double&amp;gt;(); //Clear&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
//The memory used equals the sum of the memory used for each Newick size&lt;br/&gt;
&lt;br/&gt;
//For each size the memory use equals&lt;br/&gt;
// the number of Newicks of that size&lt;br/&gt;
// * the size of those Newicks&lt;br/&gt;
// * the size of an integer&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
/* const */ int NewickStorage&amp;lt;T&amp;gt;::GetMemoryUse() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; v = GetSizes(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[i]*=i; //The size of those Newikcs&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[i]*=sizeof(int);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sum_of_newick_ints = std::accumulate(v.begin(),v.end(),0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sum&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= sum_of_newick_ints&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ (sz * sizeof(std::vector&amp;lt;int&amp;gt;))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ sizeof(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return sum;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif //NEWICKSTORAGE_H&lt;br/&gt;
&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://validator.w3.org/check?uri=referer"&gt;&lt;img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This page has been created by the &lt;a href="Tools.htm"&gt;tool&lt;/a&gt; &lt;a href="ToolCodeToHtml.htm"&gt;CodeToHtml&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
