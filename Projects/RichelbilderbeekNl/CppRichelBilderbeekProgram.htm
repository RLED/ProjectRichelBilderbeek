<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>RichelBilderbeekProgram</title>
  <meta name="description" content="C++ RichelBilderbeekProgram"/>
  <meta name="keywords" content="C++ RichelBilderbeekProgram "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppRichelBilderbeekProgram.htm">RichelBilderbeekProgram</a></h1>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/CppRichelBilderbeekProgram.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/CppRichelBilderbeekProgram.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/richelbilderbeekprogram.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/richelbilderbeekprogramstatus.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/richelbilderbeekprogramtype.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/richelbilderbeekprogramtypes.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/richelbilderbeekprogram.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/richelbilderbeekprogramtype.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/richelbilderbeekprogramtypes.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppRichelBilderbeekProgram/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogram.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogram.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
RichelBilderbeek::Program, class for a program by Richel Bilderbeek<br/>
Copyright (C) 2012 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ProjectRichelBilderbeekProgram.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "richelbilderbeekprogram.h"<br/>
<br/>
#include &lt;iostream&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include "richelbilderbeekprogramtypes.h"<br/>
#include "richelbilderbeekprogramstatus.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::Program&gt; ribi::Program::CreateProgram(const ProgramType type) noexcept<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Program&gt; p;<br/>
&nbsp;&nbsp;switch (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::aminoAcidFighter: p.reset(new ProgramAminoAcidFighter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::asciiArter: p.reset(new ProgramAsciiArter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::asciiArterVcl: p.reset(new ProgramAsciiArterVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::barbaImage: p.reset(new ProgramBarbaImage); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::beerWanter: p.reset(new ProgramBeerWanter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::beerWanterVcl: p.reset(new ProgramBeerWanterVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::athleticLand: p.reset(new ProgramAthleticLand); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::athleticLandVcl: p.reset(new ProgramAthleticLandVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::bochum: p.reset(new ProgramBochum); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::boenken: p.reset(new ProgramBoenken); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::boenkenVcl: p.reset(new ProgramBoenkenVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::brainweaver: p.reset(new ProgramBrainweaver); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::bristol: p.reset(new ProgramBristol); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::chrisWiley: p.reset(new ProgramChrisWiley); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::codeToHtml: p.reset(new ProgramCodeToHtml); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::connectThree: p.reset(new ProgramConnectThree); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::corridor: p.reset(new ProgramCorridor); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::createGlossary: p.reset(new ProgramCreateGlossary); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::createQtProjectZipFile: p.reset(new ProgramCreateQtProjectZipFile); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::crossPoll: p.reset(new ProgramCrossPoll); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::dasWahreSchlagerfest: p.reset(new ProgramDasWahreSchlagerfest); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::dasWahreSchlagerfestVcl: p.reset(new ProgramDasWahreSchlagerfestVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::dotMatrix: p.reset(new ProgramDotMatrix); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::dotMatrixVcl: p.reset(new ProgramDotMatrixVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::encranger: p.reset(new ProgramEncranger); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::everythingToPiecesShooter: p.reset(new ProgramEverythingToPiecesShooter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::fakeEvy: p.reset(new ProgramFakeEvy); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::filterOperationer: p.reset(new ProgramFilterOperationer); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::filterOperationerVcl: p.reset(new ProgramFilterOperationerVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::fryskLeareLieder: p.reset(new ProgramFryskLeareLieder); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::functionPlotter: p.reset(new ProgramFunctionPlotter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::functionPlotterVcl: p.reset(new ProgramFunctionPlotterVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::gaborFilter: p.reset(new ProgramGaborFilter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::gaborFilterVcl: p.reset(new ProgramGaborFilterVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::grayCoder: p.reset(new ProgramGrayCoder); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::grayCoderVcl: p.reset(new ProgramGrayCoderVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::gtst: p.reset(new ProgramGtst); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::histogramEqualizationer: p.reset(new ProgramHistogramEqualizationer); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::histogramEqualizationerVcl: p.reset(new ProgramHistogramEqualizationerVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::hometrainer: p.reset(new ProgramHometrainer); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::hometrainerVcl: p.reset(new ProgramHometrainerVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::imageRotater: p.reset(new ProgramImageRotater); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::imageRotaterClx: p.reset(new ProgramImageRotaterClx); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::imageRotaterVcl: p.reset(new ProgramImageRotaterVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::k3OpEenRij: p.reset(new ProgramK3OpEenRij); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::k3OpEenRijVcl: p.reset(new ProgramK3OpEenRijVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::kalmanFilterer: p.reset(new ProgramKalmanFilterer); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::keySender: p.reset(new ProgramKeySender); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::knokfighter: p.reset(new ProgramKnokfighter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::knokfighterVcl: p.reset(new ProgramKnokfighterVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::kTouchLectureCreator: p.reset(new ProgramKTouchLectureCreator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::lambdaBot: p.reset(new ProgramLambdaBot); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::learyCircumplex: p.reset(new ProgramLearyCircumplex); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::logisticGrowthSimulator: p.reset(new ProgramLogisticGrowthSimulator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::loose: p.reset(new ProgramLoose); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::martianCafeTuinemaTycoon: p.reset(new ProgramMartianCafeTuinemaTycoon); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::mazeCreator: p.reset(new ProgramMazeCreator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::mazeCreatorVcl: p.reset(new ProgramMazeCreatorVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::maziak: p.reset(new ProgramMaziak); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::maziakVcl: p.reset(new ProgramMaziakVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::metZnDrieen: p.reset(new ProgramMetZnDrieen); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::metZnDrieenVcl: p.reset(new ProgramMetZnDrieenVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::midiLessonCreator: p.reset(new ProgramMidiLessonCreator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::morpher: p.reset(new ProgramMorpher); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::multiEncranger: p.reset(new ProgramMultiEncranger); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::multiEncrangerVcl: p.reset(new ProgramMultiEncrangerVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::muscaDomestica: p.reset(new ProgramMuscaDomestica); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::musicTheory: p.reset(new ProgramMusicTheory); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::ndsmake: p.reset(new ProgramNdsmake); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::ndsPaint: p.reset(new ProgramNdsPaint); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::paperRockScissors: p.reset(new ProgramPaperRockScissors); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::pause: p.reset(new ProgramPause); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::perfectElasticCollision: p.reset(new ProgramPerfectElasticCollision); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::picToCode: p.reset(new ProgramPicToCode); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::pixelator: p.reset(new ProgramPixelator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::pixelatorVcl: p.reset(new ProgramPixelatorVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::pokeVolley: p.reset(new ProgramPokeVolley); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::pong: p.reset(new ProgramPong); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::preDickAdvocaTor: p.reset(new ProgramPreDickAdvocaTor); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::primeExpert: p.reset(new ProgramPrimeExpert); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::projectRichelBilderbeek: p.reset(new ProgramProjectRichelBilderbeek); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::pylos: p.reset(new ProgramPylos); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::qmakeWatcher: p.reset(new ProgramQmakeWatcher); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::quadraticSolver: p.reset(new ProgramQuadraticSolver); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::rampalEtienne: p.reset(new ProgramRampalEtienne); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::randomCode: p.reset(new ProgramRandomCode); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::randomCodeVcl: p.reset(new ProgramRandomCodeVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::rasper: p.reset(new ProgramRasper); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::refrigeratorPuzzleSolver: p.reset(new ProgramRefrigeratorPuzzleSolver); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::regexTester: p.reset(new ProgramRegexTester); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::reversi: p.reset(new ProgramReversi); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::richelBilderbeekGallery: p.reset(new ProgramRichelBilderbeekGallery); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::richelbilderbeekNlSitemapGenerator: p.reset(new ProgramRichelBilderbeekNlSitemapGenerator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::rubiksClock: p.reset(new ProgramRubiksClock); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::rubiksClockVcl: p.reset(new ProgramRubiksClockVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::searchAndDestroyChess: p.reset(new ProgramSearchAndDestroyChess); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::searchAndDestroyChessVcl: p.reset(new ProgramSearchAndDestroyChessVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::secretMessage: p.reset(new ProgramSecretMessage); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::secretMessageVcl: p.reset(new ProgramSecretMessageVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::simBrainiac: p.reset(new ProgramSimBrainiac); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::simImmuneResponse: p.reset(new ProgramSimImmuneResponse); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::simMysteryMachine: p.reset(new ProgramSimMysteryMachine); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::simplifyNewick: p.reset(new ProgramSimplifyNewick); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::simPredator: p.reset(new ProgramSimPredator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::simStagecraft: p.reset(new ProgramSimStagecraft); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::soaSim: p.reset(new ProgramSoaSim); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::solvePuzzleX: p.reset(new ProgramSolvePuzzleX); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::spaceHarry: p.reset(new ProgramSpaceHarry); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::spaceHarryVcl: p.reset(new ProgramSpaceHarryVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::staircaseCardCreator: p.reset(new ProgramStaircaseCardCreator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::stateObserver: p.reset(new ProgramStateObserver); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::styleSheetSetter: p.reset(new ProgramStyleSheetSetter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::superNsanaBros: p.reset(new ProgramSuperNsanaBros); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::surfacePlotter: p.reset(new ProgramSurfacePlotter); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::surfacePlotterVcl: p.reset(new ProgramSurfacePlotterVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::tankBattalion: p.reset(new ProgramTankBattalion); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testAbout: p.reset(new ProgramTestAbout); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testApproximator: p.reset(new ProgramTestApproximator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testBinaryNewickVector: p.reset(new ProgramTestBinaryNewickVector); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testBouncingBallsWidget: p.reset(new ProgramTestBouncingBallsWidget); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testBouncingRectsWidget: p.reset(new ProgramTestBouncingRectsWidget); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testBroadcastServer: p.reset(new ProgramTestBroadcastServer); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testCanvas: p.reset(new ProgramTestCanvas); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testChess: p.reset(new ProgramTestChess); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testConceptMap: p.reset(new ProgramTestConceptMap); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testDial: p.reset(new ProgramTestDial); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testEntrance: p.reset(new ProgramTestEntrance); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testExercise: p.reset(new ProgramTestExercise); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testFunctionParser: p.reset(new ProgramTestFunctionParser); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testGnuplotInterface: p.reset(new ProgramTestGnuplotInterface); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testGraphicsProxyWidget: p.reset(new ProgramTestGraphicsProxyWidget); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testGravityWidget: p.reset(new ProgramTestGravityWidget); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testGroupWidget: p.reset(new ProgramTestGroupWidget); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testHugeVector: p.reset(new ProgramTestHugeVector); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testLazy_init: p.reset(new ProgramTestLazy_init); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testLed: p.reset(new ProgramTestLed); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testManyDigitNewick: p.reset(new ProgramTestManyDigitNewick); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testMultiApproximator: p.reset(new ProgramTestMultiApproximator); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testMultipleChoiceQuestion: p.reset(new ProgramTestMultipleChoiceQuestion); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testMultiVector: p.reset(new ProgramTestMultiVector); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testNdsmake: p.reset(new ProgramTestNdsmake); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testNeuralNet: p.reset(new ProgramTestNeuralNet); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testNewick: p.reset(new ProgramTestNewick); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testNewickVector: p.reset(new ProgramTestNewickVector); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testOpenQuestion: p.reset(new ProgramTestOpenQuestion); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testPylos: p.reset(new ProgramTestPylos); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQrcFile: p.reset(new ProgramTestQrcFile); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtArrowItems: p.reset(new ProgramTestQtArrowItems); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtCreatorProFile: p.reset(new ProgramTestQtCreatorProFile); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtHideAndShowDialog: p.reset(new ProgramTestQtHideAndShowDialog); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtKeyboardFriendlyGraphicsView: p.reset(new ProgramTestQtKeyboardFriendlyGraphicsView); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtOcrWidget: p.reset(new ProgramTestQtOcrWidget); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtModels: p.reset(new ProgramTestQtModels); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtRoundedEditRectItem: p.reset(new ProgramTestQtRoundedEditRectItem); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtRoundedRectItem: p.reset(new ProgramTestQtRoundedRectItem); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQtRoundedTextRectItem: p.reset(new ProgramTestQtRoundedTextRectItem); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testQuestion: p.reset(new ProgramTestQuestion); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testReversi: p.reset(new ProgramTestReversi); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testSelectFileDialog: p.reset(new ProgramTestSelectFileDialog); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testServerPusher: p.reset(new ProgramTestServerPusher); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testShape: p.reset(new ProgramTestShape); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testShinyButton: p.reset(new ProgramTestShinyButton); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testSimpleLinearRegression: p.reset(new ProgramTestSimpleLinearRegression); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testStopwatch: p.reset(new ProgramTestStopwatch); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testTextPositionWidget: p.reset(new ProgramTestTextPositionWidget); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testTicTacToe: p.reset(new ProgramTestTicTacToe); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testTimedServerPusher: p.reset(new ProgramTestTimedServerPusher); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testToggleButton: p.reset(new ProgramTestToggleButton); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::testTwoDigitNewick: p.reset(new ProgramTestTwoDigitNewick); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::thorVeen: p.reset(new ProgramThorVeen); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::thresholdFilterer: p.reset(new ProgramThresholdFilterer); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::thresholdFiltererVcl: p.reset(new ProgramThresholdFiltererVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::ticTacToe: p.reset(new ProgramTicTacToe); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::ticTacToeLearner: p.reset(new ProgramTicTacToeLearner); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::ticTacToeValuer: p.reset(new ProgramTicTacToeValuer); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::timePoll: p.reset(new ProgramTimePoll); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::tronCollection: p.reset(new ProgramTronCollection); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::tronCollectionVcl: p.reset(new ProgramTronCollectionVcl); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::ubuntuOneWatcher: p.reset(new ProgramUbuntuOneWatcher); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::vanDenBogaart: p.reset(new ProgramVanDenBogaart); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::virtualBastard: p.reset(new ProgramVirtualBastard); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::visualAbc: p.reset(new ProgramVisualAbc); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::xeNonZero: p.reset(new ProgramXeNonZero); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::zork: p.reset(new ProgramZork); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramType::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Unimplemented RichelBilderbeek::ProgramType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("Unimplemented RichelBilderbeek::ProgramType");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!p)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(ProgramTypes::ProgramTypeToEnumName(type));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;if (p-&gt;GetType() != type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(p-&gt;GetName());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(ProgramTypes::ProgramTypeToEnumName(type));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(ProgramTypes::ProgramTypeToEnumName(p-&gt;GetType()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(p-&gt;GetType() == type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "type and Program::GetType must match");<br/>
<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::string ribi::Program::GetName() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return ribi::ProgramTypes::ProgramTypeToEnumName(this-&gt;GetType());<br/>
}<br/>
<br/>
const std::string ribi::Program::GetScreenName() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return ribi::ProgramTypes::ProgramTypeToScreenName(this-&gt;GetType());<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Program&gt; &gt; ribi::Program::GetAllPrograms() noexcept<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;ProgramType&gt; types = ProgramTypes::GetAll();<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Program&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;for (const ProgramType type: types)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Program&gt; p = CreateProgram(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(v.size() == types.size());<br/>
&nbsp;&nbsp;std::sort(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const boost::shared_ptr&lt;Program&gt;&amp; lhs, const boost::shared_ptr&lt;Program&gt;&amp; rhs) { return lhs-&gt;GetName() &lt; rhs-&gt;GetName(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::Program::GetFilenameBase() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::string s = this-&gt;GetTypeName();<br/>
&nbsp;&nbsp;s[0] = std::toupper(s[0]);<br/>
&nbsp;&nbsp;return s + GetScreenName();<br/>
}<br/>
<br/>
const std::string ribi::Program::GetTypeName() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return ProgramTypes::ProgramTypeToEnumName(this-&gt;GetType());<br/>
}<br/>
<br/>
const std::string ribi::Program::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Program::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-02-19: Version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
std::ostream&amp; ribi::operator&lt;&lt;(std::ostream&amp; os, const Program&amp; p) noexcept<br/>
{<br/>
&nbsp;&nbsp;const std::string name = p.GetName();<br/>
<br/>
&nbsp;&nbsp;os &lt;&lt; name;<br/>
<br/>
&nbsp;&nbsp;if (name.size() &lt; 10) { os &lt;&lt; '\t'; }<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; '\t' &lt;&lt; p.GetTypeName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; '\t' &lt;&lt; ProgramStatusToStr(p.GetStatusConsole())<br/>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; '\t' &lt;&lt; ProgramStatusToStr(p.GetStatusDesktopWindowsOnly())<br/>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; '\t' &lt;&lt; ProgramStatusToStr(p.GetStatusDesktop())<br/>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; '\t' &lt;&lt; ProgramStatusToStr(p.GetStatusWebApplication());<br/>
&nbsp;&nbsp; return os;<br/>
}<br/>
<br/>
bool ribi::operator&lt;(const Program&amp; lhs, const Program&amp; rhs) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (lhs.GetTypeName() &lt; rhs.GetTypeName()) return true;<br/>
&nbsp;&nbsp;if (lhs.GetTypeName() &gt; rhs.GetTypeName()) return false;<br/>
&nbsp;&nbsp;return lhs.GetName() &lt; rhs.GetName();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogram.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogram.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Program, class for a program by Richel Bilderbeek<br/>
Copyright (C) 2012 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ProjectRichelBilderbeekProgram.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef RICHELBILDERBEEKPROGRAM_H<br/>
#define RICHELBILDERBEEKPROGRAM_H<br/>
<br/>
#include &lt;string&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "richelbilderbeekprogramstatus.h"<br/>
#include "richelbilderbeekprogramtype.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
///RichelBilderbeek::Program is the base class for program information<br/>
struct Program<br/>
{<br/>
&nbsp;&nbsp;virtual ~Program() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///Create a std::vector with all different Program instances in it<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Program&gt; CreateProgram(const ProgramType type) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Create a std::vector with all different Program instances in it<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;Program&gt; &gt; GetAllPrograms() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Get the filename of a console version screenshot<br/>
&nbsp;&nbsp;virtual const std::string GetFilenameConsole() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Get the filename of a desktop platform-independent version screenshot<br/>
&nbsp;&nbsp;virtual const std::string GetFilenameDesktop() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Get the filename of a desktop windows-only version screenshot<br/>
&nbsp;&nbsp;virtual const std::string GetFilenameDesktopWindowsOnly() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Get the filename of a web application version screenshot<br/>
&nbsp;&nbsp;virtual const std::string GetFilenameWeb() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Status of the console-only version<br/>
&nbsp;&nbsp;virtual ProgramStatus GetStatusConsole() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Status of the Windows-only desktop version<br/>
&nbsp;&nbsp;virtual ProgramStatus GetStatusDesktopWindowsOnly() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Status of the platform-independent desktop version<br/>
&nbsp;&nbsp;virtual ProgramStatus GetStatusDesktop() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Status of the web application version<br/>
&nbsp;&nbsp;virtual ProgramStatus GetStatusWebApplication() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///The item its enum name, e.g. 'k3OpEenRij'<br/>
&nbsp;&nbsp;const std::string GetName() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///The item its on-screen name, e.g. 'K3-Op-Een-Rij'<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///The program, e.g. 'RichelBilderbeekProgramType::boenken'<br/>
&nbsp;&nbsp;virtual ProgramType GetType() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///The type of program its name, e.g. 'Game'<br/>
&nbsp;&nbsp;virtual const std::string GetTypeName() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///The item its URL (at http://ww.richelbilderbeek.nl), e.g. 'ToolSimMysteryMachine.htm'<br/>
&nbsp;&nbsp;virtual const std::string GetUrl() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///Get the base of a filename<br/>
&nbsp;&nbsp;const std::string GetFilenameBase() const noexcept;<br/>
};<br/>
<br/>
///ProgramClass is the base class for all class demonstration programs<br/>
struct ProgramClass : public Program<br/>
{<br/>
&nbsp;&nbsp;virtual ~ProgramClass() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///The type of program its name, e.g. 'game'<br/>
&nbsp;&nbsp;const std::string GetTypeName() const noexcept { return "class"; }<br/>
};<br/>
<br/>
struct ProgramGame : public Program<br/>
{<br/>
&nbsp;&nbsp;virtual ~ProgramGame() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///The type of program its name, e.g. 'game'<br/>
&nbsp;&nbsp;const std::string GetTypeName() const noexcept { return "game"; }<br/>
};<br/>
<br/>
struct ProgramProject : public Program<br/>
{<br/>
&nbsp;&nbsp;virtual ~ProgramProject() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///The type of program its name, e.g. 'game'<br/>
&nbsp;&nbsp;const std::string GetTypeName() const noexcept { return "project"; }<br/>
};<br/>
<br/>
struct ProgramTool : public Program<br/>
{<br/>
&nbsp;&nbsp;virtual ~ProgramTool() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///The type of program its name, e.g. 'game'<br/>
&nbsp;&nbsp;const std::string GetTypeName() const noexcept { return "tool"; }<br/>
};<br/>
<br/>
struct ProgramAminoAcidFighter : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameAminoAcidFighter_0_9.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameAminoAcidFighter_0_9.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "AminoAcidFighter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::aminoAcidFighter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameAminoAcidFighter.htm"; }<br/>
};<br/>
<br/>
struct ProgramAthleticLand : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Athletic Land"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::athleticLand; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameAthleticLand.htm"; }<br/>
};<br/>
<br/>
struct ProgramAthleticLandVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameAthleticLand_0_9.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Athletic Land (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::athleticLandVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameAthleticLandVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramAsciiArter : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolAsciiArter_5_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestAsciiArter_4_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "AsciiArter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::asciiArter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolAsciiArter.htm"; }<br/>
};<br/>
<br/>
struct ProgramAsciiArterVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolAsciiArter_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "AsciiArter (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::asciiArterVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolAsciiArterVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramBarbaImage : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolBarbaImage_1_3.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "BarbaImage"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::barbaImage; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolBarbaImage.htm"; }<br/>
};<br/>
<br/>
struct ProgramBeerWanter : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameBeerWanter5.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "BeerWanter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::beerWanter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameBeerWanter.htm"; }<br/>
};<br/>
<br/>
struct ProgramBeerWanterVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameBeerWanter3.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "BeerWanter (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::beerWanterVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameBeerWanterVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramBochum : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ProjectBochumGaborFiltersResults.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Project Bochum"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::bochum; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectBochum.htm"; }<br/>
};<br/>
<br/>
struct ProgramBoenken : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameBoenken_4_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Boenken"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::boenken; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameBoenken.htm"; }<br/>
};<br/>
<br/>
struct ProgramBoenkenVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameBoenken_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Boenken (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::boenkenVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameBoenkenVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramBrainweaver : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Brainweaver"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::brainweaver; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectBrainweaver.htm"; }<br/>
};<br/>
<br/>
struct ProgramBristol : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ProjectBristol_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Bristol"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::bristol; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectBristol.htm"; }<br/>
};<br/>
<br/>
struct ProgramChrisWiley : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ProjectChrisWiley_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Project Chris Wiley"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::chrisWiley; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectChrisWiley.htm"; }<br/>
};<br/>
<br/>
struct ProgramCodeToHtml : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolCodeToHtml_2_3.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolCodeToHtml_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "CodeToHtml"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::codeToHtml; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolCodeToHtml.htm"; }<br/>
};<br/>
<br/>
struct ProgramConnectThree : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameConnectThree_5_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "GameConnectThree_6_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ConnectThree"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::connectThree; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameConnectThree.htm"; }<br/>
};<br/>
<br/>
struct ProgramCorridor : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameCorridor.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Corridor"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::corridor; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameCorridor.htm"; }<br/>
};<br/>
<br/>
struct ProgramCreateGlossary : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolCreateGlossary_1_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "CreateGlossary"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::createGlossary; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolCreateGlossary.htm"; }<br/>
};<br/>
<br/>
struct ProgramCreateQtProjectZipFile : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolCreateQtProjectZipFile_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "CreateQtProjectZipFile"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::createQtProjectZipFile; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolCreateQtProjectZipFile.htm"; }<br/>
};<br/>
<br/>
struct ProgramCrossPoll : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ProjectCrossPoll3.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "CrossPoll"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::crossPoll; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectCrossPoll.htm"; }<br/>
};<br/>
<br/>
struct ProgramDasWahreSchlagerfest : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameDasWahreSchlagerfest_2_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Das Wahre Schlagerfest"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::dasWahreSchlagerfest; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameDasWahreSchlagerfest.htm"; }<br/>
};<br/>
<br/>
struct ProgramDasWahreSchlagerfestVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameDasWahreSchlagerfest_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Das Wahre Schlagerfest (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::dasWahreSchlagerfestVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameDasWahreSchlagerfestVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramDotMatrix : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolDotMatrix_2_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "DotMatrix"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::dotMatrix; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolDotMatrix.htm"; }<br/>
};<br/>
<br/>
struct ProgramDotMatrixVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolDotMatrix_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "DotMatrix (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::dotMatrixVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolDotMatrixVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramEverythingToPiecesShooter : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "EverythingToPiecesShooter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::everythingToPiecesShooter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameEverythingToPiecesShooter.htm"; }<br/>
};<br/>
<br/>
struct ProgramFakeEvy : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "GrayFakeEvy"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::fakeEvy; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolFakeEvy.htm"; }<br/>
};<br/>
<br/>
struct ProgramFilterOperationer : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolFilterOperationer_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "FilterOperationer"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::filterOperationer; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolFilterOperationer.htm"; }<br/>
};<br/>
<br/>
struct ProgramFilterOperationerVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolFilterOperationer_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "FilterOperationer (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::filterOperationerVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolFilterOperationerVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramFryskLeareLieder : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolFryskLeareLieder_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "FryskLeareLieder"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::fryskLeareLieder; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolFryskLeareLieder.htm"; }<br/>
};<br/>
<br/>
struct ProgramFunctionPlotter : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolFunctionPlotter_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "FunctionPlotter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::functionPlotter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolFunctionPlotter.htm"; }<br/>
};<br/>
<br/>
struct ProgramFunctionPlotterVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolFunctionPlotter_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "FunctionPlotter (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::functionPlotterVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolFunctionPlotterVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramGaborFilter : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolGaborFilter_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "GaborFilter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::gaborFilter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolGaborFilter.htm"; }<br/>
};<br/>
<br/>
struct ProgramGaborFilterVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolGaborFilter_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "GaborFilter (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::gaborFilterVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolGaborFilterVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramGrayCoder : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolGrayCoder_2_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "GrayCoder"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::grayCoder; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolGrayCoder.htm"; }<br/>
};<br/>
<br/>
struct ProgramGrayCoderVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolGrayCoder_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "GrayCoder (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::grayCoderVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolGrayCoderVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramGtst : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ProjectGtst_1_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "GTST"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::gtst; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectGtst.htm"; }<br/>
};<br/>
<br/>
struct ProgramHistogramEqualizationer : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolHistogramEqualizationer_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "HistogramEqualizationer"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::unk; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::histogramEqualizationer; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolHistogramEqualizationer.htm"; }<br/>
};<br/>
<br/>
struct ProgramHistogramEqualizationerVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolHistogramEqualizationer_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "HistogramEqualizationer (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::histogramEqualizationerVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolHistogramEqualizationerVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramHometrainer : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolHometrainer_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Hometrainer"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::hometrainer; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolHometrainer.htm"; }<br/>
};<br/>
<br/>
struct ProgramHometrainerVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolHometrainer_1_8.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Hometrainer (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::hometrainerVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolHometrainerVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramImageRotater : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolImageRotater_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ImageRotater"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::unk; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::imageRotater; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolImageRotater.htm"; }<br/>
};<br/>
<br/>
<br/>
struct ProgramImageRotaterClx : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolImageRotaterClx_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ImageRotater (CLX)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::imageRotaterClx; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolImageRotaterClx.htm"; }<br/>
};<br/>
<br/>
struct ProgramImageRotaterVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolImageRotaterVcl_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ImageRotater (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::imageRotaterVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolImageRotaterVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramK3OpEenRij : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameK3OpEenRij_6_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "GameK3OpEenRij_5_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "K3 Op Een Rij"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::k3OpEenRij; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameK3OpEenRij.htm"; }<br/>
};<br/>
<br/>
struct ProgramK3OpEenRijVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameK3OpEenRij_4_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "K3 Op Een Rij (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::k3OpEenRijVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameK3OpEenRijVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramKalmanFilterer : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolKalmanFilterer_1_11.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "KalmanFilterer"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::kalmanFilterer; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolKalmanFilterer.htm"; }<br/>
};<br/>
<br/>
struct ProgramKeySender : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolKeySender_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "KeySender"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::keySender; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolKeySender.htm"; }<br/>
};<br/>
<br/>
struct ProgramKnokfighter : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Knokfighter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::knokfighter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameKnokfighter.htm"; }<br/>
};<br/>
<br/>
struct ProgramKnokfighterVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameKnokfighter_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Knokfighter (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::knokfighterVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameKnokfighterVcl.htm"; }<br/>
};<br/>
<br/>
<br/>
struct ProgramKTouchLectureCreator : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "KTouchLectureCreator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::kTouchLectureCreator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolKTouchLectureCreator.htm"; }<br/>
};<br/>
<br/>
struct ProgramLambdaBot : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "LambdaBot"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::lambdaBot; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolLambdaBot.htm"; }<br/>
};<br/>
<br/>
struct ProgramLearyCircumplex : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolLearyCircumplex_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "LearyCircumplex"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::learyCircumplex; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolLearyCircumplex.htm"; }<br/>
};<br/>
<br/>
struct ProgramLogisticGrowthSimulator : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolLogisticGrowthSimulator_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "LogisticGrowthSimulator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::logisticGrowthSimulator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolLogisticGrowthSimulator.htm"; }<br/>
};<br/>
<br/>
struct ProgramLoose : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolLoose_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Loose"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::loose; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolLoose.htm"; }<br/>
};<br/>
<br/>
struct ProgramMartianCafeTuinemaTycoon : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameMartianCafeTuinemaTycoon_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MartianCafeTuinemaTycoon"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::martianCafeTuinemaTycoon; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameMartianCafeTuinemaTycoon.htm"; }<br/>
};<br/>
<br/>
struct ProgramMazeCreator : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolMazeCreator_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MazeCreator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::mazeCreator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolMazeCreator.htm"; }<br/>
};<br/>
<br/>
struct ProgramMazeCreatorVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolMazeCreator_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MazeCreator (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::mazeCreatorVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolMazeCreatorVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramMaziak : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameMaziak_1_3.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Maziak"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::maziak; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameMaziak.htm"; }<br/>
};<br/>
<br/>
struct ProgramMaziakVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameMaziak_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Maziak (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::maziakVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameMaziakVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramMetZnDrieen : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MetZnDrieen"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::metZnDrieen; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameMetZnDrieen.htm"; }<br/>
};<br/>
<br/>
struct ProgramMetZnDrieenVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameMetZnDrieen_1_3.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MetZnDrieen (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::metZnDrieenVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameMetZnDrieenVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramMidiLessonCreator : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MidiLessonCreator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::midiLessonCreator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolMidiLessonCreator.htm"; }<br/>
};<br/>
<br/>
struct ProgramMorpher : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolMorpher_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Morpher"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::morpher; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolMorpher.htm"; }<br/>
};<br/>
<br/>
struct ProgramMultiEncranger : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MultiEncranger"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::multiEncranger; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolMultiEncranger.htm"; }<br/>
};<br/>
<br/>
struct ProgramMultiEncrangerVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolMultiEncranger_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MultiEncranger (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::multiEncrangerVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolMultiEncrangerVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramMuscaDomestica : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ProjectMuscaDomestica_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Project Musca Domestica"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::muscaDomestica; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectMuscaDomestica.htm"; }<br/>
};<br/>
<br/>
struct ProgramMusicTheory : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolMusicTheory_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "MusicTheory"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::musicTheory; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolMusicTheory.htm"; }<br/>
};<br/>
<br/>
struct ProgramNdsmake : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Ndsmake"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::ndsmake; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolNdsmake.htm"; }<br/>
};<br/>
<br/>
struct ProgramNdsPaint : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "NdsPaint"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::ndsPaint; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolNdsPaint.htm"; }<br/>
};<br/>
<br/>
struct ProgramPaperRockScissors : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolPaperRockScissors_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "PaperRockScissors"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::paperRockScissors; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPaperRockScissors.htm"; }<br/>
};<br/>
<br/>
struct ProgramPause : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Pause"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::pause; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPause.htm"; }<br/>
};<br/>
<br/>
struct ProgramPerfectElasticCollision : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolPerfectElasticCollision_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "PerfectElasticCollision"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::perfectElasticCollision; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPerfectElasticCollision.htm"; }<br/>
};<br/>
<br/>
struct ProgramPicToCode : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolPicToCode_1_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolPicToCode_1_3.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "PicToCode"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::picToCode; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPicToCode.htm"; }<br/>
};<br/>
<br/>
struct ProgramPixelator : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Pixelator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::pixelator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPixelator.htm"; }<br/>
};<br/>
<br/>
struct ProgramPixelatorVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolPixelator_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Pixelator (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::pixelatorVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPixelatorVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramPokeVolley : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GamePokeVolley_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "PokeVolley"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::pokeVolley; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GamePokeVolley.htm"; }<br/>
};<br/>
<br/>
struct ProgramPong : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Pong"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::pong; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GamePong.htm"; }<br/>
};<br/>
<br/>
struct ProgramPreDickAdvocaTor : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "PreDickAdvocaTor"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::preDickAdvocaTor; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPreDickAdvocaTor.htm"; }<br/>
};<br/>
<br/>
struct ProgramPrimeExpert : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolPrimeExpert_2_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolTestPrimeExpert_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "PrimeExpert"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::primeExpert; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolPrimeExpert.htm"; }<br/>
};<br/>
<br/>
struct ProgramProjectRichelBilderbeek : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ProjectRichelBilderbeek"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::projectRichelBilderbeek; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectRichelBilderbeek.htm"; }<br/>
};<br/>
<br/>
<br/>
struct ProgramPylos : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GamePylos_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Pylos"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::pylos; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GamePylos.htm"; }<br/>
};<br/>
<br/>
struct ProgramQmakeWatcher : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "QmakeWatcher"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::qmakeWatcher; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolQmakeWatcher.htm"; }<br/>
};<br/>
<br/>
struct ProgramQuadraticSolver : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return "ToolQuadraticSolver_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "QuadraticSolver"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::quadraticSolver; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolQuadraticSolver.htm"; }<br/>
};<br/>
<br/>
struct ProgramRampalEtienne : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ProjectRampalEtienne"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::rampalEtienne; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectRampalEtienne.htm"; }<br/>
};<br/>
<br/>
struct ProgramRandomCode : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolRandomCode_4_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolRandomCode_3_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "RandomCode"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::randomCode; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolRandomCode.htm"; }<br/>
};<br/>
<br/>
struct ProgramRandomCodeVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolRandomCode_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "RandomCode (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::randomCodeVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolRandomCodeVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramRasper : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolRasper_0_3.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Rasper"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::rasper; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolRasper.htm"; }<br/>
};<br/>
<br/>
struct ProgramRefrigeratorPuzzleSolver : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolRefrigeratorPuzzleSolver_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "RefrigeratorPuzzleSolver"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::refrigeratorPuzzleSolver; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolRefrigeratorPuzzleSolver.htm"; }<br/>
};<br/>
<br/>
struct ProgramRegexTester : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolRegexTester_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "RegexTester"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::regexTester; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolRegexTester.htm"; }<br/>
};<br/>
<br/>
struct ProgramReversi : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameReversi_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Reversi"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::reversi; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameReversi.htm"; }<br/>
};<br/>
<br/>
<br/>
struct ProgramRichelBilderbeekGallery : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolRichelBilderbeekGallery_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "RichelBilderbeekGallery"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::richelBilderbeekGallery; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolRichelBilderbeekGallery.htm"; }<br/>
};<br/>
<br/>
struct ProgramRichelBilderbeekNlSitemapGenerator : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "RichelBilderbeekNlSitemapGenerator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::richelbilderbeekNlSitemapGenerator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolRichelbilderbeekNlSitemapGenerator.htm"; }<br/>
};<br/>
<br/>
struct ProgramRubiksClock : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameRubiksClockDesktop_2_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "GameRubiksClock_2_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Rubik's Clock"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::rubiksClock; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameRubiksClock.htm"; }<br/>
};<br/>
<br/>
struct ProgramRubiksClockVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameRubiksClock_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Rubik's Clock (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::rubiksClockVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameRubiksClockVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramSearchAndDestroyChess : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Search And Destroy Chess"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::searchAndDestroyChess; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameSearchAndDestroyChess.htm"; }<br/>
};<br/>
<br/>
struct ProgramSearchAndDestroyChessVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return "GameSearchAndDestroyChessConsole_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameSearchAndDestroyChess_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Search And Destroy Chess (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::searchAndDestroyChessVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameSearchAndDestroyChessVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramSecretMessage : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SecretMessage"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::secretMessage; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSecretMessage.htm"; }<br/>
};<br/>
<br/>
struct ProgramSecretMessageVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolSecretMessage_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SecretMessage (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::secretMessageVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSecretMessageVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramSimBrainiac : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolSimBrainiac_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SimBrainiac"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::simBrainiac; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSimBrainiac.htm"; }<br/>
};<br/>
<br/>
struct ProgramSimImmuneResponse : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolSimImmuneResponse_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SimImmuneResponse"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::simImmuneResponse; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSimImmuneResponse.htm"; }<br/>
};<br/>
<br/>
struct ProgramSimMysteryMachine : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolSimMysteryMachine_1_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolSimMysteryMachine_1_1_web.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SimMysteryMachine"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::simMysteryMachine; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSimMysteryMachine.htm"; }<br/>
};<br/>
<br/>
struct ProgramSimplifyNewick : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolSimplifyNewick_1_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SimplifyNewick"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::simplifyNewick; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSimplifyNewick.htm"; }<br/>
};<br/>
<br/>
struct ProgramSimPredator : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameSimPredator_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SimPredator"; }<br/>
<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::simPredator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameSimPredator.htm"; }<br/>
};<br/>
<br/>
struct ProgramSimStagecraft : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolSimStagecraft_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SimStagecraft"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::simStagecraft; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSimStagecraft.htm"; }<br/>
};<br/>
<br/>
struct ProgramSoaSim : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolSoaSim_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SoaSim"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::soaSim; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSoaSim.htm"; }<br/>
};<br/>
<br/>
struct ProgramSolvePuzzleX : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SolvePuzzleX"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::solvePuzzleX; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSolvePuzzleX.htm"; }<br/>
};<br/>
<br/>
struct ProgramSpaceHarry : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Space Harry"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::spaceHarry; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameSpaceHarry.htm"; }<br/>
};<br/>
<br/>
struct ProgramSpaceHarryVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "GameSpaceHarry_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Space Harry (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::spaceHarryVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameSpaceHarryVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramStaircaseCardCreator : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "StaircaseCardCreator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::staircaseCardCreator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolStaircaseCardCreator.htm"; }<br/>
};<br/>
<br/>
struct ProgramStateObserver : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolStateObserver_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "StateObserver"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::stateObserver; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolStateObserver.htm"; }<br/>
};<br/>
<br/>
struct ProgramStyleSheetSetter : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "StyleSheetSetter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::styleSheetSetter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolStyleSheetSetter.htm"; }<br/>
};<br/>
<br/>
struct ProgramSuperNsanaBros : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Super Nsana Bros"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::superNsanaBros; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameSuperNsanaBros.htm"; }<br/>
};<br/>
<br/>
struct ProgramSurfacePlotter : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolSurfacePlotter_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SurfacePlotter"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::surfacePlotter; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSurfacePlotter.htm"; }<br/>
};<br/>
<br/>
struct ProgramSurfacePlotterVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolSurfacePlotter_1_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "SurfacePlotter (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::surfacePlotterVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolSurfacePlotterVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramTankBattalion : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TankBattalion"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::tankBattalion; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameTankBattalion.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestAbout : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestAbout_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestAbout"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testAbout; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestAbout.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestApproximator : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestApproximator_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestApproximator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testApproximator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestApproximator.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestBinaryNewickVector : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestBinaryNewickVector_1_5.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestBinaryNewickVector"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testBinaryNewickVector; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestBinaryNewickVector.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestBouncingBallsWidget : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestBouncingBallsWidget_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestBouncingBallsWidget"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testBouncingBallsWidget; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestBouncingBallsWidget.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestBouncingRectsWidget : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestBouncingRectsWidget_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestBouncingRectsWidget"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testBouncingRectsWidget; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestBouncingRectsWidget.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestBroadcastServer : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestBroadcastServer_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestBroadcastServer"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::n_a; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::n_a; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testBroadcastServer; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestBroadcastServer.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestCanvas : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestCanvas"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testCanvas; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestCanvas.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestChess : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestChess20120209.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestChess20120207.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestChess"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testChess; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestChess.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestConceptMap : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestConceptMap"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::unk; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testConceptMap; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestConceptMap.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestDial : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestDial_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestDial_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestDial"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::n_a; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testDial; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestDial.htm"; }<br/>
};<br/>
<br/>
struct ProgramEncranger : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolEncranger_2_5.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolEncranger_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolEncranger_2_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Encranger"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::encranger; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolEncranger.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestEntrance : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestEntrance_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestEntrance"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::n_a; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::n_a; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testEntrance; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestEntrance.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestExercise : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestExercise_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestExercise"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::unk; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testExercise; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestExercise.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestFunctionParser : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestFunctionParser_2_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolTestFunctionParser_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestFunctionParser_2_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestFunctionParser"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testFunctionParser; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestFunctionParser.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestGnuplotInterface : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestGnuplotInterface"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testGnuplotInterface; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestGnuplotInterface.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestGraphicsProxyWidget : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestGraphicsProxyWidget"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testGraphicsProxyWidget; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestGraphicsProxyWidget.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestGravityWidget : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestGravityWidget"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testGravityWidget; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestGravityWidget.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestGroupWidget : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestGroupWidget_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestGroupWidget"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testGroupWidget; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestGroupWidget.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestHugeVector : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestHugeVector"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testHugeVector; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestHugeVector.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestLazy_init : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestLazy_init"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testLazy_init; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestLazy_init.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestLed : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestLed_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestLed_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestLed"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testLed; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestLed.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestManyDigitNewick : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestManyDigitNewick"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testManyDigitNewick; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestManyDigitNewick.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestMultiApproximator : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestMultiApproximator_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestMultiApproximator"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testMultiApproximator; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestMultiApproximator.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestMultipleChoiceQuestion : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestMultipleChoiceQuestion"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testMultipleChoiceQuestion; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestMultipleChoiceQuestion.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestMultiVector : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestMultiVector"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testMultiVector; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestMultiVector.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestNdsmake : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestNdsmake_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestNdsmake"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testNdsmake; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestNdsmake.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestNeuralNet : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestNeuralNet_0_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestNeuralNet"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testNeuralNet; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestNeuralNet.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestNewick : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestNewick"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testNewick; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestNewick.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestNewickVector : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestNewickVector"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testNewickVector; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestNewickVector.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestOpenQuestion : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestOpenQuestion"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testOpenQuestion; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestOpenQuestion.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestPylos : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestPylos_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestPylos"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testPylos; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestPylos.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQrcFile : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQrcFile"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQrcFile; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQrcFile.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtArrowItems : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestQtArrowItems_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtArrowItems"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtArrowItems; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtArrowItems.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtCreatorProFile : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtCreatorProFile"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtCreatorProFile; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtCreatorProFile.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtHideAndShowDialog : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtHideAndShowDialog"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtHideAndShowDialog; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtHideAndShowDialog.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtKeyboardFriendlyGraphicsView : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtKeyboardFriendlyGraphicsView"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtKeyboardFriendlyGraphicsView; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtKeyboardFriendlyGraphicsView.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtModels : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtModels"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtModels; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtModels.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtOcrWidget : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtOcrWidget"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtOcrWidget; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtOcrWidget.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtRoundedEditRectItem : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestQtRoundedEditRectItem_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtRoundedEditRectItem"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtRoundedEditRectItem; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtRoundedEditRectItem.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtRoundedRectItem : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestQtRoundedRectItem_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtRoundedRectItem"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtRoundedRectItem; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtRoundedRectItem.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQtRoundedTextRectItem : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestQtRoundedTextRectItem_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQtRoundedTextRectItem"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQtRoundedTextRectItem; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQtRoundedTextRectItem.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestQuestion : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestQuestion_2_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestQuestion"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::unk; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testQuestion; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestQuestion.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestReversi : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestReversi"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testReversi; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestReversi.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestSelectFileDialog : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestSelectFileDialog_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestSelectFileDialog"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testSelectFileDialog; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestSelectFileDialog.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestServerPusher : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestServerPusher"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testServerPusher; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestServerPusher.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestShape : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestShape_1_0_desktop.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestShape_1_0_web.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestShape"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testShape; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestShape.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestShinyButton : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestShinyButton_2_0_desktop.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestShinyButton_2_0_web.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestShinyButton"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testShinyButton; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestShinyButton.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestSimpleLinearRegression : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestSimpleLinearRegression_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestSimpleLinearRegression"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testSimpleLinearRegression; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestSimpleLinearRegression.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestStopwatch : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestStopwatch"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testStopwatch; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestStopwatch.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestTextPositionWidget : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestTextPositionWidget"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testTextPositionWidget; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestTextPositionWidget.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestTicTacToe : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestTicTacToe_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTestTicTacToe_1_2.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestTicTacToe"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testTicTacToe; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestTicTacToe.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestTimedServerPusher : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestTimedServerPusher"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testTimedServerPusher; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestTimedServerPusher.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestToggleButton : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestToggleButton"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testToggleButton; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestToggleButton.htm"; }<br/>
};<br/>
<br/>
struct ProgramTestTwoDigitNewick : public ProgramClass<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTestTwoDigitNewick_0_6.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TestTwoDigitNewick"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::testTwoDigitNewick; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTestTwoDigitNewick.htm"; }<br/>
};<br/>
<br/>
struct ProgramThorVeen : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ProjectThorVeen_0_9.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Project ThorVeen"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::thorVeen; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectThorVeen.htm"; }<br/>
};<br/>
<br/>
struct ProgramThresholdFilterer : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ThresholdFilterer"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::thresholdFilterer; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolThresholdFilterer.htm"; }<br/>
};<br/>
<br/>
struct ProgramThresholdFiltererVcl : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolThresholdFilterer_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "ThresholdFilterer (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::thresholdFiltererVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolThresholdFiltererVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramTicTacToe : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameTicTacToe_1_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "GameTicTacToe_1_4.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TicTacToe"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::ticTacToe; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameTicTacToe.htm"; }<br/>
};<br/>
<br/>
struct ProgramTicTacToeLearner : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTicTacToeLearner_0_3.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TicTacToeLearner"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::ticTacToeLearner; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTicTacToeLearner.htm"; }<br/>
};<br/>
<br/>
struct ProgramTicTacToeValuer : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolTicTacToeValuer_0_7.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TicTacToeValuer"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::ticTacToeValuer; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTicTacToeValuer.htm"; }<br/>
};<br/>
<br/>
struct ProgramTimePoll : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return "ToolTimePoll_4_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TimePoll"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::timePoll; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolTimePoll.htm"; }<br/>
};<br/>
<br/>
struct ProgramTronCollection : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TronCollection"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::wip; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::tronCollection; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameTronCollection.htm"; }<br/>
};<br/>
<br/>
struct ProgramTronCollectionVcl : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "TronCollection (VCL)"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::tronCollectionVcl; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameTronCollectionVcl.htm"; }<br/>
};<br/>
<br/>
struct ProgramUbuntuOneWatcher : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolUbuntuOneWatcher_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "UbuntuOneWatcher"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::ubuntuOneWatcher; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolUbuntuOneWatcher.htm"; }<br/>
};<br/>
<br/>
struct ProgramVanDenBogaart : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "VanDenBogaart"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::vanDenBogaart; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectVanDenBogaart.htm"; }<br/>
};<br/>
<br/>
struct ProgramVirtualBastard : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "VirtualBastard"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::virtualBastard; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolVirtualBastard.htm"; }<br/>
};<br/>
<br/>
struct ProgramVisualAbc : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "ToolVisualAbc_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "VisualAbc"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::visualAbc; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolVisualAbc.htm"; }<br/>
};<br/>
<br/>
struct ProgramXeNonZero : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return "GameXeNonZero_0_1.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "XeNonZero"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::xeNonZero; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameXeNonZero.htm"; }<br/>
};<br/>
<br/>
struct ProgramZork : public ProgramGame<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return "GameZork.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetScreenName() const noexcept { return "Zork"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::zork; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "GameZork.htm"; }<br/>
};<br/>
<br/>
/*<br/>
struct ProgramNewickVector : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetName() const { return "NewickVector"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::newickVector; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectNewickVector.htm"; }<br/>
};<br/>
<br/>
<br/>
struct ProgramTwoDigitNewick : public ProgramProject<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetName() const { return "TwoDigitNewick"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::twoDigitNewick; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ProjectTwoDigitNewick.htm"; }<br/>
};<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
struct ProgramCreateSitemap : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetName() const { return "CreateSitemap"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::nvr; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::createSitemap; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolCreateSitemap.htm"; }<br/>
};<br/>
<br/>
<br/>
struct ProgramEncranger : public ProgramTool<br/>
{<br/>
&nbsp;&nbsp;const std::string GetFilenameConsole() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktop() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetFilenameDesktopWindowsOnly() const noexcept { return "ToolEncranger_1_0.png"; }<br/>
&nbsp;&nbsp;const std::string GetFilenameWeb() const noexcept { return ""; }<br/>
&nbsp;&nbsp;const std::string GetName() const { return "Encranger"; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusConsole() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktopWindowsOnly() const noexcept { return ProgramStatus::yes; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusDesktop() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramStatus GetStatusWebApplication() const noexcept { return ProgramStatus::no; }<br/>
&nbsp;&nbsp;ProgramType GetType() const noexcept { return ProgramType::encranger; }<br/>
&nbsp;&nbsp;const std::string GetUrl() const noexcept { return "ToolEncranger.htm"; }<br/>
};<br/>
<br/>
*/<br/>
<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Program&amp; p) noexcept;<br/>
bool operator&lt;(const Program&amp; lhs, const Program&amp; rhs) noexcept;<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // RICHELBILDERBEEKPROGRAM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogramstatus.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogramstatus.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
RichelBilderbeek::ProgramStatus, status of a program by Richel Bilderbeek<br/>
Copyright (C) 2012 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ProjectRichelBilderbeekProgramStatus.htm<br/>
//---------------------------------------------------------------------------<br/>
#include "richelbilderbeekprogramstatus.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
const std::string ribi::ProgramStatusToStr(const ProgramStatus c)<br/>
{<br/>
&nbsp;&nbsp;switch (c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramStatus::yes: return "yes";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramStatus::no : return "no";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramStatus::nvr: return "never";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramStatus::n_a: return "n/a";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramStatus::wip: return "wip";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramStatus::tbd: return "todo";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case ProgramStatus::unk: return "unknown";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;throw std::logic_error("RichelBilderbeek::ProgramStatusToStr");<br/>
}<br/>
<br/>
const std::string ribi::ProgramStatusVersion::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::ProgramStatusVersion::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-02-19: Version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
std::ostream&amp; ribi::operator&lt;&lt;(std::ostream&amp; os, const ProgramStatus c)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; ProgramStatusToStr(c);<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogramstatus.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogramstatus.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
RichelBilderbeek::ProgramStatus, status of a program by Richel Bilderbeek<br/>
Copyright (C) 2012 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ProjectRichelBilderbeekProgramStatus.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef RICHELBILDERBEEKPROGRAMSTATUS_H<br/>
#define RICHELBILDERBEEKPROGRAMSTATUS_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
<br/>
///Status: yes, no, never, not applicable, work in progress, to be done and unknown<br/>
enum class ProgramStatus { yes, no, nvr, n_a, wip, tbd, unk };<br/>
<br/>
struct ProgramStatusVersion<br/>
{<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
};<br/>
<br/>
const std::string ProgramStatusToStr(const ProgramStatus c);<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const ProgramStatus c);<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // RICHELBILDERBEEKPROGRAMSTATUS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogramtype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogramtype.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
RichelBilderbeek::ProgramType, enum for a program by Richel Bilderbeek<br/>
Copyright (C) 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ProjectRichelBilderbeek.htm<br/>
//---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogramtype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogramtype.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
RichelBilderbeek::ProgramType, enum for a program by Richel Bilderbeek<br/>
Copyright (C 2013 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ProjectRichelBilderbeek.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef RICHELBILDERBEEKPROGRAMTYPE_H<br/>
#define RICHELBILDERBEEKPROGRAMTYPE_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
<br/>
///ProgramTypes works with ProgramType<br/>
enum class ProgramType<br/>
{<br/>
&nbsp;&nbsp;aminoAcidFighter,<br/>
&nbsp;&nbsp;athleticLand,<br/>
&nbsp;&nbsp;athleticLandVcl,<br/>
&nbsp;&nbsp;asciiArter,<br/>
&nbsp;&nbsp;asciiArterVcl,<br/>
&nbsp;&nbsp;barbaImage,<br/>
&nbsp;&nbsp;beerWanter,<br/>
&nbsp;&nbsp;beerWanterVcl,<br/>
&nbsp;&nbsp;bochum,<br/>
&nbsp;&nbsp;boenken,<br/>
&nbsp;&nbsp;boenkenVcl,<br/>
&nbsp;&nbsp;brainweaver,<br/>
&nbsp;&nbsp;bristol,<br/>
&nbsp;&nbsp;chrisWiley,<br/>
&nbsp;&nbsp;codeToHtml,<br/>
&nbsp;&nbsp;connectThree,<br/>
&nbsp;&nbsp;corridor,<br/>
&nbsp;&nbsp;createGlossary,<br/>
&nbsp;&nbsp;createQtProjectZipFile,<br/>
&nbsp;&nbsp;crossPoll,<br/>
&nbsp;&nbsp;dasWahreSchlagerfest,<br/>
&nbsp;&nbsp;dasWahreSchlagerfestVcl,<br/>
&nbsp;&nbsp;dotMatrix,<br/>
&nbsp;&nbsp;dotMatrixVcl,<br/>
&nbsp;&nbsp;encranger,<br/>
&nbsp;&nbsp;everythingToPiecesShooter,<br/>
&nbsp;&nbsp;fakeEvy,<br/>
&nbsp;&nbsp;filterOperationer,<br/>
&nbsp;&nbsp;filterOperationerVcl,<br/>
&nbsp;&nbsp;fryskLeareLieder,<br/>
&nbsp;&nbsp;functionPlotter,<br/>
&nbsp;&nbsp;functionPlotterVcl,<br/>
&nbsp;&nbsp;gaborFilter,<br/>
&nbsp;&nbsp;gaborFilterVcl,<br/>
&nbsp;&nbsp;grayCoder,<br/>
&nbsp;&nbsp;grayCoderVcl,<br/>
&nbsp;&nbsp;gtst,<br/>
&nbsp;&nbsp;histogramEqualizationer,<br/>
&nbsp;&nbsp;histogramEqualizationerVcl,<br/>
&nbsp;&nbsp;hometrainer,<br/>
&nbsp;&nbsp;hometrainerVcl,<br/>
&nbsp;&nbsp;imageRotater,<br/>
&nbsp;&nbsp;imageRotaterClx,<br/>
&nbsp;&nbsp;imageRotaterVcl,<br/>
&nbsp;&nbsp;k3OpEenRij,<br/>
&nbsp;&nbsp;k3OpEenRijVcl,<br/>
&nbsp;&nbsp;kalmanFilterer,<br/>
&nbsp;&nbsp;keySender,<br/>
&nbsp;&nbsp;knokfighter,<br/>
&nbsp;&nbsp;knokfighterVcl,<br/>
&nbsp;&nbsp;kTouchLectureCreator,<br/>
&nbsp;&nbsp;lambdaBot,<br/>
&nbsp;&nbsp;learyCircumplex,<br/>
&nbsp;&nbsp;logisticGrowthSimulator,<br/>
&nbsp;&nbsp;loose,<br/>
&nbsp;&nbsp;martianCafeTuinemaTycoon,<br/>
&nbsp;&nbsp;mazeCreator,<br/>
&nbsp;&nbsp;mazeCreatorVcl,<br/>
&nbsp;&nbsp;maziak,<br/>
&nbsp;&nbsp;maziakVcl,<br/>
&nbsp;&nbsp;metZnDrieen,<br/>
&nbsp;&nbsp;metZnDrieenVcl,<br/>
&nbsp;&nbsp;midiLessonCreator,<br/>
&nbsp;&nbsp;morpher,<br/>
&nbsp;&nbsp;multiEncranger,<br/>
&nbsp;&nbsp;multiEncrangerVcl,<br/>
&nbsp;&nbsp;muscaDomestica,<br/>
&nbsp;&nbsp;musicTheory,<br/>
&nbsp;&nbsp;ndsmake,<br/>
&nbsp;&nbsp;ndsPaint,<br/>
&nbsp;&nbsp;paperRockScissors,<br/>
&nbsp;&nbsp;pause,<br/>
&nbsp;&nbsp;perfectElasticCollision,<br/>
&nbsp;&nbsp;picToCode,<br/>
&nbsp;&nbsp;pixelator,<br/>
&nbsp;&nbsp;pixelatorVcl,<br/>
&nbsp;&nbsp;pokeVolley,<br/>
&nbsp;&nbsp;pong,<br/>
&nbsp;&nbsp;preDickAdvocaTor,<br/>
&nbsp;&nbsp;primeExpert,<br/>
&nbsp;&nbsp;projectRichelBilderbeek,<br/>
&nbsp;&nbsp;pylos,<br/>
&nbsp;&nbsp;qmakeWatcher,<br/>
&nbsp;&nbsp;quadraticSolver,<br/>
&nbsp;&nbsp;rampalEtienne,<br/>
&nbsp;&nbsp;randomCode,<br/>
&nbsp;&nbsp;randomCodeVcl,<br/>
&nbsp;&nbsp;rasper,<br/>
&nbsp;&nbsp;refrigeratorPuzzleSolver,<br/>
&nbsp;&nbsp;regexTester,<br/>
&nbsp;&nbsp;reversi,<br/>
&nbsp;&nbsp;richelBilderbeekGallery,<br/>
&nbsp;&nbsp;richelbilderbeekNlSitemapGenerator,<br/>
&nbsp;&nbsp;rubiksClock,<br/>
&nbsp;&nbsp;rubiksClockVcl,<br/>
&nbsp;&nbsp;searchAndDestroyChess,<br/>
&nbsp;&nbsp;searchAndDestroyChessVcl,<br/>
&nbsp;&nbsp;secretMessage,<br/>
&nbsp;&nbsp;secretMessageVcl,<br/>
&nbsp;&nbsp;simBrainiac,<br/>
&nbsp;&nbsp;simImmuneResponse,<br/>
&nbsp;&nbsp;simMysteryMachine,<br/>
&nbsp;&nbsp;simplifyNewick,<br/>
&nbsp;&nbsp;simPredator,<br/>
&nbsp;&nbsp;simStagecraft,<br/>
&nbsp;&nbsp;soaSim,<br/>
&nbsp;&nbsp;solvePuzzleX,<br/>
&nbsp;&nbsp;spaceHarry,<br/>
&nbsp;&nbsp;spaceHarryVcl,<br/>
&nbsp;&nbsp;staircaseCardCreator,<br/>
&nbsp;&nbsp;stateObserver,<br/>
&nbsp;&nbsp;styleSheetSetter,<br/>
&nbsp;&nbsp;superNsanaBros,<br/>
&nbsp;&nbsp;surfacePlotter,<br/>
&nbsp;&nbsp;surfacePlotterVcl,<br/>
&nbsp;&nbsp;tankBattalion,<br/>
&nbsp;&nbsp;testAbout,<br/>
&nbsp;&nbsp;testApproximator,<br/>
&nbsp;&nbsp;testBinaryNewickVector,<br/>
&nbsp;&nbsp;testBouncingBallsWidget,<br/>
&nbsp;&nbsp;testBouncingRectsWidget,<br/>
&nbsp;&nbsp;testBroadcastServer,<br/>
&nbsp;&nbsp;testCanvas,<br/>
&nbsp;&nbsp;testChess,<br/>
&nbsp;&nbsp;testConceptMap,<br/>
&nbsp;&nbsp;testDial,<br/>
&nbsp;&nbsp;testEntrance,<br/>
&nbsp;&nbsp;testExercise,<br/>
&nbsp;&nbsp;testFunctionParser,<br/>
&nbsp;&nbsp;testGnuplotInterface,<br/>
&nbsp;&nbsp;testGraphicsProxyWidget,<br/>
&nbsp;&nbsp;testGravityWidget,<br/>
&nbsp;&nbsp;testGroupWidget,<br/>
&nbsp;&nbsp;testHugeVector,<br/>
&nbsp;&nbsp;testLazy_init,<br/>
&nbsp;&nbsp;testLed,<br/>
&nbsp;&nbsp;testManyDigitNewick,<br/>
&nbsp;&nbsp;testMultiApproximator,<br/>
&nbsp;&nbsp;testMultipleChoiceQuestion,<br/>
&nbsp;&nbsp;testMultiVector,<br/>
&nbsp;&nbsp;testNdsmake,<br/>
&nbsp;&nbsp;testNeuralNet,<br/>
&nbsp;&nbsp;testNewick,<br/>
&nbsp;&nbsp;testNewickVector,<br/>
&nbsp;&nbsp;testOpenQuestion,<br/>
&nbsp;&nbsp;testPylos,<br/>
&nbsp;&nbsp;testQrcFile,<br/>
&nbsp;&nbsp;testQtArrowItems,<br/>
&nbsp;&nbsp;testQtCreatorProFile,<br/>
&nbsp;&nbsp;testQtHideAndShowDialog,<br/>
&nbsp;&nbsp;testQtKeyboardFriendlyGraphicsView,<br/>
&nbsp;&nbsp;testQtModels,<br/>
&nbsp;&nbsp;testQtOcrWidget,<br/>
&nbsp;&nbsp;testQtRoundedEditRectItem,<br/>
&nbsp;&nbsp;testQtRoundedRectItem,<br/>
&nbsp;&nbsp;testQtRoundedTextRectItem,<br/>
&nbsp;&nbsp;testQuestion,<br/>
&nbsp;&nbsp;testReversi,<br/>
&nbsp;&nbsp;testSelectFileDialog,<br/>
&nbsp;&nbsp;testServerPusher,<br/>
&nbsp;&nbsp;testShape,<br/>
&nbsp;&nbsp;testShinyButton,<br/>
&nbsp;&nbsp;testSimpleLinearRegression,<br/>
&nbsp;&nbsp;testStopwatch,<br/>
&nbsp;&nbsp;testTextPositionWidget,<br/>
&nbsp;&nbsp;testTicTacToe,<br/>
&nbsp;&nbsp;testTimedServerPusher,<br/>
&nbsp;&nbsp;testToggleButton,<br/>
&nbsp;&nbsp;testTwoDigitNewick,<br/>
&nbsp;&nbsp;thorVeen,<br/>
&nbsp;&nbsp;thresholdFilterer,<br/>
&nbsp;&nbsp;thresholdFiltererVcl,<br/>
&nbsp;&nbsp;ticTacToe,<br/>
&nbsp;&nbsp;ticTacToeLearner,<br/>
&nbsp;&nbsp;ticTacToeValuer,<br/>
&nbsp;&nbsp;timePoll,<br/>
&nbsp;&nbsp;tronCollection,<br/>
&nbsp;&nbsp;tronCollectionVcl,<br/>
&nbsp;&nbsp;ubuntuOneWatcher,<br/>
&nbsp;&nbsp;vanDenBogaart,<br/>
&nbsp;&nbsp;virtualBastard,<br/>
&nbsp;&nbsp;visualAbc,<br/>
&nbsp;&nbsp;xeNonZero,<br/>
&nbsp;&nbsp;zork,<br/>
<br/>
&nbsp;&nbsp;n_types //Used for debugging<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // RICHELBILDERBEEKPROGRAMTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogramtypes.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogramtypes.cpp" border = "1"><tr><td><code>
#include "richelbilderbeekprogramtypes.h"<br/>
<br/>
#include "richelbilderbeekprogramtype.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include "trace.h"<br/>
<br/>
//Lazy initializion<br/>
boost::bimap&lt;ribi::ProgramType,std::string&gt; ribi::ProgramTypes::m_map_to_enumname {};<br/>
//Lazy initializion<br/>
boost::bimap&lt;ribi::ProgramType,std::string&gt; ribi::ProgramTypes::m_map_to_screenname {};<br/>
<br/>
const boost::bimap&lt;ribi::ProgramType,std::string&gt; ribi::ProgramTypes::CreateEnumNameMap()<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;boost::bimap&lt;ProgramType,std::string&gt; m;<br/>
&nbsp;&nbsp;typedef boost::bimap&lt;ProgramType,std::string&gt;::value_type Pair;<br/>
&nbsp;&nbsp;///Generated with Gnumeric:<br/>
&nbsp;&nbsp;/// =CONCATENATE("m.insert(Pair(ProgramType::",A1,",std::string(\"",A1,"\")));")<br/>
&nbsp;&nbsp;///where A1 to Ax contain the programType enum values<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::aminoAcidFighter,std::string("aminoAcidFighter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::athleticLand,std::string("athleticLand")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::athleticLandVcl,std::string("athleticLandVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::asciiArter,std::string("asciiArter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::asciiArterVcl,std::string("asciiArterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::barbaImage,std::string("barbaImage")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::beerWanter,std::string("beerWanter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::beerWanterVcl,std::string("beerWanterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::bochum,std::string("bochum")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::boenken,std::string("boenken")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::boenkenVcl,std::string("boenkenVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::brainweaver,std::string("brainweaver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::bristol,std::string("bristol")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::chrisWiley,std::string("chrisWiley")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::codeToHtml,std::string("codeToHtml")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::connectThree,std::string("connectThree")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::corridor,std::string("corridor")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::createGlossary,std::string("createGlossary")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::createQtProjectZipFile,std::string("createQtProjectZipFile")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::crossPoll,std::string("crossPoll")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dasWahreSchlagerfest,std::string("dasWahreSchlagerfest")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dasWahreSchlagerfestVcl,std::string("dasWahreSchlagerfestVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dotMatrix,std::string("dotMatrix")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dotMatrixVcl,std::string("dotMatrixVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::encranger,std::string("encranger")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::everythingToPiecesShooter,std::string("everythingToPiecesShooter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::fakeEvy,std::string("fakeEvy")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::filterOperationer,std::string("filterOperationer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::filterOperationerVcl,std::string("filterOperationerVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::fryskLeareLieder,std::string("fryskLeareLieder")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::functionPlotter,std::string("functionPlotter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::functionPlotterVcl,std::string("functionPlotterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::gaborFilter,std::string("gaborFilter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::gaborFilterVcl,std::string("gaborFilterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::grayCoder,std::string("grayCoder")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::grayCoderVcl,std::string("grayCoderVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::gtst,std::string("gtst")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::histogramEqualizationer,std::string("histogramEqualizationer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::histogramEqualizationerVcl,std::string("histogramEqualizationerVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::hometrainer,std::string("hometrainer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::hometrainerVcl,std::string("hometrainerVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::imageRotater,std::string("imageRotater")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::imageRotaterClx,std::string("imageRotaterClx")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::imageRotaterVcl,std::string("imageRotaterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::k3OpEenRij,std::string("k3OpEenRij")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::k3OpEenRijVcl,std::string("k3OpEenRijVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::kalmanFilterer,std::string("kalmanFilterer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::keySender,std::string("keySender")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::knokfighter,std::string("knokfighter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::knokfighterVcl,std::string("knokfighterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::kTouchLectureCreator,std::string("kTouchLectureCreator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::lambdaBot,std::string("lambdaBot")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::learyCircumplex,std::string("learyCircumplex")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::logisticGrowthSimulator,std::string("logisticGrowthSimulator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::loose,std::string("loose")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::martianCafeTuinemaTycoon,std::string("martianCafeTuinemaTycoon")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::mazeCreator,std::string("mazeCreator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::mazeCreatorVcl,std::string("mazeCreatorVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::maziak,std::string("maziak")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::maziakVcl,std::string("maziakVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::metZnDrieen,std::string("metZnDrieen")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::metZnDrieenVcl,std::string("metZnDrieenVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::midiLessonCreator,std::string("midiLessonCreator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::morpher,std::string("morpher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::multiEncranger,std::string("multiEncranger")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::multiEncrangerVcl,std::string("multiEncrangerVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::muscaDomestica,std::string("muscaDomestica")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::musicTheory,std::string("musicTheory")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ndsmake,std::string("ndsmake")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ndsPaint,std::string("ndsPaint")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::paperRockScissors,std::string("paperRockScissors")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pause,std::string("pause")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::perfectElasticCollision,std::string("perfectElasticCollision")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::picToCode,std::string("picToCode")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pixelator,std::string("pixelator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pixelatorVcl,std::string("pixelatorVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pokeVolley,std::string("pokeVolley")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pong,std::string("pong")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::preDickAdvocaTor,std::string("preDickAdvocaTor")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::primeExpert,std::string("primeExpert")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::projectRichelBilderbeek,std::string("projectRichelBilderbeek")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pylos,std::string("pylos")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::qmakeWatcher,std::string("qmakeWatcher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::quadraticSolver,std::string("quadraticSolver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rampalEtienne,std::string("rampalEtienne")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::randomCode,std::string("randomCode")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::randomCodeVcl,std::string("randomCodeVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rasper,std::string("rasper")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::refrigeratorPuzzleSolver,std::string("refrigeratorPuzzleSolver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::regexTester,std::string("regexTester")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::reversi,std::string("reversi")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::richelBilderbeekGallery,std::string("richelBilderbeekGallery")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::richelbilderbeekNlSitemapGenerator,std::string("richelbilderbeekNlSitemapGenerator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rubiksClock,std::string("rubiksClock")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rubiksClockVcl,std::string("rubiksClockVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::searchAndDestroyChess,std::string("searchAndDestroyChess")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::searchAndDestroyChessVcl,std::string("searchAndDestroyChessVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::secretMessage,std::string("secretMessage")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::secretMessageVcl,std::string("secretMessageVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simBrainiac,std::string("simBrainiac")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simImmuneResponse,std::string("simImmuneResponse")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simMysteryMachine,std::string("simMysteryMachine")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simplifyNewick,std::string("simplifyNewick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simPredator,std::string("simPredator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simStagecraft,std::string("simStagecraft")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::soaSim,std::string("soaSim")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::solvePuzzleX,std::string("solvePuzzleX")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::spaceHarry,std::string("spaceHarry")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::spaceHarryVcl,std::string("spaceHarryVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::staircaseCardCreator,std::string("staircaseCardCreator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::stateObserver,std::string("stateObserver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::styleSheetSetter,std::string("styleSheetSetter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::superNsanaBros,std::string("superNsanaBros")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::surfacePlotter,std::string("surfacePlotter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::surfacePlotterVcl,std::string("surfacePlotterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::tankBattalion,std::string("tankBattalion")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testAbout,std::string("testAbout")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testApproximator,std::string("testApproximator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBinaryNewickVector,std::string("testBinaryNewickVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBouncingBallsWidget,std::string("testBouncingBallsWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBouncingRectsWidget,std::string("testBouncingRectsWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBroadcastServer,std::string("testBroadcastServer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testCanvas,std::string("testCanvas")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testChess,std::string("testChess")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testConceptMap,std::string("testConceptMap")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testDial,std::string("testDial")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testEntrance,std::string("testEntrance")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testExercise,std::string("testExercise")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testFunctionParser,std::string("testFunctionParser")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGnuplotInterface,std::string("testGnuplotInterface")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGraphicsProxyWidget,std::string("testGraphicsProxyWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGravityWidget,std::string("testGravityWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGroupWidget,std::string("testGroupWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testHugeVector,std::string("testHugeVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testLazy_init,std::string("testLazy_init")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testLed,std::string("testLed")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testManyDigitNewick,std::string("testManyDigitNewick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testMultiApproximator,std::string("testMultiApproximator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testMultipleChoiceQuestion,std::string("testMultipleChoiceQuestion")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testMultiVector,std::string("testMultiVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNdsmake,std::string("testNdsmake")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNeuralNet,std::string("testNeuralNet")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNewick,std::string("testNewick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNewickVector,std::string("testNewickVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testOpenQuestion,std::string("testOpenQuestion")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testPylos,std::string("testPylos")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQrcFile,std::string("testQrcFile")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtArrowItems,std::string("testQtArrowItems")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtCreatorProFile,std::string("testQtCreatorProFile")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtHideAndShowDialog,std::string("testQtHideAndShowDialog")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtKeyboardFriendlyGraphicsView,std::string("testQtKeyboardFriendlyGraphicsView")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtModels,std::string("testQtModels")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtOcrWidget,std::string("testQtOcrWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtRoundedEditRectItem,std::string("testQtRoundedEditRectItem")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtRoundedRectItem,std::string("testQtRoundedRectItem")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtRoundedTextRectItem,std::string("testQtRoundedTextRectItem")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQuestion,std::string("testQuestion")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testReversi,std::string("testReversi")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testSelectFileDialog,std::string("testSelectFileDialog")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testServerPusher,std::string("testServerPusher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testShape,std::string("testShape")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testShinyButton,std::string("testShinyButton")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testSimpleLinearRegression,std::string("testSimpleLinearRegression")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testStopwatch,std::string("testStopwatch")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTextPositionWidget,std::string("testTextPositionWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTicTacToe,std::string("testTicTacToe")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTimedServerPusher,std::string("testTimedServerPusher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testToggleButton,std::string("testToggleButton")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTwoDigitNewick,std::string("testTwoDigitNewick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::thorVeen,std::string("thorVeen")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::thresholdFilterer,std::string("thresholdFilterer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::thresholdFiltererVcl,std::string("thresholdFiltererVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ticTacToe,std::string("ticTacToe")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ticTacToeLearner,std::string("ticTacToeLearner")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ticTacToeValuer,std::string("ticTacToeValuer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::timePoll,std::string("timePoll")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::tronCollection,std::string("tronCollection")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::tronCollectionVcl,std::string("tronCollectionVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ubuntuOneWatcher,std::string("ubuntuOneWatcher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::vanDenBogaart,std::string("vanDenBogaart")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::virtualBastard,std::string("virtualBastard")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::visualAbc,std::string("visualAbc")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::xeNonZero,std::string("xeNonZero")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::zork,std::string("zork")));<br/>
&nbsp;&nbsp;assert(m.left.size() == m.right.size());<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (static_cast&lt;int&gt;(m.left.size()) != static_cast&lt;int&gt;(ProgramType::n_types))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(m.left.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(static_cast&lt;int&gt;(ProgramType::n_types));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("Copy the contents of ProgramType (except n_types) to above here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(static_cast&lt;int&gt;(m.left.size()) == static_cast&lt;int&gt;(ProgramType::n_types));<br/>
&nbsp;&nbsp;return m;<br/>
}<br/>
<br/>
const boost::bimap&lt;ribi::ProgramType,std::string&gt; ribi::ProgramTypes::CreateScreenNameMap()<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;boost::bimap&lt;ProgramType,std::string&gt; m;<br/>
&nbsp;&nbsp;typedef boost::bimap&lt;ProgramType,std::string&gt;::value_type Pair;<br/>
&nbsp;&nbsp;///Generated with Gnumeric:<br/>
&nbsp;&nbsp;/// =CONCATENATE("m.insert(Pair(ProgramType::",A1,",std::string(\"",A1,"\")));")<br/>
&nbsp;&nbsp;///where A1 to Ax contain the programType enum values<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::aminoAcidFighter,std::string("Amino Acid Fighter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::asciiArter,std::string("AsciiArter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::asciiArterVcl,std::string("AsciiArter (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::athleticLand,std::string("Athletic Land")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::athleticLandVcl,std::string("Athletic Land (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::barbaImage,std::string("BarbaImage")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::beerWanter,std::string("BeerWanter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::beerWanterVcl,std::string("BeerWanter (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::bochum,std::string("Bochum")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::boenken,std::string("Boenken")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::boenkenVcl,std::string("Boenken (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::brainweaver,std::string("Brainweaver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::bristol,std::string("Bristol")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::chrisWiley,std::string("Chris Wiley")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::codeToHtml,std::string("CodeToHtml")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::connectThree,std::string("ConnectThree")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::corridor,std::string("Corridor")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::createGlossary,std::string("CreateGlossary")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::createQtProjectZipFile,std::string("CreateQtProjectZipFile")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::crossPoll,std::string("CrossPoll")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dasWahreSchlagerfest,std::string("Das Wahre Schlagerfest")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dasWahreSchlagerfestVcl,std::string("Das Wahre Schlagerfest (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dotMatrix,std::string("DotMatrix")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::dotMatrixVcl,std::string("DotMatrix (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::encranger,std::string("Encranger")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::everythingToPiecesShooter,std::string("EverythingToPiecesShooter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::fakeEvy,std::string("Fake Evy")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::filterOperationer,std::string("FilterOperationer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::filterOperationerVcl,std::string("FilterOperationer (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::fryskLeareLieder,std::string("Frysk Leare Lieder")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::functionPlotter,std::string("FunctionPlotter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::functionPlotterVcl,std::string("FunctionPlotter (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::gaborFilter,std::string("GaborFilter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::gaborFilterVcl,std::string("GaborFilter (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::grayCoder,std::string("GrayCoder")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::grayCoderVcl,std::string("GrayCoder (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::gtst,std::string("GTST")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::histogramEqualizationer,std::string("HistogramEqualizationer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::histogramEqualizationerVcl,std::string("HistogramEqualizationer (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::hometrainer,std::string("Hometrainer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::hometrainerVcl,std::string("Hometrainer (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::imageRotater,std::string("ImageRotater")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::imageRotaterClx,std::string("ImageRotater (CLX)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::imageRotaterVcl,std::string("ImageRotater (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::k3OpEenRij,std::string("K3 Op Een Rij")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::k3OpEenRijVcl,std::string("K3 Op Een Rij (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::kalmanFilterer,std::string("KalmanFilterer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::keySender,std::string("KeySender")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::knokfighter,std::string("Knokfighter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::knokfighterVcl,std::string("KnokfighterVcl")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::kTouchLectureCreator,std::string("KTouch Lecture Creator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::lambdaBot,std::string("LambdaBot")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::learyCircumplex,std::string("LearyCircumplex")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::logisticGrowthSimulator,std::string("LogisticGrowthSimulator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::loose,std::string("Loose")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::martianCafeTuinemaTycoon,std::string("MartianCafeTuinemaTycoon")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::mazeCreator,std::string("MazeCreator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::mazeCreatorVcl,std::string("MazeCreator (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::maziak,std::string("Maziak")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::maziakVcl,std::string("Maziak (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::metZnDrieen,std::string("Met Z'n Drieen")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::metZnDrieenVcl,std::string("Met Z'n Drieen (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::midiLessonCreator,std::string("MIDI Lesson Creator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::morpher,std::string("Morpher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::multiEncranger,std::string("MultiEncranger")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::multiEncrangerVcl,std::string("MultiEncranger (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::muscaDomestica,std::string("MuscaDomestica")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::musicTheory,std::string("MusicTheory")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ndsmake,std::string("ndsmake")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ndsPaint,std::string("NDS Paint")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::paperRockScissors,std::string("PaperRockScissors")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pause,std::string("Pause")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::perfectElasticCollision,std::string("PerfectElasticCollision")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::picToCode,std::string("PicToCode")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pixelator,std::string("Pixelator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pixelatorVcl,std::string("Pixelator (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pokeVolley,std::string("PokeVolley")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pong,std::string("Pong")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::preDickAdvocaTor,std::string("PreDickAdvocaTor")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::primeExpert,std::string("PrimeExpert")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::projectRichelBilderbeek,std::string("ProjectRichelBilderbeek")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::pylos,std::string("Pylos")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::qmakeWatcher,std::string("qmake Watcher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::quadraticSolver,std::string("QuadraticSolver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rampalEtienne,std::string("RampalEtienne")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::randomCode,std::string("RandomCode")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::randomCodeVcl,std::string("RandomCode (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rasper,std::string("Rasper")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::refrigeratorPuzzleSolver,std::string("RefrigeratorPuzzleSolver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::regexTester,std::string("RegexTester")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::reversi,std::string("Reversi")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::richelBilderbeekGallery,std::string("RichelBilderbeekGallery")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::richelbilderbeekNlSitemapGenerator,std::string("RichelbilderbeekNlSitemapGenerator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rubiksClock,std::string("Rubik's Clock")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::rubiksClockVcl,std::string("Rubik's Clock (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::searchAndDestroyChess,std::string("SearchAndDestroyChess")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::searchAndDestroyChessVcl,std::string("SearchAndDestroyChess (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::secretMessage,std::string("SecretMessage")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::secretMessageVcl,std::string("SecretMessage (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simBrainiac,std::string("SimBrainiac")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simImmuneResponse,std::string("SimImmuneResponse")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simMysteryMachine,std::string("SimMysteryMachine")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simplifyNewick,std::string("SimplifyNewick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simPredator,std::string("SimPredator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::simStagecraft,std::string("SimStagecraft")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::soaSim,std::string("SoaSim")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::solvePuzzleX,std::string("SolvePuzzleX")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::spaceHarry,std::string("SpaceHarry")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::spaceHarryVcl,std::string("SpaceHarry (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::staircaseCardCreator,std::string("StaircaseCardCreator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::stateObserver,std::string("StateObserver")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::styleSheetSetter,std::string("StyleSheetSetter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::superNsanaBros,std::string("Super Nsana Bros")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::surfacePlotter,std::string("SurfacePlotter")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::surfacePlotterVcl,std::string("SurfacePlotter (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::tankBattalion,std::string("Tank Battalion")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testAbout,std::string("Test About")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testApproximator,std::string("Test Approximator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBinaryNewickVector,std::string("Test BinaryNewickVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBouncingBallsWidget,std::string("Test BouncingBallsWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBouncingRectsWidget,std::string("Test BouncingRectsWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testBroadcastServer,std::string("Test BroadcastServer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testCanvas,std::string("Test Canvas")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testChess,std::string("Test Chess")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testConceptMap,std::string("Test ConceptMap")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testDial,std::string("Test Dial")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testEntrance,std::string("Test Entrance")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testExercise,std::string("Test Exercise")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testFunctionParser,std::string("Test FunctionParser")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGnuplotInterface,std::string("Test GnuplotInterface")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGraphicsProxyWidget,std::string("Test GraphicsProxyWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGravityWidget,std::string("Test GravityWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testGroupWidget,std::string("Test GroupWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testHugeVector,std::string("Test HugeVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testLazy_init,std::string("Test Lazy_init")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testLed,std::string("Test Led")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testManyDigitNewick,std::string("Test ManyDigitNewick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testMultiApproximator,std::string("Test MultiApproximator")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testMultipleChoiceQuestion,std::string("Test MultipleChoiceQuestion")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testMultiVector,std::string("Test MultiVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNdsmake,std::string("Test ndsmake")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNeuralNet,std::string("Test NeuralNet")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNewick,std::string("Test Newick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testNewickVector,std::string("Test NewickVector")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testOpenQuestion,std::string("Test OpenQuestion")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testPylos,std::string("Test Pylos")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQrcFile,std::string("Test QrcFile")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtArrowItems,std::string("Test QtArrowItems")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtCreatorProFile,std::string("Test QtCreatorProFile")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtHideAndShowDialog,std::string("Test QtHideAndShowDialog")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtKeyboardFriendlyGraphicsView,std::string("Test QtKeyboardFriendlyGraphicsView")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtModels,std::string("Test QtModels")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtOcrWidget,std::string("Test QtOcrWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtRoundedEditRectItem,std::string("Test QtRoundedEditRectItem")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtRoundedRectItem,std::string("Test QtRoundedRectItem")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQtRoundedTextRectItem,std::string("Test QtRoundedTextRectItem")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testQuestion,std::string("Test Question")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testReversi,std::string("Test Reversi")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testSelectFileDialog,std::string("Test SelectFileDialog")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testServerPusher,std::string("Test ServerPusher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testShape,std::string("Test Shape")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testShinyButton,std::string("Test ShinyButton")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testSimpleLinearRegression,std::string("Test SimpleLinearRegression")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testStopwatch,std::string("Test Stopwatch")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTextPositionWidget,std::string("Test TextPositionWidget")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTicTacToe,std::string("Test TicTacToe")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTimedServerPusher,std::string("Test TimedServerPusher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testToggleButton,std::string("Test ToggleButton")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::testTwoDigitNewick,std::string("Test TwoDigitNewick")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::thorVeen,std::string("Thor Veen")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::thresholdFilterer,std::string("ThresholdFilterer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::thresholdFiltererVcl,std::string("ThresholdFilterer (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ticTacToe,std::string("TicTacToe")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ticTacToeLearner,std::string("TicTacToe Learner")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ticTacToeValuer,std::string("TicTacToe Valuer")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::timePoll,std::string("TimePoll")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::tronCollection,std::string("Tron Collection")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::tronCollectionVcl,std::string("Tron Collection (VCL)")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::ubuntuOneWatcher,std::string("UbuntuOne Watcher")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::vanDenBogaart,std::string("Van Den Bogaart")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::virtualBastard,std::string("Virtual Bastard")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::visualAbc,std::string("Visual ABC")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::xeNonZero,std::string("XeNonZero")));<br/>
&nbsp;&nbsp;m.insert(Pair(ProgramType::zork,std::string("Zork")));<br/>
&nbsp;&nbsp;assert(m.left.size() == m.right.size());<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (static_cast&lt;int&gt;(m.left.size()) != static_cast&lt;int&gt;(ProgramType::n_types))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(m.left.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(static_cast&lt;int&gt;(ProgramType::n_types));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("Copy the contents of ProgramType (except n_types) to above here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(static_cast&lt;int&gt;(m.left.size()) == static_cast&lt;int&gt;(ProgramType::n_types));<br/>
&nbsp;&nbsp;return m;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt;<br/>
&nbsp;&nbsp;ribi::ProgramTypes::GetAllEnumNames() noexcept<br/>
{<br/>
&nbsp;&nbsp;if (m_map_to_enumname.right.empty()) { m_map_to_enumname = CreateEnumNameMap(); }<br/>
&nbsp;&nbsp;assert(!m_map_to_enumname.right.empty());<br/>
<br/>
&nbsp;&nbsp;//Copy right map of bimap<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;for (auto t: m_map_to_enumname.right) { v.push_back(t.first); }<br/>
&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;assert(m_map_to_enumname.right.size() == v.size());<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt;<br/>
&nbsp;&nbsp;ribi::ProgramTypes::GetAllScreenNames() noexcept<br/>
{<br/>
&nbsp;&nbsp;if (m_map_to_screenname.right.empty()) { m_map_to_screenname = CreateScreenNameMap(); }<br/>
&nbsp;&nbsp;assert(!m_map_to_screenname.right.empty());<br/>
<br/>
&nbsp;&nbsp;//Copy right map of bimap<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;for (auto t: m_map_to_screenname.right) { v.push_back(t.first); }<br/>
&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;assert(m_map_to_screenname.right.size() == v.size());<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;ribi::ProgramType&gt;<br/>
&nbsp;&nbsp;ribi::ProgramTypes::GetAll() noexcept<br/>
{<br/>
&nbsp;&nbsp;if (m_map_to_enumname.left.empty()) { m_map_to_enumname = CreateEnumNameMap(); }<br/>
&nbsp;&nbsp;assert(!m_map_to_enumname.left.empty());<br/>
<br/>
&nbsp;&nbsp;//Copy left map of bimap<br/>
&nbsp;&nbsp;std::vector&lt;ProgramType&gt; v;<br/>
&nbsp;&nbsp;for (auto t: m_map_to_enumname.left) { v.push_back(t.first); }<br/>
&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;assert(m_map_to_enumname.left.size() == v.size());<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::ProgramTypes::ProgramTypeToEnumName(const ProgramType t) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (m_map_to_enumname.left.empty()) { m_map_to_enumname = CreateEnumNameMap(); }<br/>
&nbsp;&nbsp;assert(m_map_to_enumname.left.find(t) != m_map_to_enumname.left.end());<br/>
&nbsp;&nbsp;return m_map_to_enumname.left.find(t)-&gt;second;<br/>
}<br/>
<br/>
const std::string ribi::ProgramTypes::ProgramTypeToScreenName(const ProgramType t) noexcept<br/>
{<br/>
&nbsp;&nbsp;if (m_map_to_screenname.left.empty()) { m_map_to_screenname = CreateEnumNameMap(); }<br/>
&nbsp;&nbsp;assert(m_map_to_screenname.left.find(t) != m_map_to_screenname.left.end());<br/>
&nbsp;&nbsp;return m_map_to_screenname.left.find(t)-&gt;second;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::ProgramTypes::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Started ribi::ProgramTypes::Test");<br/>
&nbsp;&nbsp;assert(GetAll().size() == GetAllEnumNames().size());<br/>
&nbsp;&nbsp;assert(GetAll().size() == GetAllScreenNames().size());<br/>
&nbsp;&nbsp;TRACE("Finished ribi::ProgramTypes::Test successfully");<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRichelBilderbeekProgram/richelbilderbeekprogramtypes.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRichelBilderbeekProgram/richelbilderbeekprogramtypes.h" border = "1"><tr><td><code>
#ifndef RICHELBILDERBEEKPROGRAMTYPES_H<br/>
#define RICHELBILDERBEEKPROGRAMTYPES_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/bimap.hpp&gt;<br/>
#include "richelbilderbeekprogramtype.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
struct ProgramTypes<br/>
{<br/>
&nbsp;&nbsp;///Convert a type to its enum name<br/>
&nbsp;&nbsp;///For example, ProgramType 'x' becomes std::string "x"<br/>
&nbsp;&nbsp;static const std::string ProgramTypeToEnumName(const ProgramType t) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Convert a type to its screen name<br/>
&nbsp;&nbsp;///For example, ProgramType 'abcDef' might become std::string "Abc Def"<br/>
&nbsp;&nbsp;static const std::string ProgramTypeToScreenName(const ProgramType t) noexcept;<br/>
<br/>
&nbsp;&nbsp;static ProgramType EnumNameToProgramType(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetAllEnumNames() noexcept;<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetAllScreenNames() noexcept;<br/>
&nbsp;&nbsp;static const std::vector&lt;ProgramType&gt; GetAll() noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///Created by lazy initialization<br/>
&nbsp;&nbsp;static boost::bimap&lt;ProgramType,std::string&gt; m_map_to_enumname;<br/>
<br/>
&nbsp;&nbsp;///Created by lazy initialization<br/>
&nbsp;&nbsp;static boost::bimap&lt;ProgramType,std::string&gt; m_map_to_screenname;<br/>
<br/>
&nbsp;&nbsp;static const boost::bimap&lt;ProgramType,std::string&gt; CreateEnumNameMap();<br/>
&nbsp;&nbsp;static const boost::bimap&lt;ProgramType,std::string&gt; CreateScreenNameMap();<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // RICHELBILDERBEEKPROGRAMTYPES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
