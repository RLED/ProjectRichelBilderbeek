<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SimpleLinearRegression</title>
  <meta name="description" content="C++ SimpleLinearRegression"/>
  <meta name="keywords" content="C++ SimpleLinearRegression code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSimpleLinearRegression.htm">SimpleLinearRegression</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppSimpleLinearRegression-->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>simplelinearregression.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="simplelinearregression.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> SIMPLELINEARREGRESSION_H<br/>
<a href="CppDefine.html">#define</a> SIMPLELINEARREGRESSION_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppNumericH.html">numeric</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppTypename.html">typename</a></b> T&gt;<br/>
T GetZero() { <b><a href="CppReturn.html">return</a></b> T{}; }<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppTemplate.html">template</a></b> &lt;&gt;<br/>
<a href="CppComment.htm">//</a><b><a href="CppDouble.html">double</a></b> GetZero() { <b><a href="CppReturn.html">return</a></b> 0.0; }<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppTypename.html">typename</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> GetZero(T&amp; t) { t <a href="CppOperatorAssign.htm">=</a> T(); }<br/>
<a href="CppComment.htm">//</a><b><a href="CppTemplate.html">template</a></b> &lt;&gt; <b><a href="CppVoid.htm">void</a></b> GetZero(<b><a href="CppDouble.html">double</a></b>&amp; d) { d <a href="CppOperatorAssign.htm">=</a> 0.0; }<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>Class to obtain the best fitting line through all (x,y) pairs<br/>
<a href="CppComment.htm">///</a>The best fitting line has form 'y <a href="CppOperatorAssign.htm">=</a> a.x <a href="CppOperatorPlus.htm">+</a> b', where<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> a: <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt;::first<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> b: <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt;::second<br/>
<b><a href="CppStruct.html">struct</a></b> SimpleLinearRegression<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the best fitting line through all (x,y) pairs<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The best fitting line has form 'y <a href="CppOperatorAssign.htm">=</a> a.x <a href="CppOperatorPlus.htm">+</a> b', where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> a: <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt;::first<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> b: <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt;::second<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> X, <b><a href="CppClass.html">class</a></b> Y&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppAuto.htm">auto</a></b> CalculateBestFit(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;X&gt;&amp; xs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;Y&gt;&amp; ys) <a href="CppOperatorMinus.htm">-</a>&gt; <b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;decltype(ys[0]/xs[0]),Y&gt;;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain Anscombe's Quartet its x values, <b><a href="CppFor.htm">for</a></b> index 1 to (and including) 4<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; GetAnscombesQuartetX(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain Anscombe's Quartet its y values, <b><a href="CppFor.htm">for</a></b> index 1 to (and including) 4<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; GetAnscombesQuartetY(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/CppCalculateCovariance.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppDouble.html">double</a></b> CalculateCovariance(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; xs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; ys);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/Cpp<a href="CppGetMean.html">GetMean</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> T CalculateMean(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;T&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> X, <b><a href="CppClass.html">class</a></b> Y&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppAuto.htm">auto</a></b> CalculateSlope(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;X&gt;&amp; xs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;Y&gt;&amp; ys) <a href="CppOperatorMinus.htm">-</a>&gt; decltype(ys[0]/xs[0]);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/CppCalculateVariance.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppDouble.html">double</a></b> CalculateVariance(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> X, <b><a href="CppClass.html">class</a></b> Y&gt;<br/>
<b><a href="CppAuto.htm">auto</a></b> SimpleLinearRegression::CalculateBestFit(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;X&gt;&amp; xs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;Y&gt;&amp; ys) <a href="CppOperatorMinus.htm">-</a>&gt; <b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;decltype(ys[0]/xs[0]),Y&gt;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(xs.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> ys.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Every coordinat must have exactly one x and one y value");<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> X mean_x { CalculateMean(xs) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Y mean_y { CalculateMean(ys) };<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> covariance_xy <a href="CppOperatorAssign.htm">=</a> CalculateCovariance(xs,ys);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> variance_x <a href="CppOperatorAssign.htm">=</a> CalculateVariance(xs);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> slope <a href="CppOperatorAssign.htm">=</a> covariance_xy <a href="CppOperatorDivide.htm">/</a> variance_x;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.html">typedef</a></b> decltype(ys[0]/xs[0]) Slope;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Slope slope { CalculateSlope(xs,ys) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Y intercept { mean_y <a href="CppOperatorMinus.htm">-</a> (slope * mean_x) };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppMake_pair.html">std::make_pair</a>(slope,intercept);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt;<br/>
T SimpleLinearRegression::CalculateMean(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic_assert.html">static_assert</a></b>(!<a href="CppStd.htm">std</a>::is_integral&lt;T&gt;(),"Cannot calculate the mean of <a href="CppInt.html">integer</a>s");<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!v.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppAccumulate.html">std::accumulate</a>(v.begin(),v.end(),T()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(v.size());<br/>
}<br/>
<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> X, <b><a href="CppClass.html">class</a></b> Y&gt;<br/>
<b><a href="CppAuto.htm">auto</a></b> SimpleLinearRegression::CalculateSlope(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;X&gt;&amp; xs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;Y&gt;&amp; ys) <a href="CppOperatorMinus.htm">-</a>&gt; decltype(ys[0]/xs[0])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(xs.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> ys.size());<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.html">typedef</a></b> decltype(xs[0] * ys[0]) Numerator;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.html">typedef</a></b> decltype(xs[0] * xs[0]) Denominator;<br/>
&nbsp;&nbsp;Numerator numerator { GetZero&lt;X&gt;() * GetZero&lt;Y&gt;() };<br/>
&nbsp;&nbsp;Denominator denominator { GetZero&lt;X&gt;() * GetZero&lt;X&gt;() };<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> X x_mean { CalculateMean(xs) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Y y_mean { CalculateMean(ys) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> sz { xs.size() };<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.html">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> X x { xs[i] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Y y { ys[i] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;numerator&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> ((x <a href="CppOperatorMinus.htm">-</a> x_mean) * (y <a href="CppOperatorMinus.htm">-</a> y_mean));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;denominator <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> ((x <a href="CppOperatorMinus.htm">-</a> x_mean) * (x <a href="CppOperatorMinus.htm">-</a> x_mean));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> numerator <a href="CppOperatorDivide.htm">/</a> denominator;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppTemplate.html">template</a></b> &lt;&gt; <b><a href="CppDouble.html">double</a></b> SimpleLinearRegression::GetZero() { <b><a href="CppReturn.html">return</a></b> 0.0; }<br/>
<a href="CppComment.htm">//</a><b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T&gt; T SimpleLinearRegression::GetZero() { <b><a href="CppReturn.html">return</a></b> T(); }<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> SIMPLELINEARREGRESSION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>simplelinearregression.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="simplelinearregression.cpp" border = "1"><tr><td><code>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppInclude.html">#include</a> "simplelinearregression<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppNumericH.html">numeric</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStdexceptH.html">stdexcept</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppSstreamH.html">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> <a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::CalculateCovariance(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; xs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; ys)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(xs.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> ys.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppSize_t.html">std::size_t</a> sz { xs.size() };<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; ps(sz);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.html">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ps[i] <a href="CppOperatorAssign.htm">=</a> xs[i] * ys[i];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mean_x { CalculateMean(xs) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mean_y { CalculateMean(ys) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mean_p { CalculateMean(ps) };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> mean_p <a href="CppOperatorMinus.htm">-</a> (mean_x * mean_y);<br/>
}<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> <a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::CalculateVariance(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!v.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mean { CalculateMean(v) };<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mean_of_squares {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAccumulate.html">std::accumulate</a>(v.begin(),v.end(),0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> init, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> init <a href="CppOperatorPlus.htm">+</a> (x * x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(v.size())<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> mean_of_squares <a href="CppOperatorMinus.htm">-</a> (mean * mean);<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::GetAnscombesQuartetX(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> { 10.0,8.0,13.0,9.0,11.0,14.0,6.0,4.0,12.0,7.0,5.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> { 8.0,8.0,8.0,8.0,8.0,8.0,8.0,19.0,8.0,8.0,8.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.html">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "ERROR ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="Cpp__func__.html">__func__</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "): Anscombe's Quartet has index 1 to and including 4, given index is: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCerr.html">std::cerr</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!"Should not get here: ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppLogic_error.html">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::GetAnscombesQuartetY(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> { 8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> { 9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> { 7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> { 6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.html">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "ERROR ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="Cpp__func__.html">__func__</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "): Anscombe's Quartet has index 1 to and including 4, given index is: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCerr.html">std::cerr</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!"Should not get here: ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppLogic_error.html">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-08-27: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>, as <a href="Tools.htm">Tool</a>TestSimpleLinearRegressionMainDialog",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-08-28: <a href="CppVersion.html">version</a> 1.1: renamed to SimpleLinearRegression, <b><a href="CppTemplate.html">template</a></b>d CalculateBestFit",<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested { <b><a href="CppFalse.html">false</a></b> };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; v { 75.0, 83.0, 96.0, 100.0, 121.0, 125.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> variance { CalculateVariance(v) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected { 332.666667 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(variance <a href="CppOperatorMinus.htm">-</a> expected) &lt; 0.0001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; v { 0.23, 0.37, 0.45, 0.49, 0.56, 0.63, 0.63, 0.70, 0.72, 0.82 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> variance { CalculateVariance(v) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected { 0.02846 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(variance <a href="CppOperatorMinus.htm">-</a> expected) &lt; 0.0001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorPlus.htm">+</a>+i) <a href="CppComment.htm">//</a>Human-based counting, following the Ansombe's Quartet indices<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; xs { GetAnscombesQuartetX(i) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; ys { GetAnscombesQuartetY(i) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt; p { CalculateBestFit(xs,ys) };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mean_x { CalculateMean(xs) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mean_y { CalculateMean(ys) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> slope { p.first };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> intercept { p.second };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> variance_x <a href="CppOperatorAssign.htm">=</a> CalculateVariance(xs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> variance_y <a href="CppOperatorAssign.htm">=</a> CalculateVariance(ys);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected_mean_x { 9.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected_mean_y { 7.5 };&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>to 2 decimal places<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected_slope&nbsp;&nbsp;{ 0.500 };&nbsp;&nbsp; <a href="CppComment.htm">//</a>to 3 decimal places<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected_intercept { 3.00 }; <a href="CppComment.htm">//</a>to 2 decimal places<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> e { 0.01 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(expected_mean_x <a href="CppOperatorMinus.htm">-</a> mean_x) &lt; e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(expected_mean_y <a href="CppOperatorMinus.htm">-</a> mean_y) &lt; e);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected_variance_x <a href="CppOperatorAssign.htm">=</a> 11.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected_variance_y <a href="CppOperatorAssign.htm">=</a> 4.125;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>4.122 or 4.127 (to 3 decimal places)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected_correlation <a href="CppOperatorAssign.htm">=</a> 0.816;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>to 3 decimal places)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(expected_variance_x <a href="CppOperatorMinus.htm">-</a> variance_x) &lt; e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(expected_variance_y <a href="CppOperatorMinus.htm">-</a> variance_y) &lt; e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(expected_slope <a href="CppOperatorMinus.htm">-</a> slope) &lt; e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(expected_intercept <a href="CppOperatorMinus.htm">-</a> intercept) &lt; e);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.html">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::SimpleLinearRegression::Test successfully");<br/>
}<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
