&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
&lt;head&gt;
&nbsp;&nbsp;&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"/&gt;
&nbsp;&nbsp;&lt;title&gt;Chess&lt;/title&gt;
&nbsp;&nbsp;&lt;meta name="description" content="C++ Chess"/&gt;
&nbsp;&nbsp;&lt;meta name="keywords" content="C++ Chess "/&gt;
&nbsp;&nbsp;&lt;link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/&gt;
&lt;/head&gt;
&lt;!-- End of head, start of body --&gt;
&lt;body&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- Page header --&gt;
&lt;h1&gt;(&lt;a href="Cpp.htm"&gt;C++&lt;/a&gt;) &lt;a href="CppChess.htm"&gt;Chess&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessbitboard.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessbitboard.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;iterator&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessbitboard.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::BitBoard::BitBoard()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_v(8,std::vector&amp;lt;bool&amp;gt;(8,false))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_v.size() == 8);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_v[7].size() == 8);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::BitBoard::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::BitBoard::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::BitBoard::Set(const boost::shared_ptr&amp;lt;const Square&amp;gt; s, const bool value)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x = s-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y = s-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_v.at(y).at(x) = value;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_v[y][x] = value;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::BitBoard::Get(const boost::shared_ptr&amp;lt;const Square&amp;gt; s) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x = s-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y = s-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_v.at(y).at(x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_v[y][x];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::BitBoard::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Testing Chess::BitBoard exactly once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::BitBoard");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BitBoard b;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b.Get(SquareFactory::Create("g8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Set(SquareFactory::Create("g8"),true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b.Get(SquareFactory::Create(("g8"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Set(SquareFactory::Create("g8"),false);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b.Get(SquareFactory::Create(("g8"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Chess::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BitBoard&amp;amp; b)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(b.m_v.begin(),b.m_v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;os](const std::vector&amp;lt;bool&amp;gt;&amp;amp; v)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(v.begin(),v.end(),std::ostream_iterator&amp;lt;bool&amp;gt;(os,""));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessbitboard.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessbitboard.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSBITBOARD_H&lt;br/&gt;
#define CHESSBITBOARD_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///BitBoard is an 8x8 square of bools&lt;br/&gt;
struct BitBoard&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create an empty BitBoard&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BitBoard();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set a value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Set(const boost::shared_ptr&amp;lt;const Square&amp;gt; s, const bool value);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get a value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool Get(const boost::shared_ptr&amp;lt;const Square&amp;gt; s) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test the BitBoard&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///An 8x8 std::vector of bools&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::vector&amp;lt;bool&amp;gt; &amp;gt; m_v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BitBoard&amp;amp; b);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BitBoard&amp;amp; b);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSBITBOARD_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessboard.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessboard.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/multi_array.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessbitboard.h"&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#include "chessboardfactory.h"&lt;br/&gt;
#include "chesscastling.h"&lt;br/&gt;
#include "chesshelper.h"&lt;br/&gt;
#include "chessfile.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chesspiecefactory.h"&lt;br/&gt;
#include "chessplayer.h"&lt;br/&gt;
#include "chessrank.h"&lt;br/&gt;
#include "chessscore.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Board::Board(const Pieces&amp;amp; pieces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_pieces(pieces)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
ribi::Chess::Board::Board(const Board&amp;amp; other)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//: m_move_history(other.m_move_history)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Copy all Pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_pieces = other.m_pieces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(other.m_pieces.begin(), other.m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PiecePtr q(p-&amp;gt;Clone());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p != q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsEqual(*p,*q));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;m_pieces.insert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;m_pieces.size() == other.m_pieces.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsEqual(this-&amp;gt;GetPieces(),other.GetPieces()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsEqual(*this,other));&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Board::CanDoCastling(const Castling castling, const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot castle when in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (IsCheck(player)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check King&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; king_square { SquareFactory::Create(player == Player::white ? std::string("e1") : std::string("e8")) } ;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(king_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ConstPiecePtr king = GetPiece(king_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is there a King at the king's square?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!king) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check if King has moved&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (king-&amp;gt;GetLastMove()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check Rook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; rook_square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;player == Player::white&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;? (castling == Castling::kingside ? std::string("h1") : std::string("a1"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: (castling == Castling::kingside ? std::string("h8") : std::string("a8"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rook_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ConstPiecePtr rook = GetPiece(rook_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is there a Rook at the rook's square?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!rook) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check if Rook has moved&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (rook-&amp;gt;GetLastMove()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check squares in between King and Rook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Square &amp;gt; &amp;gt; squares&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= CreateSquaresBetweenKingAndRook(player,castling);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check if these squares are empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::count_if(squares.begin(),squares.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const boost::shared_ptr&amp;lt;Square&amp;gt;&amp;amp; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return GetPiece(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check if the King needs to move through check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BitBoard bitboard = this-&amp;gt;GetVisibleSquares(player == Player::white ? Player::black : Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::count_if(squares.begin(),squares.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[bitboard](const boost::shared_ptr&amp;lt;Square&amp;gt;&amp;amp; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return bitboard.Get(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Board::CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move, const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;Score().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Scores are always valid moves on a Board");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Deduce from square if not a castling nor score&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;From() &amp;amp;&amp;amp; move-&amp;gt;To())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check all player's pieces if they can move to that location&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Collect all moves that end in the Move::To()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const Move&amp;gt; &amp;gt; moves = CompleteMove(move,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (moves.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("No moves with this destination");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//The Move without a From is invalid if&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// * there is no valid move with that From&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// * there are more moves with that From&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const Move&amp;gt; &amp;gt; valid;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy_if(moves.begin(),moves.end(),std::back_inserter(valid),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,player](const boost::shared_ptr&amp;lt;const Move&amp;gt; m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return CanDoMove(m,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (valid.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("No valid moves with this destination");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (valid.size() &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Multiple moves possible to reach the destination square");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NTRACE_BILDERBIKKEL&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(valid.begin(),valid.end(),[](const boost::shared_ptr&amp;lt;const Move&amp;gt; m) { TRACE(m); } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//There is exactly one Move found: test the complete move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(valid[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return CanDoMove(valid[0],player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Each move here is complete, i.e. a simple move has a from and to value&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ConstPiecePtr p = this-&amp;gt;GetPiece(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*p-&amp;gt;GetSquare() == *move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;GetColor() != player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Cannot move opponent's pieces");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!p-&amp;gt;CanDoMove(move))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Piece can never do this move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;GetNameChar() != move-&amp;gt;Piece()-&amp;gt;GetNameChar())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("There is a different Piece on the square than as indicated by the Move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::DeepCopy(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b == *this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ConstPiecePtr q = b-&amp;gt;GetPiece(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q &amp;amp;&amp;amp; p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((*q != *p))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(p-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(q-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("BREAK");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*q == *p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q-&amp;gt;CanDoMove(move));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece().get());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;Piece()-&amp;gt;GetNameChar() != p-&amp;gt;GetNameChar())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Type of piece in move is different than in reality");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for pieces blocking moves that span multiple squares&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!dynamic_cast&amp;lt;const PieceKnight*&amp;gt;(p.get()) &amp;amp;&amp;amp; !EmptyBetween(move-&amp;gt;From(),move-&amp;gt;To()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("There are pieces blocking the move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsCastling())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanStrToCastling(move-&amp;gt;GetStr()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Castling castling = StrToCastling(move-&amp;gt;GetStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return CanDoCastling(castling,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check for capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;To())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Or it is a capture, or a move to an empty square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsCapture())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsEnPassant())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//En-passant capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetPiece(move-&amp;gt;To()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Cannot en-passant capture an occupied square");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///TODO&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Determine captured square&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Can only do en passant if at the captured squares there's an opponent&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Can only do en passant if at the captured squares there's an opponent that has moved the last turn&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Regular capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!GetPiece(move-&amp;gt;To()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Cannot capture an empty square");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetPiece(move-&amp;gt;To())-&amp;gt;GetColor() == GetPiece(move-&amp;gt;From())-&amp;gt;GetColor())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Cannot capture own piece");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Move is not a capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetPiece(move-&amp;gt;To()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Cannot move to an occupied square");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsEnPassant())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Cannot perform an en passant capture without the move being a capture");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if move puts opponent in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::DeepCopy(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetPiece(move-&amp;gt;From()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetPiece(move-&amp;gt;From())-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;GetPiece(move-&amp;gt;From())-&amp;gt;DoMove(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;IsCastling());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanStrToCastling(move-&amp;gt;GetStr()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Castling castling = StrToCastling(move-&amp;gt;GetStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanDoCastling(castling,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoCastling(castling,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool check_in_real = b-&amp;gt;IsCheck(player == Player::white ? Player::black : Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (check_in_real)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;IsCheck() &amp;amp;&amp;amp; !move-&amp;gt;IsCheckmate())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("The move does not indicate a check, but in reality it does put the opponent into check");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No check in reality&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsCheck())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("The move indicates a check, but it does not put opponent into check");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if move will put current player in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::DeepCopy(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(GetPiece(move-&amp;gt;From()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetPiece(move-&amp;gt;From()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(GetPiece(move-&amp;gt;From())-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b == *this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;GetPiece(move-&amp;gt;From())-&amp;gt;CanDoMove(move))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetPiece(move-&amp;gt;From())-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;GetPiece(move-&amp;gt;From())-&amp;gt;DoMove(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Does this check the player that tries do the move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;IsCastling());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanStrToCastling(move-&amp;gt;GetStr()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Castling castling = StrToCastling(move-&amp;gt;GetStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanDoCastling(castling,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoCastling(castling,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b-&amp;gt;IsCheck(player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Move is forbidden, because it puts the current player into check");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check for move ending in checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Do move on cloned chessboard&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::DeepCopy(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetPiece(move-&amp;gt;From()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;GetPiece(move-&amp;gt;From())-&amp;gt;DoMove(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanStrToCastling(move-&amp;gt;GetStr()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::DeepCopy(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Castling castling = StrToCastling(move-&amp;gt;GetStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoCastling(castling,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoCastling(castling,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Is opponent in checkmate?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool checkmate_in_real = b-&amp;gt;IsCheckmate(player == Player::white ? Player::black : Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (checkmate_in_real != move-&amp;gt;IsCheckmate())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (checkmate_in_real)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("The move does not indicate a checkmate, but in reality it does put the opponent into checkmate");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("The move indicates a checkmate, but it does not put opponent into checkmate");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Chess::Move&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::Board::CompleteMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;Score());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Deduce from square if not a castling nor score&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check all player's pieces if they can move to that location&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Collect all mives that end in the Move::To()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const Move&amp;gt; &amp;gt; moves;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const PiecePtr&amp;amp; piece: m_pieces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for this player its pieces only that are of the same type as the move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (piece-&amp;gt;GetColor() == player &amp;amp;&amp;amp; move-&amp;gt;Piece()-&amp;gt;GetNameChar() == piece-&amp;gt;GetNameChar() )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Obtain this right-colored piece its moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; pms = piece-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(pms.begin(),pms.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;moves,this,&amp;amp;move,player](const boost::shared_ptr&amp;lt;Move&amp;gt; n)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If the Move has a To, goes to the right To and is valid...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n-&amp;gt;To() &amp;amp;&amp;amp; (*n-&amp;gt;To() == *move-&amp;gt;To()) &amp;amp;&amp;amp; this-&amp;gt;CanDoMove(n,player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Store this Move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;moves.push_back(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return moves;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Square &amp;gt; &amp;gt; ribi::Chess::Board::CreateSquaresBetweenKingAndRook(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Player player,const Castling castling)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Square &amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (player == Player::white)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (castling == Castling::kingside)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("f1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("g1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(castling == Castling::queenside);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("b1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("c1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("d1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(player == Player::black);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (castling == Castling::kingside)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("f8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("g8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(castling == Castling::queenside);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("b8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("c8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square &amp;gt; s = SquareFactory::Create("d8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::Board::DoCastling(const Castling castling, const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDoCastling(castling,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Get King&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; king_from_square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= SquareFactory::Create(player == Player::white ? std::string("e1") : std::string("e8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(king_from_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const Square king_to_square = (player == Player::white&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;? (castling == Castling::kingside ? Square("g1") : Square("c1"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;: (castling == Castling::kingside ? Square("g8") : Square("c8")) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PiecePtr king = GetPiece(king_from_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(king);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Move&amp;gt; castling_move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Chess::MoveFactory::Create(CastlingToStr(castling));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(castling_move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;king-&amp;gt;DoMove(castling_move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check Rook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; rook_square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= SquareFactory::Create(player == Player::white&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;? (castling == Castling::kingside ? std::string("h1") : std::string("a1"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: (castling == Castling::kingside ? std::string("h8") : std::string("a8")) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rook_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PiecePtr rook = GetPiece(rook_square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rook);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Move&amp;gt; castling_move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= Chess::MoveFactory::Create(CastlingToStr(castling));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(castling_move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rook-&amp;gt;DoMove(castling_move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::Board::DoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move,const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDoMove(move,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;From() &amp;amp;&amp;amp; move-&amp;gt;To())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check all player's pieces if they can move to that location&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Collect all moves that end in the Move::To()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const Move&amp;gt; &amp;gt; moves = CompleteMove(move,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//The Move without a From is invalid if&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// * there is no valid move with that From&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// * there are more moves with that From&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//There is exactly one Move found: test the complete move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return DoMove(moves[0],player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PiecePtr p = GetPiece(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p-&amp;gt;DoMove(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else if (move-&amp;gt;IsCastling())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanStrToCastling(move-&amp;gt;GetStr()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Castling castling = StrToCastling( move-&amp;gt;GetStr() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CanDoCastling(castling,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DoCastling(castling,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Board::EmptyBetween(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; a,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; b) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int dx = a-&amp;gt;GetFile().ToInt() - b-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int dy = a-&amp;gt;GetRank().ToInt() - b-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Are there squares in between to check for being occupied?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(dx != 0 || dy != 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Squares are adjacent (horizontally, vertically or diagonally)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (dx + dy == 1) return true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int step_x = (dx &amp;gt; 0 ? 1 : (dx &amp;lt; 0 ? -1 : 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int step_y = (dy &amp;gt; 0 ? 1 : (dy &amp;lt; 0 ? -1 : 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_steps = std::max(std::abs(dx),std::abs(dy));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=n_steps; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = b-&amp;gt;GetFile().ToInt() + (i * step_x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int y = b-&amp;gt;GetRank().ToInt() + (i * step_y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(x &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(y &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(x&amp;nbsp;&amp;nbsp;&amp;lt; 8);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(y&amp;nbsp;&amp;nbsp;&amp;lt; 8);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square = SquareFactory::Create(File(x),Rank(y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*square != *a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*square != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (this-&amp;gt;GetPiece(square)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//Color ribi::Chess::Board::GetActivePlayer() const&lt;br/&gt;
//{&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;return (m_moves.size() % 2 ? Color::black : Color::white);&lt;br/&gt;
//}&lt;br/&gt;
&lt;br/&gt;
const ribi::Chess::Board::PiecePtr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::Board::GetPiece(const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto i = std::find_if(m_pieces.begin(),m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;square](const PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *p-&amp;gt;GetSquare() == *square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (i == m_pieces.end()) { ribi::Chess::Board::PiecePtr p; assert(!p); return p; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else { assert(*i); return *i; }&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Chess::Board::ConstPiecePtr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::Board::GetPiece(const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto i = std::find_if(m_pieces.begin(),m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;square](const PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *p-&amp;gt;GetSquare() == *square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (i == m_pieces.end()) { ribi::Chess::Board::ConstPiecePtr p; assert(!p); return p; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Chess::Board::ConstPiecePtr p(*i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*p-&amp;gt;GetSquare() == *square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*p == *(*i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Chess::Board::ConstPieces ribi::Chess::Board::GetPieces() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return AddConst(this-&amp;gt;GetPieces());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ConstPieces v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(m_pieces.begin(),m_pieces.end(),std::inserter(v,v.begin()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const ribi::Chess::Board::PiecePtr&amp;amp; piece)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConstPiecePtr p = piece-&amp;gt;Clone();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsEqual(*p,*piece));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p != piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Chess::Board::Pieces ribi::Chess::Board::GetInitialSetup()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::Board::Pieces v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto colors { Color::black, Color::white };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(colors.begin(),colors.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;v](const Color color)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Pawns&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::Rank rank = color == Color::white ? Rank(2) : Rank(7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=8; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File(i),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('.',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Royalty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::Rank rank = color == Color::white ? Rank(1) : Rank(8);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("a"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('R',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("b"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('N',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("c"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('B',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("d"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('Q',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("e"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('K',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("f"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('B',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("g"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('N',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s(SquareFactory::Create(Chess::File("h"),rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('R',color,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.insert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::Board::GetMoves(const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(m_pieces.begin(),m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,&amp;amp;v,player](const PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;GetColor() == player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetSquare());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Obtain all valid moves from the square the piece is standing on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; w = this-&amp;gt;GetMoves(p-&amp;gt;GetSquare());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::Board::GetMoves(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ConstPiecePtr piece = GetPiece(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///TODO: In Traitor's Chess you can move Pieces of the opponent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//if (!piece || piece-&amp;gt;GetColor() != this-&amp;gt;GetActivePlayer()) return std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt;();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!piece) return std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt;();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Player player = ColorToPlayer(piece-&amp;gt;GetColor());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; all_moves = piece-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::copy_if(all_moves.begin(), all_moves.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(moves),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,player](const boost::shared_ptr&amp;lt;Move&amp;gt; move)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return this-&amp;gt;CanDoMove(move,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return moves;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Board::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Board::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Chess::BitBoard ribi::Chess::Board::GetVisibleSquares(const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Collect the Pieces we want to know their sights of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PiecePtr&amp;gt; pieces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::copy_if(m_pieces.begin(), m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp; std::back_inserter(pieces),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[player](const PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p-&amp;gt;GetColor() == player;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Collect the Squares the Pieces can move to on a BitBoard&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Chess::BitBoard b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pieces.begin(),pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,&amp;amp;b](const PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = this-&amp;gt;GetMoves(p-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(moves.begin(),moves.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;b](const boost::shared_ptr&amp;lt;Move&amp;gt; m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m-&amp;gt;To());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Set(m-&amp;gt;To(),true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Copy the locations of the pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Set(p-&amp;gt;GetSquare(),true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Board::IsCheck(const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Find the king of the player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto king_ptr = std::find_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_pieces.begin(),m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[player,this](const ribi::Chess::Board::PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p-&amp;gt;GetColor() == player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; dynamic_cast&amp;lt;PieceKing*&amp;gt;(p.get());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//No King, so this player cannot be in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (king_ptr == m_pieces.end())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("No king");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const PiecePtr king = *king_ptr;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(king);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Collect the visible squares seen from the opponent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//DO NOT USE GETVISIBLESQUARES: THIS LEADS TO RECURSION&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if an opponent's piece looks at the current player's King&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int cnt = std::count_if(m_pieces.begin(),m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[king,this](const ribi::Chess::Board::PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Must not be of same color&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;GetColor() == king-&amp;gt;GetColor()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//There must be a Move to the King's square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto moves = p-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto move = std::find_if(moves.begin(),moves.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[king](const boost::shared_ptr&amp;lt;Move&amp;gt; m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *m-&amp;gt;To() == *king-&amp;gt;GetSquare();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move == moves.end()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//A Knight always makes a successful attack&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dynamic_cast&amp;lt;PieceKnight*&amp;gt;(p.get())) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//All squares between King and attacker must be empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(king-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return EmptyBetween(king-&amp;gt;GetSquare(),p-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Return if there is at least one piece attacking the King&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return cnt &amp;gt; 0;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Board::IsCheckmate(const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!IsCheck(player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Move is no checkmate, because the king is not in check");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Find the king of the player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto king_ptr = std::find_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_pieces.begin(),m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[player,this](const ribi::Chess::Board::PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p-&amp;gt;GetColor() == player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; dynamic_cast&amp;lt;PieceKing*&amp;gt;(p.get());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//No King, so this player cannot be in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (king_ptr == m_pieces.end())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("No king");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Get all moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = GetMoves(player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if all of them end in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int cnt = std::count_if(moves.begin(),moves.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,player](const boost::shared_ptr&amp;lt;Move&amp;gt; move)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::DeepCopy(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(move,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//if (!b.CanDoMove(move,player)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(move,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b-&amp;gt;IsCheck(player)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//If there are no possible moves, player is in checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (cnt &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Opponent can escape checkmate");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return cnt == 0;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
bool ribi::Chess::Board::IsValid(const boost::shared_ptr&amp;lt;Move&amp;gt; move) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if non-Knight Piece does not go through occupied squares&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;Piece() &amp;amp;&amp;amp; !dynamic_cast&amp;lt;PieceKnight*&amp;gt;(move-&amp;gt;Piece().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; ( std::abs(move-&amp;gt;To()-&amp;gt;GetFile().ToInt() - move-&amp;gt;From()-&amp;gt;GetFile().ToInt()) &amp;gt; 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| std::abs(move-&amp;gt;To()-&amp;gt;GetRank().ToInt() - move-&amp;gt;From()-&amp;gt;GetRank().ToInt()) &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dx = move-&amp;gt;To()-&amp;gt;GetFile().ToInt() - move-&amp;gt;From()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dy = move-&amp;gt;To()-&amp;gt;GetRank().ToInt() - move-&amp;gt;From()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int step_x = (dx &amp;gt; 0 ? 1 : (dx &amp;lt; 0 ? -1 : 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int step_y = (dy &amp;gt; 0 ? 1 : (dy &amp;lt; 0 ? -1 : 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_steps = std::max(std::abs(dx),std::abs(dy));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=n_steps; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = move-&amp;gt;From()-&amp;gt;GetFile().ToInt() + (i * step_x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int y = move-&amp;gt;From()-&amp;gt;GetRank().ToInt() + (i * step_y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetPiece(Square(File(x),Rank(y)))) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//If the move is a capture, but there is nothing to capture, the move is invalid in this context&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsCapture() &amp;amp;&amp;amp; !GetPiece(*move-&amp;gt;To())) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//If the square to move to is occupied...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (GetPiece(*move-&amp;gt;To()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cannot capture a piece of own color&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///TODO But this is possible in Cannibal Chess&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//if (GetPiece(*move-&amp;gt;To())-&amp;gt;GetColor() == GetActivePlayer()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetPiece(*move-&amp;gt;From())-&amp;gt;GetColor() != GetPiece(*move-&amp;gt;To())-&amp;gt;GetColor()) return move-&amp;gt;IsCapture();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//move-&amp;gt;IsCapture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//move-&amp;gt;IsCastling()&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Does move result in the player ending in check?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::AreEqual(const ribi::Chess::Board::ConstPieces&amp;amp; lhs,const ribi::Chess::Board::ConstPieces&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.size() != rhs.size()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Count unfound pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::count_if(lhs.begin(),lhs.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[rhs](const ribi::Chess::Board::ConstPiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count_if(rhs.begin(),rhs.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[p](const ribi::Chess::Board::ConstPiecePtr&amp;amp; q)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *p == *q;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) &amp;lt; 2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return std::count_if(rhs.begin(),rhs.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[p](const ribi::Chess::Board::ConstPiecePtr&amp;amp; q)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *p == *q;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) == 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;) == static_cast&amp;lt;int&amp;gt;(lhs.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Chess::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Board&amp;amp; board)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int maxx = 8;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int maxy = 8;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::multi_array&amp;lt;std::string, 2&amp;gt; v(boost::extents[maxx][maxy]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int y=0;y!=maxy;++y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int x=0; x!=maxx; ++x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (((x+y)%2)==0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[x][y] = "..";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[x][y] = "__";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(board.m_pieces.begin(),board.m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;v](const ribi::Chess::Board::PiecePtr&amp;amp; piece)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(piece-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x = piece-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int y = piece-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= std::string(piece-&amp;gt;GetColor() == Color::white ? "w" : "b")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(piece-&amp;gt;GetNameChar());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[x][y] = s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int y=0;y!=maxy;++y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int x=0; x!=maxx; ++x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; v[x][y];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Board&amp;amp; lhs, const Board&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//if (lhs.GetMoveHistory() != rhs.GetMoveHistory())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return AreEqual(lhs.GetPieces(),rhs.GetPieces());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Board&amp;amp; lhs, const Board&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessboard.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessboard.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSBOARD_H&lt;br/&gt;
#define CHESSBOARD_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;set&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/logic/tribool.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
//#include "chesspiece.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
struct Piece;&lt;br/&gt;
&lt;br/&gt;
///Chess::Board is a class for a chessboard without gaming rules.&lt;br/&gt;
///Rules that handled by Chess::Board normally are:&lt;br/&gt;
/// - en passant&lt;br/&gt;
/// - castling&lt;br/&gt;
///Chess::Game is the class that uses a Chess::Board and adds these rules&lt;br/&gt;
///Rules that must be handled by Chess::Game are:&lt;br/&gt;
/// - keeping track of which player's turn it is&lt;br/&gt;
/// - determining a winner or draw&lt;br/&gt;
struct Board&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef boost::shared_ptr&amp;lt;Piece&amp;gt; PiecePtr;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef boost::shared_ptr&amp;lt;const Piece&amp;gt; ConstPiecePtr;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::set&amp;lt;PiecePtr&amp;gt; Pieces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::set&amp;lt;ConstPiecePtr&amp;gt; ConstPieces;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Board(const Board&amp;amp; rhs) = delete; //BUG: this one was missing (and abused)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Board&amp;amp; operator=(const Board&amp;amp; rhs) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if a Move is valid to play in the current context&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Player must be indicated, because without castling would be ambigious&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Note that e2-e4 is only valid for the white player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do a Move that is valid to play in the current context&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Player must be indicated, because without castling would be ambigious&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Note that e2-e4 is only valid for the white player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move, const Player player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//bool IsVisible(const Square&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const BoardVisibleType GetInSight(const Piece::Color color) const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const Piece GetPiece(const int x, const int y) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create Pieces in their startup positions&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Pieces GetInitialSetup();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the Move history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt;&amp;amp; GetMoveHistory() const { return m_move_history; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Collect all moves that are possible for a Piece at a certain Square.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If there is no Piece at that Square, no Moves are returned&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves(const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Collect all moves that are possible&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves(const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Find a Piece at a certain Square.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If there is no Piece at that Square, an empty Piece is returned&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const PiecePtr GetPiece(const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Find a Piece at a certain Square.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If there is no Piece at that Square, an empty Piece is returned&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ConstPiecePtr GetPiece(const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all read-only Piece instances&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ConstPieces GetPieces() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get all squares that are visible by a player with the requested color.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If the Color is set to Color::indeterminate, both players' sights&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///are returned&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BitBoard GetVisibleSquares(const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is, in the current position, the player being in check?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCheck(const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is the current position the active player being in checkmate?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCheckmate(const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Score if the game has ended by agreement (instead of by checkmate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;Chess::Score&amp;gt;&amp;amp; Score() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Construct a Board in the initial position, allowed by BoardFactory only&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Board(const Pieces&amp;amp; pieces);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~Board() {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///All the Pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Pieces m_pieces;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The history of all Moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///REMOVED: client has to keep track of these him/herself&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; m_move_history;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if a Player can do a castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoCastling(const Castling castling, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Let a Player do a castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoCastling(const Castling castling, const Player player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Given a Move with a certain destination, deduce all Moves (with a starting position added)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that have the same destination&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Move&amp;gt; &amp;gt; CompleteMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Square &amp;gt; &amp;gt; CreateSquaresBetweenKingAndRook(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player player,const Castling castling);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if all squares between two Squares are empty (e&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Squares must be on one line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool EmptyBetween(const boost::shared_ptr&amp;lt;const Square&amp;gt; a, const boost::shared_ptr&amp;lt;const Square&amp;gt; b) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Checks if the Move is valid in this situation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///??? REPLACE BY USING CANDOMOVE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//bool IsValid(const Move&amp;amp; move) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Tests the Board2d class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//friend bool operator==(const Board&amp;amp; lhs, const Board&amp;amp; rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class BoardFactory;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Board&amp;amp; board);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Board *);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool AreEqual(const Board::ConstPieces&amp;amp; lhs,const Board::ConstPieces&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Board&amp;amp; lhs, const Board&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Board&amp;amp; lhs, const Board&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Board&amp;amp; board);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSBOARD_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessboardfactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessboardfactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessboardfactory.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;numeric&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#include "chesspiecefactory.h"&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Chess::Board&amp;gt; ribi::Chess::BoardFactory::Create(const Chess::Board::Pieces&amp;amp; pieces)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; p(new Chess::Board(pieces));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Chess::Board&amp;gt; ribi::Chess::BoardFactory::DeepCopy(const Board&amp;amp; board)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::Board::ConstPieces original = board.GetPieces();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Chess::Board::Pieces pieces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(original.begin(),original.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::inserter(pieces,pieces.begin()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const Chess::Board::ConstPiecePtr&amp;amp; piece)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Board::PiecePtr p = PieceFactory::DeepCopy(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(Create(pieces));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessboardfactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessboardfactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSBOARDFACTORY_H&lt;br/&gt;
#define CHESSBOARDFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Factory for creating a Chess::Board&lt;br/&gt;
struct BoardFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static boost::shared_ptr&amp;lt;Chess::Board&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::Board::Pieces&amp;amp; pieces = Chess::Board::GetInitialSetup());&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static boost::shared_ptr&amp;lt;Chess::Board&amp;gt; DeepCopy(const Board&amp;amp; board);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSBOARDFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessboardtest.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessboardtest.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessboard.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessboardfactory.h"&lt;br/&gt;
#include "chessbitboard.h"&lt;br/&gt;
#include "chessmoves.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chesspiecefactory.h"&lt;br/&gt;
#include "chessplayer.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chessscore.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Chess::Board::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Testing boost::shared_ptr&amp;lt;Chess::Board&amp;gt; exactly once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::Board");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Chess::Bitribi::Chess::Board::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Chess::Move::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Board operator=");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; c(BoardFactory::DeepCopy(*b));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b == *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c-&amp;gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; d(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*c == *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b != *d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Board operator== with fresh boards");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; c(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*b == *c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c-&amp;gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*b != *c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; d(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*c == *d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*b != *d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Board operator== with fresh boards");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; c(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*b == *c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c-&amp;gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*b != *c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; d(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*c == *d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*b != *d));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test GetMoves from initial position squares");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("Ra8 a6"),Player::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("Ra8 a6"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b1")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g1")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b8")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g8")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test GetVisibleSquares in the initial position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BitBoard c = b-&amp;gt;GetVisibleSquares(Player::white);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("a1"))); assert(c.Get(SquareFactory::Create("a2"))); assert(c.Get(SquareFactory::Create("a3"))); assert(c.Get(SquareFactory::Create("a4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("b1"))); assert(c.Get(SquareFactory::Create("b2"))); assert(c.Get(SquareFactory::Create("b3"))); assert(c.Get(SquareFactory::Create("b4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("c1"))); assert(c.Get(SquareFactory::Create("c2"))); assert(c.Get(SquareFactory::Create("c3"))); assert(c.Get(SquareFactory::Create("c4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("d1"))); assert(c.Get(SquareFactory::Create("d2"))); assert(c.Get(SquareFactory::Create("d3"))); assert(c.Get(SquareFactory::Create("d4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("e1"))); assert(c.Get(SquareFactory::Create("e2"))); assert(c.Get(SquareFactory::Create("e3"))); assert(c.Get(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("f1"))); assert(c.Get(SquareFactory::Create("f2"))); assert(c.Get(SquareFactory::Create("f3"))); assert(c.Get(SquareFactory::Create("f4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("g1"))); assert(c.Get(SquareFactory::Create("g2"))); assert(c.Get(SquareFactory::Create("g3"))); assert(c.Get(SquareFactory::Create("g4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.Get(SquareFactory::Create("h1"))); assert(c.Get(SquareFactory::Create("h2"))); assert(c.Get(SquareFactory::Create("h3"))); assert(c.Get(SquareFactory::Create("h4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("a5"))); assert(!c.Get(SquareFactory::Create("a6"))); assert(!c.Get(SquareFactory::Create("a7"))); assert(!c.Get(SquareFactory::Create("a8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("b5"))); assert(!c.Get(SquareFactory::Create("b6"))); assert(!c.Get(SquareFactory::Create("b7"))); assert(!c.Get(SquareFactory::Create("b8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("c5"))); assert(!c.Get(SquareFactory::Create("c6"))); assert(!c.Get(SquareFactory::Create("c7"))); assert(!c.Get(SquareFactory::Create("c8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("d5"))); assert(!c.Get(SquareFactory::Create("d6"))); assert(!c.Get(SquareFactory::Create("d7"))); assert(!c.Get(SquareFactory::Create("d8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("e5"))); assert(!c.Get(SquareFactory::Create("e6"))); assert(!c.Get(SquareFactory::Create("e7"))); assert(!c.Get(SquareFactory::Create("e8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("f5"))); assert(!c.Get(SquareFactory::Create("f6"))); assert(!c.Get(SquareFactory::Create("f7"))); assert(!c.Get(SquareFactory::Create("f8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("g5"))); assert(!c.Get(SquareFactory::Create("g6"))); assert(!c.Get(SquareFactory::Create("g7"))); assert(!c.Get(SquareFactory::Create("g8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c.Get(SquareFactory::Create("h5"))); assert(!c.Get(SquareFactory::Create("h6"))); assert(!c.Get(SquareFactory::Create("h7"))); assert(!c.Get(SquareFactory::Create("h8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("e2 e3"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BitBoard d = b-&amp;gt;GetVisibleSquares(Player::black);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("a5"))); assert(d.Get(SquareFactory::Create("a6"))); assert(d.Get(SquareFactory::Create("a7"))); assert(d.Get(SquareFactory::Create("a8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("b5"))); assert(d.Get(SquareFactory::Create("b6"))); assert(d.Get(SquareFactory::Create("b7"))); assert(d.Get(SquareFactory::Create("b8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("c5"))); assert(d.Get(SquareFactory::Create("c6"))); assert(d.Get(SquareFactory::Create("c7"))); assert(d.Get(SquareFactory::Create("c8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("d5"))); assert(d.Get(SquareFactory::Create("d6"))); assert(d.Get(SquareFactory::Create("d7"))); assert(d.Get(SquareFactory::Create("d8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("e5"))); assert(d.Get(SquareFactory::Create("e6"))); assert(d.Get(SquareFactory::Create("e7"))); assert(d.Get(SquareFactory::Create("e8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("f5"))); assert(d.Get(SquareFactory::Create("f6"))); assert(d.Get(SquareFactory::Create("f7"))); assert(d.Get(SquareFactory::Create("f8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("g5"))); assert(d.Get(SquareFactory::Create("g6"))); assert(d.Get(SquareFactory::Create("g7"))); assert(d.Get(SquareFactory::Create("g8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(d.Get(SquareFactory::Create("h5"))); assert(d.Get(SquareFactory::Create("h6"))); assert(d.Get(SquareFactory::Create("h7"))); assert(d.Get(SquareFactory::Create("h8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("a1"))); assert(!d.Get(SquareFactory::Create("a2"))); assert(!d.Get(SquareFactory::Create("a3"))); assert(!d.Get(SquareFactory::Create("a4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("b1"))); assert(!d.Get(SquareFactory::Create("b2"))); assert(!d.Get(SquareFactory::Create("b3"))); assert(!d.Get(SquareFactory::Create("b4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("c1"))); assert(!d.Get(SquareFactory::Create("c2"))); assert(!d.Get(SquareFactory::Create("c3"))); assert(!d.Get(SquareFactory::Create("c4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("d1"))); assert(!d.Get(SquareFactory::Create("d2"))); assert(!d.Get(SquareFactory::Create("d3"))); assert(!d.Get(SquareFactory::Create("d4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("e1"))); assert(!d.Get(SquareFactory::Create("e2"))); assert(!d.Get(SquareFactory::Create("e3"))); assert(!d.Get(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("f1"))); assert(!d.Get(SquareFactory::Create("f2"))); assert(!d.Get(SquareFactory::Create("f3"))); assert(!d.Get(SquareFactory::Create("f4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("g1"))); assert(!d.Get(SquareFactory::Create("g2"))); assert(!d.Get(SquareFactory::Create("g3"))); assert(!d.Get(SquareFactory::Create("g4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!d.Get(SquareFactory::Create("h1"))); assert(!d.Get(SquareFactory::Create("h2"))); assert(!d.Get(SquareFactory::Create("h3"))); assert(!d.Get(SquareFactory::Create("h4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test valid moves in the initial position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a3", "a2 a4", "b2 b3", "b2 b4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c2 c3", "c2 c4", "d2 d3", "d2 d4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e2 e3", "e2 e4", "f2 f3", "f2 f4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g2 g3", "g2 g4", "h2 h3", "h2 h4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb1 a3", "Nb1 c3", "Ng1 f3", "Ng1 h3",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0", "0-1", "1/2-1/2"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[b](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b1")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("Qd1 d8"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("Qd1 d7"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g1")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h7")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(Player::white).size() == 20);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;IsCheck(Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;IsCheckmate(Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test moves in the initial position (short notation)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a3", "a4", "b3", "b4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c3", "c4", "d3", "d4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e3", "e4", "f3", "f4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g3", "g4", "h3", "h4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Na3", "Nc3", "Nf3", "Nh3"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[b](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test a Pawn on the board at e2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Chess::Board::Pieces v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"e2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"d3"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"f3")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::Create(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDoMove(MoveFactory::Create("e2 e3"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDoMove(MoveFactory::Create("e2 e4"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDoMove(MoveFactory::Create("e2xf3"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("e2xd3"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test a Pawn on the board at e2, blocked by an opponent");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Chess::Board::Pieces v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"e2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"e3")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::Create(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("e2 e3"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("e2 e4"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test a Pawn on the board at h4, blocked by an opponent");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Chess::Board::Pieces v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"h4"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"h5")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::Create(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("h4 h5"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test a Knight on the board at d4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Chess::Board::Pieces v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('N',Color::white,"d4"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"c6"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"e6")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b(BoardFactory::Create(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDoMove(MoveFactory::Create("Nd4 b5"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDoMove(MoveFactory::Create("Nd4 f5"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(MoveFactory::Create("Nd4xc6"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDoMove(MoveFactory::Create("Nd4xe6"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test valid moves for black after 1. e2 e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a7 a6", "a7 a5", "b7 b6", "b7 b5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c7 c6", "c7 c5", "d7 d6", "d7 d5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e7 e6", "e7 e5", "f7 f6", "f7 f5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g7 g6", "g7 g5", "h7 h6", "h7 h5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb8 a6", "Nb8 c6", "Ng8 f6", "Ng8 h6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0", "0-1", "1/2-1/2"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[b](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::black)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b8")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g8")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h8")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h7")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(Player::black).size() == 20);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;IsCheck(Player::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;IsCheckmate(Player::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test valid moves for white after 1. e2 e4 e7 e5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("e7 e5"),Player::black);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a3", "a2 a4", "b2 b3", "b2 b4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c2 c3", "c2 c4", "d2 d3", "d2 d4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ke1 e2","f2 f3", "f2 f4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g2 g3", "g2 g4", "h2 h3", "h2 h4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb1 a3", "Nb1 c3", "Ng1 f3", "Ng1 h3",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bf1 e2", "Bf1 d3", "Bf1 c4", "Bf1 b5", "Bf1 a6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd1 e2", "Qd1 f3", "Qd1 g4", "Qd1 h5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0", "0-1", "1/2-1/2"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[b](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b1")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d1")).size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e1")).size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f1")).size() == 5);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g1")).size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h1")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("a2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("b2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("c2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("d2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("e4")).size() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("f2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("g2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(SquareFactory::Create("h2")).size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoves(Player::white).size() == 29);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;IsCheck(Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;IsCheckmate(Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Board copy constructor");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;GetPiece(SquareFactory::Create("e2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetPiece(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; c(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b == *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetPiece(SquareFactory::Create("e2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;GetPiece(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c-&amp;gt;GetPiece(SquareFactory::Create("e2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( c-&amp;gt;GetPiece(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("e7 e5"),Player::black);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;GetPiece(SquareFactory::Create("e5")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetPiece(SquareFactory::Create("e7")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!c-&amp;gt;GetPiece(SquareFactory::Create("e5")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( c-&amp;gt;GetPiece(SquareFactory::Create("e7")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test EmptyBetween on single piece");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Pieces pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('K',Color::white,"b2")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create(pieces));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("a1"),SquareFactory::Create("c1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("c1"),SquareFactory::Create("a1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("a1"),SquareFactory::Create("a3")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("a3"),SquareFactory::Create("a1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;EmptyBetween(SquareFactory::Create("a1"),SquareFactory::Create("c3")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;EmptyBetween(SquareFactory::Create("c3"),SquareFactory::Create("a1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;EmptyBetween(SquareFactory::Create("b1"),SquareFactory::Create("b3")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;EmptyBetween(SquareFactory::Create("b3"),SquareFactory::Create("b1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;EmptyBetween(SquareFactory::Create("a2"),SquareFactory::Create("c2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;EmptyBetween(SquareFactory::Create("c2"),SquareFactory::Create("a2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("d1"),SquareFactory::Create("d8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("d8"),SquareFactory::Create("d1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("a4"),SquareFactory::Create("h4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("h4"),SquareFactory::Create("a4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("b5"),SquareFactory::Create("f1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("f1"),SquareFactory::Create("b5")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test EmptyBetween after 3rd move of white in Kasparov against the World game");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Pieces pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('R',Color::white,"a1"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('N',Color::white,"c3"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('B',Color::white,"c1"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('Q',Color::white,"d1"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('K',Color::white,"e1"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('B',Color::white,"b5"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('N',Color::white,"g1"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('R',Color::white,"h1"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"a2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"b2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"c2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"d2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"e4"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"f2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"g2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::white,"h2"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('R',Color::black,"a8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('N',Color::black,"b8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('B',Color::black,"c8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('Q',Color::black,"d8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('K',Color::black,"e8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('B',Color::black,"f8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('N',Color::black,"g8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('R',Color::black,"h8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"a7"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"b7"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"c5"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"d6"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"e7"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"f7"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"g7"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('.',Color::black,"h7")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create(pieces));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("b5"),SquareFactory::Create("e8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("e8"),SquareFactory::Create("b5")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("b5"),SquareFactory::Create("f1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;EmptyBetween(SquareFactory::Create("f1"),SquareFactory::Create("b5")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test IsCheck from setup 1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Pieces pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('K',Color::white,"a1"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('K',Color::black,"h8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('R',Color::white,"a8"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create('R',Color::black,"h1")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create(pieces));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;IsCheck(Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;IsCheck(Player::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test IsCheck by playing");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("d7 d6"),Player::black);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test that the move ending is check can be done");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(MoveFactory::Create("Bf1 b5+"),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Do the move ending is check");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create("Bf1 b5+"),Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test that the board detects check");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;IsCheck(Player::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test invalid moves in the initial position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a7 a6", "a7 a5", "b7 b5", "b7 b5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c7 c6", "c7 c5", "d7 d5", "d7 d5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e7 e6", "e7 e5", "f7 f5", "f7 f5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g7 g6", "g7 g5", "h7 h5", "h7 h5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb8 a6", "Nb8 c6", "Ng8 f6", "Ng8 h6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2xa3", "a2 a4+", "b2 b3#", "b2xb4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c2 c3+", "c2 c4#", "d2 d3e.p.", "d2xd4e.p.",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0", "0-0-0", "O-O", "O-O-O",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[b](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move { MoveFactory::Create(s) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Fools mate");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetGameFoolsMate();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[b](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDoMove(s) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b.Score());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b.Score().IsWhiteWinner());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Shephards mate");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Player player = Player::white;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetGameShephardsMate();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;b,&amp;amp;player](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),player)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create(s),player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;player = (player == Player::white ? Player::black : Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Kasparov Versus The World match");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; b(BoardFactory::Create());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Player player = Player::white;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetGameKasparovVersusTheWorld();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = v[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),player)) { TRACE(s);&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDoMove(Chess::MoveFactory::Create(s),player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;DoMove(MoveFactory::Create(s),player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;player = (player == Player::white ? Player::black : Player::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessboardwidget.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessboardwidget.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessboardwidget.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;exception&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
#include &amp;lt;future&amp;gt;&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#include "chessboardfactory.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chessplayer.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chesssquareselector.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chesswidget.h"&lt;br/&gt;
#include "rectangle.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
//ribi::Chess::BoardWidget::BoardWidget()&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;: Chess::Widget(Rect(0,0,0,0))&lt;br/&gt;
//{&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;assert(!"Should not call this function");&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;throw std::logic_error("Must not call ribi::Chess::BoardWidget::BoardWidget()");&lt;br/&gt;
//}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::BoardWidget::BoardWidget(boost::shared_ptr&amp;lt;Chess::Board&amp;gt; board,const Rect&amp;amp; geometry)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Chess::ChessWidget(geometry),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_board(board),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_player(Player::white)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::BoardWidget::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::BoardWidget::CanDoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; to) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; move {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MoveFactory::Create(from,to)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//A Widget can do a move if it is valid for one of the two players&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return this-&amp;gt;GetBoard()-&amp;gt;CanDoMove(move,Chess::Player::white)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| this-&amp;gt;GetBoard()-&amp;gt;CanDoMove(move,Chess::Player::black);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::BoardWidget::CanSelect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; square) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//A BoardWidget can always select a Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return this-&amp;gt;GetBoard()-&amp;gt;GetPiece(square).get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;amp;&amp;amp; this-&amp;gt;GetBoard()-&amp;gt;GetPiece(square)-&amp;gt;GetColor()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;== this-&amp;gt;GetActivePlayer();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::BoardWidget::Click(const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; square) noexcept&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_selector-&amp;gt;Click(square,this-&amp;gt;CanSelect(square));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Moves will only occur when there is both a cursor and a selected square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!m_selector-&amp;gt;GetSelected()) return;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Construct all possible Moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_selector-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::Board::PiecePtr piece = m_board-&amp;gt;GetPiece(m_selector-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE(square-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!piece)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(m_selector-&amp;gt;GetSelected()-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::clog &amp;lt;&amp;lt; *this-&amp;gt;GetBoard() &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Move&amp;gt; move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=32; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= boost::lexical_cast&amp;lt;std::string&amp;gt;(piece-&amp;gt;GetNameChar())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ m_selector-&amp;gt;GetSelected()-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ ( (i / 1) % 2 ? " " : "x")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ m_selector-&amp;gt;GetCursor()-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch ( (i / 2) % 4)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: s += "e.p."; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: s += "+"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: s += "#"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; maybe_move {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MoveFactory::Create(s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (this-&amp;gt;CanDoMove(maybe_move-&amp;gt;From(),maybe_move-&amp;gt;To())) move = maybe_move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board-&amp;gt;CanDoMove(move,m_player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board-&amp;gt;DoMove(move,m_player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_signal_graphic_changed();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::BoardWidget::DoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt;)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"TODO");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::BoardWidget::SetActivePlayer(const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (player != m_player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_player = player;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selector.reset(new SquareSelector);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::BoardWidget::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Testing Chess::Piece exactly once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; board { BoardFactory::Create() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::ChessWidget&amp;gt; w(new BoardWidget(board,Rect(0,0,100,100)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w-&amp;gt;ClickPixel(-1,-1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w-&amp;gt;ClickPixel(1000,1000);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Rect geometry(0,0,100,100);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; board { BoardFactory::Create() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::BoardWidget&amp;gt; widget(new Chess::BoardWidget(board,geometry));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == Chess::SquareSelector::GetInitialSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetCursor()-&amp;gt;GetFile() == Chess::SquareSelector::GetInitialSquare()-&amp;gt;GetFile());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetCursor()-&amp;gt;GetRank() == Chess::SquareSelector::GetInitialSquare()-&amp;gt;GetRank());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(widget-&amp;gt;GetSelector()-&amp;gt;GetCursor()-&amp;gt;GetFile() == Chess::File("a"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(widget-&amp;gt;GetSelector()-&amp;gt;GetCursor()-&amp;gt;GetRank() == Chess::Rank("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check clicking: cursor will always follow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int x=0;x!=8;++x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int y=0;y!=8;++y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(File(x),Rank(y))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create(File(x),Rank(y)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check selection: Board::Widget will select any Chess::Piece, Board::Game only those of the active player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on own piece, selecting it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("b1"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on empty square, selection is removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("d4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("d4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == Chess::Square("b1"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on own piece again, selecting it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("b1"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on selected square, undoing selection&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on square with black piece. Note: a Widget can select every piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("h8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("h8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("h8"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Playing e7-e5 must succeed for a Board, must fail for a Game&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( board-&amp;gt;GetPiece(SquareFactory::Create("e7")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!board-&amp;gt;GetPiece(SquareFactory::Create("e5")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e7"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e7"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("e7"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e5"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e5"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!board-&amp;gt;GetPiece(SquareFactory::Create("e7")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( board-&amp;gt;GetPiece(SquareFactory::Create("e5")));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Playing e2-e4 must succeed for both Board and Game&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( board-&amp;gt;GetPiece(SquareFactory::Create("e2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!board-&amp;gt;GetPiece(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("e2"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!board-&amp;gt;GetPiece(SquareFactory::Create("e2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( board-&amp;gt;GetPiece(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.join();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessboardwidget.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessboardwidget.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSBOARDWIDGET_H&lt;br/&gt;
#define CHESSBOARDWIDGET_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#include "chesswidget.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Chess::BoardWidget is a Chess::Widget to interact with a Chess::Board&lt;br/&gt;
struct BoardWidget : public Chess::ChessWidget&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoardWidget(boost::shared_ptr&amp;lt;Chess::Board&amp;gt; board, const Rect&amp;amp; geometry);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Can do a move?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; to) const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//bool CanDoMove(const Chess::Move&amp;amp; move) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Can the square be selected?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanSelect(const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; square) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Respond to a click&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Click(const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; square) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do a move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoMove(const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; from, const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; to);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get which Player is active&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Player GetActivePlayer() const { return m_player; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the Chess::Board this Chess::Widget works on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; GetBoard() const { return m_board; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set which Player is active&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetActivePlayer(const Player player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~BoardWidget() {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The chessboard&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Board&amp;gt; m_board;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The active Player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Player m_player;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(BoardWidget* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSBOARDWIDGET_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesscastling.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesscastling.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;exception&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chesscastling.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::CanStrToCastling(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::xpressive::regex_match(s,GetCastlingRegex());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::CastlingToStr(const Castling castling)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (castling)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Castling::kingside: return "O-O";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Castling::queenside: return "O-O-O";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Unknown Castling");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::xpressive::sregex ribi::Chess::GetCastlingRegex()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::xpressive::sregex r {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::xpressive::sregex::compile("(0|O)-(0|O)(-(0|O))?(\\+|\\#)?")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return r;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Castling ribi::Chess::StrToCastling(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanStrToCastling(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.substr(0,3) == "O-O"&amp;nbsp;&amp;nbsp; || s.substr(0,3) == "0-0"&amp;nbsp;&amp;nbsp;) return Castling::kingside;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.substr(0,5) == "O-O-O" || s.substr(0,5) == "0-0-0") return Castling::queenside;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Cannot convert std::string to Castling");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Cannot convert std::string to Castling");&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesscastling.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesscastling.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSCASTLING_H&lt;br/&gt;
#define CHESSCASTLING_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
enum class Castling { kingside, queenside };&lt;br/&gt;
&lt;br/&gt;
const std::string CastlingToStr(const Castling castling);&lt;br/&gt;
bool CanStrToCastling(const std::string&amp;amp; s);&lt;br/&gt;
const boost::xpressive::sregex GetCastlingRegex();&lt;br/&gt;
//const Square GetCastlingKingSquare(const Castling castling, const Player player);&lt;br/&gt;
//const Square GetCastlingRookSquare(const Castling castling, const Player player);&lt;br/&gt;
Castling StrToCastling(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSCASTLING_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesscolor.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesscolor.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
#include "chessplayer.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::ColorToStr(const Color c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::black&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: return "black";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::indeterminate: return "indeterminate";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::white&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: return "white";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::red&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: return "red";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::green&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: return "green";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::blue&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : return "blue";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Chess::ColorToStr: unimplemented Color");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Player ribi::Chess::ColorToPlayer(const Color c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::white: return Player::white;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Color::black: return Player::black;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Cannot convert color to player");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Cannot convert color to player");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::ColorVersion::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.1";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::ColorVersion::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-02-07: version 1.1: added colors red, green and blue for selection"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Chess::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Color c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; ColorToStr(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Color color, const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::black: return color == Color::black;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::white: return color == Color::white;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Player player, const Color color)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return color == player;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Color color, const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(color == player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Player player, const Color color)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(color == player);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesscolor.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesscolor.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSCOLOR_H&lt;br/&gt;
#define CHESSCOLOR_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
//C++0x enum class&lt;br/&gt;
enum class Color&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;black, white, indeterminate, red, green, blue&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
struct ColorVersion&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
const std::string ColorToStr(const Color c);&lt;br/&gt;
Player ColorToPlayer(const Color c);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Color c);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Color color, const Player player);&lt;br/&gt;
bool operator==(const Player player, const Color color);&lt;br/&gt;
bool operator!=(const Color color, const Player player);&lt;br/&gt;
bool operator!=(const Player player, const Color color);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSCOLOR_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessfile.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessfile.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessfile.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
#include &amp;lt;thread&amp;gt;&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::File::File(const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_s(s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_s.empty()) throw std::logic_error("Chess files cannot be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_s.size() != 1) throw std::logic_error("Chess files consist of exactly one character");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const char c = m_s[0];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (c &amp;lt; 'a' || c &amp;gt; 'h') throw std::logic_error("Chess files go from a to and including h");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c &amp;gt;= 'a');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c &amp;lt;= 'h');&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::File::File(const int x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_s(IntToCharToStr(x))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (x &amp;lt; 0 || x &amp;gt; 7) throw std::logic_error("X coordinats go from 0 to and including 7");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const char c = m_s[0];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_s.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c &amp;gt;= 'a');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c &amp;lt;= 'h');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::File::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::File::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::string ribi::Chess::File::IntToCharToStr(const int x)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char c = 'a' + x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::lexical_cast&amp;lt;std::string&amp;gt;(c);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::File::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::File");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test valid Files from std::string");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = {"a","b","c","d","e","f","g","h"};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),[](const std::string&amp;amp; s) { Chess::File tmp(s); } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test valid Files from int");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = {0,1,2,3,4,5,6,7};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),[](const int&amp;amp; i) { File tmp(i); } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test invalid Files from std::string");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = {"A","i"," ","H","I","1","7","aa","1a","a1" };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File tmp(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test invalid Files from int");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = {-1,8,10,11,100,111};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const int&amp;amp; i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File tmp(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test individual files intimately");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File f("a");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToStr() == "a");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File f("h");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToStr() == "h");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToInt() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File f(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToStr() == "a");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File f(7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToStr() == "h");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.ToInt() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Chess::File::ToInt() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const char c = m_s[0];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c &amp;gt;= 'a');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c &amp;lt;= 'h');&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int value = c - 'a';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(value &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(value &amp;lt; 8);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return value;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
File&amp;amp; ribi::Chess::File::operator++()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_s != std::string("h"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_s = IntToCharToStr(++this-&amp;gt;ToInt());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
File&amp;amp; ribi::Chess::File::operator--()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_s != std::string("a"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_s = IntToCharToStr(--this-&amp;gt;ToInt());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const File&amp;amp; lhs, const File&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.ToStr() == rhs.ToStr();&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessfile.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessfile.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSFILE_H&lt;br/&gt;
#define CHESSFILE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///A File is the x-coordinat on a Board&lt;br/&gt;
struct File&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a file from its single-character string, e.g. "b" for file b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit File(const std::string&amp;amp; x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a file from its x-coordinat, e.g. 1 for file b&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit File(const int x);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a File to its single-character string.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example, file "a" has x-coordinat 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; ToStr() const { return m_s; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a File to its x-coordinat.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example, file 'a' has x-coordinat 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int ToInt() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Increment file, e.g. from 'a' to'b'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//File&amp;amp; operator++();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Decrement file, e.g. from 'b' to'a'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//File&amp;amp; operator--();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string m_s;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert 0 to 'a', 1 to 'b', etc...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static std::string IntToCharToStr(const int x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const File&amp;amp; lhs, const File&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSFILE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessfwd.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessfwd.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&lt;br/&gt;
#ifndef CHESSFWD_H&lt;br/&gt;
#define CHESSFWD_H&lt;br/&gt;
&lt;br/&gt;
///Contains the CppChess forward declarations&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
struct BitBoard;&lt;br/&gt;
struct Board;&lt;br/&gt;
struct BoardFactory;&lt;br/&gt;
struct BoardWidget;&lt;br/&gt;
enum class Castling;&lt;br/&gt;
enum class Color;&lt;br/&gt;
struct File;&lt;br/&gt;
struct Game;&lt;br/&gt;
struct GameWidget;&lt;br/&gt;
struct Move;&lt;br/&gt;
struct MoveFactory;&lt;br/&gt;
struct Piece;&lt;br/&gt;
struct PieceBishop;&lt;br/&gt;
struct PieceKing;&lt;br/&gt;
struct PieceKnight;&lt;br/&gt;
struct PiecePawn;&lt;br/&gt;
struct PieceQueen;&lt;br/&gt;
struct PieceRook;&lt;br/&gt;
enum class Player;&lt;br/&gt;
struct Rank;&lt;br/&gt;
struct Score;&lt;br/&gt;
struct Square;&lt;br/&gt;
struct SquareFactory;&lt;br/&gt;
struct SquareSelector;&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
&lt;br/&gt;
struct Widget;&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSFWD_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessgame.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessgame.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessgame.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#include "chessbitboard.h"&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#include "chessboardfactory.h"&lt;br/&gt;
#include "chessfile.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chessplayer.h"&lt;br/&gt;
#include "chessrank.h"&lt;br/&gt;
#include "chessscore.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Game::Game()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_board(BoardFactory::Create()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_moves{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_score{}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
ribi::Chess::Game::Game(const Game&amp;amp; other)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_moves(other.m_moves)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE_FUNC();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Copy all Pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_pieces = other.m_pieces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(other.m_pieces.begin(), other.m_pieces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;m_pieces](const PiecePtr&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PiecePtr q(p-&amp;gt;Clone());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_pieces.push_back(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Copy the Score if the game has ended by agreement (instead of by checkmate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (other.Score()) m_score.reset(new Chess::Score(*other.Score().get()));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*this == other);&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Game::CanDoGame(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; moves)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_moves = static_cast&amp;lt;int&amp;gt;(moves.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return CanDoGameUntil(moves) == n_moves;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Chess::Game::CanDoGameUntil(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; moves)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Chess::Game game;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_moves = static_cast&amp;lt;int&amp;gt;(moves.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_moves; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s = moves[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!game.CanDoMove(MoveFactory::Create(s))) return i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;game.DoMove(Chess::MoveFactory::Create(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return n_moves;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Game::CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanDoMove(move,GetActivePlayer());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::Game::DoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_score);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_moves.push_back(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PiecePtr p = GetPiece(move-&amp;gt;From());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p-&amp;gt;DoMove(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else if (move-&amp;gt;Score())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_score = move-&amp;gt;Score();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Chess::Game::PiecePtr ribi::Chess::Game::GetPiece(const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;GetPiece(square);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Player ribi::Chess::Game::GetActivePlayer() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_moves.size() % 2 ? Player::black : Player::white;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::Game::GetMoves() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;GetMoves(GetActivePlayer());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::Game::GetMoves(const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;GetMoves(square);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Game::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "0.1";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Game::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-06-16: version 0.1: initial seperation from Chess::Board"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Chess::BitBoard ribi::Chess::Game::GetVisibleSquares() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;GetVisibleSquares(GetActivePlayer());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Game::IsCheck() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;IsCheck(GetActivePlayer());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Game::IsCheckmate() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///TODO&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return IsCheck();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Score&amp;gt;&amp;amp; ribi::Chess::Game::Score() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_score;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Chess::Game::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing Game");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Game();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Game&amp;amp; lhs, const Game&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!lhs.Score() &amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;rhs.Score()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( lhs.Score() &amp;amp;&amp;amp; !rhs.Score()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( lhs.Score() &amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;rhs.Score())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*lhs.Score() != *rhs.Score()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *lhs.m_board == *rhs.m_board;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Game&amp;amp; lhs, const Game&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessgame.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessgame.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSGAME_H&lt;br/&gt;
#define CHESSGAME_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
//#include &amp;lt;set&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/logic/tribool.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
//#include "chesspiece.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
struct Piece;&lt;br/&gt;
&lt;br/&gt;
///Chess::Board is a class for a chessboard without gaming rules.&lt;br/&gt;
///Rules that handled by Chess::Board normally are:&lt;br/&gt;
/// - en passant&lt;br/&gt;
/// - castling&lt;br/&gt;
///Chess::Game is the class that uses a Chess::Board and adds these rules&lt;br/&gt;
///Rules that must be handled by Chess::Game are:&lt;br/&gt;
/// - keeping track of which player's turn it is&lt;br/&gt;
/// - determining a winner or draw&lt;br/&gt;
struct Game&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef boost::shared_ptr&amp;lt;Piece&amp;gt; PiecePtr;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;PiecePtr&amp;gt; Pieces;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Construct a Game in the initial position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Game();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Copy a Game&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Game(const Game&amp;amp; other);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if a Move is valid to play in the current context&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Check if this game can be played&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool CanDoGame(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; moves);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static int CanDoGameUntil(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; moves);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do a Move that is valid to play in the current context&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//bool IsVisible(const Square&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const GameVisibleType GetInSight(const Piece::Color color) const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const Piece GetPiece(const int x, const int y) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Whose turn is it?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Player GetActivePlayer() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the Chess::Board used for the Game&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; GetBoard() const { return m_board; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Collect all moves that are possible for a Piece at a certain Square.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If there is no Piece at that Square, no Moves are returned&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves(const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Collect all moves that are possible&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Find a Piece at a certain Square.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If there is no Piece at that Square, an empty Piece is returned&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const PiecePtr GetPiece(const boost::shared_ptr&amp;lt;const Square&amp;gt; square) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get all squares that are visible by a player with the requested color.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If the Color is set to Color::indeterminate, both players' sights&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///are returned&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BitBoard GetVisibleSquares() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is, in the current position, the active player being in check?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCheck() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is the current position the active player being in checkmate?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCheckmate() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Score if the game has ended by agreement (instead of by checkmate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Score&amp;gt;&amp;amp; Score() const;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Tests the Game class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Chess::Board used for the Game&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Board&amp;gt; m_board;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; &amp;gt; m_moves;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Score if the game has ended by agreement (instead of by checkmate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Score&amp;gt; m_score;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend bool operator==(const Game&amp;amp; lhs, const Game&amp;amp; rhs);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Game&amp;amp; lhs, const Game&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Game&amp;amp; lhs, const Game&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSGAME_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessgamewidget.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessgamewidget.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessgamewidget.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
#include &amp;lt;thread&amp;gt;&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#include "chessgame.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chesssquareselector.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
//ribi::Chess::GameWidget::GameWidget()&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;: Chess::Widget(Rect(0,0,0,0))&lt;br/&gt;
//{&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;assert(!"Should not call this function");&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;throw std::logic_error("Must not call ribi::Chess::GameWidget::GameWidget()");&lt;br/&gt;
//}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::GameWidget::GameWidget(boost::shared_ptr&amp;lt;Chess::Game&amp;gt; game, const Rect&amp;amp; geometry)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: ChessWidget(geometry), m_game(game)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::GameWidget::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::GameWidget::Click(const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_selector-&amp;gt;Click(square,this); //BUG ?&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Moves will only occur when there is both a cursor and a selected square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!m_selector-&amp;gt;GetSelected()) return;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::Chess::Square&amp;gt; from {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selector-&amp;gt;GetSelected()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::Chess::Square&amp;gt; to {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selector-&amp;gt;GetCursor()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (this-&amp;gt;CanDoMove(from,to))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DoMove(from,to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::GameWidget::CanDoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; to) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Construct all possible Moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_selector-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::Board::PiecePtr piece = m_game-&amp;gt;GetBoard()-&amp;gt;GetPiece(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Move&amp;gt; move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=32; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= boost::lexical_cast&amp;lt;std::string&amp;gt;(piece-&amp;gt;GetNameChar())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ from-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ ( (i / 1) % 2 ? " " : "x")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ to-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch ( (i / 2) % 4)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: s += "e.p."; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: s += "+"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: s += "#"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; maybe_move {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MoveFactory::Create(s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_game-&amp;gt;CanDoMove(maybe_move)) move = maybe_move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::GameWidget::DoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; to)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDoMove(from,to));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Construct all possible Moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::Board::PiecePtr piece = m_game-&amp;gt;GetBoard()-&amp;gt;GetPiece(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Move&amp;gt; move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=32; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= boost::lexical_cast&amp;lt;std::string&amp;gt;(piece-&amp;gt;GetNameChar())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ from-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ ( (i / 1) % 2 ? " " : "x")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ to-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch ( (i / 2) % 4)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: s += "e.p."; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: s += "+"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: s += "#"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; maybe_move {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MoveFactory::Create(s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_game-&amp;gt;CanDoMove(maybe_move)) move = maybe_move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move) break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_game-&amp;gt;DoMove(move);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_signal_graphic_changed();&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::GameWidget::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Testing Chess::Piece exactly once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Game&amp;gt; game(new Chess::Game);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::ChessWidget&amp;gt; w(new GameWidget(game,Rect(0,0,100,100)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w-&amp;gt;ClickPixel(-1,-1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w-&amp;gt;ClickPixel(1000,1000);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Game&amp;gt; game(new Chess::Game);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::GameWidget&amp;gt; widget(new Chess::GameWidget(game,Rect(0,0,100,100)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetCursor()-&amp;gt;GetFile() == Chess::File("a"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetCursor()-&amp;gt;GetRank() == Chess::Rank("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check clicking: cursor will always follow&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int x=0;x!=8;++x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int y=0;y!=8;++y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File(x),Rank(y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check selection: Board::Widget will select any Chess::Piece, Board::Game only those of the active player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on own piece, selecting it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create("b1")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("b1"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on empty square, selected piece remains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("d4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("d4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("b1"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on selected square, undoing selection&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("b1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Click on enemy square, Chess::Board will select it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("h8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("g8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Playing e7-e5 must succeed for a Board, must fail for a Game&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e7")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e5")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e7"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e7"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e5"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e5"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e7")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e5")));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Playing e2-e4 must succeed for both Board and Game&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e2"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetSelected() == *SquareFactory::Create("e2"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widget-&amp;gt;Click(SquareFactory::Create("e4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*widget-&amp;gt;GetSelector()-&amp;gt;GetCursor() == *SquareFactory::Create("e4"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!widget-&amp;gt;GetSelector()-&amp;gt;GetSelected());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( game-&amp;gt;GetBoard()-&amp;gt;GetPiece(SquareFactory::Create("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessgamewidget.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessgamewidget.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSGAMEWIDGET_H&lt;br/&gt;
#define CHESSGAMEWIDGET_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
//#include "chessboard.h"&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#include "chesswidget.h"&lt;br/&gt;
//struct Rect;&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Chess::GameWidget is a Chess::Widget to interact with a Chess::Game&lt;br/&gt;
struct GameWidget : public Chess::ChessWidget&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;GameWidget(boost::shared_ptr&amp;lt;Chess::Game&amp;gt; game, const Rect&amp;amp; geometry);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Can do a move?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Respond to a click&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Click(const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do a move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get the Chess::Board this Chess::Widget works on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Game&amp;gt; GetGame() const { return m_game; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~GameWidget() {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The chessboard&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Game&amp;gt; m_game;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(GameWidget* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~ namespace Chess&lt;br/&gt;
} //~ namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSGAMEWIDGET_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesshelper.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesshelper.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chesshelper.h"&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesshelper.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesshelper.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSHELPER_H&lt;br/&gt;
#define CHESSHELPER_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;set&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
///Help adding constness a bit&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const T&amp;gt; &amp;gt; AddConst(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;T&amp;gt; &amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::vector&amp;lt;boost::shared_ptr&amp;lt;const T&amp;gt; &amp;gt;(v.begin(),v.end());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
///Help adding constness a bit&lt;br/&gt;
template &amp;lt;class T&amp;gt;&lt;br/&gt;
const std::set&amp;lt;boost::shared_ptr&amp;lt;const T&amp;gt; &amp;gt; AddConst(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::set&amp;lt;boost::shared_ptr&amp;lt;T&amp;gt; &amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::set&amp;lt;boost::shared_ptr&amp;lt;const T&amp;gt; &amp;gt;(v.begin(),v.end());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSHELPER_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessmove.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessmove.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chesscastling.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chessmoves.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chesspiecefactory.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chessscore.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Move::Move(const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_from(ParseFrom(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_capture(ParseIsCapture(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_castling(ParseIsCastling(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_check(ParseIsCheck(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_checkmate(ParseIsCheckmate(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_en_passant(ParseIsEnPassant(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_promotion(ParseIsPromotion(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_piece(ParsePiece(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_piece_promotion(ParsePiecePromotion(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_score(ParseScore(s)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_str(s),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_to(ParseTo(s))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("std::string to parse is empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!m_to &amp;amp;&amp;amp; !m_is_castling &amp;amp;&amp;amp; (!m_score))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string error = "Chess::ribi::Chess::Move::Move exception: m_to not initialized for non-castling non-score move " + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(error.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!m_piece &amp;amp;&amp;amp; !m_is_castling &amp;amp;&amp;amp; !m_score)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string error = "Chess::ribi::Chess::Move::Move exception: m_piece not initialized for non-castling non-score move " + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(error.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_en_passant &amp;amp;&amp;amp; !m_is_capture) throw std::logic_error("Chess::ribi::Chess::Move::Move exception: every en passant capture is a capture");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (boost::xpressive::regex_search(s,boost::xpressive::sregex::compile("e.p.")) &amp;amp;&amp;amp; !m_is_en_passant)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string error = "Chess::ribi::Chess::Move::Move exception: move is an invalid en passant move: " + s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(error.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_piece)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_is_castling)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("Chess::ribi::Chess::Move::Move exception: m_piece cannot be initialized in a castling move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_score) throw std::logic_error("Chess::ribi::Chess::Move::Move exception: m_piece cannot be initialized in a score move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool valid = m_piece-&amp;gt;CanDoMove(MoveFactory::DeepCopy(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!valid)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string t = "Move " + s + " invalid for " + m_piece-&amp;gt;GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(t.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::Move::GetRegexMatches(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::xpressive::sregex&amp;amp; r)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::xpressive::sregex_iterator cur(s.begin(),s.end(),r);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::xpressive::sregex_iterator end;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for( ; cur != end; ++cur )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::xpressive::smatch&amp;amp; what = *cur;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(what[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Move::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.1";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Move::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2013-11-08: version 1.1: replaced Boost.Regex by Boost.Xpressive"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Move::IsCastling() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_is_castling || CanStrToCastling(m_str));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_is_castling;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Square&amp;gt; ribi::Chess::Move::ParseFrom(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Square&amp;gt; square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::xpressive::sregex r { boost::xpressive::sregex::compile("[a-h][1-8]") };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = GetRegexMatches(s,r);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!(v.size() &amp;lt;= 2)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() &amp;lt;= 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() == 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;square = SquareFactory::Create(v[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//square.reset(new Square(v[0]));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return square;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Move::ParseIsCapture(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//if (s.empty()) throw std::logic_error("ribi::Chess::Move::ParseIsCapture exception: move must not be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//return boost::regex_match(s,boost::regex("[a-h]\\d?x.*"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::xpressive::sregex r {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::xpressive::sregex::compile("(B|K|N|Q|R)?([a-h])?([1-8])?x[a-h][1-8](e.p.)?(\\+|\\#)?")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::xpressive::regex_match(s,r);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Move::ParseIsCastling(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return CanStrToCastling(s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//return s == "0-0" || s == "O-O" || s == "O-O+" || s == "0-0-0" || s == "O-O-O"|| s == "O-O-O+";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Move::ParseIsCheck(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::IsCheck(const std::string&amp;amp; s) exception: move must not be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s[s.size() - 1] == '+';&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Move::ParseIsCheckmate(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::IsCheckmate(const std::string&amp;amp; s) exception: move must not be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s[s.size() - 1] == '#';&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Move::ParseIsEnPassant(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::xpressive::sregex r {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::xpressive::sregex::compile("([a-h][4-5])x[a-h][3-6]e.p.(\\+|\\#)?")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!boost::xpressive::regex_match(s,r)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Square&amp;gt; from = ParseFrom(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Square&amp;gt; to = ParseTo(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(to);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::abs(from-&amp;gt;GetFile().ToInt() - to-&amp;gt;GetFile().ToInt()) != 1) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::abs(from-&amp;gt;GetRank().ToInt() - to-&amp;gt;GetRank().ToInt()) != 1) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (from-&amp;gt;GetRank() == Chess::Rank("5") &amp;amp;&amp;amp; to-&amp;gt;GetRank() == Chess::Rank("6")) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (from-&amp;gt;GetRank() == Chess::Rank("4") &amp;amp;&amp;amp; to-&amp;gt;GetRank() == Chess::Rank("3")) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::Move::ParseIsPromotion(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::xpressive::sregex r {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::xpressive::sregex::compile("([a-h][1-8](x|\\s)?)?[a-h][1|8][B|N|Q|R](\\+|\\#)?")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::xpressive::regex_match(s,r);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::Move::ParsePiece(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::ParsePiece exception: move must not be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; p = PieceFactory::CreateFromMove(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::Move::ParsePiecePromotion(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::ParsePiece exception: move must not be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; p = PieceFactory::CreateFromPromotion(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Score&amp;gt; ribi::Chess::Move::ParseScore(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Score&amp;gt; p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Score * const ptr = new Chess::Score(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.reset(ptr);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Move is not a Score, no problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Square&amp;gt; ribi::Chess::Move::ParseTo(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::xpressive::sregex r {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::xpressive::sregex::compile("[a-h][1-8]")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Square&amp;gt; square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = GetRegexMatches(s,r);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!v.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() &amp;lt;= 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string t = v[ v.size() - 1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;square = SquareFactory::Create(t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return square;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Move::ToStr() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_piece)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!dynamic_cast&amp;lt;PiecePawn*&amp;gt;(m_piece.get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += m_piece-&amp;gt;GetNameChar();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_from)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += m_from-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += "??";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_is_capture)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += "x";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += " ";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_to)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += m_to-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += "??";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_castling) s += m_str;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_check) s+= "+";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_checkmate) s+= "#";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_en_passant) s+= "e.p.";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_promotion) s+= "(promotion)";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_piece_promotion) s+= m_piece_promotion-&amp;gt;GetNameChar();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_score) s+= m_score-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Move&amp;amp; lhs, const Move&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;bool&amp;gt;(lhs.m_from) != static_cast&amp;lt;bool&amp;gt;(rhs.m_from)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_from)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rhs.m_from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*lhs.m_from != *rhs.m_from) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_is_capture&amp;nbsp;&amp;nbsp;!= rhs.m_is_capture) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_is_castling != rhs.m_is_castling) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_is_check != rhs.m_is_check) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_is_checkmate != rhs.m_is_checkmate) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_is_en_passant != rhs.m_is_en_passant) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_is_promotion != rhs.m_is_promotion) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;bool&amp;gt;(lhs.m_piece) != static_cast&amp;lt;bool&amp;gt;(rhs.m_piece)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_piece)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rhs.m_piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*lhs.m_piece != *rhs.m_piece) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;bool&amp;gt;(lhs.m_piece_promotion) != static_cast&amp;lt;bool&amp;gt;(rhs.m_piece_promotion)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_piece_promotion)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rhs.m_piece_promotion);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*lhs.m_piece_promotion != *rhs.m_piece_promotion) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;bool&amp;gt;(lhs.m_score) != static_cast&amp;lt;bool&amp;gt;(rhs.m_score)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.m_piece_promotion)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rhs.m_score);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*lhs.m_score!= *rhs.m_score) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Move&amp;amp; lhs, const Move&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Chess::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os,const Move&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; m.GetStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessmove.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessmove.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSMOVE_H&lt;br/&gt;
#define CHESSMOVE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;memory&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include &amp;lt;boost/xpressive/xpressive_fwd.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
struct Move&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Parses a Move from char* (not yet supported by GCC)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Move(const char * const s) : Move(std::string(s)) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the square the piece is moving from&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; From() const noexcept { return m_from; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the Move in the notational form it was contructed with&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetStr() const { return m_str; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether this move is a capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCapture() const { return m_is_capture; };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether this move performs a castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCastling() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether this move results in a check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCheck() const { return m_is_check; };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether this move results in a checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsCheckmate() const { return m_is_checkmate; };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether this move is an en passant capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsEnPassant() const { return m_is_en_passant; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether this move results in a promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsPromotion() const { return m_is_promotion; };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Parse the string to obtain the square the piece is moving from, when known&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Examples:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///* 'a2 a3' results in a Square with 'a2'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///* 'a3' results in an empty Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Chess::Square&amp;gt; ParseFrom(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether the string is a capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool ParseIsCapture(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether the string results in a check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool ParseIsCheck(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether the string is a castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool ParseIsCastling(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether the string results in a checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool ParseIsCheckmate(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether the string results in an en passant capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool ParseIsEnPassant(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain whether the string is a move that results in a promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool ParseIsPromotion(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Parse the Piece from a string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; ParsePiece(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Parse the Piece the pawn is promoted to from a string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; ParsePiecePromotion(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Parse the Score from a string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Chess::Score&amp;gt; ParseScore(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Parse the Square the Piece is moving to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Chess::Square&amp;gt; ParseTo(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the piece type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; Piece() const { return m_piece; };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the piece type promoted to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; PiecePromotion() const { return m_piece_promotion; };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the score&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Score&amp;gt; Score() const { return m_score; };&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Tests all moves that are potentially valid,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that is, there must be situations possible&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///in which these are valid.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the square the piece is moving to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; To() const noexcept { return m_to; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Move to its long notational form&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Parses a Move from std::string.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Move(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~Move() {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#define CHESS_MOVE_NOT_USE_CONST&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef CHESS_MOVE_NOT_USE_CONST&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; m_from;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_capture;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_castling;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_check;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_checkmate;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_promotion;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; m_piece;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; m_piece_promotion;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Score&amp;gt; m_score;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string m_str;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Chess::Square&amp;gt; m_to;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Square&amp;gt; m_from;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_capture;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_castling;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_check;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_checkmate;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_en_passant;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_is_promotion;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; m_piece;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; m_piece_promotion;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Score&amp;gt; m_score;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Move in the same notational form as given in the contructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_str;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; m_to;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all matches of regex in a certain string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//From http://www.richelbilderbeek.nl/CppGetRegexMatches.htm&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetRegexMatches(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::xpressive::sregex&amp;amp; r);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Move *);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class MoveFactory;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend bool operator==(const Move&amp;amp; lhs, const Move&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Move&amp;amp; lhs, const Move&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Move&amp;amp; lhs, const Move&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os,const Move&amp;amp; m);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSMOVE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessmovefactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessmovefactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessmovefactory.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; ribi::Chess::MoveFactory::Create(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Move(s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; ribi::Chess::MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; to)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string s = from-&amp;gt;ToStr() + " " + to-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Create(s);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; ribi::Chess::MoveFactory::DeepCopy(const Move&amp;amp; move)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create(move.ToStr())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessmovefactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessmovefactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSMOVEFACTORY_H&lt;br/&gt;
#define CHESSMOVEFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
struct MoveFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Move&amp;gt; Create(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Move&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; to);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Move&amp;gt; DeepCopy(const Move&amp;amp; move);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSMOVEFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessmoves.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessmoves.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessmoves.h"&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetGameKasparovVersusTheWorld()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e4"&amp;nbsp;&amp;nbsp; , "c5"&amp;nbsp;&amp;nbsp;, //1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nf3"&amp;nbsp;&amp;nbsp;, "d6"&amp;nbsp;&amp;nbsp;, //2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bb5+" , "Bd7" , //3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bxd7+", "Qxd7", //4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c4"&amp;nbsp;&amp;nbsp; , "Nc6" , //5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nc3"&amp;nbsp;&amp;nbsp;, "Nf6" , //6&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0"&amp;nbsp;&amp;nbsp;, "g6"&amp;nbsp;&amp;nbsp;, //7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"d4"&amp;nbsp;&amp;nbsp; , "cxd4", //8&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nxd4" , "Bg7" , //9&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nde2" , "Qe6" , //10&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd5"&amp;nbsp;&amp;nbsp;, "Qxe4", //11&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nc7+" , "Kd7" , //12&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nxa8" , "Qxc4", //13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb6+" , "axb6", //14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nc3"&amp;nbsp;&amp;nbsp;, "Ra8" , //15&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a4"&amp;nbsp;&amp;nbsp; , "Ne4" , //16&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nxe4" , "Qxe4", //17&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qb3"&amp;nbsp;&amp;nbsp;, "f5"&amp;nbsp;&amp;nbsp;, //18&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bg5"&amp;nbsp;&amp;nbsp;, "Qb4" , //19&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qf7"&amp;nbsp;&amp;nbsp;, "Be5" , //20&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"h3"&amp;nbsp;&amp;nbsp; , "Rxa4", //21&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rxa4" , "Qxa4", //22&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qxh7" , "Bxb2", //23&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qxg6" , "Qe4" , //24&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qf7"&amp;nbsp;&amp;nbsp;, "Bd4" , //25&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qb3"&amp;nbsp;&amp;nbsp;, "f4"&amp;nbsp;&amp;nbsp;, //26&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qf7"&amp;nbsp;&amp;nbsp;, "Be5" , //27&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"h4"&amp;nbsp;&amp;nbsp; , "b5"&amp;nbsp;&amp;nbsp;, //28&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"h5"&amp;nbsp;&amp;nbsp; , "Qc4" , //29&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qf5+" , "Qe6" , //30&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qxe6+", "Kxe6", //31&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g3"&amp;nbsp;&amp;nbsp; , "fxg3", //32&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"fxg3" , "b4"&amp;nbsp;&amp;nbsp;, //33&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bf4"&amp;nbsp;&amp;nbsp;, "Bd4+", //34&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kh1"&amp;nbsp;&amp;nbsp;, "b3"&amp;nbsp;&amp;nbsp;, //35&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g4"&amp;nbsp;&amp;nbsp; , "Kd5" , //36&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g5"&amp;nbsp;&amp;nbsp; , "e6"&amp;nbsp;&amp;nbsp;, //37&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"h6"&amp;nbsp;&amp;nbsp; , "Ne7" , //38&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd1"&amp;nbsp;&amp;nbsp;, "e5"&amp;nbsp;&amp;nbsp;, //39&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Be3"&amp;nbsp;&amp;nbsp;, "Kc4" , //40&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bxd4" , "exd4", //41&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kg2"&amp;nbsp;&amp;nbsp;, "b2"&amp;nbsp;&amp;nbsp;, //42&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kf3"&amp;nbsp;&amp;nbsp;, "Kc3" , //43&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"h7"&amp;nbsp;&amp;nbsp; , "Ng6" , //44&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ke4"&amp;nbsp;&amp;nbsp;, "Kc2" , //45&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rh1"&amp;nbsp;&amp;nbsp;, "d3"&amp;nbsp;&amp;nbsp;, //46&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kf5"&amp;nbsp;&amp;nbsp;, "b1Q" , //47&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rxb1" , "Kxb1", //48&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kxg6" , "d2"&amp;nbsp;&amp;nbsp;, //49&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"h8Q"&amp;nbsp;&amp;nbsp;, "d1Q" , //50&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qh7"&amp;nbsp;&amp;nbsp;, "b5"&amp;nbsp;&amp;nbsp;, //51&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kf6+" , "Kb2" , //52&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qh2+" , "Ka1" , //53&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qf4"&amp;nbsp;&amp;nbsp;, "b4"&amp;nbsp;&amp;nbsp;, //54&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qxb4" , "Qf3+", //55&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kg7"&amp;nbsp;&amp;nbsp;, "d5"&amp;nbsp;&amp;nbsp;, //56&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4+" , "Kb1" , //57&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g6"&amp;nbsp;&amp;nbsp; , "Qe4" , //58&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qg1+" , "Kb2" , //59&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qf2+" , "Kc1" , //60&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kf6"&amp;nbsp;&amp;nbsp;, "d4"&amp;nbsp;&amp;nbsp;, //61&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g7"&amp;nbsp;&amp;nbsp; , "1-0"&amp;nbsp;&amp;nbsp; //62&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetGameShephardsMate()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e2 e4", "e7 e5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bf1 c4", "a7 a6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd1 f3", "a6 a5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qf3xf7#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidBishopMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ba1 b1", "Ba1 a2", "Ba1xb1", "Ba1xa2","Ba1 h2","Ba1 b8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ba1 a1",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0", "0-1", "1/2-1/2"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidCaptureMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidCastlingMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidEnPassantMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"d2 d3e.p.", "d2xd3e.p.", "d5 e6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6" ,"b5xa6" ,"a4xb3" ,"b4xa3" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6+","b5xa6+","a4xb3+","b4xa3+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6#","b5xa6#","a4xb3#","b4xa3#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5 b6e.p." ,"b5 a6e.p." ,"a4 b3e.p." ,"b4 a3e.p." ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5 b6e.p.+","b5 a6e.p.+","a4 b3e.p.+","b4 a3e.p.+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5 b6e.p.#","b5 a6e.p.#","a4 b3e.p.#","b4 a3e.p.#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a4xb5e.p." ,"b4xa5e.p." ,"a5xb2e.p." ,"b5xa2e.p." ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a4xb5e.p.+","b4xa5e.p.+","a5xb2e.p.+","b5xa2e.p.+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a4xb5e.p.#","b4xa5e.p.#","a5xb2e.p.#","b5xa2e.p.#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a6xb7e.p."&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidKingMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 b2", "Kd4 b3", "Kd4 b4", "Kd4 b5", "Kd4 b6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 c1", "Kd4 c2", "Kd4 c6", "Kd4 c7",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 d1", "Kd4 d2", "Kd4 d4", "Kd4 d6", "Kd4 d7",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 e1", "Kd4 e2", "Kd4 e6", "Kd4 e7",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 f2", "Kd4 f3", "Kd4 f4", "Kd4 f5", "Kd4 f6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ka1 h8", "Ka1xh8", "Ka1 a8", "Ka1 a8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0", "0-1", "1/2-1/2"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidKnightMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4 d4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4 c3","Nd4 c4","Nd4 c5","Nd4 e3","Nd4 e4","Nd4 e5","Nd4 d3","Nd4 d5",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4 b2","Nd4 f2","Nd4 f6","Nd4 b6",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Na1 h3","Na1 h7","Na1 g1","Na1 g8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0", "0-1", "1/2-1/2"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidPawnMoves(const Chess::Color&amp;amp; color)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (color == Color::indeterminate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2xa3", "a3xa2", "a2 b3", "a3 b2",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a6xb7e.p." , "b6xa7e.p." , "a3xb2e.p." , "b3xa2e.p.",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a6xb7e.p.+", "b6xa7e.p.+", "a3xb2e.p.+", "b3xa2e.p.+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a6xb7e.p.#", "b6xa7e.p.#", "a3xb2e.p.#", "b3xa2e.p.#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0", "0-1", "1/2-1/2"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (color == Color::white)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a1Q", "a1Q", "e4 e3", "e4xd3e.p."&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (color == Color::black)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "a2 a3", "a2 a4", "a7 a8Q", "a8Q", "e4 e5", "h5xg6e.p."&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::vector&amp;lt;std::string&amp;gt;();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidPromotionMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidQueenMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1 b7" , "Qa1 h2" , "Qa1 h7" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1 b7+", "Qa1 h2+", "Qa1 h7+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1 b7#", "Qa1 h2#", "Qa1 h7#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1xb7" , "Qa1xh2" , "Qa1xh7" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1xb7+", "Qa1xh2+", "Qa1xh7+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1xb7#", "Qa1xh2#", "Qa1xh7#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd5xe6e.p.", "Qd5xe6e.p.+", "Qd5xe6+e.p.","Qd5xe6e.p.#", "Qd5xe6#e.p.",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0", "O-O"&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetInvalidRookMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ra1 b8", "Ra1 h2", "Ra1 h8"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidBishopMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bd4 a1","Bd4 b2","Bd4 c3","Bd4 e5","Bd4 f6","Bd4 g7","Bd4 g7",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bd4 a1+","Bd4 b2+","Bd4 c3+","Bd4 e5+","Bd4 f6+","Bd4 g7+","Bd4 g7+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Bd4 a1#","Bd4 b2#","Bd4 c3#","Bd4 e5#","Bd4 f6#","Bd4 g7#","Bd4 g7#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ba1","Bb2","Bc3","Be5","Bf6","Bg7","Bg7",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ba1+","Bb2+","Bc3+","Be5+","Bf6+","Bg7+","Bg7+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ba1#","Bb2#","Bc3#","Be5#","Bf6#","Bg7#","Bg7#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidCaptureMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"axb3","axb3+","axb3#","a2xb3","a2xb3+","a2xb3#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Baxb3","Baxb3+","Baxb3#","Ba2xb3","Ba2xb3+","Ba2xb3#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p." ,"b5xa6e.p." ,"a4xb3e.p." ,"b4xa3e.p." ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p.+","b5xa6e.p.+","a4xb3e.p.+","b4xa3e.p.+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p.#","b5xa6e.p.#","a4xb3e.p.#","b4xa3e.p.#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidCastlingMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0-0","0-0+","0-0#","0-0-0","0-0-0+","0-0-0#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O-O","O-O+","O-O#","O-O-O","O-O-O+","O-O-O#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidCheckMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a3+","a2 a3+","a2xb3+","Ba3+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ba2 b3+","Ba2xb3+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O-O+","O-O-O+","0-0+","0-0-0+", "Bf1 b5+"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidCheckmateMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidEnPassantMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p." ,"b5xa6e.p." ,"a4xb3e.p." ,"b4xa3e.p." ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p.+","b5xa6e.p.+","a4xb3e.p.+","b4xa3e.p.+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p.#","b5xa6e.p.#","a4xb3e.p.#","b4xa3e.p.#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidKingMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 c3","Kd4 c4","Kd4 c5","Kd4 d5","Kd4 e5","Kd4 e4","Kd4 e3","Kd4 d3",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4xc3","Kd4xc4","Kd4xc5","Kd4xd5","Kd4xe5","Kd4xe4","Kd4xe3","Kd4xd3",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 c3+","Kd4 c4+","Kd4 c5+","Kd4 d5+","Kd4 e5+","Kd4 e4+","Kd4 e3+","Kd4 d3+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4xc3+","Kd4xc4+","Kd4xc5+","Kd4xd5+","Kd4xe5+","Kd4xe4+","Kd4xe3+","Kd4xd3+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4 c3#","Kd4 c4#","Kd4 c5#","Kd4 d5#","Kd4 e5#","Kd4 e4#","Kd4 e3#","Kd4 d3#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kd4xc3#","Kd4xc4#","Kd4xc5#","Kd4xd5#","Kd4xe5#","Kd4xe4#","Kd4xe3#","Kd4xd3#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Kf1 g1"&lt;br/&gt;
&amp;nbsp;&amp;nbsp; };&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidKnightMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4 b3" ,"Nd4 c2" ,"Nd4 e2" ,"Nd4 f3" ,"Nd4 f5" ,"Nd4 e6" ,"Nd4 c6" ,"Nd4 b5" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4 b3+","Nd4 c2+","Nd4 e2+","Nd4 f3+","Nd4 f5+","Nd4 e6+","Nd4 c6+","Nd4 b5+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4 b3#","Nd4 c2#","Nd4 e2#","Nd4 f3#","Nd4 f5#","Nd4 e6#","Nd4 c6#","Nd4 b5#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4xb3" ,"Nd4xc2" ,"Nd4xe2" ,"Nd4xf3" ,"Nd4xf5" ,"Nd4xe6" ,"Nd4xc6" ,"Nd4xb5" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4xb3+","Nd4xc2+","Nd4xe2+","Nd4xf3+","Nd4xf5+","Nd4xe6+","Nd4xc6+","Nd4xb5+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nd4xb3#","Nd4xc2#","Nd4xe2#","Nd4xf3#","Nd4xf5#","Nd4xe6#","Nd4xc6#","Nd4xb5#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb3" ,"Nc2" ,"Ne2" ,"Nf3" ,"Nf5" ,"Ne6" ,"Nc6" ,"Nb5" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb3+","Nc2+","Ne2+","Nf3+","Nf5+","Ne6+","Nc6+","Nb5+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Nb3#","Nc2#","Ne2#","Nf3#","Nf5#","Ne6#","Nc6#","Nb5#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidPawnMoves(const Chess::Color&amp;amp; color)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (color == Color::indeterminate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a3" , "a2 a4" , "a2 a1Q" , "a7 a8Q" , "a3" , "a4" , "a8Q" , "a1Q",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a3+", "a2 a4+", "a2 a1Q+", "a7 a8Q+", "a3+", "a4+", "a8Q+", "a1Q+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a3#", "a2 a4#", "a2 a1Q#", "a7 a8Q#", "a3#", "a4#", "a8Q#", "a1Q#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2xb3" , "a3xb2" , "b3xa4" , "b3xc4" , "b3xa2" , "b3xc2" ,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2xb3+", "a3xb2+", "b3xa4+", "b3xc4+", "b3xa2+", "b3xc2+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2xb3#", "a3xb2#", "b3xa4#", "b3xc4#", "b3xa2#", "b3xc2#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e4 e5", "e4 e3",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p." , "b5xa6e.p." , "a4xb3e.p." , "b4xa3e.p.",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p.+", "b5xa6e.p.+", "a4xb3e.p.+", "b4xa3e.p.+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a5xb6e.p.#", "b5xa6e.p.#", "a4xb3e.p.#", "b4xa3e.p.#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (color == Color::white)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a3", "a2 a4", "a7 a8Q", "a3", "a4", "a8Q", "e4 e5"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (color == Color::black)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a1Q", "a1Q", "a3", "a4", "a7 a6", "a7 a5", "e4 e3"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::vector&amp;lt;std::string&amp;gt;();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidPromotionMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a8B","a8N","a8Q","a8R","a1B","a1N","a1Q","a1R",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a8B+","a8N+","a8Q+","a8R+","a1B+","a1N+","a1Q+","a1R+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a8B#","a8N#","a8Q#","a8R#","a1B#","a1N#","a1Q#","a1R#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a1Q","a2 a1Q+","a2 a1Q#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidQueenMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 d1","Qd4 d2","Qd4 d3","Qd4 d5","Qd4 d6","Qd4 d7","Qd4 d8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 a4","Qd4 b4","Qd4 c4","Qd4 e4","Qd4 f4","Qd4 g4","Qd4 h4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4xd1","Qd4xd2","Qd4xd3","Qd4xd5","Qd4xd6","Qd4xd7","Qd4xd8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4xa4","Qd4xb4","Qd4xc4","Qd4xe4","Qd4xf4","Qd4xg4","Qd4xh4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 d1+","Qd4 d2+","Qd4 d3+","Qd4 d5+","Qd4 d6+","Qd4 d7+","Qd4 d8+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 a4+","Qd4 b4+","Qd4 c4+","Qd4 e4+","Qd4 f4+","Qd4 g4+","Qd4 h4+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4xd1+","Qd4xd2+","Qd4xd3+","Qd4xd5+","Qd4xd6+","Qd4xd7+","Qd4xd8+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4xa4+","Qd4xb4+","Qd4xc4+","Qd4xe4+","Qd4xf4+","Qd4xg4+","Qd4xh4+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 d1#","Qd4 d2#","Qd4 d3#","Qd4 d5#","Qd4 d6#","Qd4 d7#","Qd4 d8#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 a4#","Qd4 b4#","Qd4 c4#","Qd4 e4#","Qd4 f4#","Qd4 g4#","Qd4 h4#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4xd1#","Qd4xd2#","Qd4xd3#","Qd4xd5#","Qd4xd6#","Qd4xd7#","Qd4xd8#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4xa4#","Qd4xb4#","Qd4xc4#","Qd4xe4#","Qd4xf4#","Qd4xg4#","Qd4xh4#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd1","Qd2","Qd3","Qd5","Qd6","Qd7","Qd8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa4","Qb4","Qc4","Qe4","Qf4","Qg4","Qh4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd1+","Qd2+","Qd3+","Qd5+","Qd6+","Qd7+","Qd8+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa4+","Qb4+","Qc4+","Qe4+","Qf4+","Qg4+","Qh4+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd1#","Qd2#","Qd3#","Qd5#","Qd6#","Qd7#","Qd8#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa4#","Qb4#","Qc4#","Qe4#","Qf4#","Qg4#","Qh4#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 a1","Qd4 b2","Qd4 c3","Qd4 e5","Qd4 f6","Qd4 g7","Qd4 g7",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 a1+","Qd4 b2+","Qd4 c3+","Qd4 e5+","Qd4 f6+","Qd4 g7+","Qd4 g7+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qd4 a1#","Qd4 b2#","Qd4 c3#","Qd4 e5#","Qd4 f6#","Qd4 g7#","Qd4 g7#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1","Qb2","Qc3","Qe5","Qf6","Qg7","Qg7",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1+","Qb2+","Qc3+","Qe5+","Qf6+","Qg7+","Qg7+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Qa1#","Qb2#","Qc3#","Qe5#","Qf6#","Qg7#","Qg7#", "Qf7 f6"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetValidRookMoves()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4 d1","Rd4 d2","Rd4 d3","Rd4 d5","Rd4 d6","Rd4 d7","Rd4 d8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4 a4","Rd4 b4","Rd4 c4","Rd4 e4","Rd4 f4","Rd4 g4","Rd4 h4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4xd1","Rd4xd2","Rd4xd3","Rd4xd5","Rd4xd6","Rd4xd7","Rd4xd8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4xa4","Rd4xb4","Rd4xc4","Rd4xe4","Rd4xf4","Rd4xg4","Rd4xh4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4 d1+","Rd4 d2+","Rd4 d3+","Rd4 d5+","Rd4 d6+","Rd4 d7+","Rd4 d8+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4 a4+","Rd4 b4+","Rd4 c4+","Rd4 e4+","Rd4 f4+","Rd4 g4+","Rd4 h4+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4xd1+","Rd4xd2+","Rd4xd3+","Rd4xd5+","Rd4xd6+","Rd4xd7+","Rd4xd8+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4xa4+","Rd4xb4+","Rd4xc4+","Rd4xe4+","Rd4xf4+","Rd4xg4+","Rd4xh4+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4 d1#","Rd4 d2#","Rd4 d3#","Rd4 d5#","Rd4 d6#","Rd4 d7#","Rd4 d8#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4 a4#","Rd4 b4#","Rd4 c4#","Rd4 e4#","Rd4 f4#","Rd4 g4#","Rd4 h4#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4xd1#","Rd4xd2#","Rd4xd3#","Rd4xd5#","Rd4xd6#","Rd4xd7#","Rd4xd8#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd4xa4#","Rd4xb4#","Rd4xc4#","Rd4xe4#","Rd4xf4#","Rd4xg4#","Rd4xh4#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd1","Rd2","Rd3","Rd5","Rd6","Rd7","Rd8",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ra4","Rb4","Rc4","Re4","Rf4","Rg4","Rh4",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd1+","Rd2+","Rd3+","Rd5+","Rd6+","Rd7+","Rd8+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ra4+","Rb4+","Rc4+","Re4+","Rf4+","Rg4+","Rh4+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Rd1#","Rd2#","Rd3#","Rd5#","Rd6#","Rd7#","Rd8#",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Ra4#","Rb4#","Rc4#","Re4#","Rf4#","Rg4#","Rh4#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Moves::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Moves::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessmoves.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessmoves.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSMOVES_H&lt;br/&gt;
#define CHESSMOVES_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Moves is a stateless struct containing collections of moves&lt;br/&gt;
struct Moves&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//All moves in the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//'Kasparov against the world match'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//http://en.wikipedia.org/wiki/Kasparov_versus_the_World&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetGameKasparovVersusTheWorld();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Game in which white wins by checkmate in three moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetGameShephardsMate();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that can be performed by a bishop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidBishopMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that involve a capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidCaptureMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid castling moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidCastlingMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that result in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidCheckMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that result in checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidCheckmateMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid en passant moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidEnPassantMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that can be performed by a king&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidKingMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that can be performed by a knight&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidKnightMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that can be performed by a pawn&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidPawnMoves(const Chess::Color&amp;amp; color);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that end in a promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidPromotionMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that can be performed by a queen&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidQueenMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain invalid moves that can be performed by a rook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetInvalidRookMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all moves that can be performed by a bishop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidBishopMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain moves that involve a capture&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidCaptureMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all castling moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidCastlingMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain valid moves that result in check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidCheckMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain valid moves that result in checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidCheckmateMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain en passant moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidEnPassantMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all moves that can be performed by a king&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidKingMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all moves that can be performed by a knight&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidKnightMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all moves that can be performed by a pawn&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidPawnMoves(const Chess::Color&amp;amp; color);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain moves that end in a promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidPromotionMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all moves that can be performed by a queen&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidQueenMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain all moves that can be performed by a rook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetValidRookMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSMOVES_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessmovetest.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessmovetest.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessmove.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessmoves.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Chess::Move::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square::Test();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::Move operators and copy constructors");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move m("a2 a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move n("a2 a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m == n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move m("a2 a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move n("a3 a2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m != n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move m("a2 a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move n(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m == n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::Move parsing of the square the piece is moving from");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseFrom( "a2 a3")==*SquareFactory::Create(Chess::File("a"),Chess::Rank("2"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseFrom("Bb3 c5")==*SquareFactory::Create(Chess::File("b"),Chess::Rank("3"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseFrom("Kc4 d4")==*SquareFactory::Create(Chess::File("c"),Chess::Rank("4"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseFrom("Nd5 e6")==*SquareFactory::Create(Chess::File("d"),Chess::Rank("5"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseFrom("Qe6 f7")==*SquareFactory::Create(Chess::File("e"),Chess::Rank("6"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseFrom("Rf7 h7")==*SquareFactory::Create(Chess::File("f"),Chess::Rank("7"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("a3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0-0+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0-0#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O-O"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O-O+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O-O#"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing valid capture moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidCaptureMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!ribi::Chess::Move::ParseIsCapture(s)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCapture(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing valid castling moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidCastlingMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!ribi::Chess::Move::ParseIsCastling(s)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCastling(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCastling("a3"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing valid moves that result in check");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidCheckMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!ribi::Chess::Move::ParseIsCheck(s)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheck(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2 a3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2xb3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2 b3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2xb3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2 a3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2xb3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2 b3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2xb3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O-O"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O-O#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0-0#"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing valid moves that result in checkmate");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("a3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("a2 a3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("a2xb3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("Ba3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("Ba2 b3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("Ba2xb3#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("O-O#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("O-O-O#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("0-0#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("0-0-0#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2 a3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2xb3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2 b3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2xb3"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2 a3+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2xb3+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba3+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2 b3+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2xb3+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O-O"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O-O+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0-0+"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing valid en passant moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidEnPassantMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsEnPassant(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing invalid en passant moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetInvalidEnPassantMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (ribi::Chess::Move::ParseIsEnPassant(s)) TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseIsEnPassant(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing valid moves that end in a promotion");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidPromotionMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParseIsPromotion(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing ParseTo");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///Test parsing of the square the piece is moving to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseTo("a2 a3")==*SquareFactory::Create(Chess::File("a"),Chess::Rank("3"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseTo(&amp;nbsp;&amp;nbsp; "a3")==*SquareFactory::Create(Chess::File("a"),Chess::Rank("3"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseTo("Bb3 c5")==*SquareFactory::Create(Chess::File("c"),Chess::Rank("5"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseTo("Kc4 d4")==*SquareFactory::Create(Chess::File("d"),Chess::Rank("4"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseTo("Nd5 e6")==*SquareFactory::Create(Chess::File("e"),Chess::Rank("6"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseTo("Qe6 f7")==*SquareFactory::Create(Chess::File("f"),Chess::Rank("7"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*Move::ParseTo("Rf7 h7")==*SquareFactory::Create(Chess::File("h"),Chess::Rank("7"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("0-0+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("0-0#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("O-O"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("O-O+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("O-O#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("0-0-0"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("0-0-0+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("0-0-0#"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("O-O-O"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("O-O-O+"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::Chess::Move::ParseTo("O-O-O#"));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Testing ParsePiece");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParsePiece("Ba1 b2")-&amp;gt;GetNameChar() == 'B');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParsePiece("Ka1 b1")-&amp;gt;GetNameChar() == 'K');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParsePiece("Na1 b3")-&amp;gt;GetNameChar() == 'N');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParsePiece("Qa1 b1")-&amp;gt;GetNameChar() == 'Q');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParsePiece("Ra1 b1")-&amp;gt;GetNameChar() == 'R');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(ribi::Chess::Move::ParsePiece("a2 a4")-&amp;gt;GetNameChar() == '.');&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!dynamic_cast&amp;lt;PieceBishop*&amp;gt;(Chess::Move("0-0").Piece().get()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!dynamic_cast&amp;lt;PieceBishop*&amp;gt;(Chess::Move("O-O-O").Piece().get()));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test complete moves for validity");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test valid moves being valid as a move: the history of the chessgame must point out&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//if the move is valid in its context&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2 a3", "a2 a4", "a3 a4", "a4 a5", "a5 a6", "a6 a7", //white pawn at A file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2xb3", "a3xb4", "a4xb5", "a5xb6", "a6xb7",&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//white pawn at A file all its captures without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a7 a6", "a7 a5", "a6 a5", "a5 a4", "a4 a3", "a3 a2", //black pawn at A file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Short notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a2", "a3", "a4", "a4", "a5", "a6", "a7", //pawn at A file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"b2", "b3", "b4", "b4", "b5", "b6", "b7", //pawn at B file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"c2", "c3", "c4", "c4", "c5", "c6", "c7", //pawn at C file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"d2", "d3", "d4", "d4", "d5", "d6", "d7", //pawn at D file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"e2", "e3", "e4", "e4", "e5", "e6", "e7", //pawn at E file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"f2", "f3", "f4", "f4", "f5", "f6", "f7", //pawn at F file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"g2", "g3", "g4", "g4", "g5", "g6", "g7", //pawn at G file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"h2", "h3", "h4", "h4", "h5", "h6", "h7", //pawn at H file all its movements without promotion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O-O","O-O-O","0-0","0-0-0",&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O-O+","O-O-O+","0-0+","0-0-0+", //Castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O-O#","O-O-O#","0-0#","0-0-0#", //Castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"1-0","0-1","1/2-1/2"&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move m(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(e.what());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test invalid moves being invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"B0-0" , "B0-0-0", "BO-O", "BO-O-O",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"B0-0+", "B0-0-0+", "BO-O+", "BO-O-O+",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"B0-0#", "B0-0-0#", "BO-O#", "BO-O-O#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//"ND4xe6"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move m(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(m.ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test complete moves intimately");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::Move m("a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.From()); //From is unknown&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.IsCapture());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.IsCastling());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.IsCheck());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.IsCheckmate());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.IsPromotion());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.Piece());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(dynamic_cast&amp;lt;Chess::PiecePawn*&amp;gt;(m.Piece().get()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.PiecePromotion());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert((*m.To().get()==*SquareFactory::Create("a3")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Kasparov against the world match");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Chess::Moves::GetGameKasparovVersusTheWorld();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Move m(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(e.what());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert("Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesspiece.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesspiece.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chesspiece.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chessmoves.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chessrank.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Piece::Piece(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; &amp;amp;square)&lt;br/&gt;
 : m_color(color),&lt;br/&gt;
&amp;nbsp;&amp;nbsp; m_last_move{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp; m_square(square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::Piece::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::Piece::AddCheckAndCheckmate(const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;w](const boost::shared_ptr&amp;lt;Move&amp;gt;&amp;amp; move)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCheck());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCheckmate());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(!move-&amp;gt;IsScore());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;move-&amp;gt;ToStr() + std::string("+")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;move-&amp;gt;ToStr() + std::string("#")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(w.size() == v.size() * 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return w;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::Piece::DoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_square = move-&amp;gt;To();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_last_move = move;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Color ribi::Chess::Piece::GetColor() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_color;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;const ribi::Chess::Square&amp;gt; ribi::Chess::Piece::GetSquare() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_square;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Piece::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Piece::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Piece::ToStr() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Chess::ColorToStr(GetColor())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ std::string(" ")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ this-&amp;gt;GetName()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " at "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ (this-&amp;gt;GetSquare() ? this-&amp;gt;GetSquare()-&amp;gt;ToStr() : "an indetermined position");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::PieceBishop::PieceBishop(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Piece(color,square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(GetColor() != Color::indeterminate);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::PieceBishop::CanDoMove(const boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; move) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;Piece() || !dynamic_cast&amp;lt;PieceBishop*&amp;gt;(move-&amp;gt;Piece().get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Not a Bishop move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (!move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; GetSquare() &amp;amp;&amp;amp; *move-&amp;gt;From() == *this-&amp;gt;GetSquare()&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume Move and Bishop to have the same start position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece() &amp;amp;&amp;amp; dynamic_cast&amp;lt;PieceBishop*&amp;gt;(move-&amp;gt;Piece().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume this is a Bishop move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To() &amp;amp;&amp;amp; "All Bishop moves have a to field");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCastling() &amp;amp;&amp;amp; "Bishop moves are not castling moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;Score() &amp;amp;&amp;amp; "Bishop moves are not final scores");&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dx = move-&amp;gt;From()-&amp;gt;GetFile().ToInt() - move-&amp;gt;To()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dx == 0) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dy = move-&amp;gt;From()-&amp;gt;GetRank().ToInt() - move-&amp;gt;To()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return std::abs(dx) == std::abs(dy);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return move-&amp;gt;To().get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceBishop::Clone() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color = this-&amp;gt;GetColor();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; square = SquareFactory::DeepCopy(this-&amp;gt;GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(color,square));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::PieceBishop::GetMoves() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=8; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//North-east&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() - i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + "x" + s-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr() + "+"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + "x" + s-&amp;gt;ToStr() + "+"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr() + "#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + "x" + s-&amp;gt;ToStr() + "#"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//South-east&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//South-west&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() - i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//North-west&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() - i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() - i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Triple number of moves by adding check and checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v = AddCheckAndCheckmate(v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
PieceEmpty::PieceEmpty()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Piece(Color::indeterminate,Square(0,0))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetColor() == Color::indeterminate);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;Square&amp;gt; PieceEmpty::GetMoves() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::vector&amp;lt;Square&amp;gt;();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool PieceEmpty::CanDoMove(const boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; move) const&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::PieceKing::PieceKing(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Piece(color,square),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_has_moved{false}&lt;br/&gt;
&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(GetColor() != Color::indeterminate);&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::PieceKing::CanDoMove(const boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; move) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;Piece() || !dynamic_cast&amp;lt;PieceKing*&amp;gt;(move-&amp;gt;Piece().get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Not a King move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (!move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; GetSquare() &amp;amp;&amp;amp; *move-&amp;gt;From() == *this-&amp;gt;GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume Move and Piece to have the same start position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece() &amp;amp;&amp;amp; dynamic_cast&amp;lt;Piece*&amp;gt;(move-&amp;gt;Piece().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume this is a King move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To() &amp;amp;&amp;amp; "All King moves have a to field");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCastling() &amp;amp;&amp;amp; "King moves are not castling moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;Score() &amp;amp;&amp;amp; "King moves are not final scores");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dx = move-&amp;gt;From()-&amp;gt;GetFile().ToInt() - move-&amp;gt;To()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dy = move-&amp;gt;From()-&amp;gt;GetRank().ToInt() - move-&amp;gt;To()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dx == 0 &amp;amp;&amp;amp; dy == 0) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return std::abs(dx) &amp;lt;= 1 &amp;amp;&amp;amp; std::abs(dy) &amp;lt;= 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return move-&amp;gt;To().get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceKing::Clone() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::PieceKing::GetMoves() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::pair&amp;lt;int,int&amp;gt; &amp;gt; ds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= { {0,-1}, {1,-1}, {1,0}, {1,1}, {0,1}, {-1,1}, {-1,0}, {-1,-1} };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(ds.begin(), ds.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;v,this](const std::pair&amp;lt;int,int&amp;gt;&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + p.first),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + p.second)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ this-&amp;gt;GetSquare()-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Triple number of moves by adding check and checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v = AddCheckAndCheckmate(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::PieceKnight::PieceKnight(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Piece(color,square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(GetColor() != Color::indeterminate);&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::PieceKnight::CanDoMove(const boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; move) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;Piece() || !dynamic_cast&amp;lt;PieceKnight*&amp;gt;(move-&amp;gt;Piece().get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Not a Knight move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (!move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; GetSquare() &amp;amp;&amp;amp; (*move-&amp;gt;From() == *this-&amp;gt;GetSquare()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume Move and Knight to have the same start position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece() &amp;amp;&amp;amp; dynamic_cast&amp;lt;PieceKnight*&amp;gt;(move-&amp;gt;Piece().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume this is a Knight move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To() &amp;amp;&amp;amp; "All Knight moves have a to field");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCastling() &amp;amp;&amp;amp; "Knight moves are not castling moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;Score() &amp;amp;&amp;amp; "Knight moves are not final scores");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dx = move-&amp;gt;From()-&amp;gt;GetFile().ToInt() - move-&amp;gt;To()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dy = move-&amp;gt;From()-&amp;gt;GetRank().ToInt() - move-&amp;gt;To()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (std::abs(dx) == 1 || std::abs(dx) == 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; (std::abs(dy) == 1 || std::abs(dy) == 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;std::abs(dx) != std::abs(dy);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceKnight::Clone() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::PieceKnight::GetMoves() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::pair&amp;lt;int,int&amp;gt; &amp;gt; ds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= { {1,2}, {2,1}, {-1,2}, {-2,1}, {1,-2}, {2,-1}, {-1,-2}, {-2,-1} };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(ds.begin(), ds.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;v,this](const std::pair&amp;lt;int,int&amp;gt;&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + p.first),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + p.second)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ this-&amp;gt;GetSquare()-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ " "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Triple number of moves by adding check and checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v = AddCheckAndCheckmate(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::PiecePawn::PiecePawn(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Piece(color,square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(GetColor() != Color::indeterminate);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::PiecePawn::CanDoMove(const boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; move) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;Piece() || !dynamic_cast&amp;lt;PiecePawn*&amp;gt;(move-&amp;gt;Piece().get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Not a Pawn move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (!move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; GetSquare() &amp;amp;&amp;amp; (*move-&amp;gt;From() == *this-&amp;gt;GetSquare()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume Move and PiecePawn to have the same start position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece() &amp;amp;&amp;amp; dynamic_cast&amp;lt;PiecePawn*&amp;gt;(move-&amp;gt;Piece().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume this is a Pawn move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To() &amp;amp;&amp;amp; "All Pawn moves have a to field");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCastling() &amp;amp;&amp;amp; "Pawn moves are not castling moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert((!move-&amp;gt;IsEnPassant() || (move-&amp;gt;IsEnPassant() &amp;amp;&amp;amp; move-&amp;gt;IsCapture()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume that all en passant captures are captures");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Do all checks when the 'from' Square is known&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dx = move-&amp;gt;To()-&amp;gt;GetFile().ToInt() - move-&amp;gt;From()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::abs(dx) &amp;gt; 1) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::abs(dx) == 1 &amp;amp;&amp;amp; !move-&amp;gt;IsCapture()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dx == 0 &amp;amp;&amp;amp; move-&amp;gt;IsCapture()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dy = move-&amp;gt;To()-&amp;gt;GetRank().ToInt() - move-&amp;gt;From()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::abs(dy) &amp;gt; 2) return false; //A pawn move two squares at most&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (this-&amp;gt;GetColor() == Color::white)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dy &amp;lt;= 0) return false; //A white pawn must move forward&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("2")) &amp;amp;&amp;amp; dy == 2) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("2"))) &amp;amp;&amp;amp; dy == 2) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return dy == 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (this-&amp;gt;GetColor() == Color::black)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dy &amp;gt;= 0) return false; //A black pawn must move backward in the y direction&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("7")) &amp;amp;&amp;amp; dy == -2) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("7"))) &amp;amp;&amp;amp; dy == -2) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return dy == -1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (this-&amp;gt;GetColor() == Color::indeterminate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("2")) &amp;amp;&amp;amp; dy ==&amp;nbsp;&amp;nbsp;2) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("7")) &amp;amp;&amp;amp; dy == -2) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("2"))) &amp;amp;&amp;amp; dy ==&amp;nbsp;&amp;nbsp;2) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(move-&amp;gt;From()-&amp;gt;GetRank() == Rank(std::string("7"))) &amp;amp;&amp;amp; dy == -2) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsEnPassant())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;IsCapture()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetColor() == Color::indeterminate)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(move-&amp;gt;From()-&amp;gt;GetRank().ToStr() == std::string("4")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; move-&amp;gt;To()-&amp;gt;GetRank().ToStr() == std::string("3"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| ( move-&amp;gt;From()-&amp;gt;GetRank().ToStr() == std::string("5")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; move-&amp;gt;To()-&amp;gt;GetRank().ToStr() == std::string("6"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetColor() == Color::white)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return ( move-&amp;gt;From()-&amp;gt;GetRank().ToStr() == std::string("5")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; move-&amp;gt;To()-&amp;gt;GetRank().ToStr() == std::string("6"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (GetColor() == Color::black)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return move-&amp;gt;From()-&amp;gt;GetRank().ToStr() == std::string("4")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; move-&amp;gt;To()-&amp;gt;GetRank().ToStr() == std::string("3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Pawn moves in the right direction when from is known&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (this-&amp;gt;GetColor() == Color::white &amp;amp;&amp;amp; move-&amp;gt;To()-&amp;gt;GetRank() == Chess::Rank("1"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (this-&amp;gt;GetColor() == Color::black &amp;amp;&amp;amp; move-&amp;gt;To()-&amp;gt;GetRank() == Chess::Rank("8"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;To()-&amp;gt;GetRank() == Chess::Rank("1") || move-&amp;gt;To()-&amp;gt;GetRank() == Chess::Rank("8"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return move-&amp;gt;IsPromotion();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PiecePawn::Clone() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::PiecePawn::GetMoves() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; v;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::pair&amp;lt;int,int&amp;gt; &amp;gt; ds;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (GetColor() != Color::black)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add white moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( {&amp;nbsp;&amp;nbsp;0, 2 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( {&amp;nbsp;&amp;nbsp;0, 1 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( { -1, 1 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( {&amp;nbsp;&amp;nbsp;1, 1 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (GetColor() != Color::white)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add black moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( {&amp;nbsp;&amp;nbsp;0,-2 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( {&amp;nbsp;&amp;nbsp;0,-1 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( { -1,-1 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ds.push_back( {&amp;nbsp;&amp;nbsp;1,-1 } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(ds.begin(), ds.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;amp;v,this](const std::pair&amp;lt;int,int&amp;gt;&amp;amp; p)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + p.first),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + p.second)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(p.first); TRACE(p.second);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(this-&amp;gt;GetSquare()-&amp;gt;ToStr()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ (p.first == 0 ? std::string(" ") : std::string("x"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(e.what());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Triple number of moves by adding check and checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v = AddCheckAndCheckmate(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::PieceQueen::PieceQueen(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Piece(color,square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(GetColor() != Color::indeterminate);&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::PieceQueen::CanDoMove(const boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; move) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;Piece() || !dynamic_cast&amp;lt;PieceQueen*&amp;gt;(move-&amp;gt;Piece().get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Not a Queen move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (!move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; GetSquare() &amp;amp;&amp;amp; (*move-&amp;gt;From() == *this-&amp;gt;GetSquare()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume Move and Queen to have the same start position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece() &amp;amp;&amp;amp; dynamic_cast&amp;lt;PieceQueen*&amp;gt;(move-&amp;gt;Piece().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume this is a Queen move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To() &amp;amp;&amp;amp; "All Queen moves have a to field");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCastling() &amp;amp;&amp;amp; "Queen moves are not castling moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;Score() &amp;amp;&amp;amp; "Queen moves are not final scores");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dx = move-&amp;gt;From()-&amp;gt;GetFile().ToInt() - move-&amp;gt;To()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dy = move-&amp;gt;From()-&amp;gt;GetRank().ToInt() - move-&amp;gt;To()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dx == 0 &amp;amp;&amp;amp; dy == 0) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (dx == 0 || dy == 0 || std::abs(dx) == std::abs(dy));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceQueen::Clone() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::PieceQueen::GetMoves() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=8; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//North&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + 0),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() - i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//North-east&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() - i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//East&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//South-east&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//South&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + 0),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//South-west&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() - i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//West&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() - i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//North-west&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() - i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() - i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Triple number of moves by adding check and checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v = AddCheckAndCheckmate(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::PieceRook::PieceRook(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Piece(color,square),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_has_moved{false}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(GetColor() != Color::indeterminate);&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::PieceRook::CanDoMove(const boost::shared_ptr&amp;lt;const Chess::Move&amp;gt; move) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!move-&amp;gt;Piece() || !dynamic_cast&amp;lt;PieceRook*&amp;gt;(move-&amp;gt;Piece().get()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Not a Rook move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (!move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; !GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (move-&amp;gt;From() &amp;amp;&amp;amp; GetSquare() &amp;amp;&amp;amp; (*move-&amp;gt;From() == *this-&amp;gt;GetSquare()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume Move and Rook to have the same start position");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;Piece() &amp;amp;&amp;amp; dynamic_cast&amp;lt;PieceRook*&amp;gt;(move-&amp;gt;Piece().get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Assume this is a Rook move");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(move-&amp;gt;To() &amp;amp;&amp;amp; "All Rook moves have a to field");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;IsCastling() &amp;amp;&amp;amp; "Rook moves are not castling moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!move-&amp;gt;Score() &amp;amp;&amp;amp; "Rook moves are not final scores");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;IsEnPassant()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (move-&amp;gt;From())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dx = move-&amp;gt;From()-&amp;gt;GetFile().ToInt() - move-&amp;gt;To()-&amp;gt;GetFile().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int dy = move-&amp;gt;From()-&amp;gt;GetRank().ToInt() - move-&amp;gt;To()-&amp;gt;GetRank().ToInt();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (dx == 0 &amp;amp;&amp;amp; dy == 0) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (dx == 0 || dy == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceRook::Clone() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(*this));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Chess::Move&amp;gt; &amp;gt; ribi::Chess::PieceRook::GetMoves() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=8; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//North&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + 0),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() - i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//East&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//South&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() + 0),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//West&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File(this-&amp;gt;GetSquare()-&amp;gt;GetFile().ToInt() - i),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank(this-&amp;gt;GetSquare()-&amp;gt;GetRank().ToInt() + 0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; m = MoveFactory::Create(boost::lexical_cast&amp;lt;std::string&amp;gt;(this-&amp;gt;GetNameChar()) + this-&amp;gt;GetSquare()-&amp;gt;ToStr() + " " + s-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Triple number of moves by adding check and checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v = AddCheckAndCheckmate(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Chess::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Piece&amp;amp; piece)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; piece.ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Piece&amp;amp; lhs, const Piece&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetColor() != rhs.GetColor()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;bool&amp;gt;(lhs.GetLastMove()) != static_cast&amp;lt;bool&amp;gt;(rhs.GetLastMove())) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetLastMove())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rhs.GetLastMove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*lhs.GetLastMove() != *rhs.GetLastMove())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (static_cast&amp;lt;bool&amp;gt;(lhs.GetSquare()) != static_cast&amp;lt;bool&amp;gt;(rhs.GetSquare()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rhs.GetSquare());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*lhs.GetSquare() != *rhs.GetSquare())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Piece&amp;amp; lhs, const Piece&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesspiece.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesspiece.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSPIECE_H&lt;br/&gt;
#define CHESSPIECE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/checked_delete.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
//#include "chesssquare.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
//A Piece has&lt;br/&gt;
//- a (possibly undetermined) position&lt;br/&gt;
//- a (possibly undetermined) color&lt;br/&gt;
struct Piece&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual ~Piece() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Determines if this Piece can possibly do this move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const noexcept = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Perform a Move on a Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the (possibily indeterminate) Color of a Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Color GetColor() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the last move this Piece did.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; GetLastMove() const noexcept { return m_last_move; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Returns all Moves to be done by a Piece.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///These moves are all valid (for example, on an empty board), but might be invalid in the current chessgame.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const noexcept = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the Square the piece is standing on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; GetSquare() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its full name, e.g. 'knight'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual const std::string GetName() const noexcept = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its notational character, e.g 'N'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual char GetNameChar() const noexcept = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Returns the color and symbol&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const std::pair&amp;lt;char,char&amp;gt; GetSymbol() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test all Pieces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece to std::string for operator&amp;lt;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;protected:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Piece(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt;&amp;amp; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Triple number of moves by adding check and checkmate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; AddCheckAndCheckmate(const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone a Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual const boost::shared_ptr&amp;lt;Piece&amp;gt; Clone() const = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The piece its color&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color m_color;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The last move this Piece did.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Move&amp;gt; m_last_move;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The piece its location&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Square&amp;gt; m_square;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Piece *);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
struct PieceBishop : public Piece&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Determines if this Piece can possibly do this move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its notational character, e.g 'N'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char GetNameChar() const noexcept { return 'B'; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its full name, e.g. 'knight'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetName() const noexcept { return "bishop"; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test Bishop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece to std::string for operator&amp;lt;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PieceBishop(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PieceBishop(const PieceBishop&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PieceBishop&amp;amp; operator=(const PieceBishop&amp;amp;) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone this Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; Clone() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~PieceBishop() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(PieceBishop *);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend struct PieceFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
struct PieceKing : public Piece&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Determines if this Piece can possibly do this move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//void Move(const Square&amp;amp; to);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its notational character, e.g 'N'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char GetNameChar() const noexcept { return 'K'; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its full name, e.g. 'knight'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetName() const noexcept { return "king"; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test PieceKing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece to std::string for operator&amp;lt;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PieceKing(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone this Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; Clone() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~PieceKing() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(PieceKing *);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Keep track of whether king has moved for castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_has_moved;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend struct PieceFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
struct PieceKnight : public Piece&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Determines if this Piece can possibly do this move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Returns all Moves to be done by a Piece.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///These moves are all valid, but might be invalid in the current chessgame.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char GetNameChar() const noexcept { return 'N'; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its full name, e.g. 'knight'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetName() const noexcept { return "knight"; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test PieceKnight&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece to std::string for operator&amp;lt;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PieceKnight(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone this Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; Clone() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~PieceKnight() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(PieceKnight *);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend struct PieceFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
struct PiecePawn : public Piece&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Determines if this Piece can possibly do this move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char GetNameChar() const noexcept { return '.'; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its full name, e.g. 'knight'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetName() const noexcept { return "pawn"; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test PiecePawn&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece to std::string for operator&amp;lt;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PiecePawn(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone this Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; Clone() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~PiecePawn() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(PiecePawn *);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend struct PieceFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
struct PieceQueen : public Piece&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Determines if this Piece can possibly do this move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char GetNameChar() const noexcept { return 'Q'; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its full name, e.g. 'king'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetName() const noexcept { return "queen"; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test PieceQueen&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece to std::string for operator&amp;lt;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PieceQueen(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone this Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; Clone() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~PieceQueen() noexcept {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(PieceQueen *);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend struct PieceFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
struct PieceRook : public Piece&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Determines if this Piece can possibly do this move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoMove(const boost::shared_ptr&amp;lt;const Move&amp;gt; move) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; GetMoves() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char GetNameChar() const noexcept { return 'R'; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece type to a its full name, e.g. 'king'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetName() const noexcept { return "rook"; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test PieceRook&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Piece to std::string for operator&amp;lt;&amp;lt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PieceRook(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone this Piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; Clone() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~PieceRook() noexcept {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(PieceRook *);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Keep track of whether rook has moved for castling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool m_has_moved;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend struct PieceFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Piece&amp;amp; lhs, const Piece&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Piece&amp;amp; lhs, const Piece&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Piece&amp;amp; piece);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSPIECE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesspiecefactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesspiecefactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "chesspiecefactory.h"&lt;br/&gt;
&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const char namechar,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch(namechar)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'B': p.reset(new Chess::PieceBishop(color,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'K': p.reset(new Chess::PieceKing(color,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'N': p.reset(new Chess::PieceKnight(color,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'Q': p.reset(new Chess::PieceQueen(color,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'R': p.reset(new Chess::PieceRook(color,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case '.': p.reset(new Chess::PiecePawn(color,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const char namechar,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; square_str)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(square_str)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Create(namechar,color,square);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceFactory::CreateFromMove(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::PieceFactory::CreateFromMove exception: move must not be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Move&amp;gt; move {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MoveFactory::Create(s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;move-&amp;gt;To()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!square) square = move-&amp;gt;From();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; piece;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const char c = s[0];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch(c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'B': piece.reset(new Chess::PieceBishop(Chess::Color::indeterminate,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'K': piece.reset(new Chess::PieceKing(Chess::Color::indeterminate,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'N': piece.reset(new Chess::PieceKnight(Chess::Color::indeterminate,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'Q': piece.reset(new Chess::PieceQueen(Chess::Color::indeterminate,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'R': piece.reset(new Chess::PieceRook(Chess::Color::indeterminate,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'a':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'b':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'c':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'd':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'e':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'f':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'g':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'h':&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;piece.reset(new Chess::PiecePawn(Chess::Color::indeterminate,square)); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return piece;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceFactory::CreateFromPromotion(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::PieceFactory::CreateFromPromotion exception: move must not be empty");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Chess::Piece&amp;gt; p;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const char c = s[s.size() - 1];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch(c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'B': p.reset(new Chess::PieceBishop(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;())); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'K': p.reset(new Chess::PieceKing(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;())); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'N': p.reset(new Chess::PieceKnight(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;())); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'Q': p.reset(new Chess::PieceQueen(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;())); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 'R': p.reset(new Chess::PieceRook(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;())); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; ribi::Chess::PieceFactory::DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; s) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Chess::Piece&amp;gt; t {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PieceFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s-&amp;gt;GetNameChar(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s-&amp;gt;GetColor(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s-&amp;gt;GetSquare()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*s == *t &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s != t &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return t;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesspiecefactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesspiecefactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSPIECEFACTORY_H&lt;br/&gt;
#define CHESSPIECEFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
struct PieceFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Piece&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const char namechar,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Piece&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const char namechar,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Color color,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Piece&amp;gt; CreateFromMove(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static boost::shared_ptr&amp;lt;Piece&amp;gt; CreateFromPromotion(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Piece&amp;gt; DeepCopy(const boost::shared_ptr&amp;lt;const Piece&amp;gt; piece) noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSPIECEFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesspiecetest.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesspiecetest.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;future&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chessmovefactory.h"&lt;br/&gt;
#include "chessmoves.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chesspiecefactory.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
///Is there an elemnt in v for IsEqual(*p,*v)&lt;br/&gt;
template &amp;lt;class T, class U&amp;gt;&lt;br/&gt;
bool IsPresent(boost::shared_ptr&amp;lt;T&amp;gt; p,const std::vector&amp;lt;boost::shared_ptr&amp;lt;U&amp;gt; &amp;gt; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::count_if(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[p](const boost::shared_ptr&amp;lt;T&amp;gt; q)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return *p == *q;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;) &amp;gt; 0;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Chess::Piece::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Testing Chess::Piece exactly once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::Piece");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s = SquareFactory::Create("e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; t = SquareFactory::Create("e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; p = PieceFactory::Create('B',Color::white,s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Piece&amp;gt; q = PieceFactory::Create('B',Color::white,t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(q);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*p == *q);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Chess::PieceBishop::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Chess::PieceKing::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Chess::PieceKnight::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Chess::PiecePawn::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Chess::PieceQueen::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Chess::PieceRook::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::PieceBishop::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Bishop for valid moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidBishopMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::white,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::black,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Bishop for invalid moves")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetInvalidBishopMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::white,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceBishop(Chess::Color::black,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Move is correctly determined to be invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::PieceKing::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test King for valid moves")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidKingMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::white,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::black,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test King for invalid moves")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetInvalidKingMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanDoMove(move)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKing(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::PieceKnight::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Knight for valid moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidKnightMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::white,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::black,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Knight for invalid moves")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetInvalidKnightMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanDoMove(move)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceKnight(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Knight for generating its own moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; square = SquareFactory::Create("d4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; piece = PieceFactory::Create('N',Color::white,square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = piece-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 8 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("Nd4 c2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsPresent(move,moves));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(std::find(moves.begin(),moves.end(),move) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; square = SquareFactory::Create("a1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; piece = PieceFactory::Create('N',Color::white,square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = piece-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 2 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("Na1 b3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsPresent(move,moves));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Na1 b3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; square = SquareFactory::Create("b1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; piece = PieceFactory::Create('N',Color::black,square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(piece);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = piece-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 3 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("Nb1 c3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsPresent(move,moves));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Nb1 c3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::PiecePawn::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Pawn for valid moves")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=3; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::Color color = (i == 0 ? Color::indeterminate : (i == 1 ? Color::white : Color::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidPawnMoves(color);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[color](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(color,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(color,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Pawn for invalid moves")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=3; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::Color color = (i == 0 ? Color::indeterminate : (i == 1 ? Color::white : Color::black));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetInvalidPawnMoves(Color::indeterminate);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[color](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(color,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanDoMove(move)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(color,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Pawn intimately");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(Chess::Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a2 a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a2 a4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a2 a1Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a7 a8Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a1Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a8Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a2 a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a2 a4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a2 a1Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a7 a8Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a1Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("a8Q");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;const Square&amp;gt; square = SquareFactory::Create("e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('.',Chess::Color::indeterminate,"e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4 e5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xd5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xf5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4 e3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xd3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xf3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;const Square&amp;gt; square = SquareFactory::Create("e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('.',Chess::Color::white,"e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4 e5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xd5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xf5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4 e3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xd3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xf3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('.',Chess::Color::black,"e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PiecePawn(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;(new Square("e4"))));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4 e5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xd4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xf5");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4 e3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xd3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("e4xf3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Pawn at e4 for generating its own moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('.',Chess::Color::indeterminate,"e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//const PiecePawn p(Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;(new Square("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = p-&amp;gt;GetMoves();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e5")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd5")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf5")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 6 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('.',Chess::Color::white,"e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//PiecePawn p(Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;(new Square("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = p-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e5")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd5")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf5")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 3 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('.',Chess::Color::black,"e4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//PiecePawn p(Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;(new Square("e4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = p-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf3")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 3 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::PieceQueen::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Queen for valid moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidQueenMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::white,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::black,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Queen for invalid moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetInvalidQueenMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanDoMove(move)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceQueen(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Queen for generating its own moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('Q',Chess::Color::white,"d4");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//PieceQueen q(Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;(new Square("d4")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = p-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 27 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("Qd4 h8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsPresent(move,moves));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Qd4 h8")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('Q',Chess::Color::white,"a1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//PieceQueen q(Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;(new Square("a1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = p-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 21 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("Qa1 h1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsPresent(move,moves));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Qa1 h1")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Piece&amp;gt; p = PieceFactory::Create('Q',Chess::Color::black,"b1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//PieceQueen q(Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;(new Square("b1")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Move&amp;gt; &amp;gt; moves = p-&amp;gt;GetMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(moves.size() == 21 * 3); //*3 due to non-check, check and checkmate moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move = MoveFactory::Create("Qb1 b8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(IsPresent(move,moves));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Qb1 b8")) != moves.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::PieceRook::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Rook for valid moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetValidRookMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::white,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::black,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::white,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::black,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Rook for invalid moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = Moves::GetInvalidRookMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Move&amp;gt; move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= MoveFactory::Create(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(move);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::indeterminate,boost::shared_ptr&amp;lt;Square&amp;gt;()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanDoMove(move)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Piece&amp;gt; p(new PieceRook(Chess::Color::indeterminate,Move::ParseFrom(s)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!p-&amp;gt;CanDoMove(move));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessplayer.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessplayer.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessplayer.h"&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::PlayerToStr(const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::black: return "black";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::white: return "white";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Unknown Player in PlayerToStr");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Unknown Player in PlayerToStr");&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessplayer.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessplayer.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSPLAYER_H&lt;br/&gt;
#define CHESSPLAYER_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Player is a chess player&lt;br/&gt;
enum class Player { white, black };&lt;br/&gt;
const std::string PlayerToStr(const Player player);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSPLAYER_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessrank.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessrank.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessrank.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Rank::Rank(const std::string&amp;amp; y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_rank(y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_rank.size() != 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("A chess ranks consists of a single-chacter std::string with values from 1 to and including 8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::lexical_cast&amp;lt;int&amp;gt;(y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (boost::bad_lexical_cast&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("A chess ranks consists of a value from 1 to and including 8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int i = boost::lexical_cast&amp;lt;int&amp;gt;(y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (i &amp;lt; 1 || i &amp;gt; 8)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("Chess ranks go from 1 to and including 8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boost::lexical_cast&amp;lt;int&amp;gt;(m_rank) &amp;gt;= 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boost::lexical_cast&amp;lt;int&amp;gt;(m_rank) &amp;lt;= 8);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Rank::Rank(const int y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_rank(boost::lexical_cast&amp;lt;std::string&amp;gt;(y + 1))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (y &amp;lt; 0 || y &amp;gt; 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("Chessboard y coordinats go from 0 to and including 7");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Rank::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Rank::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("YYYY-MM-DD: version X.Y: [description]");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("2012-01-25: version 1.0: initial version");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::Rank::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::Rank");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test valid Ranks from std::string");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = {"1","2","3","4","5","6","7","8"};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),[](const std::string&amp;amp; s) { Rank tmp(s); } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test valid Ranks from int");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = {0,1,2,3,4,5,6,7};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),[](const int&amp;amp; i) { Rank tmp(i); } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test invalid Ranks from std::string");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = {"0","9","a","h"," ","A","I","aa","1a","a1","11" };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank tmp(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test invalid Ranks from int");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; v = {-1,8,10,11,100,111};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const int&amp;amp; i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank tmp(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test individual ranks intimately");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank r("1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToStr() == "1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank r("8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToStr() == "8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToInt() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank r(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToStr() == "1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank r(7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToStr() == "8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(r.ToInt() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Chess::Rank::ToInt() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boost::lexical_cast&amp;lt;int&amp;gt;(m_rank) &amp;gt;= 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boost::lexical_cast&amp;lt;int&amp;gt;(m_rank) &amp;lt;= 8);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::lexical_cast&amp;lt;int&amp;gt;(m_rank) - 1;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string&amp;amp; ribi::Chess::Rank::ToStr() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_rank;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
Rank&amp;amp; ribi::Chess::Rank::operator++()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rank != std::string("8"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_rank = boost::lexical_cast&amp;lt;std::string&amp;gt;(++boost::lexical_cast&amp;lt;int&amp;gt;(m_rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Rank&amp;amp; ribi::Chess::Rank::operator--()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_rank != std::string("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_rank = boost::lexical_cast&amp;lt;std::string&amp;gt;(--boost::lexical_cast&amp;lt;int&amp;gt;(m_rank));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Chess::Rank&amp;amp; lhs, const Chess::Rank&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.ToStr() == rhs.ToStr();&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessrank.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessrank.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&lt;br/&gt;
#ifndef CHESSRANK_H&lt;br/&gt;
#define CHESSRANK_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Rank is the y coordinat on the Board&lt;br/&gt;
struct Rank&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a Rank from a single-character std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Use std::string instead of char to prevent implicit typecasts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Rank(const std::string&amp;amp; rank);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a Rank from its y coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Rank(const int y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert the Rank to its y coordinat on the Board, for example 0 for square h1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int ToInt() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert the Rank to its single-character string, for example "1" for square h1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Increment rank, e.g. from '1' to'2'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Rank&amp;amp; operator++();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Decrement rank, e.g. from '2' to'1'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Rank&amp;amp; operator--();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Rank as a single-character std::string, for example "1"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Use std::string instead of char to prevent implicit typecasts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string m_rank;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Rank&amp;amp; lhs, const Rank&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSRANK_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessscore.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessscore.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chessscore.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Score::Score(const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_is_black_winner(s == std::string("0-1")),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_draw(s == std::string("1/2-1/2")),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_is_white_winner(s == std::string("1-0"))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( !m_is_black_winner&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; !m_is_draw&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; !m_is_white_winner)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("ribi::Chess::Score::Score exception: invalid score");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Score::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Score::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("YYYY-MM-DD: version X.Y: [description]");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("2012-01-25: version 1.0: initial version");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Chess::Score::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::Score");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test valid scores being valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = { "0-1", "1/2-1/2", "1-0" } ;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Score tmp(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert("Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test invalid scores being invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = { "1-1", "1/2-1", "1-1/2", "0-0", "a3", "a2 a3", "0-0-0", "Qd4", "Qd4 e5" } ;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Score tmp(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert("Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Okay: invalid Score is determined being invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Score::ToStr() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_black_winner) return "0-1";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_draw) return "1/2-1/2";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_is_white_winner) return "1-0";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Cannot create score");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Chess::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Score&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; s.ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Score&amp;amp; lhs, const Score&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lhs.IsBlackWinner() == rhs.IsBlackWinner()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.IsDraw()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== rhs.IsDraw()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.IsWhiteWinner() == rhs.IsWhiteWinner();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Score&amp;amp; lhs, const Score&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs==rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chessscore.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chessscore.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSSCORE_H&lt;br/&gt;
#define CHESSSCORE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Score contains the score that ends a chess match&lt;br/&gt;
struct Score&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Score(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsBlackWinner() const { return m_is_black_winner; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsDraw() const { return m_is_draw; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsWhiteWinner() const { return m_is_white_winner; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test if Score is working correctly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert a Score to string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_black_winner;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_draw;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool m_is_white_winner;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Score&amp;amp; s);&lt;br/&gt;
bool operator==(const Score&amp;amp; lhs, const Score&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Score&amp;amp; lhs, const Score&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSSCORE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesssquare.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesssquare.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Square::Square(const Chess::File&amp;amp; x, const Chess::Rank&amp;amp; y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_file(x), m_rank(y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Square::Square(const std::string &amp;amp;s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_file(Chess::File(boost::lexical_cast&amp;lt;std::string&amp;gt;(s.at(0)))),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_rank(Chess::Rank(boost::lexical_cast&amp;lt;std::string&amp;gt;(s.at(1))))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.empty()) throw std::logic_error("An empty string cannot be converted to a chess square");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s.size() != 2) throw std::logic_error("An string to be converted to a chess square must consist of exactly two characters");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//ribi::Chess::Square::Square(const char * const s)&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;: m_x(Chess::File(s[0]),&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_y(Chess::Rank(boost::lexical_cast&amp;lt;int&amp;gt;(s[1])))&lt;br/&gt;
//{&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;assert(std::strlen(s) == 2);&lt;br/&gt;
//}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::Color ribi::Chess::Square::GetColor() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ((this-&amp;gt;GetFile().ToInt() + this-&amp;gt;GetRank().ToInt()) % 2 == 1 ? Color::white : Color::black);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Square::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::Square::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("2012-01-25: version 1.0: initial version");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Chess::Square::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::File::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Rank::Test();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test Chess::Square operators and constructor");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square s("a1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square t("a1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square u(t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square v("a2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s == t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(t == u);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s != v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(u != v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test a1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square s("a1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToStr() == "a");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank().ToStr() == std::string("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank().ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetColor() == Color::black);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test b1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square s("b1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToStr() == "b");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank().ToStr() == std::string("1"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToInt() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank().ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetColor() == Color::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test a2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square s("a2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToStr() == "a");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank() == Chess::Rank(std::string("2")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToInt() == 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank().ToInt() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetColor() == Color::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test d1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square s("d1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetColor() == Color::white);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test d8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square s("d8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetColor() == Color::black);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test g8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square s("g8");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToStr() == "g");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank() == Rank(std::string("8")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetFile().ToInt() == 6);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.GetRank().ToInt() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test known-to-be-valid squares");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"a1", "a8", "h1", "h8", "d4"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square x(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(e.what());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert("Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Test known-to-be-invalid squares");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"A1", "a9", "H8", "h9", "i1", "a", "A", "1", "9", "a10", "h10", "aa1", "a1a", "11", "aa"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool ok = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chess::Square x(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Ok!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!ok)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert("Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FTRACE("Tested Chess::Square successfully");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::Square::ToStr() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= boost::lexical_cast&amp;lt;std::string&amp;gt;(GetFile().ToStr())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(GetRank().ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Chess::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Square&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; s.ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator==(const Square&amp;amp; lhs, const Square&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.GetFile() == rhs.GetFile()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetRank() == rhs.GetRank();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Chess::operator!=(const Square&amp;amp; lhs, const Square&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesssquare.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesssquare.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSSQUARE_H&lt;br/&gt;
#define CHESSSQUARE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/checked_delete.hpp&amp;gt;&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
#include "chessfile.h"&lt;br/&gt;
#include "chessrank.h"&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Square is the square on a Board, for example 'a1'&lt;br/&gt;
///ToInt can be used to derive the coordinat of the square on a chessboard&lt;br/&gt;
struct Square&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain a Square from its notational form&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Note that s is checked for validity after contruction&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Square(const char * const s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Conclude the color of the square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Chess::Color GetColor() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the File (X direction) of the Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::File&amp;amp; GetFile() const { return m_file; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the Rank (Y direction) of the Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::Rank&amp;amp; GetRank() const { return m_rank; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test the correct working of Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert the Square to a string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain a Square from its coordinats&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Square(const Chess::File&amp;amp; x, const Chess::Rank&amp;amp; y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain a Square from its notational form&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Square(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///the file or x-coordinat of the square, a2 has m_file of 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::File m_file; //X&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///the rank or y-coordinat of the square, a2 has m_file of 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Chess::Rank m_rank; //Y&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~Square() {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(Square *);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class SquareFactory;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Chess::Square&amp;amp; s);&lt;br/&gt;
bool operator==(const Chess::Square&amp;amp; lhs, const Chess::Square&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Chess::Square&amp;amp; lhs, const Chess::Square&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSSQUARE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesssquarefactory.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesssquarefactory.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Square&amp;gt; ribi::Chess::SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const File&amp;amp; x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Rank&amp;amp; y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Square(x,y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Square&amp;gt; ribi::Chess::SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; text)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; s {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Square(text)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Chess::Square&amp;gt; ribi::Chess::SquareFactory::DeepCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; s) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Chess::Square&amp;gt; t {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(s-&amp;gt;ToStr())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*s == *t &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s != t &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return t;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesssquarefactory.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesssquarefactory.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSSQUAREFACTORY_H&lt;br/&gt;
#define CHESSSQUAREFACTORY_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
struct SquareFactory&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Square&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::File&amp;amp; x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Chess::Rank&amp;amp; y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain a Square from its notational form&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Square&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//template &amp;lt;class T = Square, template &amp;lt;typename&amp;gt; class Cont = boost::shared_ptr&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//static Cont&amp;lt;T&amp;gt; Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Square&amp;gt; DeepCopy(const boost::shared_ptr&amp;lt;const Square&amp;gt; s) noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSSQUAREFACTORY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesssquareselector.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesssquareselector.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;memory&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#include "chessfile.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chesssquareselector.h"&lt;br/&gt;
#include "chessmove.h"&lt;br/&gt;
#include "chesswidget.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::SquareSelector::SquareSelector()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_signal_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor(GetInitialSquare()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected{}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::SquareSelector::Click(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool can_select_square)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//No square selected: set cursor and selector on selected piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!m_selected)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor = square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (can_select_square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected = square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected = no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//A square is already selected&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//The selected piece is unselected: set cursor on unselected square, set selector to null&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*m_cursor == *m_selected)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor = square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected = no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Another square is selected: keep selector on selected piece&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Don't care if move is valid:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//- if move is valid,&amp;nbsp;&amp;nbsp; piece&amp;nbsp;&amp;nbsp; is moved and selector is removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//- if move is invalid, nothing is moved and selector is removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor = square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected = no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::SquareSelector::DoSelect()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//No square selected&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!m_selected)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected.reset(new Square(*m_cursor));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//A square is already selected&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//The selected piece is unselected&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (*m_cursor == *m_selected)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected = no_selection;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Another square is selected&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selected.reset(new Square(*m_cursor));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Chess::Square&amp;gt; ribi::Chess::SquareSelector::GetInitialSquare()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string s { "c3" };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return SquareFactory::Create(s);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::SquareSelector::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;const ribi::Chess::Square&amp;gt; ribi::Chess::SquareSelector::GetSelected() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_selected;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::SquareSelector::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::SquareSelector::MoveDown()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_cursor-&amp;gt;GetRank().ToInt() != 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File(m_cursor-&amp;gt;GetFile().ToInt() + 0),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank(m_cursor-&amp;gt;GetRank().ToInt() + 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor = square;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::SquareSelector::MoveLeft()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_cursor-&amp;gt;GetFile().ToInt() != 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File(m_cursor-&amp;gt;GetFile().ToInt() - 1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank(m_cursor-&amp;gt;GetRank().ToInt() + 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor = square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::SquareSelector::MoveRight()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_cursor-&amp;gt;GetFile().ToInt() != 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File(m_cursor-&amp;gt;GetFile().ToInt() + 1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank(m_cursor-&amp;gt;GetRank().ToInt() + 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor = square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::SquareSelector::MoveUp()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_cursor-&amp;gt;GetRank().ToInt() != 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File(m_cursor-&amp;gt;GetFile().ToInt() + 0),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank(m_cursor-&amp;gt;GetRank().ToInt() - 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cursor = square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;m_signal_changed();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::SquareSelector::ToStr() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cursor);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s = "Cursor: " + m_cursor-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_selected)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += ", selected: " + m_selected-&amp;gt;ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesssquareselector.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesssquareselector.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSSQUARESELECTOR_H&lt;br/&gt;
#define CHESSSQUARESELECTOR_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/scoped_ptr.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/signals2.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "chesscolor.h"&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
//#include "chesssquare.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///SquareSelector is the selector of a Chess::BoardWidget&lt;br/&gt;
///It consists of an ever-present cursor and a possibly selected square&lt;br/&gt;
struct SquareSelector&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;SquareSelector();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Respond to a click on a certain square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Click(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; square,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool can_select_square);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Select the square the cursor is on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void DoSelect();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The initially selected Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static boost::shared_ptr&amp;lt;Square&amp;gt; GetInitialSquare();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the location of the cursor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; GetCursor() const { return m_cursor; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the location of the cursor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; GetSelected() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Try to move the cursor down&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void MoveDown();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Try to move the cursor to the left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void MoveLeft();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Try to move the cursor to the right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void MoveRight();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Try to move the cursor up&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void MoveUp();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Convert the SquareSelector to a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Respond to a change in size&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void ()&amp;gt; m_signal_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Chess::Color m_cursor_color = Color::green;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Chess::Color m_selected_color = Color::red;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Chess::Color m_moves_color = Color::blue;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~SquareSelector() {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Square the cursor is.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///There will always be a cursor somewhere&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Square&amp;gt; m_cursor;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The selected Square, if any&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const Square&amp;gt; m_selected;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(SquareSelector* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSSQUARESELECTOR_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesswidget.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesswidget.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "chesswidget.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
#include &amp;lt;thread&amp;gt;&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
#include "chessboard.h"&lt;br/&gt;
#include "chesspiece.h"&lt;br/&gt;
#include "chessgame.h"&lt;br/&gt;
#include "chesssquare.h"&lt;br/&gt;
#include "chesssquarefactory.h"&lt;br/&gt;
#include "chesssquareselector.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::ChessWidget::ChessWidget(const Rect&amp;amp; geometry)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_signal_graphic_changed{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_selector{new SquareSelector}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::Chess::ChessWidget::Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_selector-&amp;gt;m_signal_changed.connect(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::bind(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;ribi::Chess::ChessWidget::OnChanged,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;this-&amp;gt;SetGeometry(geometry);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Chess::ChessWidget::~ChessWidget()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//All done automatically&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::ChessWidget::ClickPixel(const int x,const int y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Square&amp;gt; square {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SquareFactory::Create(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File(8 * x / this-&amp;gt;GetGeometry().GetWidth()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Rank(8 * y / this-&amp;gt;GetGeometry().GetHeight())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;Click(square);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//No problem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Chess::ChessWidget::GetVersion()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "1.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Chess::ChessWidget::GetVersionHistory()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-01-25: version 1.0: initial version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::ChessWidget::OnChanged() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_signal_graphic_changed();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::ChessWidget::PressKey(const ChessWidget::Key key)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (key)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Key::up&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: m_selector-&amp;gt;MoveUp(); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Key::right : m_selector-&amp;gt;MoveRight(); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Key::down&amp;nbsp;&amp;nbsp;: m_selector-&amp;gt;MoveDown(); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Key::left&amp;nbsp;&amp;nbsp;: m_selector-&amp;gt;MoveLeft(); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Key::select: this-&amp;gt;Click(m_selector-&amp;gt;GetCursor()); break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Chess::ChessWidget::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Testing Chess::Widget exactly once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::thread t(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Widget &amp;gt; w(new Widget);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w-&amp;gt;SetGeometry(Rect(0,0,100,100));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Nothing to test&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef MXE_SUPPORTS_THREADS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.join();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/chesswidget.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/chesswidget.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef CHESSWIDGET_H&lt;br/&gt;
#define CHESSWIDGET_H&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
//#include "chessboard.h"&lt;br/&gt;
#include "chessfwd.h"&lt;br/&gt;
#include "widget.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
struct Rect;&lt;br/&gt;
&lt;br/&gt;
namespace Chess {&lt;br/&gt;
&lt;br/&gt;
///Chess::ChessWidget is a Widget to interact with a Chess class:&lt;br/&gt;
///Where the Chess::Board is very picky about valid moves,&lt;br/&gt;
///the Chess::ChessWidget enables simple interaction with it&lt;br/&gt;
///Note the name, which is to prevent conflict with the Widget class&lt;br/&gt;
struct ChessWidget : public ribi::Widget&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;enum class Key { up, down, left, right, select };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Emit this signal when the chessboard changes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;mutable boost::signals2::signal&amp;lt;void ()&amp;gt; m_signal_graphic_changed;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ChessWidget(const Rect&amp;amp; geometry);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Base classes must have a public destructor:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Herb Sutter, Andrei Alexandrescu. C++ coding standards:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//101 rules, guidelines, and best practices.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//ISBN: 0-32-111358-6. Item 50: 'Make base class destructors&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//public and virtual, or protected and nonvirtual'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual ~ChessWidget();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Can do a move?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual bool CanDoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; to) const noexcept = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Respond to a click&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Note: originally, this method was called Click, but it conflicted with Click(const Square&amp;amp;) :-(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void ClickPixel(const int x, const int y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do a move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual void DoMove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Square&amp;gt; to) = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the SquareSelector&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::scoped_ptr&amp;lt;Chess::SquareSelector&amp;gt;&amp;amp; GetSelector() { return m_selector; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the SquareSelector&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::scoped_ptr&amp;lt;Chess::SquareSelector&amp;gt;&amp;amp; GetSelector() const { return m_selector; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the version history of this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Respond to a key being pressed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void PressKey(const Chess::ChessWidget::Key key);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The Selector (a cursor and possibly a selected square)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::scoped_ptr&amp;lt;Chess::SquareSelector&amp;gt; m_selector;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Respond to a click, transformed click coordinats to a square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual void Click(const boost::shared_ptr&amp;lt;const Chess::Square&amp;gt; square) = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///OnChanged is called when the BoardWidget is changed and needs a repaint.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///BoardWidget requests for a repaint by emitting m_signal_board_changed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void OnChanged() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(ChessWidget* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace Chess&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // CHESSWIDGET_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/CppChess.pri&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/CppChess.pri" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
INCLUDEPATH += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess&lt;br/&gt;
&lt;br/&gt;
SOURCES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesswidget.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesssquareselector.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesssquarefactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesssquare.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessscore.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessrank.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessplayer.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesspiecetest.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesspiecefactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesspiece.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessmovetest.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessmoves.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessmovefactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessmove.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesshelper.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessgamewidget.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessgame.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessfile.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesscolor.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesscastling.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessboardwidget.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessboardtest.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessboardfactory.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessboard.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessbitboard.cpp&lt;br/&gt;
&lt;br/&gt;
HEADERS&amp;nbsp;&amp;nbsp;+= \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesswidget.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesssquareselector.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesssquarefactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesssquare.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessscore.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessrank.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessplayer.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesspiecefactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesspiece.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessmoves.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessmovefactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessmove.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesshelper.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessgamewidget.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessgame.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessfwd.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessfile.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesscolor.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chesscastling.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessboardwidget.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessboardfactory.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessboard.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/chessbitboard.h&lt;br/&gt;
&lt;br/&gt;
OTHER_FILES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppChess/Licence.txt&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppChess/Licence.txt&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppChess/Licence.txt" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU GENERAL PUBLIC LICENSE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Version 3, 29 June 2007&lt;br/&gt;
&lt;br/&gt;
 Copyright (C) 2007 Free Software Foundation, Inc. &amp;lt;http://fsf.org/&amp;gt;&lt;br/&gt;
 Everyone is permitted to copy and distribute verbatim copies&lt;br/&gt;
 of this license document, but changing it is not allowed.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Preamble&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License is a free, copyleft license for&lt;br/&gt;
software and other kinds of works.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The licenses for most software and other practical works are designed&lt;br/&gt;
to take away your freedom to share and change the works.&amp;nbsp;&amp;nbsp;By contrast,&lt;br/&gt;
the GNU General Public License is intended to guarantee your freedom to&lt;br/&gt;
share and change all versions of a program--to make sure it remains free&lt;br/&gt;
software for all its users.&amp;nbsp;&amp;nbsp;We, the Free Software Foundation, use the&lt;br/&gt;
GNU General Public License for most of our software; it applies also to&lt;br/&gt;
any other work released this way by its authors.&amp;nbsp;&amp;nbsp;You can apply it to&lt;br/&gt;
your programs, too.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When we speak of free software, we are referring to freedom, not&lt;br/&gt;
price.&amp;nbsp;&amp;nbsp;Our General Public Licenses are designed to make sure that you&lt;br/&gt;
have the freedom to distribute copies of free software (and charge for&lt;br/&gt;
them if you wish), that you receive source code or can get it if you&lt;br/&gt;
want it, that you can change the software or use pieces of it in new&lt;br/&gt;
free programs, and that you know you can do these things.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To protect your rights, we need to prevent others from denying you&lt;br/&gt;
these rights or asking you to surrender the rights.&amp;nbsp;&amp;nbsp;Therefore, you have&lt;br/&gt;
certain responsibilities if you distribute copies of the software, or if&lt;br/&gt;
you modify it: responsibilities to respect the freedom of others.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For example, if you distribute copies of such a program, whether&lt;br/&gt;
gratis or for a fee, you must pass on to the recipients the same&lt;br/&gt;
freedoms that you received.&amp;nbsp;&amp;nbsp;You must make sure that they, too, receive&lt;br/&gt;
or can get the source code.&amp;nbsp;&amp;nbsp;And you must show them these terms so they&lt;br/&gt;
know their rights.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Developers that use the GNU GPL protect your rights with two steps:&lt;br/&gt;
(1) assert copyright on the software, and (2) offer you this License&lt;br/&gt;
giving you legal permission to copy, distribute and/or modify it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For the developers' and authors' protection, the GPL clearly explains&lt;br/&gt;
that there is no warranty for this free software.&amp;nbsp;&amp;nbsp;For both users' and&lt;br/&gt;
authors' sake, the GPL requires that modified versions be marked as&lt;br/&gt;
changed, so that their problems will not be attributed erroneously to&lt;br/&gt;
authors of previous versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Some devices are designed to deny users access to install or run&lt;br/&gt;
modified versions of the software inside them, although the manufacturer&lt;br/&gt;
can do so.&amp;nbsp;&amp;nbsp;This is fundamentally incompatible with the aim of&lt;br/&gt;
protecting users' freedom to change the software.&amp;nbsp;&amp;nbsp;The systematic&lt;br/&gt;
pattern of such abuse occurs in the area of products for individuals to&lt;br/&gt;
use, which is precisely where it is most unacceptable.&amp;nbsp;&amp;nbsp;Therefore, we&lt;br/&gt;
have designed this version of the GPL to prohibit the practice for those&lt;br/&gt;
products.&amp;nbsp;&amp;nbsp;If such problems arise substantially in other domains, we&lt;br/&gt;
stand ready to extend this provision to those domains in future versions&lt;br/&gt;
of the GPL, as needed to protect the freedom of users.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Finally, every program is threatened constantly by software patents.&lt;br/&gt;
States should not allow patents to restrict development and use of&lt;br/&gt;
software on general-purpose computers, but in those that do, we wish to&lt;br/&gt;
avoid the special danger that patents applied to a free program could&lt;br/&gt;
make it effectively proprietary.&amp;nbsp;&amp;nbsp;To prevent this, the GPL assures that&lt;br/&gt;
patents cannot be used to render the program non-free.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The precise terms and conditions for copying, distribution and&lt;br/&gt;
modification follow.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0. Definitions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"This License" refers to version 3 of the GNU General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Copyright" also means copyright-like laws that apply to other kinds of&lt;br/&gt;
works, such as semiconductor masks.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"The Program" refers to any copyrightable work licensed under this&lt;br/&gt;
License.&amp;nbsp;&amp;nbsp;Each licensee is addressed as "you".&amp;nbsp;&amp;nbsp;"Licensees" and&lt;br/&gt;
"recipients" may be individuals or organizations.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "modify" a work means to copy from or adapt all or part of the work&lt;br/&gt;
in a fashion requiring copyright permission, other than the making of an&lt;br/&gt;
exact copy.&amp;nbsp;&amp;nbsp;The resulting work is called a "modified version" of the&lt;br/&gt;
earlier work or a work "based on" the earlier work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "covered work" means either the unmodified Program or a work based&lt;br/&gt;
on the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "propagate" a work means to do anything with it that, without&lt;br/&gt;
permission, would make you directly or secondarily liable for&lt;br/&gt;
infringement under applicable copyright law, except executing it on a&lt;br/&gt;
computer or modifying a private copy.&amp;nbsp;&amp;nbsp;Propagation includes copying,&lt;br/&gt;
distribution (with or without modification), making available to the&lt;br/&gt;
public, and in some countries other activities as well.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "convey" a work means any kind of propagation that enables other&lt;br/&gt;
parties to make or receive copies.&amp;nbsp;&amp;nbsp;Mere interaction with a user through&lt;br/&gt;
a computer network, with no transfer of a copy, is not conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An interactive user interface displays "Appropriate Legal Notices"&lt;br/&gt;
to the extent that it includes a convenient and prominently visible&lt;br/&gt;
feature that (1) displays an appropriate copyright notice, and (2)&lt;br/&gt;
tells the user that there is no warranty for the work (except to the&lt;br/&gt;
extent that warranties are provided), that licensees may convey the&lt;br/&gt;
work under this License, and how to view a copy of this License.&amp;nbsp;&amp;nbsp;If&lt;br/&gt;
the interface presents a list of user commands or options, such as a&lt;br/&gt;
menu, a prominent item in the list meets this criterion.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;1. Source Code.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "source code" for a work means the preferred form of the work&lt;br/&gt;
for making modifications to it.&amp;nbsp;&amp;nbsp;"Object code" means any non-source&lt;br/&gt;
form of a work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "Standard Interface" means an interface that either is an official&lt;br/&gt;
standard defined by a recognized standards body, or, in the case of&lt;br/&gt;
interfaces specified for a particular programming language, one that&lt;br/&gt;
is widely used among developers working in that language.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "System Libraries" of an executable work include anything, other&lt;br/&gt;
than the work as a whole, that (a) is included in the normal form of&lt;br/&gt;
packaging a Major Component, but which is not part of that Major&lt;br/&gt;
Component, and (b) serves only to enable use of the work with that&lt;br/&gt;
Major Component, or to implement a Standard Interface for which an&lt;br/&gt;
implementation is available to the public in source code form.&amp;nbsp;&amp;nbsp;A&lt;br/&gt;
"Major Component", in this context, means a major essential component&lt;br/&gt;
(kernel, window system, and so on) of the specific operating system&lt;br/&gt;
(if any) on which the executable work runs, or a compiler used to&lt;br/&gt;
produce the work, or an object code interpreter used to run it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "Corresponding Source" for a work in object code form means all&lt;br/&gt;
the source code needed to generate, install, and (for an executable&lt;br/&gt;
work) run the object code and to modify the work, including scripts to&lt;br/&gt;
control those activities.&amp;nbsp;&amp;nbsp;However, it does not include the work's&lt;br/&gt;
System Libraries, or general-purpose tools or generally available free&lt;br/&gt;
programs which are used unmodified in performing those activities but&lt;br/&gt;
which are not part of the work.&amp;nbsp;&amp;nbsp;For example, Corresponding Source&lt;br/&gt;
includes interface definition files associated with source files for&lt;br/&gt;
the work, and the source code for shared libraries and dynamically&lt;br/&gt;
linked subprograms that the work is specifically designed to require,&lt;br/&gt;
such as by intimate data communication or control flow between those&lt;br/&gt;
subprograms and other parts of the work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source need not include anything that users&lt;br/&gt;
can regenerate automatically from other parts of the Corresponding&lt;br/&gt;
Source.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source for a work in source code form is that&lt;br/&gt;
same work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;2. Basic Permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All rights granted under this License are granted for the term of&lt;br/&gt;
copyright on the Program, and are irrevocable provided the stated&lt;br/&gt;
conditions are met.&amp;nbsp;&amp;nbsp;This License explicitly affirms your unlimited&lt;br/&gt;
permission to run the unmodified Program.&amp;nbsp;&amp;nbsp;The output from running a&lt;br/&gt;
covered work is covered by this License only if the output, given its&lt;br/&gt;
content, constitutes a covered work.&amp;nbsp;&amp;nbsp;This License acknowledges your&lt;br/&gt;
rights of fair use or other equivalent, as provided by copyright law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may make, run and propagate covered works that you do not&lt;br/&gt;
convey, without conditions so long as your license otherwise remains&lt;br/&gt;
in force.&amp;nbsp;&amp;nbsp;You may convey covered works to others for the sole purpose&lt;br/&gt;
of having them make modifications exclusively for you, or provide you&lt;br/&gt;
with facilities for running those works, provided that you comply with&lt;br/&gt;
the terms of this License in conveying all material for which you do&lt;br/&gt;
not control copyright.&amp;nbsp;&amp;nbsp;Those thus making or running the covered works&lt;br/&gt;
for you must do so exclusively on your behalf, under your direction&lt;br/&gt;
and control, on terms that prohibit them from making any copies of&lt;br/&gt;
your copyrighted material outside their relationship with you.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Conveying under any other circumstances is permitted solely under&lt;br/&gt;
the conditions stated below.&amp;nbsp;&amp;nbsp;Sublicensing is not allowed; section 10&lt;br/&gt;
makes it unnecessary.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;No covered work shall be deemed part of an effective technological&lt;br/&gt;
measure under any applicable law fulfilling obligations under article&lt;br/&gt;
11 of the WIPO copyright treaty adopted on 20 December 1996, or&lt;br/&gt;
similar laws prohibiting or restricting circumvention of such&lt;br/&gt;
measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a covered work, you waive any legal power to forbid&lt;br/&gt;
circumvention of technological measures to the extent such circumvention&lt;br/&gt;
is effected by exercising rights under this License with respect to&lt;br/&gt;
the covered work, and you disclaim any intention to limit operation or&lt;br/&gt;
modification of the work as a means of enforcing, against the work's&lt;br/&gt;
users, your or third parties' legal rights to forbid circumvention of&lt;br/&gt;
technological measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;4. Conveying Verbatim Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey verbatim copies of the Program's source code as you&lt;br/&gt;
receive it, in any medium, provided that you conspicuously and&lt;br/&gt;
appropriately publish on each copy an appropriate copyright notice;&lt;br/&gt;
keep intact all notices stating that this License and any&lt;br/&gt;
non-permissive terms added in accord with section 7 apply to the code;&lt;br/&gt;
keep intact all notices of the absence of any warranty; and give all&lt;br/&gt;
recipients a copy of this License along with the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may charge any price or no price for each copy that you convey,&lt;br/&gt;
and you may offer support or warranty protection for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;5. Conveying Modified Source Versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a work based on the Program, or the modifications to&lt;br/&gt;
produce it from the Program, in the form of source code under the&lt;br/&gt;
terms of section 4, provided that you also meet all of these conditions:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) The work must carry prominent notices stating that you modified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it, and giving a relevant date.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) The work must carry prominent notices stating that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;released under this License and any conditions added under section&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.&amp;nbsp;&amp;nbsp;This requirement modifies the requirement in section 4 to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"keep intact all notices".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) You must license the entire work, as a whole, under this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License to anyone who comes into possession of a copy.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License will therefore apply, along with any applicable section 7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;additional terms, to the whole of the work, and all its parts,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;regardless of how they are packaged.&amp;nbsp;&amp;nbsp;This License gives no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;permission to license the work in any other way, but it does not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;invalidate such permission if you have separately received it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) If the work has interactive user interfaces, each must display&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Appropriate Legal Notices; however, if the Program has interactive&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interfaces that do not display Appropriate Legal Notices, your&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;work need not make them do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A compilation of a covered work with other separate and independent&lt;br/&gt;
works, which are not by their nature extensions of the covered work,&lt;br/&gt;
and which are not combined with it such as to form a larger program,&lt;br/&gt;
in or on a volume of a storage or distribution medium, is called an&lt;br/&gt;
"aggregate" if the compilation and its resulting copyright are not&lt;br/&gt;
used to limit the access or legal rights of the compilation's users&lt;br/&gt;
beyond what the individual works permit.&amp;nbsp;&amp;nbsp;Inclusion of a covered work&lt;br/&gt;
in an aggregate does not cause this License to apply to the other&lt;br/&gt;
parts of the aggregate.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;6. Conveying Non-Source Forms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a covered work in object code form under the terms&lt;br/&gt;
of sections 4 and 5, provided that you also convey the&lt;br/&gt;
machine-readable Corresponding Source under the terms of this License,&lt;br/&gt;
in one of these ways:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source fixed on a durable physical medium&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;customarily used for software interchange.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer, valid for at least three years and valid for as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long as you offer spare parts or customer support for that product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;model, to give anyone who possesses the object code either (1) a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy of the Corresponding Source for all the software in the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;product that is covered by this License, on a durable physical&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;medium customarily used for software interchange, for a price no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;more than your reasonable cost of physically performing this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;conveying of source, or (2) access to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source from a network server at no charge.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Convey individual copies of the object code with a copy of the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer to provide the Corresponding Source.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alternative is allowed only occasionally and noncommercially, and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;only if you received the object code with such an offer, in accord&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with subsection 6b.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Convey the object code by offering access from a designated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;place (gratis or for a charge), and offer equivalent access to the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source in the same way through the same place at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;further charge.&amp;nbsp;&amp;nbsp;You need not require recipients to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source along with the object code.&amp;nbsp;&amp;nbsp;If the place to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy the object code is a network server, the Corresponding Source&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;may be on a different server (operated by you or a third party)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that supports equivalent copying facilities, provided you maintain&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clear directions next to the object code saying where to find the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source.&amp;nbsp;&amp;nbsp;Regardless of what server hosts the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source, you remain obligated to ensure that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;available for as long as needed to satisfy these requirements.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Convey the object code using peer-to-peer transmission, provided&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you inform other peers where the object code and Corresponding&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Source of the work are being offered to the general public at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;charge under subsection 6d.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A separable portion of the object code, whose source code is excluded&lt;br/&gt;
from the Corresponding Source as a System Library, need not be&lt;br/&gt;
included in conveying the object code work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "User Product" is either (1) a "consumer product", which means any&lt;br/&gt;
tangible personal property which is normally used for personal, family,&lt;br/&gt;
or household purposes, or (2) anything designed or sold for incorporation&lt;br/&gt;
into a dwelling.&amp;nbsp;&amp;nbsp;In determining whether a product is a consumer product,&lt;br/&gt;
doubtful cases shall be resolved in favor of coverage.&amp;nbsp;&amp;nbsp;For a particular&lt;br/&gt;
product received by a particular user, "normally used" refers to a&lt;br/&gt;
typical or common use of that class of product, regardless of the status&lt;br/&gt;
of the particular user or of the way in which the particular user&lt;br/&gt;
actually uses, or expects or is expected to use, the product.&amp;nbsp;&amp;nbsp;A product&lt;br/&gt;
is a consumer product regardless of whether the product has substantial&lt;br/&gt;
commercial, industrial or non-consumer uses, unless such uses represent&lt;br/&gt;
the only significant mode of use of the product.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Installation Information" for a User Product means any methods,&lt;br/&gt;
procedures, authorization keys, or other information required to install&lt;br/&gt;
and execute modified versions of a covered work in that User Product from&lt;br/&gt;
a modified version of its Corresponding Source.&amp;nbsp;&amp;nbsp;The information must&lt;br/&gt;
suffice to ensure that the continued functioning of the modified object&lt;br/&gt;
code is in no case prevented or interfered with solely because&lt;br/&gt;
modification has been made.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey an object code work under this section in, or with, or&lt;br/&gt;
specifically for use in, a User Product, and the conveying occurs as&lt;br/&gt;
part of a transaction in which the right of possession and use of the&lt;br/&gt;
User Product is transferred to the recipient in perpetuity or for a&lt;br/&gt;
fixed term (regardless of how the transaction is characterized), the&lt;br/&gt;
Corresponding Source conveyed under this section must be accompanied&lt;br/&gt;
by the Installation Information.&amp;nbsp;&amp;nbsp;But this requirement does not apply&lt;br/&gt;
if neither you nor any third party retains the ability to install&lt;br/&gt;
modified object code on the User Product (for example, the work has&lt;br/&gt;
been installed in ROM).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The requirement to provide Installation Information does not include a&lt;br/&gt;
requirement to continue to provide support service, warranty, or updates&lt;br/&gt;
for a work that has been modified or installed by the recipient, or for&lt;br/&gt;
the User Product in which it has been modified or installed.&amp;nbsp;&amp;nbsp;Access to a&lt;br/&gt;
network may be denied when the modification itself materially and&lt;br/&gt;
adversely affects the operation of the network or violates the rules and&lt;br/&gt;
protocols for communication across the network.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Corresponding Source conveyed, and Installation Information provided,&lt;br/&gt;
in accord with this section must be in a format that is publicly&lt;br/&gt;
documented (and with an implementation available to the public in&lt;br/&gt;
source code form), and must require no special password or key for&lt;br/&gt;
unpacking, reading or copying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;7. Additional Terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Additional permissions" are terms that supplement the terms of this&lt;br/&gt;
License by making exceptions from one or more of its conditions.&lt;br/&gt;
Additional permissions that are applicable to the entire Program shall&lt;br/&gt;
be treated as though they were included in this License, to the extent&lt;br/&gt;
that they are valid under applicable law.&amp;nbsp;&amp;nbsp;If additional permissions&lt;br/&gt;
apply only to part of the Program, that part may be used separately&lt;br/&gt;
under those permissions, but the entire Program remains governed by&lt;br/&gt;
this License without regard to the additional permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a copy of a covered work, you may at your option&lt;br/&gt;
remove any additional permissions from that copy, or from any part of&lt;br/&gt;
it.&amp;nbsp;&amp;nbsp;(Additional permissions may be written to require their own&lt;br/&gt;
removal in certain cases when you modify the work.)&amp;nbsp;&amp;nbsp;You may place&lt;br/&gt;
additional permissions on material, added by you to a covered work,&lt;br/&gt;
for which you have or can give appropriate copyright permission.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, for material you&lt;br/&gt;
add to a covered work, you may (if authorized by the copyright holders of&lt;br/&gt;
that material) supplement the terms of this License with terms:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Disclaiming warranty or limiting liability differently from the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;terms of sections 15 and 16 of this License; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Requiring preservation of specified reasonable legal notices or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;author attributions in that material or in the Appropriate Legal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Notices displayed by works containing it; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Prohibiting misrepresentation of the origin of that material, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requiring that modified versions of such material be marked in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reasonable ways as different from the original version; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Limiting the use for publicity purposes of names of licensors or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authors of the material; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Declining to grant rights under trademark law for use of some&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;trade names, trademarks, or service marks; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f) Requiring indemnification of licensors and authors of that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;material by anyone who conveys the material (or modified versions of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it) with contractual assumptions of liability to the recipient, for&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;any liability that these contractual assumptions directly impose on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;those licensors and authors.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All other non-permissive additional terms are considered "further&lt;br/&gt;
restrictions" within the meaning of section 10.&amp;nbsp;&amp;nbsp;If the Program as you&lt;br/&gt;
received it, or any part of it, contains a notice stating that it is&lt;br/&gt;
governed by this License along with a term that is a further&lt;br/&gt;
restriction, you may remove that term.&amp;nbsp;&amp;nbsp;If a license document contains&lt;br/&gt;
a further restriction but permits relicensing or conveying under this&lt;br/&gt;
License, you may add to a covered work material governed by the terms&lt;br/&gt;
of that license document, provided that the further restriction does&lt;br/&gt;
not survive such relicensing or conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you add terms to a covered work in accord with this section, you&lt;br/&gt;
must place, in the relevant source files, a statement of the&lt;br/&gt;
additional terms that apply to those files, or a notice indicating&lt;br/&gt;
where to find the applicable terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Additional terms, permissive or non-permissive, may be stated in the&lt;br/&gt;
form of a separately written license, or stated as exceptions;&lt;br/&gt;
the above requirements apply either way.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;8. Termination.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not propagate or modify a covered work except as expressly&lt;br/&gt;
provided under this License.&amp;nbsp;&amp;nbsp;Any attempt otherwise to propagate or&lt;br/&gt;
modify it is void, and will automatically terminate your rights under&lt;br/&gt;
this License (including any patent licenses granted under the third&lt;br/&gt;
paragraph of section 11).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;However, if you cease all violation of this License, then your&lt;br/&gt;
license from a particular copyright holder is reinstated (a)&lt;br/&gt;
provisionally, unless and until the copyright holder explicitly and&lt;br/&gt;
finally terminates your license, and (b) permanently, if the copyright&lt;br/&gt;
holder fails to notify you of the violation by some reasonable means&lt;br/&gt;
prior to 60 days after the cessation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Moreover, your license from a particular copyright holder is&lt;br/&gt;
reinstated permanently if the copyright holder notifies you of the&lt;br/&gt;
violation by some reasonable means, this is the first time you have&lt;br/&gt;
received notice of violation of this License (for any work) from that&lt;br/&gt;
copyright holder, and you cure the violation prior to 30 days after&lt;br/&gt;
your receipt of the notice.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Termination of your rights under this section does not terminate the&lt;br/&gt;
licenses of parties who have received copies or rights from you under&lt;br/&gt;
this License.&amp;nbsp;&amp;nbsp;If your rights have been terminated and not permanently&lt;br/&gt;
reinstated, you do not qualify to receive new licenses for the same&lt;br/&gt;
material under section 10.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;9. Acceptance Not Required for Having Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You are not required to accept this License in order to receive or&lt;br/&gt;
run a copy of the Program.&amp;nbsp;&amp;nbsp;Ancillary propagation of a covered work&lt;br/&gt;
occurring solely as a consequence of using peer-to-peer transmission&lt;br/&gt;
to receive a copy likewise does not require acceptance.&amp;nbsp;&amp;nbsp;However,&lt;br/&gt;
nothing other than this License grants you permission to propagate or&lt;br/&gt;
modify any covered work.&amp;nbsp;&amp;nbsp;These actions infringe copyright if you do&lt;br/&gt;
not accept this License.&amp;nbsp;&amp;nbsp;Therefore, by modifying or propagating a&lt;br/&gt;
covered work, you indicate your acceptance of this License to do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;10. Automatic Licensing of Downstream Recipients.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each time you convey a covered work, the recipient automatically&lt;br/&gt;
receives a license from the original licensors, to run, modify and&lt;br/&gt;
propagate that work, subject to this License.&amp;nbsp;&amp;nbsp;You are not responsible&lt;br/&gt;
for enforcing compliance by third parties with this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An "entity transaction" is a transaction transferring control of an&lt;br/&gt;
organization, or substantially all assets of one, or subdividing an&lt;br/&gt;
organization, or merging organizations.&amp;nbsp;&amp;nbsp;If propagation of a covered&lt;br/&gt;
work results from an entity transaction, each party to that&lt;br/&gt;
transaction who receives a copy of the work also receives whatever&lt;br/&gt;
licenses to the work the party's predecessor in interest had or could&lt;br/&gt;
give under the previous paragraph, plus a right to possession of the&lt;br/&gt;
Corresponding Source of the work from the predecessor in interest, if&lt;br/&gt;
the predecessor has it or can get it with reasonable efforts.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not impose any further restrictions on the exercise of the&lt;br/&gt;
rights granted or affirmed under this License.&amp;nbsp;&amp;nbsp;For example, you may&lt;br/&gt;
not impose a license fee, royalty, or other charge for exercise of&lt;br/&gt;
rights granted under this License, and you may not initiate litigation&lt;br/&gt;
(including a cross-claim or counterclaim in a lawsuit) alleging that&lt;br/&gt;
any patent claim is infringed by making, using, selling, offering for&lt;br/&gt;
sale, or importing the Program or any portion of it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;11. Patents.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "contributor" is a copyright holder who authorizes use under this&lt;br/&gt;
License of the Program or a work on which the Program is based.&amp;nbsp;&amp;nbsp;The&lt;br/&gt;
work thus licensed is called the contributor's "contributor version".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A contributor's "essential patent claims" are all patent claims&lt;br/&gt;
owned or controlled by the contributor, whether already acquired or&lt;br/&gt;
hereafter acquired, that would be infringed by some manner, permitted&lt;br/&gt;
by this License, of making, using, or selling its contributor version,&lt;br/&gt;
but do not include claims that would be infringed only as a&lt;br/&gt;
consequence of further modification of the contributor version.&amp;nbsp;&amp;nbsp;For&lt;br/&gt;
purposes of this definition, "control" includes the right to grant&lt;br/&gt;
patent sublicenses in a manner consistent with the requirements of&lt;br/&gt;
this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free&lt;br/&gt;
patent license under the contributor's essential patent claims, to&lt;br/&gt;
make, use, sell, offer for sale, import and otherwise run, modify and&lt;br/&gt;
propagate the contents of its contributor version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;In the following three paragraphs, a "patent license" is any express&lt;br/&gt;
agreement or commitment, however denominated, not to enforce a patent&lt;br/&gt;
(such as an express permission to practice a patent or covenant not to&lt;br/&gt;
sue for patent infringement).&amp;nbsp;&amp;nbsp;To "grant" such a patent license to a&lt;br/&gt;
party means to make such an agreement or commitment not to enforce a&lt;br/&gt;
patent against the party.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey a covered work, knowingly relying on a patent license,&lt;br/&gt;
and the Corresponding Source of the work is not available for anyone&lt;br/&gt;
to copy, free of charge and under the terms of this License, through a&lt;br/&gt;
publicly available network server or other readily accessible means,&lt;br/&gt;
then you must either (1) cause the Corresponding Source to be so&lt;br/&gt;
available, or (2) arrange to deprive yourself of the benefit of the&lt;br/&gt;
patent license for this particular work, or (3) arrange, in a manner&lt;br/&gt;
consistent with the requirements of this License, to extend the patent&lt;br/&gt;
license to downstream recipients.&amp;nbsp;&amp;nbsp;"Knowingly relying" means you have&lt;br/&gt;
actual knowledge that, but for the patent license, your conveying the&lt;br/&gt;
covered work in a country, or your recipient's use of the covered work&lt;br/&gt;
in a country, would infringe one or more identifiable patents in that&lt;br/&gt;
country that you have reason to believe are valid.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If, pursuant to or in connection with a single transaction or&lt;br/&gt;
arrangement, you convey, or propagate by procuring conveyance of, a&lt;br/&gt;
covered work, and grant a patent license to some of the parties&lt;br/&gt;
receiving the covered work authorizing them to use, propagate, modify&lt;br/&gt;
or convey a specific copy of the covered work, then the patent license&lt;br/&gt;
you grant is automatically extended to all recipients of the covered&lt;br/&gt;
work and works based on it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A patent license is "discriminatory" if it does not include within&lt;br/&gt;
the scope of its coverage, prohibits the exercise of, or is&lt;br/&gt;
conditioned on the non-exercise of one or more of the rights that are&lt;br/&gt;
specifically granted under this License.&amp;nbsp;&amp;nbsp;You may not convey a covered&lt;br/&gt;
work if you are a party to an arrangement with a third party that is&lt;br/&gt;
in the business of distributing software, under which you make payment&lt;br/&gt;
to the third party based on the extent of your activity of conveying&lt;br/&gt;
the work, and under which the third party grants, to any of the&lt;br/&gt;
parties who would receive the covered work from you, a discriminatory&lt;br/&gt;
patent license (a) in connection with copies of the covered work&lt;br/&gt;
conveyed by you (or copies made from those copies), or (b) primarily&lt;br/&gt;
for and in connection with specific products or compilations that&lt;br/&gt;
contain the covered work, unless you entered into that arrangement,&lt;br/&gt;
or that patent license was granted, prior to 28 March 2007.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Nothing in this License shall be construed as excluding or limiting&lt;br/&gt;
any implied license or other defenses to infringement that may&lt;br/&gt;
otherwise be available to you under applicable patent law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;12. No Surrender of Others' Freedom.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If conditions are imposed on you (whether by court order, agreement or&lt;br/&gt;
otherwise) that contradict the conditions of this License, they do not&lt;br/&gt;
excuse you from the conditions of this License.&amp;nbsp;&amp;nbsp;If you cannot convey a&lt;br/&gt;
covered work so as to satisfy simultaneously your obligations under this&lt;br/&gt;
License and any other pertinent obligations, then as a consequence you may&lt;br/&gt;
not convey it at all.&amp;nbsp;&amp;nbsp;For example, if you agree to terms that obligate you&lt;br/&gt;
to collect a royalty for further conveying from those to whom you convey&lt;br/&gt;
the Program, the only way you could satisfy both those terms and this&lt;br/&gt;
License would be to refrain entirely from conveying the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;13. Use with the GNU Affero General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, you have&lt;br/&gt;
permission to link or combine any covered work with a work licensed&lt;br/&gt;
under version 3 of the GNU Affero General Public License into a single&lt;br/&gt;
combined work, and to convey the resulting work.&amp;nbsp;&amp;nbsp;The terms of this&lt;br/&gt;
License will continue to apply to the part which is the covered work,&lt;br/&gt;
but the special requirements of the GNU Affero General Public License,&lt;br/&gt;
section 13, concerning interaction through a network will apply to the&lt;br/&gt;
combination as such.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14. Revised Versions of this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Free Software Foundation may publish revised and/or new versions of&lt;br/&gt;
the GNU General Public License from time to time.&amp;nbsp;&amp;nbsp;Such new versions will&lt;br/&gt;
be similar in spirit to the present version, but may differ in detail to&lt;br/&gt;
address new problems or concerns.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each version is given a distinguishing version number.&amp;nbsp;&amp;nbsp;If the&lt;br/&gt;
Program specifies that a certain numbered version of the GNU General&lt;br/&gt;
Public License "or any later version" applies to it, you have the&lt;br/&gt;
option of following the terms and conditions either of that numbered&lt;br/&gt;
version or of any later version published by the Free Software&lt;br/&gt;
Foundation.&amp;nbsp;&amp;nbsp;If the Program does not specify a version number of the&lt;br/&gt;
GNU General Public License, you may choose any version ever published&lt;br/&gt;
by the Free Software Foundation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the Program specifies that a proxy can decide which future&lt;br/&gt;
versions of the GNU General Public License can be used, that proxy's&lt;br/&gt;
public statement of acceptance of a version permanently authorizes you&lt;br/&gt;
to choose that version for the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Later license versions may give you additional or different&lt;br/&gt;
permissions.&amp;nbsp;&amp;nbsp;However, no additional obligations are imposed on any&lt;br/&gt;
author or copyright holder as a result of your choosing to follow a&lt;br/&gt;
later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;15. Disclaimer of Warranty.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY&lt;br/&gt;
APPLICABLE LAW.&amp;nbsp;&amp;nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT&lt;br/&gt;
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY&lt;br/&gt;
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,&lt;br/&gt;
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR&lt;br/&gt;
PURPOSE.&amp;nbsp;&amp;nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM&lt;br/&gt;
IS WITH YOU.&amp;nbsp;&amp;nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF&lt;br/&gt;
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;16. Limitation of Liability.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING&lt;br/&gt;
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS&lt;br/&gt;
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY&lt;br/&gt;
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE&lt;br/&gt;
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF&lt;br/&gt;
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD&lt;br/&gt;
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),&lt;br/&gt;
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF&lt;br/&gt;
SUCH DAMAGES.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;17. Interpretation of Sections 15 and 16.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the disclaimer of warranty and limitation of liability provided&lt;br/&gt;
above cannot be given local legal effect according to their terms,&lt;br/&gt;
reviewing courts shall apply local law that most closely approximates&lt;br/&gt;
an absolute waiver of all civil liability in connection with the&lt;br/&gt;
Program, unless a warranty or assumption of liability accompanies a&lt;br/&gt;
copy of the Program in return for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; END OF TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How to Apply These Terms to Your New Programs&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you develop a new program, and you want it to be of the greatest&lt;br/&gt;
possible use to the public, the best way to achieve this is to make it&lt;br/&gt;
free software which everyone can redistribute and change under these terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To do so, attach the following notices to the program.&amp;nbsp;&amp;nbsp;It is safest&lt;br/&gt;
to attach them to the start of each source file to most effectively&lt;br/&gt;
state the exclusion of warranty; and each file should have at least&lt;br/&gt;
the "copyright" line and a pointer to where the full notice is found.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;one line to give the program's name and a brief idea of what it does.&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is free software: you can redistribute it and/or modify&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it under the terms of the GNU General Public License as published by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is distributed in the hope that it will be useful,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&amp;nbsp;&amp;nbsp;See the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU General Public License for more details.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You should have received a copy of the GNU General Public License&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;along with this program.&amp;nbsp;&amp;nbsp;If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
Also add information on how to contact you by electronic and paper mail.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the program does terminal interaction, make it output a short&lt;br/&gt;
notice like this when it starts in an interactive mode:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;program&amp;gt;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is free software, and you are welcome to redistribute it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;under certain conditions; type `show c' for details.&lt;br/&gt;
&lt;br/&gt;
The hypothetical commands `show w' and `show c' should show the appropriate&lt;br/&gt;
parts of the General Public License.&amp;nbsp;&amp;nbsp;Of course, your program's commands&lt;br/&gt;
might be different; for a GUI interface, you would use an "about box".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You should also get your employer (if you work as a programmer) or school,&lt;br/&gt;
if any, to sign a "copyright disclaimer" for the program, if necessary.&lt;br/&gt;
For more information on this, and how to apply and follow the GNU GPL, see&lt;br/&gt;
&amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License does not permit incorporating your program&lt;br/&gt;
into proprietary programs.&amp;nbsp;&amp;nbsp;If your program is a subroutine library, you&lt;br/&gt;
may consider it more useful to permit linking proprietary applications with&lt;br/&gt;
the library.&amp;nbsp;&amp;nbsp;If this is what you want to do, use the GNU Lesser General&lt;br/&gt;
Public License instead of this License.&amp;nbsp;&amp;nbsp;But first, please read&lt;br/&gt;
&amp;lt;http://www.gnu.org/philosophy/why-not-lgpl.html&amp;gt;.&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://validator.w3.org/check?uri=referer"&gt;&lt;img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This page has been created by the &lt;a href="Tools.htm"&gt;tool&lt;/a&gt; &lt;a href="ToolCodeToHtml.htm"&gt;CodeToHtml&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
