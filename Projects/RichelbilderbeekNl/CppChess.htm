<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Chess</title>
  <meta name="description" content="C++ Chess"/>
  <meta name="keywords" content="C++ Chess "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppChess.htm">Chess</a></h1>
<p>&nbsp;</p>
<h2>./CppChess/chessbitboard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessbitboard.cpp" border = "1"><tr><td><code>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;iterator&gt;<br/>
<br/>
#include "chessbitboard.h"<br/>
#include "chesssquare.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "trace.h"<br/>
<br/>
ribi::Chess::BitBoard::BitBoard()<br/>
&nbsp;&nbsp;: m_v(8,std::vector&lt;bool&gt;(8,false))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(m_v.size() == 8);<br/>
&nbsp;&nbsp;assert(m_v[7].size() == 8);<br/>
}<br/>
<br/>
const std::string ribi::Chess::BitBoard::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::BitBoard::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
void ribi::Chess::BitBoard::Set(const boost::shared_ptr&lt;const Square&gt; s, const bool value)<br/>
{<br/>
&nbsp;&nbsp;const int x = s-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;const int y = s-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;m_v.at(y).at(x) = value;<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;m_v[y][x] = value;<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
bool ribi::Chess::BitBoard::Get(const boost::shared_ptr&lt;const Square&gt; s) const<br/>
{<br/>
&nbsp;&nbsp;const int x = s-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;const int y = s-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;return m_v.at(y).at(x);<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;return m_v[y][x];<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::Chess::BitBoard::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;//Testing Chess::BitBoard exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::BitBoard");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitBoard b;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b.Get(SquareFactory::Create("g8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.Set(SquareFactory::Create("g8"),true);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b.Get(SquareFactory::Create(("g8"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.Set(SquareFactory::Create("g8"),false);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b.Get(SquareFactory::Create(("g8"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Chess::operator&lt;&lt;(std::ostream&amp; os, const BitBoard&amp; b)<br/>
{<br/>
&nbsp;&nbsp;std::for_each(b.m_v.begin(),b.m_v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;os](const std::vector&lt;bool&gt;&amp; v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin(),v.end(),std::ostream_iterator&lt;bool&gt;(os,""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessbitboard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessbitboard.h" border = "1"><tr><td><code>
#ifndef CHESSBITBOARD_H<br/>
#define CHESSBITBOARD_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///BitBoard is an 8x8 square of bools<br/>
struct BitBoard<br/>
{<br/>
&nbsp;&nbsp;///Create an empty BitBoard<br/>
&nbsp;&nbsp;BitBoard();<br/>
<br/>
&nbsp;&nbsp;///Set a value<br/>
&nbsp;&nbsp;void Set(const boost::shared_ptr&lt;const Square&gt; s, const bool value);<br/>
<br/>
&nbsp;&nbsp;///Get a value<br/>
&nbsp;&nbsp;bool Get(const boost::shared_ptr&lt;const Square&gt; s) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Test the BitBoard<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///An 8x8 std::vector of bools<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;bool&gt; &gt; m_v;<br/>
<br/>
&nbsp;&nbsp;friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const BitBoard&amp; b);<br/>
};<br/>
<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const BitBoard&amp; b);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSBITBOARD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessboard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessboard.cpp" border = "1"><tr><td><code>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;boost/multi_array.hpp&gt;<br/>
<br/>
#include "chessbitboard.h"<br/>
#include "chessboard.h"<br/>
#include "chessboardfactory.h"<br/>
#include "chesscastling.h"<br/>
#include "chesshelper.h"<br/>
#include "chessfile.h"<br/>
#include "chessmove.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chesspiece.h"<br/>
#include "chesspiecefactory.h"<br/>
#include "chessplayer.h"<br/>
#include "chessrank.h"<br/>
#include "chessscore.h"<br/>
#include "chesssquare.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::Board::Board(const Pieces&amp; pieces)<br/>
&nbsp;&nbsp;: m_pieces(pieces)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
/*<br/>
ribi::Chess::Board::Board(const Board&amp; other)<br/>
&nbsp;&nbsp;//: m_move_history(other.m_move_history)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Copy all Pieces<br/>
&nbsp;&nbsp;//m_pieces = other.m_pieces;<br/>
&nbsp;&nbsp;std::for_each(other.m_pieces.begin(), other.m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PiecePtr q(p-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p != q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*p,*q));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_pieces.insert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(this-&gt;m_pieces.size() == other.m_pieces.size());<br/>
&nbsp;&nbsp;assert(IsEqual(this-&gt;GetPieces(),other.GetPieces()));<br/>
&nbsp;&nbsp;assert(IsEqual(*this,other));<br/>
}<br/>
*/<br/>
<br/>
bool ribi::Chess::Board::CanDoCastling(const Castling castling, const Player player) const<br/>
{<br/>
&nbsp;&nbsp;//Cannot castle when in check<br/>
&nbsp;&nbsp;if (IsCheck(player)) return false;<br/>
&nbsp;&nbsp;//Check King<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; king_square { SquareFactory::Create(player == Player::white ? std::string("e1") : std::string("e8")) } ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(king_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const ConstPiecePtr king = GetPiece(king_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Is there a King at the king's square?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!king) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check if King has moved<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (king-&gt;GetLastMove()) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check Rook<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; rook_square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player == Player::white<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? (castling == Castling::kingside ? std::string("h1") : std::string("a1"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: (castling == Castling::kingside ? std::string("h8") : std::string("a8"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rook_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const ConstPiecePtr rook = GetPiece(rook_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Is there a Rook at the rook's square?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!rook) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check if Rook has moved<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (rook-&gt;GetLastMove()) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check squares in between King and Rook<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Square &gt; &gt; squares<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= CreateSquaresBetweenKingAndRook(player,castling);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check if these squares are empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::count_if(squares.begin(),squares.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this](const boost::shared_ptr&lt;Square&gt;&amp; square)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return GetPiece(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check if the King needs to move through check<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const BitBoard bitboard = this-&gt;GetVisibleSquares(player == Player::white ? Player::black : Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::count_if(squares.begin(),squares.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[bitboard](const boost::shared_ptr&lt;Square&gt;&amp; square)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return bitboard.Get(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) &gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
bool ribi::Chess::Board::CanDoMove(const boost::shared_ptr&lt;const Move&gt; move, const Player player) const<br/>
{<br/>
&nbsp;&nbsp;if (move-&gt;Score().get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Scores are always valid moves on a Board");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Deduce from square if not a castling nor score<br/>
&nbsp;&nbsp;if (!move-&gt;From() &amp;&amp; move-&gt;To())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;To());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check all player's pieces if they can move to that location<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Collect all moves that end in the Move::To()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const Move&gt; &gt; moves = CompleteMove(move,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (moves.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("No moves with this destination");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//The Move without a From is invalid if<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// * there is no valid move with that From<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// * there are more moves with that From<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const Move&gt; &gt; valid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy_if(moves.begin(),moves.end(),std::back_inserter(valid),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,player](const boost::shared_ptr&lt;const Move&gt; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return CanDoMove(m,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (valid.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("No valid moves with this destination");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (valid.size() &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Multiple moves possible to reach the destination square");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NTRACE_BILDERBIKKEL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(valid.begin(),valid.end(),[](const boost::shared_ptr&lt;const Move&gt; m) { TRACE(m); } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//There is exactly one Move found: test the complete move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(valid[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return CanDoMove(valid[0],player);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Each move here is complete, i.e. a simple move has a from and to value<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const ConstPiecePtr p = this-&gt;GetPiece(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*p-&gt;GetSquare() == *move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;GetColor() != player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Cannot move opponent's pieces");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!p-&gt;CanDoMove(move))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Piece can never do this move");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;GetNameChar() != move-&gt;Piece()-&gt;GetNameChar())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("There is a different Piece on the square than as indicated by the Move");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::DeepCopy(*this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*b == *this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ConstPiecePtr q = b-&gt;GetPiece(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q &amp;&amp; p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((*q != *p))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(p-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(q-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*q == *p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q-&gt;CanDoMove(move));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;Piece().get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;Piece()-&gt;GetNameChar() != p-&gt;GetNameChar())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Type of piece in move is different than in reality");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;To());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check for pieces blocking moves that span multiple squares<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!dynamic_cast&lt;const PieceKnight*&gt;(p.get()) &amp;&amp; !EmptyBetween(move-&gt;From(),move-&gt;To()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("There are pieces blocking the move");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (move-&gt;IsCastling())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(CanStrToCastling(move-&gt;GetStr()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Castling castling = StrToCastling(move-&gt;GetStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return CanDoCastling(castling,player);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check for capture<br/>
&nbsp;&nbsp;if (move-&gt;To())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Or it is a capture, or a move to an empty square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;IsCapture())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;IsEnPassant())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//En-passant capture<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (GetPiece(move-&gt;To()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Cannot en-passant capture an occupied square");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///TODO<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Determine captured square<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Can only do en passant if at the captured squares there's an opponent<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Can only do en passant if at the captured squares there's an opponent that has moved the last turn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Regular capture<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!GetPiece(move-&gt;To()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Cannot capture an empty square");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (GetPiece(move-&gt;To())-&gt;GetColor() == GetPiece(move-&gt;From())-&gt;GetColor())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Cannot capture own piece");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Move is not a capture<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (GetPiece(move-&gt;To()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Cannot move to an occupied square");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;IsEnPassant())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Cannot perform an en passant capture without the move being a capture");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if move puts opponent in check<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::DeepCopy(*this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetPiece(move-&gt;From()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetPiece(move-&gt;From())-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;GetPiece(move-&gt;From())-&gt;DoMove(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;IsCastling());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(CanStrToCastling(move-&gt;GetStr()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Castling castling = StrToCastling(move-&gt;GetStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(CanDoCastling(castling,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoCastling(castling,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool check_in_real = b-&gt;IsCheck(player == Player::white ? Player::black : Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (check_in_real)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!move-&gt;IsCheck() &amp;&amp; !move-&gt;IsCheckmate())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("The move does not indicate a check, but in reality it does put the opponent into check");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No check in reality<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;IsCheck())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("The move indicates a check, but it does not put opponent into check");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Check if move will put current player in check<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::DeepCopy(*this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPiece(move-&gt;From()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetPiece(move-&gt;From()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(GetPiece(move-&gt;From())-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*b == *this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;GetPiece(move-&gt;From())-&gt;CanDoMove(move))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(*this);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetPiece(move-&gt;From())-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;GetPiece(move-&gt;From())-&gt;DoMove(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Does this check the player that tries do the move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;IsCastling());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(CanStrToCastling(move-&gt;GetStr()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Castling castling = StrToCastling(move-&gt;GetStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(CanDoCastling(castling,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoCastling(castling,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (b-&gt;IsCheck(player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Move is forbidden, because it puts the current player into check");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check for move ending in checkmate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Do move on cloned chessboard<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::DeepCopy(*this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetPiece(move-&gt;From()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;GetPiece(move-&gt;From())-&gt;DoMove(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(CanStrToCastling(move-&gt;GetStr()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::DeepCopy(*this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Castling castling = StrToCastling(move-&gt;GetStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoCastling(castling,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoCastling(castling,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Is opponent in checkmate?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool checkmate_in_real = b-&gt;IsCheckmate(player == Player::white ? Player::black : Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (checkmate_in_real != move-&gt;IsCheckmate())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (checkmate_in_real)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("The move does not indicate a checkmate, but in reality it does put the opponent into checkmate");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("The move indicates a checkmate, but it does not put opponent into checkmate");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;const ribi::Chess::Move&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Chess::Board::CompleteMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player player) const<br/>
{<br/>
&nbsp;&nbsp;assert(!move-&gt;From());<br/>
&nbsp;&nbsp;assert(move-&gt;To());<br/>
&nbsp;&nbsp;assert(!move-&gt;Score());<br/>
&nbsp;&nbsp;//Deduce from square if not a castling nor score<br/>
<br/>
&nbsp;&nbsp;//Check all player's pieces if they can move to that location<br/>
&nbsp;&nbsp;//Collect all mives that end in the Move::To()<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const Move&gt; &gt; moves;<br/>
&nbsp;&nbsp;for (const PiecePtr&amp; piece: m_pieces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check for this player its pieces only that are of the same type as the move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;Piece());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (piece-&gt;GetColor() == player &amp;&amp; move-&gt;Piece()-&gt;GetNameChar() == piece-&gt;GetNameChar() )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Obtain this right-colored piece its moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; pms = piece-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(pms.begin(),pms.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;moves,this,&amp;move,player](const boost::shared_ptr&lt;Move&gt; n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If the Move has a To, goes to the right To and is valid...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n-&gt;To() &amp;&amp; (*n-&gt;To() == *move-&gt;To()) &amp;&amp; this-&gt;CanDoMove(n,player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Store this Move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves.push_back(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return moves;<br/>
}<br/>
<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Square &gt; &gt; ribi::Chess::Board::CreateSquaresBetweenKingAndRook(<br/>
&nbsp;&nbsp;const Player player,const Castling castling)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Square &gt; &gt; v;<br/>
&nbsp;&nbsp;if (player == Player::white)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (castling == Castling::kingside)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("f1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("g1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(castling == Castling::queenside);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("b1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("c1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("d1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(player == Player::black);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (castling == Castling::kingside)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("f8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("g8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(castling == Castling::queenside);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("b8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("c8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square &gt; s = SquareFactory::Create("d8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
void ribi::Chess::Board::DoCastling(const Castling castling, const Player player)<br/>
{<br/>
&nbsp;&nbsp;assert(CanDoCastling(castling,player));<br/>
&nbsp;&nbsp;//Get King<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; king_from_square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= SquareFactory::Create(player == Player::white ? std::string("e1") : std::string("e8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(king_from_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//const Square king_to_square = (player == Player::white<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;? (castling == Castling::kingside ? Square("g1") : Square("c1"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;: (castling == Castling::kingside ? Square("g8") : Square("c8")) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const PiecePtr king = GetPiece(king_from_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(king);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Move&gt; castling_move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Chess::MoveFactory::Create(CastlingToStr(castling));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(castling_move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;king-&gt;DoMove(castling_move);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check Rook<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; rook_square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= SquareFactory::Create(player == Player::white<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? (castling == Castling::kingside ? std::string("h1") : std::string("a1"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: (castling == Castling::kingside ? std::string("h8") : std::string("a8")) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rook_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const PiecePtr rook = GetPiece(rook_square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rook);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Move&gt; castling_move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= Chess::MoveFactory::Create(CastlingToStr(castling));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(castling_move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rook-&gt;DoMove(castling_move);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::Chess::Board::DoMove(const boost::shared_ptr&lt;const Move&gt; move,const Player player)<br/>
{<br/>
&nbsp;&nbsp;assert(CanDoMove(move,player));<br/>
&nbsp;&nbsp;if (!move-&gt;From() &amp;&amp; move-&gt;To())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(move-&gt;To());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check all player's pieces if they can move to that location<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Collect all moves that end in the Move::To()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const Move&gt; &gt; moves = CompleteMove(move,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//The Move without a From is invalid if<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// * there is no valid move with that From<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// * there are more moves with that From<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//There is exactly one Move found: test the complete move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(moves[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return DoMove(moves[0],player);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PiecePtr p = GetPiece(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;DoMove(move);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else if (move-&gt;IsCastling())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(CanStrToCastling(move-&gt;GetStr()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Castling castling = StrToCastling( move-&gt;GetStr() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(CanDoCastling(castling,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DoCastling(castling,player);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Chess::Board::EmptyBetween(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; a,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; b) const noexcept<br/>
{<br/>
&nbsp;&nbsp;const int dx = a-&gt;GetFile().ToInt() - b-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;const int dy = a-&gt;GetRank().ToInt() - b-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;//Are there squares in between to check for being occupied?<br/>
&nbsp;&nbsp;assert(dx != 0 || dy != 0);<br/>
&nbsp;&nbsp;//Squares are adjacent (horizontally, vertically or diagonally)<br/>
&nbsp;&nbsp;if (dx + dy == 1) return true;<br/>
<br/>
&nbsp;&nbsp;const int step_x = (dx &gt; 0 ? 1 : (dx &lt; 0 ? -1 : 0));<br/>
&nbsp;&nbsp;const int step_y = (dy &gt; 0 ? 1 : (dy &lt; 0 ? -1 : 0));<br/>
&nbsp;&nbsp;const int n_steps = std::max(std::abs(dx),std::abs(dy));<br/>
&nbsp;&nbsp;for (int i=1; i!=n_steps; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = b-&gt;GetFile().ToInt() + (i * step_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int y = b-&gt;GetRank().ToInt() + (i * step_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(y &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x&nbsp;&nbsp;&lt; 8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(y&nbsp;&nbsp;&lt; 8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square = SquareFactory::Create(File(x),Rank(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*square != *a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*square != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (this-&gt;GetPiece(square)) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
//Color ribi::Chess::Board::GetActivePlayer() const<br/>
//{<br/>
//&nbsp;&nbsp;return (m_moves.size() % 2 ? Color::black : Color::white);<br/>
//}<br/>
<br/>
const ribi::Chess::Board::PiecePtr<br/>
&nbsp;&nbsp;ribi::Chess::Board::GetPiece(const boost::shared_ptr&lt;const Square&gt; square)<br/>
{<br/>
&nbsp;&nbsp;const auto i = std::find_if(m_pieces.begin(),m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;square](const PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *p-&gt;GetSquare() == *square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;if (i == m_pieces.end()) { ribi::Chess::Board::PiecePtr p; assert(!p); return p; }<br/>
&nbsp;&nbsp;else { assert(*i); return *i; }<br/>
}<br/>
<br/>
const ribi::Chess::Board::ConstPiecePtr<br/>
&nbsp;&nbsp;ribi::Chess::Board::GetPiece(const boost::shared_ptr&lt;const Square&gt; square) const<br/>
{<br/>
&nbsp;&nbsp;const auto i = std::find_if(m_pieces.begin(),m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;square](const PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *p-&gt;GetSquare() == *square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;if (i == m_pieces.end()) { ribi::Chess::Board::ConstPiecePtr p; assert(!p); return p; }<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::Chess::Board::ConstPiecePtr p(*i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*p-&gt;GetSquare() == *square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*p == *(*i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const ribi::Chess::Board::ConstPieces ribi::Chess::Board::GetPieces() const<br/>
{<br/>
&nbsp;&nbsp;return AddConst(this-&gt;GetPieces());<br/>
&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;ConstPieces v;<br/>
&nbsp;&nbsp;std::transform(m_pieces.begin(),m_pieces.end(),std::inserter(v,v.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const ribi::Chess::Board::PiecePtr&amp; piece)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConstPiecePtr p = piece-&gt;Clone();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsEqual(*p,*piece));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p != piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;*/<br/>
}<br/>
<br/>
const ribi::Chess::Board::Pieces ribi::Chess::Board::GetInitialSetup()<br/>
{<br/>
&nbsp;&nbsp;ribi::Chess::Board::Pieces v;<br/>
&nbsp;&nbsp;const auto colors { Color::black, Color::white };<br/>
&nbsp;&nbsp;std::for_each(colors.begin(),colors.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v](const Color color)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Pawns<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Chess::Rank rank = color == Color::white ? Rank(2) : Rank(7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=8; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File(i),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('.',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Royalty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Chess::Rank rank = color == Color::white ? Rank(1) : Rank(8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("a"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('R',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("b"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('N',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("c"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('B',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("d"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('Q',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("e"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('K',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("f"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('B',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("g"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('N',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s(SquareFactory::Create(Chess::File("h"),rank));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('R',color,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::Board::GetMoves(const Player player) const<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;std::for_each(m_pieces.begin(),m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this,&amp;v,player](const PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;GetColor() == player)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetSquare());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Obtain all valid moves from the square the piece is standing on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; w = this-&gt;GetMoves(p-&gt;GetSquare());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(w.begin(),w.end(),std::back_inserter(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::Board::GetMoves(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square) const<br/>
{<br/>
&nbsp;&nbsp;const ConstPiecePtr piece = GetPiece(square);<br/>
&nbsp;&nbsp;///TODO: In Traitor's Chess you can move Pieces of the opponent<br/>
&nbsp;&nbsp;//if (!piece || piece-&gt;GetColor() != this-&gt;GetActivePlayer()) return std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt;();<br/>
&nbsp;&nbsp;if (!piece) return std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt;();<br/>
&nbsp;&nbsp;const Player player = ColorToPlayer(piece-&gt;GetColor());<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; all_moves = piece-&gt;GetMoves();<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves;<br/>
&nbsp;&nbsp;std::copy_if(all_moves.begin(), all_moves.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(moves),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this,player](const boost::shared_ptr&lt;Move&gt; move)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this-&gt;CanDoMove(move,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return moves;<br/>
}<br/>
<br/>
const std::string ribi::Chess::Board::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Board::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const ribi::Chess::BitBoard ribi::Chess::Board::GetVisibleSquares(const Player player) const<br/>
{<br/>
&nbsp;&nbsp;//Collect the Pieces we want to know their sights of<br/>
&nbsp;&nbsp;std::vector&lt;PiecePtr&gt; pieces;<br/>
&nbsp;&nbsp;std::copy_if(m_pieces.begin(), m_pieces.end(),<br/>
&nbsp;&nbsp; std::back_inserter(pieces),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[player](const PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p-&gt;GetColor() == player;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//Collect the Squares the Pieces can move to on a BitBoard<br/>
&nbsp;&nbsp;Chess::BitBoard b;<br/>
&nbsp;&nbsp;std::for_each(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pieces.begin(),pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this,&amp;b](const PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = this-&gt;GetMoves(p-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(moves.begin(),moves.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;b](const boost::shared_ptr&lt;Move&gt; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m-&gt;To());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.Set(m-&gt;To(),true);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Copy the locations of the pieces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.Set(p-&gt;GetSquare(),true);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;return b;<br/>
}<br/>
<br/>
bool ribi::Chess::Board::IsCheck(const Player player) const<br/>
{<br/>
&nbsp;&nbsp;//Find the king of the player<br/>
&nbsp;&nbsp;const auto king_ptr = std::find_if(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pieces.begin(),m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[player,this](const ribi::Chess::Board::PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p-&gt;GetColor() == player<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; dynamic_cast&lt;PieceKing*&gt;(p.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//No King, so this player cannot be in check<br/>
&nbsp;&nbsp;if (king_ptr == m_pieces.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("No king");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;const PiecePtr king = *king_ptr;<br/>
&nbsp;&nbsp;assert(king);<br/>
<br/>
&nbsp;&nbsp;//Collect the visible squares seen from the opponent<br/>
&nbsp;&nbsp;//DO NOT USE GETVISIBLESQUARES: THIS LEADS TO RECURSION<br/>
<br/>
&nbsp;&nbsp;//Check if an opponent's piece looks at the current player's King<br/>
&nbsp;&nbsp;const int cnt = std::count_if(m_pieces.begin(),m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[king,this](const ribi::Chess::Board::PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Must not be of same color<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;GetColor() == king-&gt;GetColor()) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//There must be a Move to the King's square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto moves = p-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const auto move = std::find_if(moves.begin(),moves.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[king](const boost::shared_ptr&lt;Move&gt; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *m-&gt;To() == *king-&gt;GetSquare();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move == moves.end()) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//A Knight always makes a successful attack<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dynamic_cast&lt;PieceKnight*&gt;(p.get())) return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//All squares between King and attacker must be empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(king-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EmptyBetween(king-&gt;GetSquare(),p-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;//Return if there is at least one piece attacking the King<br/>
&nbsp;&nbsp;return cnt &gt; 0;<br/>
}<br/>
<br/>
bool ribi::Chess::Board::IsCheckmate(const Player player) const<br/>
{<br/>
&nbsp;&nbsp;if (!IsCheck(player))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Move is no checkmate, because the king is not in check");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Find the king of the player<br/>
&nbsp;&nbsp;const auto king_ptr = std::find_if(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pieces.begin(),m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[player,this](const ribi::Chess::Board::PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p-&gt;GetColor() == player<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; dynamic_cast&lt;PieceKing*&gt;(p.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//No King, so this player cannot be in check<br/>
&nbsp;&nbsp;if (king_ptr == m_pieces.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE("No king");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Get all moves<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = GetMoves(player);<br/>
<br/>
&nbsp;&nbsp;//Check if all of them end in check<br/>
&nbsp;&nbsp;const int cnt = std::count_if(moves.begin(),moves.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this,player](const boost::shared_ptr&lt;Move&gt; move)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::DeepCopy(*this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(move,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if (!b.CanDoMove(move,player)) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(move,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (b-&gt;IsCheck(player)) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;//If there are no possible moves, player is in checkmate<br/>
&nbsp;&nbsp;if (cnt &gt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Opponent can escape checkmate");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return cnt == 0;<br/>
}<br/>
<br/>
/*<br/>
bool ribi::Chess::Board::IsValid(const boost::shared_ptr&lt;Move&gt; move) const<br/>
{<br/>
&nbsp;&nbsp;assert(move-&gt;To());<br/>
&nbsp;&nbsp;//Check if non-Knight Piece does not go through occupied squares<br/>
&nbsp;&nbsp;if (move-&gt;Piece() &amp;&amp; !dynamic_cast&lt;PieceKnight*&gt;(move-&gt;Piece().get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; ( std::abs(move-&gt;To()-&gt;GetFile().ToInt() - move-&gt;From()-&gt;GetFile().ToInt()) &gt; 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| std::abs(move-&gt;To()-&gt;GetRank().ToInt() - move-&gt;From()-&gt;GetRank().ToInt()) &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dx = move-&gt;To()-&gt;GetFile().ToInt() - move-&gt;From()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dy = move-&gt;To()-&gt;GetRank().ToInt() - move-&gt;From()-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int step_x = (dx &gt; 0 ? 1 : (dx &lt; 0 ? -1 : 0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int step_y = (dy &gt; 0 ? 1 : (dy &lt; 0 ? -1 : 0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int n_steps = std::max(std::abs(dx),std::abs(dy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=1; i!=n_steps; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int x = move-&gt;From()-&gt;GetFile().ToInt() + (i * step_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int y = move-&gt;From()-&gt;GetRank().ToInt() + (i * step_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (GetPiece(Square(File(x),Rank(y)))) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//If the move is a capture, but there is nothing to capture, the move is invalid in this context<br/>
&nbsp;&nbsp;if (move-&gt;IsCapture() &amp;&amp; !GetPiece(*move-&gt;To())) return false;<br/>
&nbsp;&nbsp;//If the square to move to is occupied...<br/>
&nbsp;&nbsp;if (GetPiece(*move-&gt;To()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Cannot capture a piece of own color<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///TODO But this is possible in Cannibal Chess<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//if (GetPiece(*move-&gt;To())-&gt;GetColor() == GetActivePlayer()) return false;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (GetPiece(*move-&gt;From())-&gt;GetColor() != GetPiece(*move-&gt;To())-&gt;GetColor()) return move-&gt;IsCapture();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//move-&gt;IsCapture<br/>
&nbsp;&nbsp;//move-&gt;IsCastling()<br/>
<br/>
&nbsp;&nbsp;//Does move result in the player ending in check?<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
*/<br/>
<br/>
bool ribi::Chess::AreEqual(const ribi::Chess::Board::ConstPieces&amp; lhs,const ribi::Chess::Board::ConstPieces&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;if (lhs.size() != rhs.size()) return false;<br/>
&nbsp;&nbsp;//Count unfound pieces<br/>
&nbsp;&nbsp;return std::count_if(lhs.begin(),lhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[rhs](const ribi::Chess::Board::ConstPiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::count_if(rhs.begin(),rhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[p](const ribi::Chess::Board::ConstPiecePtr&amp; q)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *p == *q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) &lt; 2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return std::count_if(rhs.begin(),rhs.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[p](const ribi::Chess::Board::ConstPiecePtr&amp; q)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *p == *q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) == 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;) == static_cast&lt;int&gt;(lhs.size());<br/>
}<br/>
<br/>
<br/>
std::ostream&amp; ribi::Chess::operator&lt;&lt;(std::ostream&amp; os, const Board&amp; board)<br/>
{<br/>
&nbsp;&nbsp;const int maxx = 8;<br/>
&nbsp;&nbsp;const int maxy = 8;<br/>
<br/>
&nbsp;&nbsp;boost::multi_array&lt;std::string, 2&gt; v(boost::extents[maxx][maxy]);<br/>
&nbsp;&nbsp;for (int y=0;y!=maxy;++y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=maxx; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (((x+y)%2)==0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[x][y] = "..";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[x][y] = "__";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;std::for_each(board.m_pieces.begin(),board.m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v](const ribi::Chess::Board::PiecePtr&amp; piece)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(piece-&gt;GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int x = piece-&gt;GetSquare()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int y = piece-&gt;GetSquare()-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::string(piece-&gt;GetColor() == Color::white ? "w" : "b")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(piece-&gt;GetNameChar());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[x][y] = s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;for (int y=0;y!=maxy;++y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=maxx; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os &lt;&lt; " " &lt;&lt; v[x][y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os &lt;&lt; "\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
<br/>
bool ribi::Chess::operator==(const Board&amp; lhs, const Board&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;//if (lhs.GetMoveHistory() != rhs.GetMoveHistory())<br/>
&nbsp;&nbsp;//{<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;//}<br/>
&nbsp;&nbsp;return AreEqual(lhs.GetPieces(),rhs.GetPieces());<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Board&amp; lhs, const Board&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessboard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessboard.h" border = "1"><tr><td><code>
#ifndef CHESSBOARD_H<br/>
#define CHESSBOARD_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;set&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/logic/tribool.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#include "chesscolor.h"<br/>
#include "chessmove.h"<br/>
//#include "chesspiece.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
struct Piece;<br/>
<br/>
///Chess::Board is a class for a chessboard without gaming rules.<br/>
///Rules that handled by Chess::Board normally are:<br/>
/// - en passant<br/>
/// - castling<br/>
///Chess::Game is the class that uses a Chess::Board and adds these rules<br/>
///Rules that must be handled by Chess::Game are:<br/>
/// - keeping track of which player's turn it is<br/>
/// - determining a winner or draw<br/>
struct Board<br/>
{<br/>
&nbsp;&nbsp;typedef boost::shared_ptr&lt;Piece&gt; PiecePtr;<br/>
&nbsp;&nbsp;typedef boost::shared_ptr&lt;const Piece&gt; ConstPiecePtr;<br/>
&nbsp;&nbsp;typedef std::set&lt;PiecePtr&gt; Pieces;<br/>
&nbsp;&nbsp;typedef std::set&lt;ConstPiecePtr&gt; ConstPieces;<br/>
<br/>
&nbsp;&nbsp;Board(const Board&amp; rhs) = delete; //BUG: this one was missing (and abused)<br/>
&nbsp;&nbsp;Board&amp; operator=(const Board&amp; rhs) = delete;<br/>
<br/>
&nbsp;&nbsp;///Check if a Move is valid to play in the current context<br/>
&nbsp;&nbsp;///Player must be indicated, because without castling would be ambigious<br/>
&nbsp;&nbsp;///Note that e2-e4 is only valid for the white player<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///Do a Move that is valid to play in the current context<br/>
&nbsp;&nbsp;///Player must be indicated, because without castling would be ambigious<br/>
&nbsp;&nbsp;///Note that e2-e4 is only valid for the white player<br/>
&nbsp;&nbsp;void DoMove(const boost::shared_ptr&lt;const Move&gt; move, const Player player);<br/>
<br/>
&nbsp;&nbsp;//bool IsVisible(const Square&amp; s);<br/>
<br/>
&nbsp;&nbsp;//const BoardVisibleType GetInSight(const Piece::Color color) const;<br/>
&nbsp;&nbsp;//const Piece GetPiece(const int x, const int y) const;<br/>
<br/>
&nbsp;&nbsp;///Create Pieces in their startup positions<br/>
&nbsp;&nbsp;static const Pieces GetInitialSetup();<br/>
<br/>
&nbsp;&nbsp;///Get the Move history<br/>
&nbsp;&nbsp;//const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt;&amp; GetMoveHistory() const { return m_move_history; }<br/>
<br/>
&nbsp;&nbsp;///Collect all moves that are possible for a Piece at a certain Square.<br/>
&nbsp;&nbsp;///If there is no Piece at that Square, no Moves are returned<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves(const boost::shared_ptr&lt;const Square&gt; square) const;<br/>
<br/>
&nbsp;&nbsp;///Collect all moves that are possible<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves(const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///Find a Piece at a certain Square.<br/>
&nbsp;&nbsp;///If there is no Piece at that Square, an empty Piece is returned<br/>
&nbsp;&nbsp;const PiecePtr GetPiece(const boost::shared_ptr&lt;const Square&gt; square);<br/>
<br/>
&nbsp;&nbsp;///Find a Piece at a certain Square.<br/>
&nbsp;&nbsp;///If there is no Piece at that Square, an empty Piece is returned<br/>
&nbsp;&nbsp;const ConstPiecePtr GetPiece(const boost::shared_ptr&lt;const Square&gt; square) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain all read-only Piece instances<br/>
&nbsp;&nbsp;const ConstPieces GetPieces() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Get all squares that are visible by a player with the requested color.<br/>
&nbsp;&nbsp;///If the Color is set to Color::indeterminate, both players' sights<br/>
&nbsp;&nbsp;///are returned<br/>
&nbsp;&nbsp;const BitBoard GetVisibleSquares(const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///Is, in the current position, the player being in check?<br/>
&nbsp;&nbsp;bool IsCheck(const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///Is the current position the active player being in checkmate?<br/>
&nbsp;&nbsp;bool IsCheckmate(const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///The Score if the game has ended by agreement (instead of by checkmate)<br/>
&nbsp;&nbsp;//const boost::shared_ptr&lt;Chess::Score&gt;&amp; Score() const;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///Construct a Board in the initial position, allowed by BoardFactory only<br/>
&nbsp;&nbsp;Board(const Pieces&amp; pieces);<br/>
<br/>
&nbsp;&nbsp;~Board() {}<br/>
<br/>
&nbsp;&nbsp;///All the Pieces<br/>
&nbsp;&nbsp;Pieces m_pieces;<br/>
<br/>
&nbsp;&nbsp;///The history of all Moves<br/>
&nbsp;&nbsp;///REMOVED: client has to keep track of these him/herself<br/>
&nbsp;&nbsp;//std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; m_move_history;<br/>
<br/>
&nbsp;&nbsp;///Check if a Player can do a castling<br/>
&nbsp;&nbsp;bool CanDoCastling(const Castling castling, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///Let a Player do a castling<br/>
&nbsp;&nbsp;void DoCastling(const Castling castling, const Player player);<br/>
<br/>
&nbsp;&nbsp;///Given a Move with a certain destination, deduce all Moves (with a starting position added)<br/>
&nbsp;&nbsp;///that have the same destination<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;const Move&gt; &gt; CompleteMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player player) const;<br/>
<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;Square &gt; &gt; CreateSquaresBetweenKingAndRook(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player player,const Castling castling);<br/>
<br/>
&nbsp;&nbsp;///Check if all squares between two Squares are empty (e<br/>
&nbsp;&nbsp;///Squares must be on one line<br/>
&nbsp;&nbsp;bool EmptyBetween(const boost::shared_ptr&lt;const Square&gt; a, const boost::shared_ptr&lt;const Square&gt; b) const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Checks if the Move is valid in this situation<br/>
&nbsp;&nbsp;///??? REPLACE BY USING CANDOMOVE<br/>
&nbsp;&nbsp;//bool IsValid(const Move&amp; move) const;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Tests the Board2d class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//friend bool operator==(const Board&amp; lhs, const Board&amp; rhs);<br/>
&nbsp;&nbsp;friend class BoardFactory;<br/>
&nbsp;&nbsp;friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Board&amp; board);<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Board *);<br/>
};<br/>
<br/>
bool AreEqual(const Board::ConstPieces&amp; lhs,const Board::ConstPieces&amp; rhs);<br/>
<br/>
bool operator==(const Board&amp; lhs, const Board&amp; rhs);<br/>
bool operator!=(const Board&amp; lhs, const Board&amp; rhs);<br/>
<br/>
<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Board&amp; board);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSBOARD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessboardfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessboardfactory.cpp" border = "1"><tr><td><code>
#include "chessboardfactory.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;numeric&gt;<br/>
<br/>
#include "chessboard.h"<br/>
#include "chesspiecefactory.h"<br/>
<br/>
boost::shared_ptr&lt;ribi::Chess::Board&gt; ribi::Chess::BoardFactory::Create(const Chess::Board::Pieces&amp; pieces)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; p(new Chess::Board(pieces));<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
boost::shared_ptr&lt;ribi::Chess::Board&gt; ribi::Chess::BoardFactory::DeepCopy(const Board&amp; board)<br/>
{<br/>
&nbsp;&nbsp;const Chess::Board::ConstPieces original = board.GetPieces();<br/>
&nbsp;&nbsp;Chess::Board::Pieces pieces;<br/>
&nbsp;&nbsp;std::transform(original.begin(),original.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::inserter(pieces,pieces.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](const Chess::Board::ConstPiecePtr&amp; piece)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Board::PiecePtr p = PieceFactory::DeepCopy(piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(Create(pieces));<br/>
&nbsp;&nbsp;assert(b);<br/>
&nbsp;&nbsp;return b;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessboardfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessboardfactory.h" border = "1"><tr><td><code>
#ifndef CHESSBOARDFACTORY_H<br/>
#define CHESSBOARDFACTORY_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#include "chessboard.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///Factory for creating a Chess::Board<br/>
struct BoardFactory<br/>
{<br/>
&nbsp;&nbsp;static boost::shared_ptr&lt;Chess::Board&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Chess::Board::Pieces&amp; pieces = Chess::Board::GetInitialSetup());<br/>
<br/>
<br/>
&nbsp;&nbsp;static boost::shared_ptr&lt;Chess::Board&gt; DeepCopy(const Board&amp; board);<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSBOARDFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessboardtest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessboardtest.cpp" border = "1"><tr><td><code>
#include "chessboard.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include "chessboardfactory.h"<br/>
#include "chessbitboard.h"<br/>
#include "chessmoves.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chesspiece.h"<br/>
#include "chesspiecefactory.h"<br/>
#include "chessplayer.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chessscore.h"<br/>
#include "trace.h"<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Chess::Board::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;//Testing boost::shared_ptr&lt;Chess::Board&gt; exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::Board");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Chess::Bitribi::Chess::Board::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Chess::Move::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Board operator=");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; c(BoardFactory::DeepCopy(*b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*b == *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c-&gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*b != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; d(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*c == *d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*b != *d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Board operator== with fresh boards");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; c(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*b == *c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c-&gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*b != *c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; d(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*c == *d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*b != *d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Board operator== with fresh boards");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; c(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*b == *c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c-&gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*b != *c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; d(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*c == *d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*b != *d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test GetMoves from initial position squares");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("Ra8 a6"),Player::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("Ra8 a6"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b1")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g1")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b8")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g8")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test GetVisibleSquares in the initial position");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const BitBoard c = b-&gt;GetVisibleSquares(Player::white);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("a1"))); assert(c.Get(SquareFactory::Create("a2"))); assert(c.Get(SquareFactory::Create("a3"))); assert(c.Get(SquareFactory::Create("a4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("b1"))); assert(c.Get(SquareFactory::Create("b2"))); assert(c.Get(SquareFactory::Create("b3"))); assert(c.Get(SquareFactory::Create("b4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("c1"))); assert(c.Get(SquareFactory::Create("c2"))); assert(c.Get(SquareFactory::Create("c3"))); assert(c.Get(SquareFactory::Create("c4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("d1"))); assert(c.Get(SquareFactory::Create("d2"))); assert(c.Get(SquareFactory::Create("d3"))); assert(c.Get(SquareFactory::Create("d4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("e1"))); assert(c.Get(SquareFactory::Create("e2"))); assert(c.Get(SquareFactory::Create("e3"))); assert(c.Get(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("f1"))); assert(c.Get(SquareFactory::Create("f2"))); assert(c.Get(SquareFactory::Create("f3"))); assert(c.Get(SquareFactory::Create("f4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("g1"))); assert(c.Get(SquareFactory::Create("g2"))); assert(c.Get(SquareFactory::Create("g3"))); assert(c.Get(SquareFactory::Create("g4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.Get(SquareFactory::Create("h1"))); assert(c.Get(SquareFactory::Create("h2"))); assert(c.Get(SquareFactory::Create("h3"))); assert(c.Get(SquareFactory::Create("h4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("a5"))); assert(!c.Get(SquareFactory::Create("a6"))); assert(!c.Get(SquareFactory::Create("a7"))); assert(!c.Get(SquareFactory::Create("a8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("b5"))); assert(!c.Get(SquareFactory::Create("b6"))); assert(!c.Get(SquareFactory::Create("b7"))); assert(!c.Get(SquareFactory::Create("b8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("c5"))); assert(!c.Get(SquareFactory::Create("c6"))); assert(!c.Get(SquareFactory::Create("c7"))); assert(!c.Get(SquareFactory::Create("c8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("d5"))); assert(!c.Get(SquareFactory::Create("d6"))); assert(!c.Get(SquareFactory::Create("d7"))); assert(!c.Get(SquareFactory::Create("d8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("e5"))); assert(!c.Get(SquareFactory::Create("e6"))); assert(!c.Get(SquareFactory::Create("e7"))); assert(!c.Get(SquareFactory::Create("e8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("f5"))); assert(!c.Get(SquareFactory::Create("f6"))); assert(!c.Get(SquareFactory::Create("f7"))); assert(!c.Get(SquareFactory::Create("f8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("g5"))); assert(!c.Get(SquareFactory::Create("g6"))); assert(!c.Get(SquareFactory::Create("g7"))); assert(!c.Get(SquareFactory::Create("g8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c.Get(SquareFactory::Create("h5"))); assert(!c.Get(SquareFactory::Create("h6"))); assert(!c.Get(SquareFactory::Create("h7"))); assert(!c.Get(SquareFactory::Create("h8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("e2 e3"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const BitBoard d = b-&gt;GetVisibleSquares(Player::black);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("a5"))); assert(d.Get(SquareFactory::Create("a6"))); assert(d.Get(SquareFactory::Create("a7"))); assert(d.Get(SquareFactory::Create("a8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("b5"))); assert(d.Get(SquareFactory::Create("b6"))); assert(d.Get(SquareFactory::Create("b7"))); assert(d.Get(SquareFactory::Create("b8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("c5"))); assert(d.Get(SquareFactory::Create("c6"))); assert(d.Get(SquareFactory::Create("c7"))); assert(d.Get(SquareFactory::Create("c8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("d5"))); assert(d.Get(SquareFactory::Create("d6"))); assert(d.Get(SquareFactory::Create("d7"))); assert(d.Get(SquareFactory::Create("d8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("e5"))); assert(d.Get(SquareFactory::Create("e6"))); assert(d.Get(SquareFactory::Create("e7"))); assert(d.Get(SquareFactory::Create("e8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("f5"))); assert(d.Get(SquareFactory::Create("f6"))); assert(d.Get(SquareFactory::Create("f7"))); assert(d.Get(SquareFactory::Create("f8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("g5"))); assert(d.Get(SquareFactory::Create("g6"))); assert(d.Get(SquareFactory::Create("g7"))); assert(d.Get(SquareFactory::Create("g8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(d.Get(SquareFactory::Create("h5"))); assert(d.Get(SquareFactory::Create("h6"))); assert(d.Get(SquareFactory::Create("h7"))); assert(d.Get(SquareFactory::Create("h8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("a1"))); assert(!d.Get(SquareFactory::Create("a2"))); assert(!d.Get(SquareFactory::Create("a3"))); assert(!d.Get(SquareFactory::Create("a4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("b1"))); assert(!d.Get(SquareFactory::Create("b2"))); assert(!d.Get(SquareFactory::Create("b3"))); assert(!d.Get(SquareFactory::Create("b4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("c1"))); assert(!d.Get(SquareFactory::Create("c2"))); assert(!d.Get(SquareFactory::Create("c3"))); assert(!d.Get(SquareFactory::Create("c4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("d1"))); assert(!d.Get(SquareFactory::Create("d2"))); assert(!d.Get(SquareFactory::Create("d3"))); assert(!d.Get(SquareFactory::Create("d4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("e1"))); assert(!d.Get(SquareFactory::Create("e2"))); assert(!d.Get(SquareFactory::Create("e3"))); assert(!d.Get(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("f1"))); assert(!d.Get(SquareFactory::Create("f2"))); assert(!d.Get(SquareFactory::Create("f3"))); assert(!d.Get(SquareFactory::Create("f4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("g1"))); assert(!d.Get(SquareFactory::Create("g2"))); assert(!d.Get(SquareFactory::Create("g3"))); assert(!d.Get(SquareFactory::Create("g4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!d.Get(SquareFactory::Create("h1"))); assert(!d.Get(SquareFactory::Create("h2"))); assert(!d.Get(SquareFactory::Create("h3"))); assert(!d.Get(SquareFactory::Create("h4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test valid moves in the initial position");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a2 a3", "a2 a4", "b2 b3", "b2 b4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"c2 c3", "c2 c4", "d2 d3", "d2 d4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"e2 e3", "e2 e4", "f2 f3", "f2 f4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"g2 g3", "g2 g4", "h2 h3", "h2 h4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Nb1 a3", "Nb1 c3", "Ng1 f3", "Ng1 h3",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1-0", "0-1", "1/2-1/2"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[b](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b1")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("Qd1 d8"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("Qd1 d7"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g1")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h7")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(Player::white).size() == 20);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;IsCheck(Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;IsCheckmate(Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test moves in the initial position (short notation)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a3", "a4", "b3", "b4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"c3", "c4", "d3", "d4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"e3", "e4", "f3", "f4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"g3", "g4", "h3", "h4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Na3", "Nc3", "Nf3", "Nh3"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[b](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test a Pawn on the board at e2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ribi::Chess::Board::Pieces v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"e2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"d3"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"f3")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::Create(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDoMove(MoveFactory::Create("e2 e3"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDoMove(MoveFactory::Create("e2 e4"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDoMove(MoveFactory::Create("e2xf3"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("e2xd3"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test a Pawn on the board at e2, blocked by an opponent");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ribi::Chess::Board::Pieces v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"e2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"e3")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::Create(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("e2 e3"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("e2 e4"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test a Pawn on the board at h4, blocked by an opponent");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ribi::Chess::Board::Pieces v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"h4"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"h5")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::Create(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("h4 h5"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test a Knight on the board at d4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ribi::Chess::Board::Pieces v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('N',Color::white,"d4"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"c6"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"e6")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b(BoardFactory::Create(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDoMove(MoveFactory::Create("Nd4 b5"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDoMove(MoveFactory::Create("Nd4 f5"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(MoveFactory::Create("Nd4xc6"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDoMove(MoveFactory::Create("Nd4xe6"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test valid moves for black after 1. e2 e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a7 a6", "a7 a5", "b7 b6", "b7 b5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"c7 c6", "c7 c5", "d7 d6", "d7 d5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"e7 e6", "e7 e5", "f7 f6", "f7 f5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"g7 g6", "g7 g5", "h7 h6", "h7 h5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Nb8 a6", "Nb8 c6", "Ng8 f6", "Ng8 h6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1-0", "0-1", "1/2-1/2"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[b](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::black)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b8")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g8")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h8")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h7")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(Player::black).size() == 20);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;IsCheck(Player::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;IsCheckmate(Player::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test valid moves for white after 1. e2 e4 e7 e5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("e7 e5"),Player::black);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a2 a3", "a2 a4", "b2 b3", "b2 b4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"c2 c3", "c2 c4", "d2 d3", "d2 d4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Ke1 e2","f2 f3", "f2 f4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"g2 g3", "g2 g4", "h2 h3", "h2 h4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Nb1 a3", "Nb1 c3", "Ng1 f3", "Ng1 h3",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bf1 e2", "Bf1 d3", "Bf1 c4", "Bf1 b5", "Bf1 a6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Qd1 e2", "Qd1 f3", "Qd1 g4", "Qd1 h5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1-0", "0-1", "1/2-1/2"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[b](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b1")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d1")).size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e1")).size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f1")).size() == 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g1")).size() == 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h1")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("a2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("b2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("c2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("d2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("e4")).size() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("f2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("g2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(SquareFactory::Create("h2")).size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoves(Player::white).size() == 29);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;IsCheck(Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;IsCheckmate(Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Board copy constructor");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;GetPiece(SquareFactory::Create("e2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetPiece(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; c(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*b == *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetPiece(SquareFactory::Create("e2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;GetPiece(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c-&gt;GetPiece(SquareFactory::Create("e2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( c-&gt;GetPiece(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("e7 e5"),Player::black);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*b != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;GetPiece(SquareFactory::Create("e5")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetPiece(SquareFactory::Create("e7")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!c-&gt;GetPiece(SquareFactory::Create("e5")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( c-&gt;GetPiece(SquareFactory::Create("e7")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test EmptyBetween on single piece");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Pieces pieces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('K',Color::white,"b2")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create(pieces));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("a1"),SquareFactory::Create("c1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("c1"),SquareFactory::Create("a1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("a1"),SquareFactory::Create("a3")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("a3"),SquareFactory::Create("a1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;EmptyBetween(SquareFactory::Create("a1"),SquareFactory::Create("c3")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;EmptyBetween(SquareFactory::Create("c3"),SquareFactory::Create("a1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;EmptyBetween(SquareFactory::Create("b1"),SquareFactory::Create("b3")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;EmptyBetween(SquareFactory::Create("b3"),SquareFactory::Create("b1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;EmptyBetween(SquareFactory::Create("a2"),SquareFactory::Create("c2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;EmptyBetween(SquareFactory::Create("c2"),SquareFactory::Create("a2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("d1"),SquareFactory::Create("d8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("d8"),SquareFactory::Create("d1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("a4"),SquareFactory::Create("h4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("h4"),SquareFactory::Create("a4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("b5"),SquareFactory::Create("f1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("f1"),SquareFactory::Create("b5")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test EmptyBetween after 3rd move of white in Kasparov against the World game");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Pieces pieces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('R',Color::white,"a1"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('N',Color::white,"c3"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('B',Color::white,"c1"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('Q',Color::white,"d1"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('K',Color::white,"e1"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('B',Color::white,"b5"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('N',Color::white,"g1"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('R',Color::white,"h1"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"a2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"b2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"c2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"d2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"e4"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"f2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"g2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::white,"h2"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('R',Color::black,"a8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('N',Color::black,"b8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('B',Color::black,"c8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('Q',Color::black,"d8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('K',Color::black,"e8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('B',Color::black,"f8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('N',Color::black,"g8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('R',Color::black,"h8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"a7"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"b7"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"c5"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"d6"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"e7"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"f7"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"g7"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('.',Color::black,"h7")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create(pieces));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("b5"),SquareFactory::Create("e8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("e8"),SquareFactory::Create("b5")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("b5"),SquareFactory::Create("f1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;EmptyBetween(SquareFactory::Create("f1"),SquareFactory::Create("b5")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test IsCheck from setup 1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Pieces pieces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('K',Color::white,"a1"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('K',Color::black,"h8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('R',Color::white,"a8"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create('R',Color::black,"h1")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create(pieces));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;IsCheck(Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;IsCheck(Player::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test IsCheck by playing");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("e2 e4"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("d7 d6"),Player::black);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test that the move ending is check can be done");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(MoveFactory::Create("Bf1 b5+"),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Do the move ending is check");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create("Bf1 b5+"),Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test that the board detects check");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;IsCheck(Player::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test invalid moves in the initial position");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a7 a6", "a7 a5", "b7 b5", "b7 b5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"c7 c6", "c7 c5", "d7 d5", "d7 d5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"e7 e6", "e7 e5", "f7 f5", "f7 f5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"g7 g6", "g7 g5", "h7 h5", "h7 h5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Nb8 a6", "Nb8 c6", "Ng8 f6", "Ng8 h6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a2xa3", "a2 a4+", "b2 b3#", "b2xb4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"c2 c3+", "c2 c4#", "d2 d3e.p.", "d2xd4e.p.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0-0", "0-0-0", "O-O", "O-O-O",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[b](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move { MoveFactory::Create(s) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDoMove(Chess::MoveFactory::Create(s),Player::white));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Fools mate");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetGameFoolsMate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[b](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDoMove(s) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b.Score());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b.Score().IsWhiteWinner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Shephards mate");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player player = Player::white;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetGameShephardsMate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&amp;b,&amp;player](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDoMove(Chess::MoveFactory::Create(s),player)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(Chess::MoveFactory::Create(s),player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create(s),player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player = (player == Player::white ? Player::black : Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Kasparov Versus The World match");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; b(BoardFactory::Create());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player player = Player::white;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetGameKasparovVersusTheWorld();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDoMove(Chess::MoveFactory::Create(s),player)) { TRACE(s);&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDoMove(Chess::MoveFactory::Create(s),player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;DoMove(MoveFactory::Create(s),player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player = (player == Player::white ? Player::black : Player::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessboardwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessboardwidget.cpp" border = "1"><tr><td><code>
#include "chessboardwidget.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;exception&gt;<br/>
<br/>
#ifdef MXE_SUPPORTS_THREADS<br/>
#include &lt;future&gt;<br/>
#endif<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "chessboard.h"<br/>
#include "chessboardfactory.h"<br/>
#include "chesspiece.h"<br/>
#include "chessplayer.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chesssquareselector.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chesswidget.h"<br/>
#include "rectangle.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
//ribi::Chess::BoardWidget::BoardWidget()<br/>
//&nbsp;&nbsp;: Chess::Widget(Rect(0,0,0,0))<br/>
//{<br/>
//&nbsp;&nbsp;assert(!"Should not call this function");<br/>
//&nbsp;&nbsp;throw std::logic_error("Must not call ribi::Chess::BoardWidget::BoardWidget()");<br/>
//}<br/>
<br/>
ribi::Chess::BoardWidget::BoardWidget(boost::shared_ptr&lt;Chess::Board&gt; board,const Rect&amp; geometry)<br/>
&nbsp;&nbsp;: Chess::ChessWidget(geometry),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_board(board),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_player(Player::white)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;ribi::Chess::BoardWidget::Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
bool ribi::Chess::BoardWidget::CanDoMove(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; from,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; to) const noexcept<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; move {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MoveFactory::Create(from,to)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;//A Widget can do a move if it is valid for one of the two players<br/>
&nbsp;&nbsp;return this-&gt;GetBoard()-&gt;CanDoMove(move,Chess::Player::white)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| this-&gt;GetBoard()-&gt;CanDoMove(move,Chess::Player::black);<br/>
}<br/>
<br/>
bool ribi::Chess::BoardWidget::CanSelect(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; square) const noexcept<br/>
{<br/>
&nbsp;&nbsp;//A BoardWidget can always select a Piece<br/>
&nbsp;&nbsp;return this-&gt;GetBoard()-&gt;GetPiece(square).get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&amp;&amp; this-&gt;GetBoard()-&gt;GetPiece(square)-&gt;GetColor()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;== this-&gt;GetActivePlayer();<br/>
}<br/>
<br/>
void ribi::Chess::BoardWidget::Click(const boost::shared_ptr&lt;const Chess::Square&gt; square) noexcept<br/>
{<br/>
<br/>
&nbsp;&nbsp;m_selector-&gt;Click(square,this-&gt;CanSelect(square));<br/>
<br/>
&nbsp;&nbsp;//Moves will only occur when there is both a cursor and a selected square<br/>
&nbsp;&nbsp;if (!m_selector-&gt;GetSelected()) return;<br/>
<br/>
&nbsp;&nbsp;//Construct all possible Moves<br/>
&nbsp;&nbsp;assert(m_selector-&gt;GetSelected());<br/>
&nbsp;&nbsp;const Chess::Board::PiecePtr piece = m_board-&gt;GetPiece(m_selector-&gt;GetSelected());<br/>
&nbsp;&nbsp;TRACE(square-&gt;ToStr());<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!piece)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(m_selector-&gt;GetSelected()-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; *this-&gt;GetBoard() &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Move&gt; move;<br/>
&nbsp;&nbsp;for (int i=0; i!=32; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= boost::lexical_cast&lt;std::string&gt;(piece-&gt;GetNameChar())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ m_selector-&gt;GetSelected()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ( (i / 1) % 2 ? " " : "x")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ m_selector-&gt;GetCursor()-&gt;ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;switch ( (i / 2) % 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0: s += "e.p."; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1: s += "+"; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: s += "#"; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3: break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; maybe_move {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MoveFactory::Create(s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this-&gt;CanDoMove(maybe_move-&gt;From(),maybe_move-&gt;To())) move = maybe_move;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (!move) return;<br/>
&nbsp;&nbsp;assert(m_board-&gt;CanDoMove(move,m_player));<br/>
&nbsp;&nbsp;m_board-&gt;DoMove(move,m_player);<br/>
<br/>
&nbsp;&nbsp;m_signal_graphic_changed();<br/>
}<br/>
<br/>
<br/>
void ribi::Chess::BoardWidget::DoMove(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt;,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt;)<br/>
{<br/>
&nbsp;&nbsp;assert(!"TODO");<br/>
}<br/>
<br/>
<br/>
void ribi::Chess::BoardWidget::SetActivePlayer(const Player player)<br/>
{<br/>
&nbsp;&nbsp;if (player != m_player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_player = player;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_selector.reset(new SquareSelector);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::Chess::BoardWidget::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;//Testing Chess::Piece exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; board { BoardFactory::Create() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::ChessWidget&gt; w(new BoardWidget(board,Rect(0,0,100,100)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ClickPixel(-1,-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ClickPixel(1000,1000);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Rect geometry(0,0,100,100);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const boost::shared_ptr&lt;Chess::Board&gt; board { BoardFactory::Create() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::BoardWidget&gt; widget(new Chess::BoardWidget(board,geometry));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(widget-&gt;GetSelector()-&gt;GetCursor() == Chess::SquareSelector::GetInitialSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetCursor()-&gt;GetFile() == Chess::SquareSelector::GetInitialSquare()-&gt;GetFile());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetCursor()-&gt;GetRank() == Chess::SquareSelector::GetInitialSquare()-&gt;GetRank());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(widget-&gt;GetSelector()-&gt;GetCursor()-&gt;GetFile() == Chess::File("a"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(widget-&gt;GetSelector()-&gt;GetCursor()-&gt;GetRank() == Chess::Rank("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check clicking: cursor will always follow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0;x!=8;++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int y=0;y!=8;++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(File(x),Rank(y))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create(File(x),Rank(y)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check selection: Board::Widget will select any Chess::Piece, Board::Game only those of the active player<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on own piece, selecting it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("b1"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on empty square, selection is removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("d4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("d4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(*widget-&gt;GetSelector()-&gt;GetSelected() == Chess::Square("b1"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on own piece again, selecting it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("b1"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on selected square, undoing selection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on square with black piece. Note: a Widget can select every piece<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("h8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("h8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("h8"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Playing e7-e5 must succeed for a Board, must fail for a Game<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( board-&gt;GetPiece(SquareFactory::Create("e7")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!board-&gt;GetPiece(SquareFactory::Create("e5")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e7"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e7"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("e7"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e5"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e5"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!board-&gt;GetPiece(SquareFactory::Create("e7")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( board-&gt;GetPiece(SquareFactory::Create("e5")));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Playing e2-e4 must succeed for both Board and Game<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( board-&gt;GetPiece(SquareFactory::Create("e2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!board-&gt;GetPiece(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("e2"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!board-&gt;GetPiece(SquareFactory::Create("e2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( board-&gt;GetPiece(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.join();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessboardwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessboardwidget.h" border = "1"><tr><td><code>
#ifndef CHESSBOARDWIDGET_H<br/>
#define CHESSBOARDWIDGET_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#include "chesswidget.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///Chess::BoardWidget is a Chess::Widget to interact with a Chess::Board<br/>
struct BoardWidget : public Chess::ChessWidget<br/>
{<br/>
&nbsp;&nbsp;BoardWidget(boost::shared_ptr&lt;Chess::Board&gt; board, const Rect&amp; geometry);<br/>
<br/>
&nbsp;&nbsp;///Can do a move?<br/>
&nbsp;&nbsp;bool CanDoMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; to) const noexcept;<br/>
&nbsp;&nbsp;//bool CanDoMove(const Chess::Move&amp; move) const;<br/>
<br/>
&nbsp;&nbsp;///Can the square be selected?<br/>
&nbsp;&nbsp;bool CanSelect(const boost::shared_ptr&lt;const Chess::Square&gt; square) const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Respond to a click<br/>
&nbsp;&nbsp;void Click(const boost::shared_ptr&lt;const Chess::Square&gt; square) noexcept;<br/>
<br/>
&nbsp;&nbsp;///Do a move<br/>
&nbsp;&nbsp;void DoMove(const boost::shared_ptr&lt;const Chess::Square&gt; from, const boost::shared_ptr&lt;const Chess::Square&gt; to);<br/>
<br/>
&nbsp;&nbsp;///Get which Player is active<br/>
&nbsp;&nbsp;Player GetActivePlayer() const { return m_player; }<br/>
<br/>
&nbsp;&nbsp;///Get the Chess::Board this Chess::Widget works on<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; GetBoard() const { return m_board; }<br/>
<br/>
&nbsp;&nbsp;///Set which Player is active<br/>
&nbsp;&nbsp;void SetActivePlayer(const Player player);<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;~BoardWidget() {}<br/>
<br/>
&nbsp;&nbsp;///The chessboard<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Board&gt; m_board;<br/>
<br/>
&nbsp;&nbsp;///The active Player<br/>
&nbsp;&nbsp;Player m_player;<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(BoardWidget* x);<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSBOARDWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesscastling.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesscastling.cpp" border = "1"><tr><td><code>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include &lt;exception&gt;<br/>
<br/>
#include "chesscastling.h"<br/>
#include "trace.h"<br/>
<br/>
bool ribi::Chess::CanStrToCastling(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;return boost::xpressive::regex_match(s,GetCastlingRegex());<br/>
}<br/>
<br/>
const std::string ribi::Chess::CastlingToStr(const Castling castling)<br/>
{<br/>
&nbsp;&nbsp;switch (castling)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Castling::kingside: return "O-O";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Castling::queenside: return "O-O-O";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Unknown Castling");<br/>
}<br/>
<br/>
const boost::xpressive::sregex ribi::Chess::GetCastlingRegex()<br/>
{<br/>
&nbsp;&nbsp;static const boost::xpressive::sregex r {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::xpressive::sregex::compile("(0|O)-(0|O)(-(0|O))?(\\+|\\#)?")<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;return r;<br/>
}<br/>
<br/>
ribi::Chess::Castling ribi::Chess::StrToCastling(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;assert(CanStrToCastling(s));<br/>
&nbsp;&nbsp;if (s.substr(0,3) == "O-O"&nbsp;&nbsp; || s.substr(0,3) == "0-0"&nbsp;&nbsp;) return Castling::kingside;<br/>
&nbsp;&nbsp;if (s.substr(0,5) == "O-O-O" || s.substr(0,5) == "0-0-0") return Castling::queenside;<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(!"Cannot convert std::string to Castling");<br/>
&nbsp;&nbsp;throw std::logic_error("Cannot convert std::string to Castling");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesscastling.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesscastling.h" border = "1"><tr><td><code>
#ifndef CHESSCASTLING_H<br/>
#define CHESSCASTLING_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/xpressive/xpressive.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
enum class Castling { kingside, queenside };<br/>
<br/>
const std::string CastlingToStr(const Castling castling);<br/>
bool CanStrToCastling(const std::string&amp; s);<br/>
const boost::xpressive::sregex GetCastlingRegex();<br/>
//const Square GetCastlingKingSquare(const Castling castling, const Player player);<br/>
//const Square GetCastlingRookSquare(const Castling castling, const Player player);<br/>
Castling StrToCastling(const std::string&amp; s);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSCASTLING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesscolor.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesscolor.cpp" border = "1"><tr><td><code>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include "chesscolor.h"<br/>
#include "chessplayer.h"<br/>
#include "trace.h"<br/>
<br/>
const std::string ribi::Chess::ColorToStr(const Color c)<br/>
{<br/>
&nbsp;&nbsp;switch (c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::black&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: return "black";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::indeterminate: return "indeterminate";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::white&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: return "white";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::red&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: return "red";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::green&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: return "green";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::blue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : return "blue";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Chess::ColorToStr: unimplemented Color");<br/>
}<br/>
<br/>
ribi::Chess::Player ribi::Chess::ColorToPlayer(const Color c)<br/>
{<br/>
&nbsp;&nbsp;switch (c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::white: return Player::white;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Color::black: return Player::black;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: break;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;TRACE(c);<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(!"Cannot convert color to player");<br/>
&nbsp;&nbsp;throw std::logic_error("Cannot convert color to player");<br/>
}<br/>
<br/>
const std::string ribi::Chess::ColorVersion::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.1";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::ColorVersion::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-02-07: version 1.1: added colors red, green and blue for selection"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Chess::operator&lt;&lt;(std::ostream&amp; os, const Color c)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; ColorToStr(c);<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
<br/>
bool ribi::Chess::operator==(const Color color, const Player player)<br/>
{<br/>
&nbsp;&nbsp;switch (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::black: return color == Color::black;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::white: return color == Color::white;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return false;<br/>
}<br/>
<br/>
bool ribi::Chess::operator==(const Player player, const Color color)<br/>
{<br/>
&nbsp;&nbsp;return color == player;<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Color color, const Player player)<br/>
{<br/>
&nbsp;&nbsp;return !(color == player);<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Player player, const Color color)<br/>
{<br/>
&nbsp;&nbsp;return !(color == player);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesscolor.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesscolor.h" border = "1"><tr><td><code>
#ifndef CHESSCOLOR_H<br/>
#define CHESSCOLOR_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
//C++0x enum class<br/>
enum class Color<br/>
{<br/>
&nbsp;&nbsp;black, white, indeterminate, red, green, blue<br/>
};<br/>
<br/>
struct ColorVersion<br/>
{<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
};<br/>
<br/>
const std::string ColorToStr(const Color c);<br/>
Player ColorToPlayer(const Color c);<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Color c);<br/>
<br/>
bool operator==(const Color color, const Player player);<br/>
bool operator==(const Player player, const Color color);<br/>
bool operator!=(const Color color, const Player player);<br/>
bool operator!=(const Player player, const Color color);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSCOLOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessfile.cpp" border = "1"><tr><td><code>
#include "chessfile.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#ifdef MXE_SUPPORTS_THREADS<br/>
#include &lt;thread&gt;<br/>
#endif<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::File::File(const std::string&amp; s)<br/>
&nbsp;&nbsp;: m_s(s)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (m_s.empty()) throw std::logic_error("Chess files cannot be empty");<br/>
&nbsp;&nbsp;if (m_s.size() != 1) throw std::logic_error("Chess files consist of exactly one character");<br/>
&nbsp;&nbsp;const char c = m_s[0];<br/>
&nbsp;&nbsp;if (c &lt; 'a' || c &gt; 'h') throw std::logic_error("Chess files go from a to and including h");<br/>
&nbsp;&nbsp;assert(c &gt;= 'a');<br/>
&nbsp;&nbsp;assert(c &lt;= 'h');<br/>
}<br/>
<br/>
ribi::Chess::File::File(const int x)<br/>
&nbsp;&nbsp;: m_s(IntToCharToStr(x))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (x &lt; 0 || x &gt; 7) throw std::logic_error("X coordinats go from 0 to and including 7");<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const char c = m_s[0];<br/>
&nbsp;&nbsp;assert(m_s.size() == 1);<br/>
&nbsp;&nbsp;assert(c &gt;= 'a');<br/>
&nbsp;&nbsp;assert(c &lt;= 'h');<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const std::string ribi::Chess::File::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::File::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
std::string ribi::Chess::File::IntToCharToStr(const int x)<br/>
{<br/>
&nbsp;&nbsp;char c = 'a' + x;<br/>
&nbsp;&nbsp;return boost::lexical_cast&lt;std::string&gt;(c);<br/>
}<br/>
<br/>
void ribi::Chess::File::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::File");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test valid Files from std::string");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = {"a","b","c","d","e","f","g","h"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),[](const std::string&amp; s) { Chess::File tmp(s); } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test valid Files from int");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = {0,1,2,3,4,5,6,7};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),[](const int&amp; i) { File tmp(i); } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test invalid Files from std::string");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = {"A","i"," ","H","I","1","7","aa","1a","a1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File tmp(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test invalid Files from int");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = {-1,8,10,11,100,111};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const int&amp; i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File tmp(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test individual files intimately");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File f("a");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToStr() == "a");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File f("h");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToStr() == "h");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToInt() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File f(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToStr() == "a");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File f(7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToStr() == "h");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(f.ToInt() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
int ribi::Chess::File::ToInt() const<br/>
{<br/>
&nbsp;&nbsp;const char c = m_s[0];<br/>
&nbsp;&nbsp;assert(c &gt;= 'a');<br/>
&nbsp;&nbsp;assert(c &lt;= 'h');<br/>
<br/>
&nbsp;&nbsp;const int value = c - 'a';<br/>
&nbsp;&nbsp;assert(value &gt;= 0);<br/>
&nbsp;&nbsp;assert(value &lt; 8);<br/>
&nbsp;&nbsp;return value;<br/>
}<br/>
<br/>
/*<br/>
File&amp; ribi::Chess::File::operator++()<br/>
{<br/>
&nbsp;&nbsp;assert(m_s != std::string("h"));<br/>
&nbsp;&nbsp;m_s = IntToCharToStr(++this-&gt;ToInt());<br/>
&nbsp;&nbsp;return *this;<br/>
}<br/>
<br/>
File&amp; ribi::Chess::File::operator--()<br/>
{<br/>
&nbsp;&nbsp;assert(m_s != std::string("a"));<br/>
&nbsp;&nbsp;m_s = IntToCharToStr(--this-&gt;ToInt());<br/>
&nbsp;&nbsp;return *this;<br/>
}<br/>
*/<br/>
<br/>
bool ribi::Chess::operator==(const File&amp; lhs, const File&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return lhs.ToStr() == rhs.ToStr();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessfile.h" border = "1"><tr><td><code>
#ifndef CHESSFILE_H<br/>
#define CHESSFILE_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///A File is the x-coordinat on a Board<br/>
struct File<br/>
{<br/>
&nbsp;&nbsp;///Create a file from its single-character string, e.g. "b" for file b<br/>
&nbsp;&nbsp;explicit File(const std::string&amp; x);<br/>
<br/>
&nbsp;&nbsp;///Create a file from its x-coordinat, e.g. 1 for file b<br/>
&nbsp;&nbsp;explicit File(const int x);<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Convert a File to its single-character string.<br/>
&nbsp;&nbsp;///For example, file "a" has x-coordinat 0<br/>
&nbsp;&nbsp;const std::string&amp; ToStr() const { return m_s; }<br/>
<br/>
&nbsp;&nbsp;///Convert a File to its x-coordinat.<br/>
&nbsp;&nbsp;///For example, file 'a' has x-coordinat 0<br/>
&nbsp;&nbsp;int ToInt() const;<br/>
<br/>
&nbsp;&nbsp;//Increment file, e.g. from 'a' to'b'<br/>
&nbsp;&nbsp;//File&amp; operator++();<br/>
<br/>
&nbsp;&nbsp;//Decrement file, e.g. from 'b' to'a'<br/>
&nbsp;&nbsp;//File&amp; operator--();<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;const std::string m_s;<br/>
<br/>
<br/>
&nbsp;&nbsp;///Convert 0 to 'a', 1 to 'b', etc...<br/>
&nbsp;&nbsp;static std::string IntToCharToStr(const int x);<br/>
};<br/>
<br/>
bool operator==(const File&amp; lhs, const File&amp; rhs);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSFILE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessfwd.h" border = "1"><tr><td><code>
<br/>
#ifndef CHESSFWD_H<br/>
#define CHESSFWD_H<br/>
<br/>
///Contains the CppChess forward declarations<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
struct BitBoard;<br/>
struct Board;<br/>
struct BoardFactory;<br/>
struct BoardWidget;<br/>
enum class Castling;<br/>
enum class Color;<br/>
struct File;<br/>
struct Game;<br/>
struct GameWidget;<br/>
struct Move;<br/>
struct MoveFactory;<br/>
struct Piece;<br/>
struct PieceBishop;<br/>
struct PieceKing;<br/>
struct PieceKnight;<br/>
struct PiecePawn;<br/>
struct PieceQueen;<br/>
struct PieceRook;<br/>
enum class Player;<br/>
struct Rank;<br/>
struct Score;<br/>
struct Square;<br/>
struct SquareFactory;<br/>
struct SquareSelector;<br/>
<br/>
} //~namespace Chess<br/>
<br/>
struct Widget;<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessgame.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessgame.cpp" border = "1"><tr><td><code>
#include "chessgame.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
<br/>
<br/>
#include "chessbitboard.h"<br/>
#include "chessboard.h"<br/>
#include "chessboardfactory.h"<br/>
#include "chessfile.h"<br/>
#include "chessmove.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chesspiece.h"<br/>
#include "chessplayer.h"<br/>
#include "chessrank.h"<br/>
#include "chessscore.h"<br/>
#include "chesssquare.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::Game::Game()<br/>
&nbsp;&nbsp;: m_board(BoardFactory::Create()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_moves{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_score{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
/*<br/>
ribi::Chess::Game::Game(const Game&amp; other)<br/>
&nbsp;&nbsp;: m_moves(other.m_moves)<br/>
{<br/>
&nbsp;&nbsp;TRACE_FUNC();<br/>
&nbsp;&nbsp;//Copy all Pieces<br/>
&nbsp;&nbsp;//m_pieces = other.m_pieces;<br/>
&nbsp;&nbsp;std::for_each(other.m_pieces.begin(), other.m_pieces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;m_pieces](const PiecePtr&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PiecePtr q(p-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_pieces.push_back(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;///Copy the Score if the game has ended by agreement (instead of by checkmate)<br/>
&nbsp;&nbsp;if (other.Score()) m_score.reset(new Chess::Score(*other.Score().get()));<br/>
<br/>
&nbsp;&nbsp;assert(*this == other);<br/>
}<br/>
*/<br/>
<br/>
bool ribi::Chess::Game::CanDoGame(const std::vector&lt;std::string&gt;&amp; moves)<br/>
{<br/>
&nbsp;&nbsp;const int n_moves = static_cast&lt;int&gt;(moves.size());<br/>
&nbsp;&nbsp;return CanDoGameUntil(moves) == n_moves;<br/>
}<br/>
<br/>
int ribi::Chess::Game::CanDoGameUntil(const std::vector&lt;std::string&gt;&amp; moves)<br/>
{<br/>
&nbsp;&nbsp;Chess::Game game;<br/>
&nbsp;&nbsp;const int n_moves = static_cast&lt;int&gt;(moves.size());<br/>
&nbsp;&nbsp;for (int i=0; i!=n_moves; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = moves[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!game.CanDoMove(MoveFactory::Create(s))) return i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;game.DoMove(Chess::MoveFactory::Create(s));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return n_moves;<br/>
}<br/>
<br/>
bool ribi::Chess::Game::CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanDoMove(move,GetActivePlayer());<br/>
}<br/>
<br/>
void ribi::Chess::Game::DoMove(const boost::shared_ptr&lt;const Move&gt; move)<br/>
{<br/>
&nbsp;&nbsp;//assert(CanDoMove(move));<br/>
&nbsp;&nbsp;assert(!m_score);<br/>
&nbsp;&nbsp;m_moves.push_back(move);<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PiecePtr p = GetPiece(move-&gt;From());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;DoMove(move);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else if (move-&gt;Score())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_score = move-&gt;Score();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const ribi::Chess::Game::PiecePtr ribi::Chess::Game::GetPiece(const boost::shared_ptr&lt;const Square&gt; square) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetPiece(square);<br/>
}<br/>
<br/>
ribi::Chess::Player ribi::Chess::Game::GetActivePlayer() const<br/>
{<br/>
&nbsp;&nbsp;return m_moves.size() % 2 ? Player::black : Player::white;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::Game::GetMoves() const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetMoves(GetActivePlayer());<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::Game::GetMoves(const boost::shared_ptr&lt;const Square&gt; square) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetMoves(square);<br/>
}<br/>
<br/>
const std::string ribi::Chess::Game::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "0.1";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Game::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-06-16: version 0.1: initial seperation from Chess::Board"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const ribi::Chess::BitBoard ribi::Chess::Game::GetVisibleSquares() const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetVisibleSquares(GetActivePlayer());<br/>
}<br/>
<br/>
bool ribi::Chess::Game::IsCheck() const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;IsCheck(GetActivePlayer());<br/>
}<br/>
<br/>
bool ribi::Chess::Game::IsCheckmate() const<br/>
{<br/>
&nbsp;&nbsp;///TODO<br/>
&nbsp;&nbsp;return IsCheck();<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Score&gt;&amp; ribi::Chess::Game::Score() const<br/>
{<br/>
&nbsp;&nbsp;return m_score;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Chess::Game::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing Game");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Game();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
<br/>
bool ribi::Chess::operator==(const Game&amp; lhs, const Game&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;if (!lhs.Score() &amp;&amp;&nbsp;&nbsp;rhs.Score()) return false;<br/>
&nbsp;&nbsp;if ( lhs.Score() &amp;&amp; !rhs.Score()) return false;<br/>
&nbsp;&nbsp;if ( lhs.Score() &amp;&amp;&nbsp;&nbsp;rhs.Score())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*lhs.Score() != *rhs.Score()) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return *lhs.m_board == *rhs.m_board;<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Game&amp; lhs, const Game&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessgame.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessgame.h" border = "1"><tr><td><code>
#ifndef CHESSGAME_H<br/>
#define CHESSGAME_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
//#include &lt;set&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/logic/tribool.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#include "chesscolor.h"<br/>
#include "chessmove.h"<br/>
//#include "chesspiece.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Chess {<br/>
<br/>
struct Piece;<br/>
<br/>
///Chess::Board is a class for a chessboard without gaming rules.<br/>
///Rules that handled by Chess::Board normally are:<br/>
/// - en passant<br/>
/// - castling<br/>
///Chess::Game is the class that uses a Chess::Board and adds these rules<br/>
///Rules that must be handled by Chess::Game are:<br/>
/// - keeping track of which player's turn it is<br/>
/// - determining a winner or draw<br/>
struct Game<br/>
{<br/>
&nbsp;&nbsp;typedef boost::shared_ptr&lt;Piece&gt; PiecePtr;<br/>
&nbsp;&nbsp;typedef std::vector&lt;PiecePtr&gt; Pieces;<br/>
<br/>
&nbsp;&nbsp;///Construct a Game in the initial position<br/>
&nbsp;&nbsp;Game();<br/>
<br/>
&nbsp;&nbsp;///Copy a Game<br/>
&nbsp;&nbsp;//Game(const Game&amp; other);<br/>
<br/>
&nbsp;&nbsp;///Check if a Move is valid to play in the current context<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const;<br/>
<br/>
&nbsp;&nbsp;///Check if this game can be played<br/>
&nbsp;&nbsp;static bool CanDoGame(const std::vector&lt;std::string&gt;&amp; moves);<br/>
&nbsp;&nbsp;static int CanDoGameUntil(const std::vector&lt;std::string&gt;&amp; moves);<br/>
<br/>
&nbsp;&nbsp;///Do a Move that is valid to play in the current context<br/>
&nbsp;&nbsp;void DoMove(const boost::shared_ptr&lt;const Move&gt; move);<br/>
<br/>
&nbsp;&nbsp;//bool IsVisible(const Square&amp; s);<br/>
<br/>
&nbsp;&nbsp;//const GameVisibleType GetInSight(const Piece::Color color) const;<br/>
&nbsp;&nbsp;//const Piece GetPiece(const int x, const int y) const;<br/>
<br/>
&nbsp;&nbsp;///Whose turn is it?<br/>
&nbsp;&nbsp;Player GetActivePlayer() const;<br/>
<br/>
&nbsp;&nbsp;///Get the Chess::Board used for the Game<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; GetBoard() const { return m_board; }<br/>
<br/>
&nbsp;&nbsp;///Collect all moves that are possible for a Piece at a certain Square.<br/>
&nbsp;&nbsp;///If there is no Piece at that Square, no Moves are returned<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves(const boost::shared_ptr&lt;const Square&gt; square) const;<br/>
<br/>
&nbsp;&nbsp;///Collect all moves that are possible<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const;<br/>
<br/>
&nbsp;&nbsp;///Find a Piece at a certain Square.<br/>
&nbsp;&nbsp;///If there is no Piece at that Square, an empty Piece is returned<br/>
&nbsp;&nbsp;const PiecePtr GetPiece(const boost::shared_ptr&lt;const Square&gt; square) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Get all squares that are visible by a player with the requested color.<br/>
&nbsp;&nbsp;///If the Color is set to Color::indeterminate, both players' sights<br/>
&nbsp;&nbsp;///are returned<br/>
&nbsp;&nbsp;const BitBoard GetVisibleSquares() const;<br/>
<br/>
&nbsp;&nbsp;///Is, in the current position, the active player being in check?<br/>
&nbsp;&nbsp;bool IsCheck() const;<br/>
<br/>
&nbsp;&nbsp;///Is the current position the active player being in checkmate?<br/>
&nbsp;&nbsp;bool IsCheckmate() const;<br/>
<br/>
&nbsp;&nbsp;///The Score if the game has ended by agreement (instead of by checkmate)<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Score&gt;&amp; Score() const;<br/>
<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Tests the Game class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///The Chess::Board used for the Game<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Board&gt; m_board;<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;const Chess::Move&gt; &gt; m_moves;<br/>
<br/>
&nbsp;&nbsp;///The Score if the game has ended by agreement (instead of by checkmate)<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Score&gt; m_score;<br/>
<br/>
&nbsp;&nbsp;friend bool operator==(const Game&amp; lhs, const Game&amp; rhs);<br/>
};<br/>
<br/>
bool operator==(const Game&amp; lhs, const Game&amp; rhs);<br/>
bool operator!=(const Game&amp; lhs, const Game&amp; rhs);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSGAME_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessgamewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessgamewidget.cpp" border = "1"><tr><td><code>
#include "chessgamewidget.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;string&gt;<br/>
#ifdef MXE_SUPPORTS_THREADS<br/>
#include &lt;thread&gt;<br/>
#endif<br/>
<br/>
#include "chessboard.h"<br/>
#include "chessgame.h"<br/>
#include "chesspiece.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chesssquareselector.h"<br/>
#include "chessmovefactory.h"<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
//ribi::Chess::GameWidget::GameWidget()<br/>
//&nbsp;&nbsp;: Chess::Widget(Rect(0,0,0,0))<br/>
//{<br/>
//&nbsp;&nbsp;assert(!"Should not call this function");<br/>
//&nbsp;&nbsp;throw std::logic_error("Must not call ribi::Chess::GameWidget::GameWidget()");<br/>
//}<br/>
<br/>
ribi::Chess::GameWidget::GameWidget(boost::shared_ptr&lt;Chess::Game&gt; game, const Rect&amp; geometry)<br/>
&nbsp;&nbsp;: ChessWidget(geometry), m_game(game)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;ribi::Chess::GameWidget::Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::Chess::GameWidget::Click(const boost::shared_ptr&lt;const Square&gt; square)<br/>
{<br/>
&nbsp;&nbsp;m_selector-&gt;Click(square,this); //BUG ?<br/>
<br/>
&nbsp;&nbsp;//Moves will only occur when there is both a cursor and a selected square<br/>
&nbsp;&nbsp;if (!m_selector-&gt;GetSelected()) return;<br/>
<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::Chess::Square&gt; from {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_selector-&gt;GetSelected()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const ribi::Chess::Square&gt; to {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_selector-&gt;GetCursor()<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;if (this-&gt;CanDoMove(from,to))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DoMove(from,to);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Chess::GameWidget::CanDoMove(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; from,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; to) const noexcept<br/>
{<br/>
&nbsp;&nbsp;//Construct all possible Moves<br/>
&nbsp;&nbsp;assert(m_selector-&gt;GetSelected());<br/>
&nbsp;&nbsp;const Chess::Board::PiecePtr piece = m_game-&gt;GetBoard()-&gt;GetPiece(from);<br/>
&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Move&gt; move;<br/>
&nbsp;&nbsp;for (int i=0; i!=32; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= boost::lexical_cast&lt;std::string&gt;(piece-&gt;GetNameChar())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ from-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ( (i / 1) % 2 ? " " : "x")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ to-&gt;ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;switch ( (i / 2) % 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0: s += "e.p."; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1: s += "+"; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: s += "#"; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3: break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; maybe_move {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MoveFactory::Create(s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_game-&gt;CanDoMove(maybe_move)) move = maybe_move;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (!move) return false;<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
void ribi::Chess::GameWidget::DoMove(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; from,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; to)<br/>
{<br/>
&nbsp;&nbsp;assert(CanDoMove(from,to));<br/>
<br/>
&nbsp;&nbsp;//Construct all possible Moves<br/>
&nbsp;&nbsp;const Chess::Board::PiecePtr piece = m_game-&gt;GetBoard()-&gt;GetPiece(from);<br/>
&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Move&gt; move;<br/>
&nbsp;&nbsp;for (int i=0; i!=32; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= boost::lexical_cast&lt;std::string&gt;(piece-&gt;GetNameChar())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ from-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ ( (i / 1) % 2 ? " " : "x")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ to-&gt;ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;switch ( (i / 2) % 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0: s += "e.p."; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1: s += "+"; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: s += "#"; break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3: break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; maybe_move {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MoveFactory::Create(s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_game-&gt;CanDoMove(maybe_move)) move = maybe_move;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (move) break;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(move);<br/>
<br/>
&nbsp;&nbsp;m_game-&gt;DoMove(move);<br/>
<br/>
&nbsp;&nbsp;m_signal_graphic_changed();<br/>
<br/>
}<br/>
<br/>
void ribi::Chess::GameWidget::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;//Testing Chess::Piece exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Game&gt; game(new Chess::Game);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::ChessWidget&gt; w(new GameWidget(game,Rect(0,0,100,100)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ClickPixel(-1,-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;ClickPixel(1000,1000);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Game&gt; game(new Chess::Game);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Chess::GameWidget&gt; widget(new Chess::GameWidget(game,Rect(0,0,100,100)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetCursor()-&gt;GetFile() == Chess::File("a"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetCursor()-&gt;GetRank() == Chess::Rank("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check clicking: cursor will always follow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0;x!=8;++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int y=0;y!=8;++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File(x),Rank(y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check selection: Board::Widget will select any Chess::Piece, Board::Game only those of the active player<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on own piece, selecting it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create("b1")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("b1"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on empty square, selected piece remains<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("d4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("d4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("b1"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on selected square, undoing selection<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("b1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Click on enemy square, Chess::Board will select it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("h8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("g8"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Playing e7-e5 must succeed for a Board, must fail for a Game<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e7")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e5")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e7"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e7"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e5"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e5"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e7")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e5")));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Playing e2-e4 must succeed for both Board and Game<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e2"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetSelected() == *SquareFactory::Create("e2"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget-&gt;Click(SquareFactory::Create("e4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*widget-&gt;GetSelector()-&gt;GetCursor() == *SquareFactory::Create("e4"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!widget-&gt;GetSelector()-&gt;GetSelected());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert( game-&gt;GetBoard()-&gt;GetPiece(SquareFactory::Create("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessgamewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessgamewidget.h" border = "1"><tr><td><code>
#ifndef CHESSGAMEWIDGET_H<br/>
#define CHESSGAMEWIDGET_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
//#include "chessboard.h"<br/>
#include "chessfwd.h"<br/>
#include "chesswidget.h"<br/>
//struct Rect;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Chess {<br/>
<br/>
///Chess::GameWidget is a Chess::Widget to interact with a Chess::Game<br/>
struct GameWidget : public Chess::ChessWidget<br/>
{<br/>
&nbsp;&nbsp;GameWidget(boost::shared_ptr&lt;Chess::Game&gt; game, const Rect&amp; geometry);<br/>
<br/>
&nbsp;&nbsp;///Can do a move?<br/>
&nbsp;&nbsp;bool CanDoMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; to<br/>
&nbsp;&nbsp;) const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Respond to a click<br/>
&nbsp;&nbsp;void Click(const boost::shared_ptr&lt;const Square&gt; square);<br/>
<br/>
&nbsp;&nbsp;///Do a move<br/>
&nbsp;&nbsp;void DoMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; to<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;///Get the Chess::Board this Chess::Widget works on<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Game&gt; GetGame() const { return m_game; }<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;~GameWidget() {}<br/>
<br/>
&nbsp;&nbsp;///The chessboard<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Game&gt; m_game;<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(GameWidget* x);<br/>
};<br/>
<br/>
} //~ namespace Chess<br/>
} //~ namespace ribi<br/>
<br/>
#endif // CHESSGAMEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesshelper.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesshelper.cpp" border = "1"><tr><td><code>
#include "chesshelper.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesshelper.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesshelper.h" border = "1"><tr><td><code>
#ifndef CHESSHELPER_H<br/>
#define CHESSHELPER_H<br/>
<br/>
#include &lt;set&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
///Help adding constness a bit<br/>
template &lt;class T&gt;<br/>
const std::vector&lt;boost::shared_ptr&lt;const T&gt; &gt; AddConst(<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;T&gt; &gt; v)<br/>
{<br/>
&nbsp;&nbsp;return std::vector&lt;boost::shared_ptr&lt;const T&gt; &gt;(v.begin(),v.end());<br/>
}<br/>
<br/>
///Help adding constness a bit<br/>
template &lt;class T&gt;<br/>
const std::set&lt;boost::shared_ptr&lt;const T&gt; &gt; AddConst(<br/>
&nbsp;&nbsp;const std::set&lt;boost::shared_ptr&lt;T&gt; &gt; v)<br/>
{<br/>
&nbsp;&nbsp;return std::set&lt;boost::shared_ptr&lt;const T&gt; &gt;(v.begin(),v.end());<br/>
}<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSHELPER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessmove.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessmove.cpp" border = "1"><tr><td><code>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;boost/xpressive/xpressive.hpp&gt;<br/>
<br/>
#include "chesscastling.h"<br/>
#include "chessmove.h"<br/>
#include "chessmoves.h"<br/>
#include "chesspiece.h"<br/>
#include "chesspiecefactory.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chessscore.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::Move::Move(const std::string&amp; s)<br/>
&nbsp;&nbsp;: m_from(ParseFrom(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_capture(ParseIsCapture(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_castling(ParseIsCastling(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_check(ParseIsCheck(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_checkmate(ParseIsCheckmate(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_en_passant(ParseIsEnPassant(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_promotion(ParseIsPromotion(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_piece(ParsePiece(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_piece_promotion(ParsePiecePromotion(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_score(ParseScore(s)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_str(s),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to(ParseTo(s))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("std::string to parse is empty");<br/>
&nbsp;&nbsp;if (!m_to &amp;&amp; !m_is_castling &amp;&amp; (!m_score))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string error = "Chess::ribi::Chess::Move::Move exception: m_to not initialized for non-castling non-score move " + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(error.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (!m_piece &amp;&amp; !m_is_castling &amp;&amp; !m_score)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string error = "Chess::ribi::Chess::Move::Move exception: m_piece not initialized for non-castling non-score move " + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(error.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (m_is_en_passant &amp;&amp; !m_is_capture) throw std::logic_error("Chess::ribi::Chess::Move::Move exception: every en passant capture is a capture");<br/>
<br/>
&nbsp;&nbsp;if (boost::xpressive::regex_search(s,boost::xpressive::sregex::compile("e.p.")) &amp;&amp; !m_is_en_passant)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string error = "Chess::ribi::Chess::Move::Move exception: move is an invalid en passant move: " + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(error.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (m_piece)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_is_castling)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("Chess::ribi::Chess::Move::Move exception: m_piece cannot be initialized in a castling move");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_score) throw std::logic_error("Chess::ribi::Chess::Move::Move exception: m_piece cannot be initialized in a score move");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool valid = m_piece-&gt;CanDoMove(MoveFactory::DeepCopy(*this));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!valid)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string t = "Move " + s + " invalid for " + m_piece-&gt;GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error(t.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt;<br/>
&nbsp;&nbsp;ribi::Chess::Move::GetRegexMatches(<br/>
&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;const boost::xpressive::sregex&amp; r)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;boost::xpressive::sregex_iterator cur(s.begin(),s.end(),r);<br/>
&nbsp;&nbsp;boost::xpressive::sregex_iterator end;<br/>
&nbsp;&nbsp;for( ; cur != end; ++cur )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::xpressive::smatch&amp; what = *cur;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(what[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::Chess::Move::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.1";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Move::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-11-08: version 1.1: replaced Boost.Regex by Boost.Xpressive"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
bool ribi::Chess::Move::IsCastling() const<br/>
{<br/>
&nbsp;&nbsp;assert(!m_is_castling || CanStrToCastling(m_str));<br/>
&nbsp;&nbsp;return m_is_castling;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Square&gt; ribi::Chess::Move::ParseFrom(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Square&gt; square;<br/>
&nbsp;&nbsp;static const boost::xpressive::sregex r { boost::xpressive::sregex::compile("[a-h][1-8]") };<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = GetRegexMatches(s,r);<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!(v.size() &lt;= 2)) { TRACE(s); }<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(v.size() &lt;= 2);<br/>
&nbsp;&nbsp;if (v.size() == 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;square = SquareFactory::Create(v[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//square.reset(new Square(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return square;<br/>
}<br/>
<br/>
bool ribi::Chess::Move::ParseIsCapture(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;//if (s.empty()) throw std::logic_error("ribi::Chess::Move::ParseIsCapture exception: move must not be empty");<br/>
&nbsp;&nbsp;//return boost::regex_match(s,boost::regex("[a-h]\\d?x.*"));<br/>
&nbsp;&nbsp;static const boost::xpressive::sregex r {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::xpressive::sregex::compile("(B|K|N|Q|R)?([a-h])?([1-8])?x[a-h][1-8](e.p.)?(\\+|\\#)?")<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;return boost::xpressive::regex_match(s,r);<br/>
}<br/>
<br/>
bool ribi::Chess::Move::ParseIsCastling(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;return CanStrToCastling(s);<br/>
<br/>
&nbsp;&nbsp;//return s == "0-0" || s == "O-O" || s == "O-O+" || s == "0-0-0" || s == "O-O-O"|| s == "O-O-O+";<br/>
}<br/>
<br/>
bool ribi::Chess::Move::ParseIsCheck(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::IsCheck(const std::string&amp; s) exception: move must not be empty");<br/>
&nbsp;&nbsp;return s[s.size() - 1] == '+';<br/>
}<br/>
<br/>
bool ribi::Chess::Move::ParseIsCheckmate(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::IsCheckmate(const std::string&amp; s) exception: move must not be empty");<br/>
&nbsp;&nbsp;return s[s.size() - 1] == '#';<br/>
}<br/>
<br/>
bool ribi::Chess::Move::ParseIsEnPassant(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;static const boost::xpressive::sregex r {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::xpressive::sregex::compile("([a-h][4-5])x[a-h][3-6]e.p.(\\+|\\#)?")<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;if (!boost::xpressive::regex_match(s,r)) return false;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Square&gt; from = ParseFrom(s);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Square&gt; to = ParseTo(s);<br/>
&nbsp;&nbsp;assert(from);<br/>
&nbsp;&nbsp;assert(to);<br/>
&nbsp;&nbsp;if (std::abs(from-&gt;GetFile().ToInt() - to-&gt;GetFile().ToInt()) != 1) return false;<br/>
&nbsp;&nbsp;if (std::abs(from-&gt;GetRank().ToInt() - to-&gt;GetRank().ToInt()) != 1) return false;<br/>
&nbsp;&nbsp;if (from-&gt;GetRank() == Chess::Rank("5") &amp;&amp; to-&gt;GetRank() == Chess::Rank("6")) return true;<br/>
&nbsp;&nbsp;if (from-&gt;GetRank() == Chess::Rank("4") &amp;&amp; to-&gt;GetRank() == Chess::Rank("3")) return true;<br/>
&nbsp;&nbsp;return false;<br/>
}<br/>
<br/>
bool ribi::Chess::Move::ParseIsPromotion(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;static const boost::xpressive::sregex r {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::xpressive::sregex::compile("([a-h][1-8](x|\\s)?)?[a-h][1|8][B|N|Q|R](\\+|\\#)?")<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;return boost::xpressive::regex_match(s,r);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::Move::ParsePiece(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::ParsePiece exception: move must not be empty");<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Piece&gt; p = PieceFactory::CreateFromMove(s);<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::Move::ParsePiecePromotion(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::Move::ParsePiece exception: move must not be empty");<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Piece&gt; p = PieceFactory::CreateFromPromotion(s);<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Score&gt; ribi::Chess::Move::ParseScore(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Score&gt; p;<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Chess::Score * const ptr = new Chess::Score(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.reset(ptr);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Move is not a Score, no problem<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Square&gt; ribi::Chess::Move::ParseTo(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;static const boost::xpressive::sregex r {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::xpressive::sregex::compile("[a-h][1-8]")<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Square&gt; square;<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = GetRegexMatches(s,r);<br/>
&nbsp;&nbsp;if (!v.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() &lt;= 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string t = v[ v.size() - 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;square = SquareFactory::Create(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return square;<br/>
}<br/>
<br/>
const std::string ribi::Chess::Move::ToStr() const<br/>
{<br/>
&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;if (m_piece)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!dynamic_cast&lt;PiecePawn*&gt;(m_piece.get()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += m_piece-&gt;GetNameChar();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_from)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += m_from-&gt;ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += "??";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_is_capture)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += "x";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += " ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m_to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += m_to-&gt;ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += "??";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (m_is_castling) s += m_str;<br/>
&nbsp;&nbsp;if (m_is_check) s+= "+";<br/>
&nbsp;&nbsp;if (m_is_checkmate) s+= "#";<br/>
&nbsp;&nbsp;if (m_is_en_passant) s+= "e.p.";<br/>
&nbsp;&nbsp;if (m_is_promotion) s+= "(promotion)";<br/>
&nbsp;&nbsp;if (m_piece_promotion) s+= m_piece_promotion-&gt;GetNameChar();<br/>
&nbsp;&nbsp;if (m_score) s+= m_score-&gt;ToStr();<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
bool ribi::Chess::operator==(const Move&amp; lhs, const Move&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;if (static_cast&lt;bool&gt;(lhs.m_from) != static_cast&lt;bool&gt;(rhs.m_from)) return false;<br/>
&nbsp;&nbsp;if (lhs.m_from)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rhs.m_from);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*lhs.m_from != *rhs.m_from) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (lhs.m_is_capture&nbsp;&nbsp;!= rhs.m_is_capture) return false;<br/>
&nbsp;&nbsp;if (lhs.m_is_castling != rhs.m_is_castling) return false;<br/>
&nbsp;&nbsp;if (lhs.m_is_check != rhs.m_is_check) return false;<br/>
&nbsp;&nbsp;if (lhs.m_is_checkmate != rhs.m_is_checkmate) return false;<br/>
&nbsp;&nbsp;if (lhs.m_is_en_passant != rhs.m_is_en_passant) return false;<br/>
&nbsp;&nbsp;if (lhs.m_is_promotion != rhs.m_is_promotion) return false;<br/>
&nbsp;&nbsp;if (static_cast&lt;bool&gt;(lhs.m_piece) != static_cast&lt;bool&gt;(rhs.m_piece)) return false;<br/>
&nbsp;&nbsp;if (lhs.m_piece)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rhs.m_piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*lhs.m_piece != *rhs.m_piece) return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (static_cast&lt;bool&gt;(lhs.m_piece_promotion) != static_cast&lt;bool&gt;(rhs.m_piece_promotion)) return false;<br/>
&nbsp;&nbsp;if (lhs.m_piece_promotion)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rhs.m_piece_promotion);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*lhs.m_piece_promotion != *rhs.m_piece_promotion) return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (static_cast&lt;bool&gt;(lhs.m_score) != static_cast&lt;bool&gt;(rhs.m_score)) return false;<br/>
&nbsp;&nbsp;if (lhs.m_piece_promotion)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rhs.m_score);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*lhs.m_score!= *rhs.m_score) return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Move&amp; lhs, const Move&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Chess::operator&lt;&lt;(std::ostream&amp; os,const Move&amp; m)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; m.GetStr();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessmove.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessmove.h" border = "1"><tr><td><code>
#ifndef CHESSMOVE_H<br/>
#define CHESSMOVE_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;memory&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include &lt;boost/xpressive/xpressive_fwd.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#include "chesssquare.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
struct Move<br/>
{<br/>
&nbsp;&nbsp;///Parses a Move from char* (not yet supported by GCC)<br/>
&nbsp;&nbsp;///Move(const char * const s) : Move(std::string(s)) {}<br/>
<br/>
&nbsp;&nbsp;///Obtain the square the piece is moving from<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; From() const noexcept { return m_from; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the Move in the notational form it was contructed with<br/>
&nbsp;&nbsp;const std::string&amp; GetStr() const { return m_str; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Obtain whether this move is a capture<br/>
&nbsp;&nbsp;bool IsCapture() const { return m_is_capture; };<br/>
<br/>
&nbsp;&nbsp;///Obtain whether this move performs a castling<br/>
&nbsp;&nbsp;bool IsCastling() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain whether this move results in a check<br/>
&nbsp;&nbsp;bool IsCheck() const { return m_is_check; };<br/>
<br/>
&nbsp;&nbsp;///Obtain whether this move results in a checkmate<br/>
&nbsp;&nbsp;bool IsCheckmate() const { return m_is_checkmate; };<br/>
<br/>
&nbsp;&nbsp;///Obtain whether this move is an en passant capture<br/>
&nbsp;&nbsp;bool IsEnPassant() const { return m_is_en_passant; }<br/>
<br/>
&nbsp;&nbsp;///Obtain whether this move results in a promotion<br/>
&nbsp;&nbsp;bool IsPromotion() const { return m_is_promotion; };<br/>
<br/>
&nbsp;&nbsp;///Parse the string to obtain the square the piece is moving from, when known<br/>
&nbsp;&nbsp;///Examples:<br/>
&nbsp;&nbsp;///* 'a2 a3' results in a Square with 'a2'<br/>
&nbsp;&nbsp;///* 'a3' results in an empty Square<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Chess::Square&gt; ParseFrom(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain whether the string is a capture<br/>
&nbsp;&nbsp;static bool ParseIsCapture(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain whether the string results in a check<br/>
&nbsp;&nbsp;static bool ParseIsCheck(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain whether the string is a castling<br/>
&nbsp;&nbsp;static bool ParseIsCastling(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain whether the string results in a checkmate<br/>
&nbsp;&nbsp;static bool ParseIsCheckmate(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain whether the string results in an en passant capture<br/>
&nbsp;&nbsp;static bool ParseIsEnPassant(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain whether the string is a move that results in a promotion<br/>
&nbsp;&nbsp;static bool ParseIsPromotion(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Parse the Piece from a string<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Chess::Piece&gt; ParsePiece(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Parse the Piece the pawn is promoted to from a string<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Chess::Piece&gt; ParsePiecePromotion(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Parse the Score from a string<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Chess::Score&gt; ParseScore(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Parse the Square the Piece is moving to<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Chess::Square&gt; ParseTo(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain the piece type<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Piece&gt; Piece() const { return m_piece; };<br/>
<br/>
&nbsp;&nbsp;///Obtain the piece type promoted to<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Piece&gt; PiecePromotion() const { return m_piece_promotion; };<br/>
<br/>
&nbsp;&nbsp;///Obtain the score<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Score&gt; Score() const { return m_score; };<br/>
<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Tests all moves that are potentially valid,<br/>
&nbsp;&nbsp;///that is, there must be situations possible<br/>
&nbsp;&nbsp;///in which these are valid.<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Obtain the square the piece is moving to<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; To() const noexcept { return m_to; }<br/>
<br/>
&nbsp;&nbsp;///Convert a Move to its long notational form<br/>
&nbsp;&nbsp;const std::string ToStr() const;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///Parses a Move from std::string.<br/>
&nbsp;&nbsp;explicit Move(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;~Move() {}<br/>
<br/>
&nbsp;&nbsp;#define CHESS_MOVE_NOT_USE_CONST<br/>
&nbsp;&nbsp;#ifndef CHESS_MOVE_NOT_USE_CONST<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; m_from;<br/>
&nbsp;&nbsp;const bool m_is_capture;<br/>
&nbsp;&nbsp;const bool m_is_castling;<br/>
&nbsp;&nbsp;const bool m_is_check;<br/>
&nbsp;&nbsp;const bool m_is_checkmate;<br/>
&nbsp;&nbsp;const bool m_is_promotion;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Piece&gt; m_piece;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Piece&gt; m_piece_promotion;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Score&gt; m_score;<br/>
&nbsp;&nbsp;const std::string m_str;<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Chess::Square&gt; m_to;<br/>
&nbsp;&nbsp;#else<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Square&gt; m_from;<br/>
&nbsp;&nbsp;bool m_is_capture;<br/>
&nbsp;&nbsp;bool m_is_castling;<br/>
&nbsp;&nbsp;bool m_is_check;<br/>
&nbsp;&nbsp;bool m_is_checkmate;<br/>
&nbsp;&nbsp;bool m_is_en_passant;<br/>
&nbsp;&nbsp;bool m_is_promotion;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Piece&gt; m_piece;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Piece&gt; m_piece_promotion;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Score&gt; m_score;<br/>
<br/>
&nbsp;&nbsp;///The Move in the same notational form as given in the contructor<br/>
&nbsp;&nbsp;std::string m_str;<br/>
<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Chess::Square&gt; m_to;<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;///Obtain all matches of regex in a certain string<br/>
&nbsp;&nbsp;//From http://www.richelbilderbeek.nl/CppGetRegexMatches.htm<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetRegexMatches(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::xpressive::sregex&amp; r);<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Move *);<br/>
<br/>
&nbsp;&nbsp;friend class MoveFactory;<br/>
&nbsp;&nbsp;friend bool operator==(const Move&amp; lhs, const Move&amp; rhs);<br/>
<br/>
};<br/>
<br/>
bool operator==(const Move&amp; lhs, const Move&amp; rhs);<br/>
bool operator!=(const Move&amp; lhs, const Move&amp; rhs);<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os,const Move&amp; m);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSMOVE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessmovefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessmovefactory.cpp" border = "1"><tr><td><code>
#include "chessmovefactory.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include "chessmove.h"<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Move&gt; ribi::Chess::MoveFactory::Create(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::Chess::Move&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Move(s)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Move&gt; ribi::Chess::MoveFactory::Create(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; from,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; to)<br/>
{<br/>
&nbsp;&nbsp;const std::string s = from-&gt;ToStr() + " " + to-&gt;ToStr();<br/>
&nbsp;&nbsp;return Create(s);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Move&gt; ribi::Chess::MoveFactory::DeepCopy(const Move&amp; move)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::Chess::Move&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create(move.ToStr())<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessmovefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessmovefactory.h" border = "1"><tr><td><code>
#ifndef CHESSMOVEFACTORY_H<br/>
#define CHESSMOVEFACTORY_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
struct MoveFactory<br/>
{<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Move&gt; Create(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Move&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Chess::Square&gt; to);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Move&gt; DeepCopy(const Move&amp; move);<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSMOVEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessmoves.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessmoves.cpp" border = "1"><tr><td><code>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include "chessmoves.h"<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetGameKasparovVersusTheWorld()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"e4"&nbsp;&nbsp; , "c5"&nbsp;&nbsp;, //1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nf3"&nbsp;&nbsp;, "d6"&nbsp;&nbsp;, //2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bb5+" , "Bd7" , //3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bxd7+", "Qxd7", //4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"c4"&nbsp;&nbsp; , "Nc6" , //5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nc3"&nbsp;&nbsp;, "Nf6" , //6<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0"&nbsp;&nbsp;, "g6"&nbsp;&nbsp;, //7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"d4"&nbsp;&nbsp; , "cxd4", //8<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nxd4" , "Bg7" , //9<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nde2" , "Qe6" , //10<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd5"&nbsp;&nbsp;, "Qxe4", //11<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nc7+" , "Kd7" , //12<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nxa8" , "Qxc4", //13<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nb6+" , "axb6", //14<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nc3"&nbsp;&nbsp;, "Ra8" , //15<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a4"&nbsp;&nbsp; , "Ne4" , //16<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nxe4" , "Qxe4", //17<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qb3"&nbsp;&nbsp;, "f5"&nbsp;&nbsp;, //18<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bg5"&nbsp;&nbsp;, "Qb4" , //19<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qf7"&nbsp;&nbsp;, "Be5" , //20<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"h3"&nbsp;&nbsp; , "Rxa4", //21<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rxa4" , "Qxa4", //22<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qxh7" , "Bxb2", //23<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qxg6" , "Qe4" , //24<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qf7"&nbsp;&nbsp;, "Bd4" , //25<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qb3"&nbsp;&nbsp;, "f4"&nbsp;&nbsp;, //26<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qf7"&nbsp;&nbsp;, "Be5" , //27<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"h4"&nbsp;&nbsp; , "b5"&nbsp;&nbsp;, //28<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"h5"&nbsp;&nbsp; , "Qc4" , //29<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qf5+" , "Qe6" , //30<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qxe6+", "Kxe6", //31<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"g3"&nbsp;&nbsp; , "fxg3", //32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"fxg3" , "b4"&nbsp;&nbsp;, //33<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bf4"&nbsp;&nbsp;, "Bd4+", //34<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kh1"&nbsp;&nbsp;, "b3"&nbsp;&nbsp;, //35<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"g4"&nbsp;&nbsp; , "Kd5" , //36<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"g5"&nbsp;&nbsp; , "e6"&nbsp;&nbsp;, //37<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"h6"&nbsp;&nbsp; , "Ne7" , //38<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd1"&nbsp;&nbsp;, "e5"&nbsp;&nbsp;, //39<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Be3"&nbsp;&nbsp;, "Kc4" , //40<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bxd4" , "exd4", //41<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kg2"&nbsp;&nbsp;, "b2"&nbsp;&nbsp;, //42<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kf3"&nbsp;&nbsp;, "Kc3" , //43<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"h7"&nbsp;&nbsp; , "Ng6" , //44<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ke4"&nbsp;&nbsp;, "Kc2" , //45<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rh1"&nbsp;&nbsp;, "d3"&nbsp;&nbsp;, //46<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kf5"&nbsp;&nbsp;, "b1Q" , //47<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rxb1" , "Kxb1", //48<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kxg6" , "d2"&nbsp;&nbsp;, //49<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"h8Q"&nbsp;&nbsp;, "d1Q" , //50<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qh7"&nbsp;&nbsp;, "b5"&nbsp;&nbsp;, //51<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kf6+" , "Kb2" , //52<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qh2+" , "Ka1" , //53<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qf4"&nbsp;&nbsp;, "b4"&nbsp;&nbsp;, //54<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qxb4" , "Qf3+", //55<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kg7"&nbsp;&nbsp;, "d5"&nbsp;&nbsp;, //56<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4+" , "Kb1" , //57<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"g6"&nbsp;&nbsp; , "Qe4" , //58<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qg1+" , "Kb2" , //59<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qf2+" , "Kc1" , //60<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kf6"&nbsp;&nbsp;, "d4"&nbsp;&nbsp;, //61<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"g7"&nbsp;&nbsp; , "1-0"&nbsp;&nbsp; //62<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetGameShephardsMate()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"e2 e4", "e7 e5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bf1 c4", "a7 a6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd1 f3", "a6 a5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qf3xf7#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidBishopMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ba1 b1", "Ba1 a2", "Ba1xb1", "Ba1xa2","Ba1 h2","Ba1 b8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ba1 a1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"1-0", "0-1", "1/2-1/2"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidCaptureMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidCastlingMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidEnPassantMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"d2 d3e.p.", "d2xd3e.p.", "d5 e6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6" ,"b5xa6" ,"a4xb3" ,"b4xa3" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6+","b5xa6+","a4xb3+","b4xa3+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6#","b5xa6#","a4xb3#","b4xa3#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5 b6e.p." ,"b5 a6e.p." ,"a4 b3e.p." ,"b4 a3e.p." ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5 b6e.p.+","b5 a6e.p.+","a4 b3e.p.+","b4 a3e.p.+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5 b6e.p.#","b5 a6e.p.#","a4 b3e.p.#","b4 a3e.p.#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a4xb5e.p." ,"b4xa5e.p." ,"a5xb2e.p." ,"b5xa2e.p." ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a4xb5e.p.+","b4xa5e.p.+","a5xb2e.p.+","b5xa2e.p.+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a4xb5e.p.#","b4xa5e.p.#","a5xb2e.p.#","b5xa2e.p.#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a6xb7e.p."<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidKingMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 b2", "Kd4 b3", "Kd4 b4", "Kd4 b5", "Kd4 b6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 c1", "Kd4 c2", "Kd4 c6", "Kd4 c7",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 d1", "Kd4 d2", "Kd4 d4", "Kd4 d6", "Kd4 d7",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 e1", "Kd4 e2", "Kd4 e6", "Kd4 e7",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 f2", "Kd4 f3", "Kd4 f4", "Kd4 f5", "Kd4 f6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ka1 h8", "Ka1xh8", "Ka1 a8", "Ka1 a8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"1-0", "0-1", "1/2-1/2"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidKnightMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4 d4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4 c3","Nd4 c4","Nd4 c5","Nd4 e3","Nd4 e4","Nd4 e5","Nd4 d3","Nd4 d5",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4 b2","Nd4 f2","Nd4 f6","Nd4 b6",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Na1 h3","Na1 h7","Na1 g1","Na1 g8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"1-0", "0-1", "1/2-1/2"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidPawnMoves(const Chess::Color&amp; color)<br/>
{<br/>
&nbsp;&nbsp;if (color == Color::indeterminate)<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2xa3", "a3xa2", "a2 b3", "a3 b2",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a6xb7e.p." , "b6xa7e.p." , "a3xb2e.p." , "b3xa2e.p.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a6xb7e.p.+", "b6xa7e.p.+", "a3xb2e.p.+", "b3xa2e.p.+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a6xb7e.p.#", "b6xa7e.p.#", "a3xb2e.p.#", "b3xa2e.p.#"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0" , "0-0-0" , "O-O" , "O-O-O" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0+", "0-0-0+", "O-O+", "O-O-O+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0#", "0-0-0#", "O-O#", "O-O-O#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"1-0", "0-1", "1/2-1/2"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;if (color == Color::white)<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2 a1Q", "a1Q", "e4 e3", "e4xd3e.p."<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;if (color == Color::black)<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; "a2 a3", "a2 a4", "a7 a8Q", "a8Q", "e4 e5", "h5xg6e.p."<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::vector&lt;std::string&gt;();<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidPromotionMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidQueenMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1 b7" , "Qa1 h2" , "Qa1 h7" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1 b7+", "Qa1 h2+", "Qa1 h7+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1 b7#", "Qa1 h2#", "Qa1 h7#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1xb7" , "Qa1xh2" , "Qa1xh7" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1xb7+", "Qa1xh2+", "Qa1xh7+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1xb7#", "Qa1xh2#", "Qa1xh7#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd5xe6e.p.", "Qd5xe6e.p.+", "Qd5xe6+e.p.","Qd5xe6e.p.#", "Qd5xe6#e.p.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0", "O-O"<br/>
<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetInvalidRookMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ra1 b8", "Ra1 h2", "Ra1 h8"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidBishopMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bd4 a1","Bd4 b2","Bd4 c3","Bd4 e5","Bd4 f6","Bd4 g7","Bd4 g7",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bd4 a1+","Bd4 b2+","Bd4 c3+","Bd4 e5+","Bd4 f6+","Bd4 g7+","Bd4 g7+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Bd4 a1#","Bd4 b2#","Bd4 c3#","Bd4 e5#","Bd4 f6#","Bd4 g7#","Bd4 g7#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ba1","Bb2","Bc3","Be5","Bf6","Bg7","Bg7",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ba1+","Bb2+","Bc3+","Be5+","Bf6+","Bg7+","Bg7+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ba1#","Bb2#","Bc3#","Be5#","Bf6#","Bg7#","Bg7#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidCaptureMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"axb3","axb3+","axb3#","a2xb3","a2xb3+","a2xb3#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Baxb3","Baxb3+","Baxb3#","Ba2xb3","Ba2xb3+","Ba2xb3#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p." ,"b5xa6e.p." ,"a4xb3e.p." ,"b4xa3e.p." ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p.+","b5xa6e.p.+","a4xb3e.p.+","b4xa3e.p.+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p.#","b5xa6e.p.#","a4xb3e.p.#","b4xa3e.p.#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidCastlingMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"0-0","0-0+","0-0#","0-0-0","0-0-0+","0-0-0#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"O-O","O-O+","O-O#","O-O-O","O-O-O+","O-O-O#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidCheckMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a3+","a2 a3+","a2xb3+","Ba3+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ba2 b3+","Ba2xb3+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"O-O+","O-O-O+","0-0+","0-0-0+", "Bf1 b5+"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidCheckmateMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidEnPassantMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p." ,"b5xa6e.p." ,"a4xb3e.p." ,"b4xa3e.p." ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p.+","b5xa6e.p.+","a4xb3e.p.+","b4xa3e.p.+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p.#","b5xa6e.p.#","a4xb3e.p.#","b4xa3e.p.#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidKingMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 c3","Kd4 c4","Kd4 c5","Kd4 d5","Kd4 e5","Kd4 e4","Kd4 e3","Kd4 d3",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4xc3","Kd4xc4","Kd4xc5","Kd4xd5","Kd4xe5","Kd4xe4","Kd4xe3","Kd4xd3",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 c3+","Kd4 c4+","Kd4 c5+","Kd4 d5+","Kd4 e5+","Kd4 e4+","Kd4 e3+","Kd4 d3+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4xc3+","Kd4xc4+","Kd4xc5+","Kd4xd5+","Kd4xe5+","Kd4xe4+","Kd4xe3+","Kd4xd3+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4 c3#","Kd4 c4#","Kd4 c5#","Kd4 d5#","Kd4 e5#","Kd4 e4#","Kd4 e3#","Kd4 d3#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kd4xc3#","Kd4xc4#","Kd4xc5#","Kd4xd5#","Kd4xe5#","Kd4xe4#","Kd4xe3#","Kd4xd3#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Kf1 g1"<br/>
&nbsp;&nbsp; };<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidKnightMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4 b3" ,"Nd4 c2" ,"Nd4 e2" ,"Nd4 f3" ,"Nd4 f5" ,"Nd4 e6" ,"Nd4 c6" ,"Nd4 b5" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4 b3+","Nd4 c2+","Nd4 e2+","Nd4 f3+","Nd4 f5+","Nd4 e6+","Nd4 c6+","Nd4 b5+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4 b3#","Nd4 c2#","Nd4 e2#","Nd4 f3#","Nd4 f5#","Nd4 e6#","Nd4 c6#","Nd4 b5#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4xb3" ,"Nd4xc2" ,"Nd4xe2" ,"Nd4xf3" ,"Nd4xf5" ,"Nd4xe6" ,"Nd4xc6" ,"Nd4xb5" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4xb3+","Nd4xc2+","Nd4xe2+","Nd4xf3+","Nd4xf5+","Nd4xe6+","Nd4xc6+","Nd4xb5+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nd4xb3#","Nd4xc2#","Nd4xe2#","Nd4xf3#","Nd4xf5#","Nd4xe6#","Nd4xc6#","Nd4xb5#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nb3" ,"Nc2" ,"Ne2" ,"Nf3" ,"Nf5" ,"Ne6" ,"Nc6" ,"Nb5" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nb3+","Nc2+","Ne2+","Nf3+","Nf5+","Ne6+","Nc6+","Nb5+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Nb3#","Nc2#","Ne2#","Nf3#","Nf5#","Ne6#","Nc6#","Nb5#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidPawnMoves(const Chess::Color&amp; color)<br/>
{<br/>
&nbsp;&nbsp;if (color == Color::indeterminate)<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2 a3" , "a2 a4" , "a2 a1Q" , "a7 a8Q" , "a3" , "a4" , "a8Q" , "a1Q",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2 a3+", "a2 a4+", "a2 a1Q+", "a7 a8Q+", "a3+", "a4+", "a8Q+", "a1Q+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2 a3#", "a2 a4#", "a2 a1Q#", "a7 a8Q#", "a3#", "a4#", "a8Q#", "a1Q#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2xb3" , "a3xb2" , "b3xa4" , "b3xc4" , "b3xa2" , "b3xc2" ,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2xb3+", "a3xb2+", "b3xa4+", "b3xc4+", "b3xa2+", "b3xc2+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2xb3#", "a3xb2#", "b3xa4#", "b3xc4#", "b3xa2#", "b3xc2#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"e4 e5", "e4 e3",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p." , "b5xa6e.p." , "a4xb3e.p." , "b4xa3e.p.",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p.+", "b5xa6e.p.+", "a4xb3e.p.+", "b4xa3e.p.+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a5xb6e.p.#", "b5xa6e.p.#", "a4xb3e.p.#", "b4xa3e.p.#"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;if (color == Color::white)<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2 a3", "a2 a4", "a7 a8Q", "a3", "a4", "a8Q", "e4 e5"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;if (color == Color::black)<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2 a1Q", "a1Q", "a3", "a4", "a7 a6", "a7 a5", "e4 e3"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;return std::vector&lt;std::string&gt;();<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidPromotionMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a8B","a8N","a8Q","a8R","a1B","a1N","a1Q","a1R",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a8B+","a8N+","a8Q+","a8R+","a1B+","a1N+","a1Q+","a1R+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a8B#","a8N#","a8Q#","a8R#","a1B#","a1N#","a1Q#","a1R#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a2 a1Q","a2 a1Q+","a2 a1Q#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidQueenMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 d1","Qd4 d2","Qd4 d3","Qd4 d5","Qd4 d6","Qd4 d7","Qd4 d8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 a4","Qd4 b4","Qd4 c4","Qd4 e4","Qd4 f4","Qd4 g4","Qd4 h4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4xd1","Qd4xd2","Qd4xd3","Qd4xd5","Qd4xd6","Qd4xd7","Qd4xd8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4xa4","Qd4xb4","Qd4xc4","Qd4xe4","Qd4xf4","Qd4xg4","Qd4xh4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 d1+","Qd4 d2+","Qd4 d3+","Qd4 d5+","Qd4 d6+","Qd4 d7+","Qd4 d8+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 a4+","Qd4 b4+","Qd4 c4+","Qd4 e4+","Qd4 f4+","Qd4 g4+","Qd4 h4+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4xd1+","Qd4xd2+","Qd4xd3+","Qd4xd5+","Qd4xd6+","Qd4xd7+","Qd4xd8+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4xa4+","Qd4xb4+","Qd4xc4+","Qd4xe4+","Qd4xf4+","Qd4xg4+","Qd4xh4+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 d1#","Qd4 d2#","Qd4 d3#","Qd4 d5#","Qd4 d6#","Qd4 d7#","Qd4 d8#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 a4#","Qd4 b4#","Qd4 c4#","Qd4 e4#","Qd4 f4#","Qd4 g4#","Qd4 h4#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4xd1#","Qd4xd2#","Qd4xd3#","Qd4xd5#","Qd4xd6#","Qd4xd7#","Qd4xd8#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4xa4#","Qd4xb4#","Qd4xc4#","Qd4xe4#","Qd4xf4#","Qd4xg4#","Qd4xh4#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd1","Qd2","Qd3","Qd5","Qd6","Qd7","Qd8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa4","Qb4","Qc4","Qe4","Qf4","Qg4","Qh4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd1+","Qd2+","Qd3+","Qd5+","Qd6+","Qd7+","Qd8+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa4+","Qb4+","Qc4+","Qe4+","Qf4+","Qg4+","Qh4+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd1#","Qd2#","Qd3#","Qd5#","Qd6#","Qd7#","Qd8#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa4#","Qb4#","Qc4#","Qe4#","Qf4#","Qg4#","Qh4#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 a1","Qd4 b2","Qd4 c3","Qd4 e5","Qd4 f6","Qd4 g7","Qd4 g7",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 a1+","Qd4 b2+","Qd4 c3+","Qd4 e5+","Qd4 f6+","Qd4 g7+","Qd4 g7+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qd4 a1#","Qd4 b2#","Qd4 c3#","Qd4 e5#","Qd4 f6#","Qd4 g7#","Qd4 g7#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1","Qb2","Qc3","Qe5","Qf6","Qg7","Qg7",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1+","Qb2+","Qc3+","Qe5+","Qf6+","Qg7+","Qg7+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Qa1#","Qb2#","Qc3#","Qe5#","Qf6#","Qg7#","Qg7#", "Qf7 f6"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetValidRookMoves()<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4 d1","Rd4 d2","Rd4 d3","Rd4 d5","Rd4 d6","Rd4 d7","Rd4 d8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4 a4","Rd4 b4","Rd4 c4","Rd4 e4","Rd4 f4","Rd4 g4","Rd4 h4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4xd1","Rd4xd2","Rd4xd3","Rd4xd5","Rd4xd6","Rd4xd7","Rd4xd8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4xa4","Rd4xb4","Rd4xc4","Rd4xe4","Rd4xf4","Rd4xg4","Rd4xh4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4 d1+","Rd4 d2+","Rd4 d3+","Rd4 d5+","Rd4 d6+","Rd4 d7+","Rd4 d8+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4 a4+","Rd4 b4+","Rd4 c4+","Rd4 e4+","Rd4 f4+","Rd4 g4+","Rd4 h4+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4xd1+","Rd4xd2+","Rd4xd3+","Rd4xd5+","Rd4xd6+","Rd4xd7+","Rd4xd8+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4xa4+","Rd4xb4+","Rd4xc4+","Rd4xe4+","Rd4xf4+","Rd4xg4+","Rd4xh4+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4 d1#","Rd4 d2#","Rd4 d3#","Rd4 d5#","Rd4 d6#","Rd4 d7#","Rd4 d8#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4 a4#","Rd4 b4#","Rd4 c4#","Rd4 e4#","Rd4 f4#","Rd4 g4#","Rd4 h4#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4xd1#","Rd4xd2#","Rd4xd3#","Rd4xd5#","Rd4xd6#","Rd4xd7#","Rd4xd8#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd4xa4#","Rd4xb4#","Rd4xc4#","Rd4xe4#","Rd4xf4#","Rd4xg4#","Rd4xh4#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd1","Rd2","Rd3","Rd5","Rd6","Rd7","Rd8",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ra4","Rb4","Rc4","Re4","Rf4","Rg4","Rh4",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd1+","Rd2+","Rd3+","Rd5+","Rd6+","Rd7+","Rd8+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ra4+","Rb4+","Rc4+","Re4+","Rf4+","Rg4+","Rh4+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Rd1#","Rd2#","Rd3#","Rd5#","Rd6#","Rd7#","Rd8#",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Ra4#","Rb4#","Rc4#","Re4#","Rf4#","Rg4#","Rh4#"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::string ribi::Chess::Moves::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Moves::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessmoves.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessmoves.h" border = "1"><tr><td><code>
#ifndef CHESSMOVES_H<br/>
#define CHESSMOVES_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
#include "chesscolor.h"<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///Moves is a stateless struct containing collections of moves<br/>
struct Moves<br/>
{<br/>
<br/>
&nbsp;&nbsp;//All moves in the<br/>
&nbsp;&nbsp;//'Kasparov against the world match'<br/>
&nbsp;&nbsp;//http://en.wikipedia.org/wiki/Kasparov_versus_the_World<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetGameKasparovVersusTheWorld();<br/>
<br/>
&nbsp;&nbsp;//Game in which white wins by checkmate in three moves<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetGameShephardsMate();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that can be performed by a bishop<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidBishopMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that involve a capture<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidCaptureMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid castling moves<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidCastlingMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that result in check<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidCheckMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that result in checkmate<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidCheckmateMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid en passant moves<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidEnPassantMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that can be performed by a king<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidKingMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that can be performed by a knight<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidKnightMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that can be performed by a pawn<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidPawnMoves(const Chess::Color&amp; color);<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that end in a promotion<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidPromotionMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that can be performed by a queen<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidQueenMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain invalid moves that can be performed by a rook<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetInvalidRookMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain all moves that can be performed by a bishop<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidBishopMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain moves that involve a capture<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidCaptureMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain all castling moves<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidCastlingMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain valid moves that result in check<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidCheckMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain valid moves that result in checkmate<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidCheckmateMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain en passant moves<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidEnPassantMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain all moves that can be performed by a king<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidKingMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain all moves that can be performed by a knight<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidKnightMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain all moves that can be performed by a pawn<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidPawnMoves(const Chess::Color&amp; color);<br/>
<br/>
&nbsp;&nbsp;///Obtain moves that end in a promotion<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidPromotionMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain all moves that can be performed by a queen<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidQueenMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain all moves that can be performed by a rook<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetValidRookMoves();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSMOVES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessmovetest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessmovetest.cpp" border = "1"><tr><td><code>
#include "chessmove.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include "chessmoves.h"<br/>
#include "chesspiece.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "trace.h"<br/>
<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Chess::Move::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square::Test();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::Move operators and copy constructors");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move m("a2 a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move n("a2 a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m == n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move m("a2 a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move n("a3 a2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m != n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move m("a2 a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move n(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m == n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::Move parsing of the square the piece is moving from");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseFrom( "a2 a3")==*SquareFactory::Create(Chess::File("a"),Chess::Rank("2"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseFrom("Bb3 c5")==*SquareFactory::Create(Chess::File("b"),Chess::Rank("3"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseFrom("Kc4 d4")==*SquareFactory::Create(Chess::File("c"),Chess::Rank("4"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseFrom("Nd5 e6")==*SquareFactory::Create(Chess::File("d"),Chess::Rank("5"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseFrom("Qe6 f7")==*SquareFactory::Create(Chess::File("e"),Chess::Rank("6"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseFrom("Rf7 h7")==*SquareFactory::Create(Chess::File("f"),Chess::Rank("7"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("a3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0-0+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("0-0-0#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O-O"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O-O+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseFrom("O-O-O#"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing valid capture moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidCaptureMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ribi::Chess::Move::ParseIsCapture(s)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCapture(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing valid castling moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidCastlingMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ribi::Chess::Move::ParseIsCastling(s)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCastling(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCastling("a3"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing valid moves that result in check");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidCheckMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ribi::Chess::Move::ParseIsCheck(s)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheck(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2 a3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2xb3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2 b3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2xb3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2 a3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("a2xb3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2 b3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("Ba2xb3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O-O"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("O-O-O#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheck("0-0-0#"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing valid moves that result in checkmate");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("a3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("a2 a3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("a2xb3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("Ba3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("Ba2 b3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("Ba2xb3#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("O-O#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("O-O-O#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("0-0#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsCheckmate("0-0-0#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2 a3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2xb3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2 b3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2xb3"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2 a3+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("a2xb3+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba3+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2 b3+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("Ba2xb3+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O-O"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("O-O-O+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsCheckmate("0-0-0+"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing valid en passant moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidEnPassantMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsEnPassant(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing invalid en passant moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetInvalidEnPassantMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ribi::Chess::Move::ParseIsEnPassant(s)) TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseIsEnPassant(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing valid moves that end in a promotion");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidPromotionMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParseIsPromotion(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing ParseTo");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///Test parsing of the square the piece is moving to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseTo("a2 a3")==*SquareFactory::Create(Chess::File("a"),Chess::Rank("3"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseTo(&nbsp;&nbsp; "a3")==*SquareFactory::Create(Chess::File("a"),Chess::Rank("3"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseTo("Bb3 c5")==*SquareFactory::Create(Chess::File("c"),Chess::Rank("5"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseTo("Kc4 d4")==*SquareFactory::Create(Chess::File("d"),Chess::Rank("4"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseTo("Nd5 e6")==*SquareFactory::Create(Chess::File("e"),Chess::Rank("6"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseTo("Qe6 f7")==*SquareFactory::Create(Chess::File("f"),Chess::Rank("7"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*Move::ParseTo("Rf7 h7")==*SquareFactory::Create(Chess::File("h"),Chess::Rank("7"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("0-0+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("0-0#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("O-O"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("O-O+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("O-O#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("0-0-0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("0-0-0+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("0-0-0#"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("O-O-O"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("O-O-O+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!ribi::Chess::Move::ParseTo("O-O-O#"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Testing ParsePiece");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParsePiece("Ba1 b2")-&gt;GetNameChar() == 'B');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParsePiece("Ka1 b1")-&gt;GetNameChar() == 'K');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParsePiece("Na1 b3")-&gt;GetNameChar() == 'N');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParsePiece("Qa1 b1")-&gt;GetNameChar() == 'Q');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParsePiece("Ra1 b1")-&gt;GetNameChar() == 'R');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ribi::Chess::Move::ParsePiece("a2 a4")-&gt;GetNameChar() == '.');<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!dynamic_cast&lt;PieceBishop*&gt;(Chess::Move("0-0").Piece().get()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!dynamic_cast&lt;PieceBishop*&gt;(Chess::Move("O-O-O").Piece().get()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test complete moves for validity");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test valid moves being valid as a move: the history of the chessgame must point out<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if the move is valid in its context<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a2 a3", "a2 a4", "a3 a4", "a4 a5", "a5 a6", "a6 a7", //white pawn at A file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a2xb3", "a3xb4", "a4xb5", "a5xb6", "a6xb7",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//white pawn at A file all its captures without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a7 a6", "a7 a5", "a6 a5", "a5 a4", "a4 a3", "a3 a2", //black pawn at A file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Short notation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a2", "a3", "a4", "a4", "a5", "a6", "a7", //pawn at A file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"b2", "b3", "b4", "b4", "b5", "b6", "b7", //pawn at B file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"c2", "c3", "c4", "c4", "c5", "c6", "c7", //pawn at C file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"d2", "d3", "d4", "d4", "d5", "d6", "d7", //pawn at D file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"e2", "e3", "e4", "e4", "e5", "e6", "e7", //pawn at E file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"f2", "f3", "f4", "f4", "f5", "f6", "f7", //pawn at F file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"g2", "g3", "g4", "g4", "g5", "g6", "g7", //pawn at G file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"h2", "h3", "h4", "h4", "h5", "h6", "h7", //pawn at H file all its movements without promotion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"O-O","O-O-O","0-0","0-0-0",&nbsp;&nbsp;&nbsp;&nbsp; //Castling<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"O-O+","O-O-O+","0-0+","0-0-0+", //Castling<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"O-O#","O-O-O#","0-0#","0-0-0#", //Castling<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"1-0","0-1","1/2-1/2"<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move m(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test invalid moves being invalid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B0-0" , "B0-0-0", "BO-O", "BO-O-O",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B0-0+", "B0-0-0+", "BO-O+", "BO-O-O+",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B0-0#", "B0-0-0#", "BO-O#", "BO-O-O#"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//"ND4xe6"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move m(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(m.ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test complete moves intimately");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Chess::Move m("a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.From()); //From is unknown<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.IsCapture());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.IsCastling());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.IsCheck());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.IsCheckmate());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.IsPromotion());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m.Piece());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(dynamic_cast&lt;Chess::PiecePawn*&gt;(m.Piece().get()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.PiecePromotion());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert((*m.To().get()==*SquareFactory::Create("a3")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Kasparov against the world match");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Chess::Moves::GetGameKasparovVersusTheWorld();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Move m(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert("Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesspiece.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesspiece.cpp" border = "1"><tr><td><code>
#include "chesspiece.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "chesscolor.h"<br/>
#include "chessmove.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chessmoves.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chessrank.h"<br/>
#include "chesssquare.h"<br/>
<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::Piece::Piece(<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; &amp;square)<br/>
 : m_color(color),<br/>
&nbsp;&nbsp; m_last_move{},<br/>
&nbsp;&nbsp; m_square(square)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;ribi::Chess::Piece::Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt;<br/>
&nbsp;&nbsp;ribi::Chess::Piece::AddCheckAndCheckmate(const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; w;<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;w](const boost::shared_ptr&lt;Move&gt;&amp; move)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!move-&gt;IsCheck());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!move-&gt;IsCheckmate());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(!move-&gt;IsScore());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move-&gt;ToStr() + std::string("+")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move-&gt;ToStr() + std::string("#")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;assert(w.size() == v.size() * 3);<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
void ribi::Chess::Piece::DoMove(const boost::shared_ptr&lt;const Move&gt; move)<br/>
{<br/>
&nbsp;&nbsp;assert(CanDoMove(move));<br/>
&nbsp;&nbsp;m_square = move-&gt;To();<br/>
&nbsp;&nbsp;m_last_move = move;<br/>
}<br/>
<br/>
ribi::Chess::Color ribi::Chess::Piece::GetColor() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_color;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;const ribi::Chess::Square&gt; ribi::Chess::Piece::GetSquare() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_square;<br/>
}<br/>
<br/>
const std::string ribi::Chess::Piece::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Piece::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
const std::string ribi::Chess::Piece::ToStr() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return Chess::ColorToStr(GetColor())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ std::string(" ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ this-&gt;GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ " at "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ (this-&gt;GetSquare() ? this-&gt;GetSquare()-&gt;ToStr() : "an indetermined position");<br/>
}<br/>
<br/>
ribi::Chess::PieceBishop::PieceBishop(<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square)<br/>
&nbsp;&nbsp;: Piece(color,square)<br/>
{<br/>
&nbsp;&nbsp;//assert(GetColor() != Color::indeterminate);<br/>
}<br/>
<br/>
bool ribi::Chess::PieceBishop::CanDoMove(const boost::shared_ptr&lt;const Chess::Move&gt; move) const noexcept<br/>
{<br/>
&nbsp;&nbsp;if (!move-&gt;Piece() || !dynamic_cast&lt;PieceBishop*&gt;(move-&gt;Piece().get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Not a Bishop move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (!move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; GetSquare() &amp;&amp; *move-&gt;From() == *this-&gt;GetSquare()&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume Move and Bishop to have the same start position");<br/>
&nbsp;&nbsp;assert(move-&gt;Piece() &amp;&amp; dynamic_cast&lt;PieceBishop*&gt;(move-&gt;Piece().get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume this is a Bishop move");<br/>
&nbsp;&nbsp;assert(move-&gt;To() &amp;&amp; "All Bishop moves have a to field");<br/>
&nbsp;&nbsp;assert(!move-&gt;IsCastling() &amp;&amp; "Bishop moves are not castling moves");<br/>
&nbsp;&nbsp;assert(!move-&gt;Score() &amp;&amp; "Bishop moves are not final scores");<br/>
<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dx = move-&gt;From()-&gt;GetFile().ToInt() - move-&gt;To()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (dx == 0) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dy = move-&gt;From()-&gt;GetRank().ToInt() - move-&gt;To()-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return std::abs(dx) == std::abs(dy);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return move-&gt;To().get();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceBishop::Clone() const<br/>
{<br/>
&nbsp;&nbsp;const Color color = this-&gt;GetColor();<br/>
&nbsp;&nbsp;assert(this-&gt;GetSquare());<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; square = SquareFactory::DeepCopy(this-&gt;GetSquare());<br/>
&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(color,square));<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::PieceBishop::GetMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; v;<br/>
&nbsp;&nbsp;for (int i=1; i!=8; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//North-east<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() - i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + "x" + s-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr() + "+"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + "x" + s-&gt;ToStr() + "+"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr() + "#"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + "x" + s-&gt;ToStr() + "#"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//South-east<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//South-west<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() - i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//North-west<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() - i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() - i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Triple number of moves by adding check and checkmate<br/>
&nbsp;&nbsp;v = AddCheckAndCheckmate(v);<br/>
<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
/*<br/>
PieceEmpty::PieceEmpty()<br/>
&nbsp;&nbsp;: Piece(Color::indeterminate,Square(0,0))<br/>
{<br/>
&nbsp;&nbsp;assert(GetColor() == Color::indeterminate);<br/>
}<br/>
<br/>
const std::vector&lt;Square&gt; PieceEmpty::GetMoves() const<br/>
{<br/>
&nbsp;&nbsp;return std::vector&lt;Square&gt;();<br/>
}<br/>
<br/>
bool PieceEmpty::CanDoMove(const boost::shared_ptr&lt;const Chess::Move&gt; move) const<br/>
{<br/>
<br/>
}<br/>
*/<br/>
<br/>
ribi::Chess::PieceKing::PieceKing(<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square)<br/>
&nbsp;&nbsp;: Piece(color,square),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_moved{false}<br/>
<br/>
{<br/>
&nbsp;&nbsp;//assert(GetColor() != Color::indeterminate);<br/>
<br/>
}<br/>
<br/>
bool ribi::Chess::PieceKing::CanDoMove(const boost::shared_ptr&lt;const Chess::Move&gt; move) const noexcept<br/>
{<br/>
&nbsp;&nbsp;if (!move-&gt;Piece() || !dynamic_cast&lt;PieceKing*&gt;(move-&gt;Piece().get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Not a King move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (!move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; GetSquare() &amp;&amp; *move-&gt;From() == *this-&gt;GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume Move and Piece to have the same start position");<br/>
&nbsp;&nbsp;assert(move-&gt;Piece() &amp;&amp; dynamic_cast&lt;Piece*&gt;(move-&gt;Piece().get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume this is a King move");<br/>
&nbsp;&nbsp;assert(move-&gt;To() &amp;&amp; "All King moves have a to field");<br/>
&nbsp;&nbsp;assert(!move-&gt;IsCastling() &amp;&amp; "King moves are not castling moves");<br/>
&nbsp;&nbsp;assert(!move-&gt;Score() &amp;&amp; "King moves are not final scores");<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dx = move-&gt;From()-&gt;GetFile().ToInt() - move-&gt;To()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dy = move-&gt;From()-&gt;GetRank().ToInt() - move-&gt;To()-&gt;GetRank().ToInt();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (dx == 0 &amp;&amp; dy == 0) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return std::abs(dx) &lt;= 1 &amp;&amp; std::abs(dy) &lt;= 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return move-&gt;To().get();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceKing::Clone() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p(new PieceKing(*this));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::PieceKing::GetMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; v;<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;int,int&gt; &gt; ds<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= { {0,-1}, {1,-1}, {1,0}, {1,1}, {0,1}, {-1,1}, {-1,0}, {-1,-1} };<br/>
&nbsp;&nbsp;std::for_each(ds.begin(), ds.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v,this](const std::pair&lt;int,int&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + p.first),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + p.second)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ this-&gt;GetSquare()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//Triple number of moves by adding check and checkmate<br/>
&nbsp;&nbsp;v = AddCheckAndCheckmate(v);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::Chess::PieceKnight::PieceKnight(<br/>
&nbsp;&nbsp;const Chess::Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square)<br/>
&nbsp;&nbsp;: Piece(color,square)<br/>
{<br/>
&nbsp;&nbsp;//assert(GetColor() != Color::indeterminate);<br/>
<br/>
}<br/>
<br/>
bool ribi::Chess::PieceKnight::CanDoMove(const boost::shared_ptr&lt;const Chess::Move&gt; move) const noexcept<br/>
{<br/>
&nbsp;&nbsp;if (!move-&gt;Piece() || !dynamic_cast&lt;PieceKnight*&gt;(move-&gt;Piece().get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Not a Knight move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (!move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; GetSquare() &amp;&amp; (*move-&gt;From() == *this-&gt;GetSquare()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume Move and Knight to have the same start position");<br/>
&nbsp;&nbsp;assert(move-&gt;Piece() &amp;&amp; dynamic_cast&lt;PieceKnight*&gt;(move-&gt;Piece().get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume this is a Knight move");<br/>
&nbsp;&nbsp;assert(move-&gt;To() &amp;&amp; "All Knight moves have a to field");<br/>
&nbsp;&nbsp;assert(!move-&gt;IsCastling() &amp;&amp; "Knight moves are not castling moves");<br/>
&nbsp;&nbsp;assert(!move-&gt;Score() &amp;&amp; "Knight moves are not final scores");<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dx = move-&gt;From()-&gt;GetFile().ToInt() - move-&gt;To()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dy = move-&gt;From()-&gt;GetRank().ToInt() - move-&gt;To()-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (std::abs(dx) == 1 || std::abs(dx) == 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; (std::abs(dy) == 1 || std::abs(dy) == 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;&nbsp;std::abs(dx) != std::abs(dy);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceKnight::Clone() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(*this));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::PieceKnight::GetMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; v;<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;int,int&gt; &gt; ds<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= { {1,2}, {2,1}, {-1,2}, {-2,1}, {1,-2}, {2,-1}, {-1,-2}, {-2,-1} };<br/>
&nbsp;&nbsp;std::for_each(ds.begin(), ds.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v,this](const std::pair&lt;int,int&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + p.first),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + p.second)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ this-&gt;GetSquare()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//Triple number of moves by adding check and checkmate<br/>
&nbsp;&nbsp;v = AddCheckAndCheckmate(v);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::Chess::PiecePawn::PiecePawn(<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square)<br/>
&nbsp;&nbsp;: Piece(color,square)<br/>
{<br/>
&nbsp;&nbsp;//assert(GetColor() != Color::indeterminate);<br/>
}<br/>
<br/>
bool ribi::Chess::PiecePawn::CanDoMove(const boost::shared_ptr&lt;const Chess::Move&gt; move) const noexcept<br/>
{<br/>
&nbsp;&nbsp;if (!move-&gt;Piece() || !dynamic_cast&lt;PiecePawn*&gt;(move-&gt;Piece().get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Not a Pawn move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (!move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; GetSquare() &amp;&amp; (*move-&gt;From() == *this-&gt;GetSquare()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume Move and PiecePawn to have the same start position");<br/>
&nbsp;&nbsp;assert(move-&gt;Piece() &amp;&amp; dynamic_cast&lt;PiecePawn*&gt;(move-&gt;Piece().get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume this is a Pawn move");<br/>
&nbsp;&nbsp;assert(move-&gt;To() &amp;&amp; "All Pawn moves have a to field");<br/>
&nbsp;&nbsp;assert(!move-&gt;IsCastling() &amp;&amp; "Pawn moves are not castling moves");<br/>
&nbsp;&nbsp;assert((!move-&gt;IsEnPassant() || (move-&gt;IsEnPassant() &amp;&amp; move-&gt;IsCapture()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume that all en passant captures are captures");<br/>
<br/>
&nbsp;&nbsp;//Do all checks when the 'from' Square is known<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dx = move-&gt;To()-&gt;GetFile().ToInt() - move-&gt;From()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::abs(dx) &gt; 1) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::abs(dx) == 1 &amp;&amp; !move-&gt;IsCapture()) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (dx == 0 &amp;&amp; move-&gt;IsCapture()) return false;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dy = move-&gt;To()-&gt;GetRank().ToInt() - move-&gt;From()-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::abs(dy) &gt; 2) return false; //A pawn move two squares at most<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (this-&gt;GetColor() == Color::white)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dy &lt;= 0) return false; //A white pawn must move forward<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;From()-&gt;GetRank() == Rank(std::string("2")) &amp;&amp; dy == 2) return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(move-&gt;From()-&gt;GetRank() == Rank(std::string("2"))) &amp;&amp; dy == 2) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dy == 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (this-&gt;GetColor() == Color::black)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dy &gt;= 0) return false; //A black pawn must move backward in the y direction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;From()-&gt;GetRank() == Rank(std::string("7")) &amp;&amp; dy == -2) return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(move-&gt;From()-&gt;GetRank() == Rank(std::string("7"))) &amp;&amp; dy == -2) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dy == -1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (this-&gt;GetColor() == Color::indeterminate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;From()-&gt;GetRank() == Rank(std::string("2")) &amp;&amp; dy ==&nbsp;&nbsp;2) return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move-&gt;From()-&gt;GetRank() == Rank(std::string("7")) &amp;&amp; dy == -2) return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(move-&gt;From()-&gt;GetRank() == Rank(std::string("2"))) &amp;&amp; dy ==&nbsp;&nbsp;2) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(move-&gt;From()-&gt;GetRank() == Rank(std::string("7"))) &amp;&amp; dy == -2) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;IsEnPassant())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!move-&gt;IsCapture()) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (GetColor() == Color::indeterminate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(move-&gt;From()-&gt;GetRank().ToStr() == std::string("4")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; move-&gt;To()-&gt;GetRank().ToStr() == std::string("3"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| ( move-&gt;From()-&gt;GetRank().ToStr() == std::string("5")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; move-&gt;To()-&gt;GetRank().ToStr() == std::string("6"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (GetColor() == Color::white)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ( move-&gt;From()-&gt;GetRank().ToStr() == std::string("5")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; move-&gt;To()-&gt;GetRank().ToStr() == std::string("6"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (GetColor() == Color::black)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return move-&gt;From()-&gt;GetRank().ToStr() == std::string("4")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; move-&gt;To()-&gt;GetRank().ToStr() == std::string("3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Pawn moves in the right direction when from is known<br/>
&nbsp;&nbsp;if (this-&gt;GetColor() == Color::white &amp;&amp; move-&gt;To()-&gt;GetRank() == Chess::Rank("1"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (this-&gt;GetColor() == Color::black &amp;&amp; move-&gt;To()-&gt;GetRank() == Chess::Rank("8"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;To()-&gt;GetRank() == Chess::Rank("1") || move-&gt;To()-&gt;GetRank() == Chess::Rank("8"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return move-&gt;IsPromotion();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PiecePawn::Clone() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(*this));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::PiecePawn::GetMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; v;<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::pair&lt;int,int&gt; &gt; ds;<br/>
&nbsp;&nbsp;if (GetColor() != Color::black)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Add white moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( {&nbsp;&nbsp;0, 2 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( {&nbsp;&nbsp;0, 1 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( { -1, 1 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( {&nbsp;&nbsp;1, 1 } );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (GetColor() != Color::white)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Add black moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( {&nbsp;&nbsp;0,-2 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( {&nbsp;&nbsp;0,-1 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( { -1,-1 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ds.push_back( {&nbsp;&nbsp;1,-1 } );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;std::for_each(ds.begin(), ds.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v,this](const std::pair&lt;int,int&gt;&amp; p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + p.first),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + p.second)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(p.first); TRACE(p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(this-&gt;GetSquare()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ (p.first == 0 ? std::string(" ") : std::string("x"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;//Triple number of moves by adding check and checkmate<br/>
&nbsp;&nbsp;v = AddCheckAndCheckmate(v);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::Chess::PieceQueen::PieceQueen(<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square)<br/>
&nbsp;&nbsp;: Piece(color,square)<br/>
{<br/>
&nbsp;&nbsp;//assert(GetColor() != Color::indeterminate);<br/>
<br/>
}<br/>
<br/>
bool ribi::Chess::PieceQueen::CanDoMove(const boost::shared_ptr&lt;const Chess::Move&gt; move) const noexcept<br/>
{<br/>
&nbsp;&nbsp;if (!move-&gt;Piece() || !dynamic_cast&lt;PieceQueen*&gt;(move-&gt;Piece().get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Not a Queen move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (!move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; GetSquare() &amp;&amp; (*move-&gt;From() == *this-&gt;GetSquare()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume Move and Queen to have the same start position");<br/>
&nbsp;&nbsp;assert(move-&gt;Piece() &amp;&amp; dynamic_cast&lt;PieceQueen*&gt;(move-&gt;Piece().get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume this is a Queen move");<br/>
&nbsp;&nbsp;assert(move-&gt;To() &amp;&amp; "All Queen moves have a to field");<br/>
&nbsp;&nbsp;assert(!move-&gt;IsCastling() &amp;&amp; "Queen moves are not castling moves");<br/>
&nbsp;&nbsp;assert(!move-&gt;Score() &amp;&amp; "Queen moves are not final scores");<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dx = move-&gt;From()-&gt;GetFile().ToInt() - move-&gt;To()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dy = move-&gt;From()-&gt;GetRank().ToInt() - move-&gt;To()-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (dx == 0 &amp;&amp; dy == 0) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return (dx == 0 || dy == 0 || std::abs(dx) == std::abs(dy));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceQueen::Clone() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(*this));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::PieceQueen::GetMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; v;<br/>
&nbsp;&nbsp;for (int i=1; i!=8; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//North<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() - i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//North-east<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() - i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + 0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//South-east<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//South<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//South-west<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() - i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() - i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + 0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//North-west<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() - i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() - i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Triple number of moves by adding check and checkmate<br/>
&nbsp;&nbsp;v = AddCheckAndCheckmate(v);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::Chess::PieceRook::PieceRook(<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square)<br/>
&nbsp;&nbsp;: Piece(color,square),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_moved{false}<br/>
{<br/>
&nbsp;&nbsp;//assert(GetColor() != Color::indeterminate);<br/>
<br/>
}<br/>
<br/>
bool ribi::Chess::PieceRook::CanDoMove(const boost::shared_ptr&lt;const Chess::Move&gt; move) const noexcept<br/>
{<br/>
&nbsp;&nbsp;if (!move-&gt;Piece() || !dynamic_cast&lt;PieceRook*&gt;(move-&gt;Piece().get()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Not a Rook move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (!move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; !GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (move-&gt;From() &amp;&amp; GetSquare() &amp;&amp; (*move-&gt;From() == *this-&gt;GetSquare()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume Move and Rook to have the same start position");<br/>
&nbsp;&nbsp;assert(move-&gt;Piece() &amp;&amp; dynamic_cast&lt;PieceRook*&gt;(move-&gt;Piece().get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume this is a Rook move");<br/>
&nbsp;&nbsp;assert(move-&gt;To() &amp;&amp; "All Rook moves have a to field");<br/>
&nbsp;&nbsp;assert(!move-&gt;IsCastling() &amp;&amp; "Rook moves are not castling moves");<br/>
&nbsp;&nbsp;assert(!move-&gt;Score() &amp;&amp; "Rook moves are not final scores");<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;IsEnPassant()) return false;<br/>
<br/>
&nbsp;&nbsp;if (move-&gt;From())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dx = move-&gt;From()-&gt;GetFile().ToInt() - move-&gt;To()-&gt;GetFile().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dy = move-&gt;From()-&gt;GetRank().ToInt() - move-&gt;To()-&gt;GetRank().ToInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (dx == 0 &amp;&amp; dy == 0) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return (dx == 0 || dy == 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceRook::Clone() const<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p(new PieceRook(*this));<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const std::vector&lt;boost::shared_ptr&lt;ribi::Chess::Move&gt; &gt; ribi::Chess::PieceRook::GetMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; v;<br/>
&nbsp;&nbsp;for (int i=1; i!=8; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//North<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() - i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + 0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//South<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() + 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File(this-&gt;GetSquare()-&gt;GetFile().ToInt() - i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank(this-&gt;GetSquare()-&gt;GetRank().ToInt() + 0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; m = MoveFactory::Create(boost::lexical_cast&lt;std::string&gt;(this-&gt;GetNameChar()) + this-&gt;GetSquare()-&gt;ToStr() + " " + s-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Triple number of moves by adding check and checkmate<br/>
&nbsp;&nbsp;v = AddCheckAndCheckmate(v);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Chess::operator&lt;&lt;(std::ostream&amp; os, const Piece&amp; piece)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; piece.ToStr();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
<br/>
bool ribi::Chess::operator==(const Piece&amp; lhs, const Piece&amp; rhs)<br/>
{<br/>
<br/>
&nbsp;&nbsp;if (lhs.GetColor() != rhs.GetColor()) return false;<br/>
<br/>
&nbsp;&nbsp;if (static_cast&lt;bool&gt;(lhs.GetLastMove()) != static_cast&lt;bool&gt;(rhs.GetLastMove())) return false;<br/>
&nbsp;&nbsp;if (lhs.GetLastMove())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rhs.GetLastMove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*lhs.GetLastMove() != *rhs.GetLastMove())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (static_cast&lt;bool&gt;(lhs.GetSquare()) != static_cast&lt;bool&gt;(rhs.GetSquare()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (lhs.GetSquare())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(rhs.GetSquare());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*lhs.GetSquare() != *rhs.GetSquare())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return true;<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Piece&amp; lhs, const Piece&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesspiece.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesspiece.h" border = "1"><tr><td><code>
#ifndef CHESSPIECE_H<br/>
#define CHESSPIECE_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
<br/>
#include &lt;boost/checked_delete.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chesscolor.h"<br/>
#include "chessfwd.h"<br/>
//#include "chesssquare.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
//A Piece has<br/>
//- a (possibly undetermined) position<br/>
//- a (possibly undetermined) color<br/>
struct Piece<br/>
{<br/>
&nbsp;&nbsp;virtual ~Piece() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///Determines if this Piece can possibly do this move<br/>
&nbsp;&nbsp;virtual bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Perform a Move on a Piece<br/>
&nbsp;&nbsp;void DoMove(const boost::shared_ptr&lt;const Move&gt; move);<br/>
<br/>
&nbsp;&nbsp;///Obtain the (possibily indeterminate) Color of a Piece<br/>
&nbsp;&nbsp;Color GetColor() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the last move this Piece did.<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; GetLastMove() const noexcept { return m_last_move; }<br/>
<br/>
&nbsp;&nbsp;///Returns all Moves to be done by a Piece.<br/>
&nbsp;&nbsp;///These moves are all valid (for example, on an empty board), but might be invalid in the current chessgame.<br/>
&nbsp;&nbsp;virtual const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Obtain the Square the piece is standing on<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; GetSquare() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its full name, e.g. 'knight'<br/>
&nbsp;&nbsp;virtual const std::string GetName() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its notational character, e.g 'N'<br/>
&nbsp;&nbsp;virtual char GetNameChar() const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Returns the color and symbol<br/>
&nbsp;&nbsp;//const std::pair&lt;char,char&gt; GetSymbol() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test all Pieces<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece to std::string for operator&lt;&lt;<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;protected:<br/>
<br/>
&nbsp;&nbsp;Piece(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt;&amp; square);<br/>
<br/>
&nbsp;&nbsp;///Triple number of moves by adding check and checkmate<br/>
&nbsp;&nbsp;static const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; AddCheckAndCheckmate(const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///Clone a Piece<br/>
&nbsp;&nbsp;virtual const boost::shared_ptr&lt;Piece&gt; Clone() const = 0;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;///The piece its color<br/>
&nbsp;&nbsp;const Color m_color;<br/>
<br/>
&nbsp;&nbsp;///The last move this Piece did.<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Move&gt; m_last_move;<br/>
<br/>
&nbsp;&nbsp;///The piece its location<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Square&gt; m_square;<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Piece *);<br/>
};<br/>
<br/>
struct PieceBishop : public Piece<br/>
{<br/>
&nbsp;&nbsp;///Determines if this Piece can possibly do this move<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its notational character, e.g 'N'<br/>
&nbsp;&nbsp;char GetNameChar() const noexcept { return 'B'; }<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its full name, e.g. 'knight'<br/>
&nbsp;&nbsp;const std::string GetName() const noexcept { return "bishop"; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test Bishop<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece to std::string for operator&lt;&lt;<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;PieceBishop(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square);<br/>
&nbsp;&nbsp;PieceBishop(const PieceBishop&amp;) = delete;<br/>
&nbsp;&nbsp;PieceBishop&amp; operator=(const PieceBishop&amp;) = delete;<br/>
<br/>
&nbsp;&nbsp;///Clone this Piece<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; Clone() const;<br/>
<br/>
&nbsp;&nbsp;~PieceBishop() noexcept {}<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(PieceBishop *);<br/>
&nbsp;&nbsp;friend struct PieceFactory;<br/>
};<br/>
<br/>
struct PieceKing : public Piece<br/>
{<br/>
<br/>
&nbsp;&nbsp;///Determines if this Piece can possibly do this move<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const noexcept;<br/>
&nbsp;&nbsp;//void Move(const Square&amp; to);<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its notational character, e.g 'N'<br/>
&nbsp;&nbsp;char GetNameChar() const noexcept { return 'K'; }<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its full name, e.g. 'knight'<br/>
&nbsp;&nbsp;const std::string GetName() const noexcept { return "king"; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test PieceKing<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece to std::string for operator&lt;&lt;<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;PieceKing(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square);<br/>
<br/>
&nbsp;&nbsp;///Clone this Piece<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; Clone() const;<br/>
<br/>
&nbsp;&nbsp;~PieceKing() noexcept {}<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(PieceKing *);<br/>
<br/>
&nbsp;&nbsp;///Keep track of whether king has moved for castling<br/>
&nbsp;&nbsp;bool m_has_moved;<br/>
<br/>
&nbsp;&nbsp;friend struct PieceFactory;<br/>
};<br/>
<br/>
struct PieceKnight : public Piece<br/>
{<br/>
&nbsp;&nbsp;///Determines if this Piece can possibly do this move<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept;<br/>
<br/>
<br/>
&nbsp;&nbsp;///Returns all Moves to be done by a Piece.<br/>
&nbsp;&nbsp;///These moves are all valid, but might be invalid in the current chessgame.<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const noexcept;<br/>
<br/>
&nbsp;&nbsp;char GetNameChar() const noexcept { return 'N'; }<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its full name, e.g. 'knight'<br/>
&nbsp;&nbsp;const std::string GetName() const noexcept { return "knight"; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test PieceKnight<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece to std::string for operator&lt;&lt;<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;PieceKnight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square);<br/>
<br/>
&nbsp;&nbsp;///Clone this Piece<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; Clone() const;<br/>
<br/>
&nbsp;&nbsp;~PieceKnight() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(PieceKnight *);<br/>
&nbsp;&nbsp;friend struct PieceFactory;<br/>
};<br/>
<br/>
struct PiecePawn : public Piece<br/>
{<br/>
&nbsp;&nbsp;///Determines if this Piece can possibly do this move<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const noexcept;<br/>
&nbsp;&nbsp;char GetNameChar() const noexcept { return '.'; }<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its full name, e.g. 'knight'<br/>
&nbsp;&nbsp;const std::string GetName() const noexcept { return "pawn"; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test PiecePawn<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece to std::string for operator&lt;&lt;<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;PiecePawn(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square);<br/>
<br/>
&nbsp;&nbsp;///Clone this Piece<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; Clone() const;<br/>
<br/>
&nbsp;&nbsp;~PiecePawn() noexcept {}<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(PiecePawn *);<br/>
&nbsp;&nbsp;friend struct PieceFactory;<br/>
};<br/>
<br/>
struct PieceQueen : public Piece<br/>
{<br/>
&nbsp;&nbsp;///Determines if this Piece can possibly do this move<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const noexcept;<br/>
&nbsp;&nbsp;char GetNameChar() const noexcept { return 'Q'; }<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its full name, e.g. 'king'<br/>
&nbsp;&nbsp;const std::string GetName() const noexcept { return "queen"; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test PieceQueen<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece to std::string for operator&lt;&lt;<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;PieceQueen(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square);<br/>
<br/>
&nbsp;&nbsp;///Clone this Piece<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; Clone() const;<br/>
<br/>
&nbsp;&nbsp;~PieceQueen() noexcept {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(PieceQueen *);<br/>
&nbsp;&nbsp;friend struct PieceFactory;<br/>
};<br/>
<br/>
struct PieceRook : public Piece<br/>
{<br/>
&nbsp;&nbsp;///Determines if this Piece can possibly do this move<br/>
&nbsp;&nbsp;bool CanDoMove(const boost::shared_ptr&lt;const Move&gt; move) const noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; GetMoves() const noexcept;<br/>
<br/>
&nbsp;&nbsp;char GetNameChar() const noexcept { return 'R'; }<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece type to a its full name, e.g. 'king'<br/>
&nbsp;&nbsp;const std::string GetName() const noexcept { return "rook"; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test PieceRook<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Piece to std::string for operator&lt;&lt;<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;PieceRook(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square);<br/>
<br/>
&nbsp;&nbsp;///Clone this Piece<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; Clone() const;<br/>
<br/>
&nbsp;&nbsp;~PieceRook() noexcept {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(PieceRook *);<br/>
<br/>
&nbsp;&nbsp;///Keep track of whether rook has moved for castling<br/>
&nbsp;&nbsp;bool m_has_moved;<br/>
<br/>
&nbsp;&nbsp;friend struct PieceFactory;<br/>
};<br/>
<br/>
<br/>
bool operator==(const Piece&amp; lhs, const Piece&amp; rhs);<br/>
bool operator!=(const Piece&amp; lhs, const Piece&amp; rhs);<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Piece&amp; piece);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSPIECE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesspiecefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesspiecefactory.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "chesspiecefactory.h"<br/>
<br/>
#include "chessmove.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chesspiece.h"<br/>
#include "chesssquarefactory.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceFactory::Create(<br/>
&nbsp;&nbsp;const char namechar,<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square) noexcept<br/>
{<br/>
&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p;<br/>
&nbsp;&nbsp;switch(namechar)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'B': p.reset(new Chess::PieceBishop(color,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'K': p.reset(new Chess::PieceKing(color,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'N': p.reset(new Chess::PieceKnight(color,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'Q': p.reset(new Chess::PieceQueen(color,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'R': p.reset(new Chess::PieceRook(color,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case '.': p.reset(new Chess::PiecePawn(color,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceFactory::Create(<br/>
&nbsp;&nbsp;const char namechar,<br/>
&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;const std::string&amp; square_str)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(square_str)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p;<br/>
&nbsp;&nbsp;return Create(namechar,color,square);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceFactory::CreateFromMove(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::PieceFactory::CreateFromMove exception: move must not be empty");<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Move&gt; move {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MoveFactory::Create(s)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;move-&gt;To()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;if (!square) square = move-&gt;From();<br/>
<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; piece;<br/>
&nbsp;&nbsp;const char c = s[0];<br/>
&nbsp;&nbsp;switch(c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'B': piece.reset(new Chess::PieceBishop(Chess::Color::indeterminate,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'K': piece.reset(new Chess::PieceKing(Chess::Color::indeterminate,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'N': piece.reset(new Chess::PieceKnight(Chess::Color::indeterminate,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'Q': piece.reset(new Chess::PieceQueen(Chess::Color::indeterminate,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'R': piece.reset(new Chess::PieceRook(Chess::Color::indeterminate,square)); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'a':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'b':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'c':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'd':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'e':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'f':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'g':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'h':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.reset(new Chess::PiecePawn(Chess::Color::indeterminate,square)); break;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return piece;<br/>
}<br/>
<br/>
boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceFactory::CreateFromPromotion(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("ribi::Chess::PieceFactory::CreateFromPromotion exception: move must not be empty");<br/>
<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Chess::Piece&gt; p;<br/>
<br/>
&nbsp;&nbsp;const char c = s[s.size() - 1];<br/>
&nbsp;&nbsp;switch(c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'B': p.reset(new Chess::PieceBishop(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;())); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'K': p.reset(new Chess::PieceKing(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;())); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'N': p.reset(new Chess::PieceKnight(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;())); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'Q': p.reset(new Chess::PieceQueen(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;())); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case 'R': p.reset(new Chess::PieceRook(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;())); break;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Piece&gt; ribi::Chess::PieceFactory::DeepCopy(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; s) noexcept<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::Chess::Piece&gt; t {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PieceFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s-&gt;GetNameChar(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s-&gt;GetColor(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s-&gt;GetSquare()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(t);<br/>
&nbsp;&nbsp;assert(*s == *t &amp;&amp; "Must be a copy");<br/>
&nbsp;&nbsp;assert(s != t &amp;&amp; "Must be a deep copy");<br/>
&nbsp;&nbsp;return t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesspiecefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesspiecefactory.h" border = "1"><tr><td><code>
#ifndef CHESSPIECEFACTORY_H<br/>
#define CHESSPIECEFACTORY_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "chessfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
struct PieceFactory<br/>
{<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Piece&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const char namechar,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square) noexcept;<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Piece&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const char namechar,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Color color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; square);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Piece&gt; CreateFromMove(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;static boost::shared_ptr&lt;Piece&gt; CreateFromPromotion(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Piece&gt; DeepCopy(const boost::shared_ptr&lt;const Piece&gt; piece) noexcept;<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSPIECEFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesspiecetest.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesspiecetest.cpp" border = "1"><tr><td><code>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "chesspiece.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;future&gt;<br/>
<br/>
#include "chessmove.h"<br/>
#include "chessmovefactory.h"<br/>
#include "chessmoves.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chesspiecefactory.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///Is there an elemnt in v for IsEqual(*p,*v)<br/>
template &lt;class T, class U&gt;<br/>
bool IsPresent(boost::shared_ptr&lt;T&gt; p,const std::vector&lt;boost::shared_ptr&lt;U&gt; &gt; v)<br/>
{<br/>
&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;return std::count_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[p](const boost::shared_ptr&lt;T&gt; q)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *p == *q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;) &gt; 0;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Chess::Piece::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;//Testing Chess::Piece exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::Piece");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s = SquareFactory::Create("e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; t = SquareFactory::Create("e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; p = PieceFactory::Create('B',Color::white,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Piece&gt; q = PieceFactory::Create('B',Color::white,t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(*p == *q);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::Chess::PieceBishop::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::Chess::PieceKing::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::Chess::PieceKnight::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::Chess::PiecePawn::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::Chess::PieceQueen::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribi::Chess::PieceRook::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
<br/>
void ribi::Chess::PieceBishop::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Bishop for valid moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidBishopMoves();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::white,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::black,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::white,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::black,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Bishop for invalid moves")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetInvalidBishopMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::white,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::black,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::white,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceBishop(Chess::Color::black,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Move is correctly determined to be invalid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::Chess::PieceKing::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test King for valid moves")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidKingMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::white,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::black,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::white,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::black,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test King for invalid moves")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetInvalidKingMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanDoMove(move)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKing(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::Chess::PieceKnight::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Knight for valid moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidKnightMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::white,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::black,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::white,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::black,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Knight for invalid moves")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetInvalidKnightMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanDoMove(move)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceKnight(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Knight for generating its own moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; square = SquareFactory::Create("d4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; piece = PieceFactory::Create('N',Color::white,square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = piece-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 8 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("Nd4 c2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsPresent(move,moves));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(std::find(moves.begin(),moves.end(),move) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; square = SquareFactory::Create("a1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; piece = PieceFactory::Create('N',Color::white,square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = piece-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 2 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("Na1 b3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsPresent(move,moves));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Na1 b3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; square = SquareFactory::Create("b1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; piece = PieceFactory::Create('N',Color::black,square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(piece);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = piece-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 3 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("Nb1 c3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsPresent(move,moves));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Nb1 c3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::Chess::PiecePawn::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Pawn for valid moves")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=3; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Chess::Color color = (i == 0 ? Color::indeterminate : (i == 1 ? Color::white : Color::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidPawnMoves(color);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[color](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(color,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(color,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Pawn for invalid moves")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=3; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Chess::Color color = (i == 0 ? Color::indeterminate : (i == 1 ? Color::white : Color::black));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetInvalidPawnMoves(Color::indeterminate);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[color](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(color,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanDoMove(move)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(color,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Pawn intimately");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(Chess::Color::white,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a2 a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a2 a4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a2 a1Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a7 a8Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a1Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a8Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(Chess::Color::black,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a2 a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a2 a4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a2 a1Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a7 a8Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a1Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("a8Q");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;const Square&gt; square = SquareFactory::Create("e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('.',Chess::Color::indeterminate,"e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4 e5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xd5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xf5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4 e3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xd3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xf3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const boost::shared_ptr&lt;const Square&gt; square = SquareFactory::Create("e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('.',Chess::Color::white,"e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4 e5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xd5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xf5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4 e3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xd3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xf3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('.',Chess::Color::black,"e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//boost::shared_ptr&lt;Piece&gt; p(new PiecePawn(Chess::Color::black,boost::shared_ptr&lt;Square&gt;(new Square("e4"))));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4 e5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xd4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xf5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4 e3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xd3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("e4xf3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Pawn at e4 for generating its own moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('.',Chess::Color::indeterminate,"e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const PiecePawn p(Color::indeterminate,boost::shared_ptr&lt;Square&gt;(new Square("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = p-&gt;GetMoves();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e5")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd5")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf5")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 6 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('.',Chess::Color::white,"e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//PiecePawn p(Color::white,boost::shared_ptr&lt;Square&gt;(new Square("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = p-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e5")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd5")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf5")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 3 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('.',Chess::Color::black,"e4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//PiecePawn p(Color::black,boost::shared_ptr&lt;Square&gt;(new Square("e4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = p-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4 e3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xd3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("e4xf3")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 3 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::Chess::PieceQueen::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Queen for valid moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidQueenMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::white,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::black,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::white,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::black,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Queen for invalid moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetInvalidQueenMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanDoMove(move)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceQueen(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Queen for generating its own moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('Q',Chess::Color::white,"d4");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//PieceQueen q(Color::white,boost::shared_ptr&lt;Square&gt;(new Square("d4")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = p-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 27 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("Qd4 h8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsPresent(move,moves));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Qd4 h8")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('Q',Chess::Color::white,"a1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//PieceQueen q(Color::white,boost::shared_ptr&lt;Square&gt;(new Square("a1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = p-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 21 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("Qa1 h1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsPresent(move,moves));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Qa1 h1")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Piece&gt; p = PieceFactory::Create('Q',Chess::Color::black,"b1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//PieceQueen q(Color::white,boost::shared_ptr&lt;Square&gt;(new Square("b1")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;boost::shared_ptr&lt;Move&gt; &gt; moves = p-&gt;GetMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(moves.size() == 21 * 3); //*3 due to non-check, check and checkmate moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move = MoveFactory::Create("Qb1 b8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(IsPresent(move,moves));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//assert(std::find(moves.begin(),moves.end(),MoveFactory::Create("Qb1 b8")) != moves.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
void ribi::Chess::PieceRook::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Rook for valid moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetValidRookMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::white,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::black,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::white,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::black,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Rook for invalid moves");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Moves::GetInvalidRookMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Move&gt; move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= MoveFactory::Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(move);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::indeterminate,boost::shared_ptr&lt;Square&gt;()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanDoMove(move)) { TRACE(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Piece&gt; p(new PieceRook(Chess::Color::indeterminate,Move::ParseFrom(s)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!p-&gt;CanDoMove(move));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessplayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessplayer.cpp" border = "1"><tr><td><code>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include "chessplayer.h"<br/>
<br/>
const std::string ribi::Chess::PlayerToStr(const Player player)<br/>
{<br/>
&nbsp;&nbsp;switch (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::black: return "black";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::white: return "white";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Unknown Player in PlayerToStr");<br/>
&nbsp;&nbsp;throw std::logic_error("Unknown Player in PlayerToStr");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessplayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessplayer.h" border = "1"><tr><td><code>
#ifndef CHESSPLAYER_H<br/>
#define CHESSPLAYER_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///Player is a chess player<br/>
enum class Player { white, black };<br/>
const std::string PlayerToStr(const Player player);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSPLAYER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessrank.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessrank.cpp" border = "1"><tr><td><code>
#include "chessrank.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::Rank::Rank(const std::string&amp; y)<br/>
&nbsp;&nbsp;: m_rank(y)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (m_rank.size() != 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("A chess ranks consists of a single-chacter std::string with values from 1 to and including 8");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;int&gt;(y);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (boost::bad_lexical_cast&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("A chess ranks consists of a value from 1 to and including 8");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const int i = boost::lexical_cast&lt;int&gt;(y);<br/>
<br/>
&nbsp;&nbsp;if (i &lt; 1 || i &gt; 8)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("Chess ranks go from 1 to and including 8");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(boost::lexical_cast&lt;int&gt;(m_rank) &gt;= 1);<br/>
&nbsp;&nbsp;assert(boost::lexical_cast&lt;int&gt;(m_rank) &lt;= 8);<br/>
}<br/>
<br/>
ribi::Chess::Rank::Rank(const int y)<br/>
&nbsp;&nbsp;: m_rank(boost::lexical_cast&lt;std::string&gt;(y + 1))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (y &lt; 0 || y &gt; 7)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("Chessboard y coordinats go from 0 to and including 7");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::string ribi::Chess::Rank::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Rank::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("YYYY-MM-DD: version X.Y: [description]");<br/>
&nbsp;&nbsp;v.push_back("2012-01-25: version 1.0: initial version");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
void ribi::Chess::Rank::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::Rank");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test valid Ranks from std::string");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = {"1","2","3","4","5","6","7","8"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),[](const std::string&amp; s) { Rank tmp(s); } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test valid Ranks from int");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = {0,1,2,3,4,5,6,7};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),[](const int&amp; i) { Rank tmp(i); } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test invalid Ranks from std::string");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = {"0","9","a","h"," ","A","I","aa","1a","a1","11" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank tmp(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test invalid Ranks from int");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt; v = {-1,8,10,11,100,111};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const int&amp; i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank tmp(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test individual ranks intimately");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank r("1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToStr() == "1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank r("8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToStr() == "8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToInt() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank r(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToStr() == "1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank r(7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToStr() == "8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(r.ToInt() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
int ribi::Chess::Rank::ToInt() const<br/>
{<br/>
&nbsp;&nbsp;assert(boost::lexical_cast&lt;int&gt;(m_rank) &gt;= 1);<br/>
&nbsp;&nbsp;assert(boost::lexical_cast&lt;int&gt;(m_rank) &lt;= 8);<br/>
&nbsp;&nbsp;return boost::lexical_cast&lt;int&gt;(m_rank) - 1;<br/>
}<br/>
<br/>
const std::string&amp; ribi::Chess::Rank::ToStr() const<br/>
{<br/>
&nbsp;&nbsp;return m_rank;<br/>
}<br/>
<br/>
/*<br/>
Rank&amp; ribi::Chess::Rank::operator++()<br/>
{<br/>
&nbsp;&nbsp;assert(m_rank != std::string("8"));<br/>
&nbsp;&nbsp;m_rank = boost::lexical_cast&lt;std::string&gt;(++boost::lexical_cast&lt;int&gt;(m_rank));<br/>
&nbsp;&nbsp;return *this;<br/>
}<br/>
<br/>
Rank&amp; ribi::Chess::Rank::operator--()<br/>
{<br/>
&nbsp;&nbsp;assert(m_rank != std::string("1"));<br/>
&nbsp;&nbsp;m_rank = boost::lexical_cast&lt;std::string&gt;(--boost::lexical_cast&lt;int&gt;(m_rank));<br/>
&nbsp;&nbsp;return *this;<br/>
}<br/>
*/<br/>
<br/>
bool ribi::Chess::operator==(const Chess::Rank&amp; lhs, const Chess::Rank&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return lhs.ToStr() == rhs.ToStr();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessrank.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessrank.h" border = "1"><tr><td><code>
<br/>
#ifndef CHESSRANK_H<br/>
#define CHESSRANK_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///Rank is the y coordinat on the Board<br/>
struct Rank<br/>
{<br/>
&nbsp;&nbsp;///Create a Rank from a single-character std::string<br/>
&nbsp;&nbsp;///Use std::string instead of char to prevent implicit typecasts<br/>
&nbsp;&nbsp;explicit Rank(const std::string&amp; rank);<br/>
<br/>
&nbsp;&nbsp;///Create a Rank from its y coordinat<br/>
&nbsp;&nbsp;explicit Rank(const int y);<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Convert the Rank to its y coordinat on the Board, for example 0 for square h1<br/>
&nbsp;&nbsp;int ToInt() const;<br/>
<br/>
&nbsp;&nbsp;///Convert the Rank to its single-character string, for example "1" for square h1<br/>
&nbsp;&nbsp;const std::string&amp; ToStr() const;<br/>
<br/>
&nbsp;&nbsp;//Increment rank, e.g. from '1' to'2'<br/>
&nbsp;&nbsp;//Rank&amp; operator++();<br/>
<br/>
&nbsp;&nbsp;//Decrement rank, e.g. from '2' to'1'<br/>
&nbsp;&nbsp;//Rank&amp; operator--();<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///The Rank as a single-character std::string, for example "1"<br/>
&nbsp;&nbsp;///Use std::string instead of char to prevent implicit typecasts<br/>
&nbsp;&nbsp;const std::string m_rank;<br/>
};<br/>
<br/>
bool operator==(const Rank&amp; lhs, const Rank&amp; rhs);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSRANK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessscore.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessscore.cpp" border = "1"><tr><td><code>
#include "chessscore.h"<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;stdexcept&gt;<br/>
#include &lt;vector&gt;<br/>
#include "trace.h"<br/>
<br/>
<br/>
ribi::Chess::Score::Score(const std::string&amp; s)<br/>
&nbsp;&nbsp;: m_is_black_winner(s == std::string("0-1")),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_draw(s == std::string("1/2-1/2")),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_white_winner(s == std::string("1-0"))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if ( !m_is_black_winner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; !m_is_draw<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; !m_is_white_winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::logic_error("ribi::Chess::Score::Score exception: invalid score");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::string ribi::Chess::Score::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Score::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("YYYY-MM-DD: version X.Y: [description]");<br/>
&nbsp;&nbsp;v.push_back("2012-01-25: version 1.0: initial version");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Chess::Score::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::Score");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test valid scores being valid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = { "0-1", "1/2-1/2", "1-0" } ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Score tmp(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert("Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Test invalid scores being invalid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = { "1-1", "1/2-1", "1-1/2", "0-0", "a3", "a2 a3", "0-0-0", "Qd4", "Qd4 e5" } ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Score tmp(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert("Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Okay: invalid Score is determined being invalid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::Chess::Score::ToStr() const<br/>
{<br/>
&nbsp;&nbsp;if (m_is_black_winner) return "0-1";<br/>
&nbsp;&nbsp;if (m_is_draw) return "1/2-1/2";<br/>
&nbsp;&nbsp;if (m_is_white_winner) return "1-0";<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Cannot create score");<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Chess::operator&lt;&lt;(std::ostream&amp; os, const Score&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; s.ToStr();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
<br/>
bool ribi::Chess::operator==(const Score&amp; lhs, const Score&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.IsBlackWinner() == rhs.IsBlackWinner()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.IsDraw()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== rhs.IsDraw()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.IsWhiteWinner() == rhs.IsWhiteWinner();<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Score&amp; lhs, const Score&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs==rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chessscore.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chessscore.h" border = "1"><tr><td><code>
#ifndef CHESSSCORE_H<br/>
#define CHESSSCORE_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///Score contains the score that ends a chess match<br/>
struct Score<br/>
{<br/>
&nbsp;&nbsp;Score(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;bool IsBlackWinner() const { return m_is_black_winner; }<br/>
&nbsp;&nbsp;bool IsDraw() const { return m_is_draw; }<br/>
&nbsp;&nbsp;bool IsWhiteWinner() const { return m_is_white_winner; }<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test if Score is working correctly<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert a Score to string<br/>
&nbsp;&nbsp;const std::string ToStr() const;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;const bool m_is_black_winner;<br/>
&nbsp;&nbsp;const bool m_is_draw;<br/>
&nbsp;&nbsp;const bool m_is_white_winner;<br/>
};<br/>
<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Score&amp; s);<br/>
bool operator==(const Score&amp; lhs, const Score&amp; rhs);<br/>
bool operator!=(const Score&amp; lhs, const Score&amp; rhs);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSSCORE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesssquare.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesssquare.cpp" border = "1"><tr><td><code>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "chesssquare.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::Square::Square(const Chess::File&amp; x, const Chess::Rank&amp; y)<br/>
&nbsp;&nbsp;: m_file(x), m_rank(y)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
ribi::Chess::Square::Square(const std::string &amp;s)<br/>
&nbsp;&nbsp;: m_file(Chess::File(boost::lexical_cast&lt;std::string&gt;(s.at(0)))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rank(Chess::Rank(boost::lexical_cast&lt;std::string&gt;(s.at(1))))<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;if (s.empty()) throw std::logic_error("An empty string cannot be converted to a chess square");<br/>
&nbsp;&nbsp;if (s.size() != 2) throw std::logic_error("An string to be converted to a chess square must consist of exactly two characters");<br/>
}<br/>
<br/>
//ribi::Chess::Square::Square(const char * const s)<br/>
//&nbsp;&nbsp;: m_x(Chess::File(s[0]),<br/>
//&nbsp;&nbsp;&nbsp;&nbsp;m_y(Chess::Rank(boost::lexical_cast&lt;int&gt;(s[1])))<br/>
//{<br/>
//&nbsp;&nbsp;assert(s);<br/>
//&nbsp;&nbsp;assert(std::strlen(s) == 2);<br/>
//}<br/>
<br/>
ribi::Chess::Color ribi::Chess::Square::GetColor() const<br/>
{<br/>
&nbsp;&nbsp;return ((this-&gt;GetFile().ToInt() + this-&gt;GetRank().ToInt()) % 2 == 1 ? Color::white : Color::black);<br/>
}<br/>
<br/>
const std::string ribi::Chess::Square::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::Square::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2012-01-25: version 1.0: initial version");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Chess::Square::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::File::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Rank::Test();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test Chess::Square operators and constructor");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square s("a1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square t("a1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square u(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square v("a2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s == t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(t == u);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s != v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(u != v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test a1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square s("a1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToStr() == "a");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank().ToStr() == std::string("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank().ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetColor() == Color::black);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test b1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square s("b1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToStr() == "b");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank().ToStr() == std::string("1"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToInt() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank().ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetColor() == Color::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test a2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square s("a2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToStr() == "a");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank() == Chess::Rank(std::string("2")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToInt() == 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank().ToInt() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetColor() == Color::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test d1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square s("d1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetColor() == Color::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test d8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square s("d8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetColor() == Color::black);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test g8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square s("g8");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToStr() == "g");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank() == Rank(std::string("8")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetFile().ToInt() == 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(s.GetRank().ToInt() == 7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test known-to-be-valid squares");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a1", "a8", "h1", "h8", "d4"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square x(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert("Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Test known-to-be-invalid squares");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A1", "a9", "H8", "h9", "i1", "a", "A", "1", "9", "a10", "h10", "aa1", "a1a", "11", "aa"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool ok = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chess::Square x(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Ok!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok = true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ok)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert("Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTRACE("Tested Chess::Square successfully");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.detach();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::Chess::Square::ToStr() const<br/>
{<br/>
&nbsp;&nbsp;std::string s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= boost::lexical_cast&lt;std::string&gt;(GetFile().ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(GetRank().ToStr());<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Chess::operator&lt;&lt;(std::ostream&amp; os, const Square&amp; s)<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; s.ToStr();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
<br/>
bool ribi::Chess::operator==(const Square&amp; lhs, const Square&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return lhs.GetFile() == rhs.GetFile()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetRank() == rhs.GetRank();<br/>
}<br/>
<br/>
bool ribi::Chess::operator!=(const Square&amp; lhs, const Square&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesssquare.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesssquare.h" border = "1"><tr><td><code>
#ifndef CHESSSQUARE_H<br/>
#define CHESSSQUARE_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;boost/checked_delete.hpp&gt;<br/>
#include "chesscolor.h"<br/>
#include "chessfile.h"<br/>
#include "chessrank.h"<br/>
#include "chessfwd.h"<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///Square is the square on a Board, for example 'a1'<br/>
///ToInt can be used to derive the coordinat of the square on a chessboard<br/>
struct Square<br/>
{<br/>
&nbsp;&nbsp;///Obtain a Square from its notational form<br/>
&nbsp;&nbsp;///Note that s is checked for validity after contruction<br/>
&nbsp;&nbsp;//Square(const char * const s);<br/>
<br/>
&nbsp;&nbsp;///Conclude the color of the square<br/>
&nbsp;&nbsp;Chess::Color GetColor() const;<br/>
<br/>
&nbsp;&nbsp;///Obtain the File (X direction) of the Square<br/>
&nbsp;&nbsp;const Chess::File&amp; GetFile() const { return m_file; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the Rank (Y direction) of the Square<br/>
&nbsp;&nbsp;const Chess::Rank&amp; GetRank() const { return m_rank; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Test the correct working of Square<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///Convert the Square to a string<br/>
&nbsp;&nbsp;const std::string ToStr() const;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///Obtain a Square from its coordinats<br/>
&nbsp;&nbsp;explicit Square(const Chess::File&amp; x, const Chess::Rank&amp; y);<br/>
<br/>
&nbsp;&nbsp;///Obtain a Square from its notational form<br/>
&nbsp;&nbsp;explicit Square(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///the file or x-coordinat of the square, a2 has m_file of 0<br/>
&nbsp;&nbsp;const Chess::File m_file; //X<br/>
<br/>
&nbsp;&nbsp;///the rank or y-coordinat of the square, a2 has m_file of 1<br/>
&nbsp;&nbsp;const Chess::Rank m_rank; //Y<br/>
<br/>
&nbsp;&nbsp;~Square() {}<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(Square *);<br/>
&nbsp;&nbsp;friend class SquareFactory;<br/>
};<br/>
<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Chess::Square&amp; s);<br/>
bool operator==(const Chess::Square&amp; lhs, const Chess::Square&amp; rhs);<br/>
bool operator!=(const Chess::Square&amp; lhs, const Chess::Square&amp; rhs);<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSSQUARE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesssquarefactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesssquarefactory.cpp" border = "1"><tr><td><code>
#include "chesssquarefactory.h"<br/>
#include "chesssquare.h"<br/>
const boost::shared_ptr&lt;ribi::Chess::Square&gt; ribi::Chess::SquareFactory::Create(<br/>
&nbsp;&nbsp;const File&amp; x,<br/>
&nbsp;&nbsp;const Rank&amp; y)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Square(x,y)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Square&gt; ribi::Chess::SquareFactory::Create(<br/>
&nbsp;&nbsp;const std::string&amp; text)<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new Square(text)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(s);<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Chess::Square&gt; ribi::Chess::SquareFactory::DeepCopy(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; s) noexcept<br/>
{<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;ribi::Chess::Square&gt; t {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(s-&gt;ToStr())<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(t);<br/>
&nbsp;&nbsp;assert(*s == *t &amp;&amp; "Must be a copy");<br/>
&nbsp;&nbsp;assert(s != t &amp;&amp; "Must be a deep copy");<br/>
&nbsp;&nbsp;return t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesssquarefactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesssquarefactory.h" border = "1"><tr><td><code>
#ifndef CHESSSQUAREFACTORY_H<br/>
#define CHESSSQUAREFACTORY_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "chessfwd.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
struct SquareFactory<br/>
{<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Square&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Chess::File&amp; x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Chess::Rank&amp; y);<br/>
<br/>
&nbsp;&nbsp;///Obtain a Square from its notational form<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Square&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; s);<br/>
&nbsp;&nbsp;//template &lt;class T = Square, template &lt;typename&gt; class Cont = boost::shared_ptr&gt;<br/>
&nbsp;&nbsp;//static Cont&lt;T&gt; Create(<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;const std::string&amp; s);<br/>
<br/>
<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Square&gt; DeepCopy(const boost::shared_ptr&lt;const Square&gt; s) noexcept;<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSSQUAREFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesssquareselector.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesssquareselector.cpp" border = "1"><tr><td><code>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;memory&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
#include "chessboard.h"<br/>
#include "chessfile.h"<br/>
#include "chessmove.h"<br/>
#include "chesspiece.h"<br/>
#include "chesssquare.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chesssquareselector.h"<br/>
#include "chessmove.h"<br/>
#include "chesswidget.h"<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Chess::SquareSelector::SquareSelector()<br/>
&nbsp;&nbsp;: m_signal_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cursor(GetInitialSquare()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_selected{}<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
}<br/>
<br/>
void ribi::Chess::SquareSelector::Click(<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square,<br/>
&nbsp;&nbsp;const bool can_select_square)<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
<br/>
&nbsp;&nbsp;//No square selected: set cursor and selector on selected piece<br/>
&nbsp;&nbsp;if (!m_selected)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cursor = square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (can_select_square)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_selected = square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_selected = no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//A square is already selected<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//The selected piece is unselected: set cursor on unselected square, set selector to null<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*m_cursor == *m_selected)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cursor = square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_selected = no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Another square is selected: keep selector on selected piece<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Don't care if move is valid:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//- if move is valid,&nbsp;&nbsp; piece&nbsp;&nbsp; is moved and selector is removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//- if move is invalid, nothing is moved and selector is removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cursor = square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_selected = no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
}<br/>
<br/>
void ribi::Chess::SquareSelector::DoSelect()<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
<br/>
&nbsp;&nbsp;//No square selected<br/>
&nbsp;&nbsp;if (!m_selected)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_selected.reset(new Square(*m_cursor));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//A square is already selected<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//The selected piece is unselected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (*m_cursor == *m_selected)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_selected = no_selection;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Another square is selected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_selected.reset(new Square(*m_cursor));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
boost::shared_ptr&lt;ribi::Chess::Square&gt; ribi::Chess::SquareSelector::GetInitialSquare()<br/>
{<br/>
&nbsp;&nbsp;const std::string s { "c3" };<br/>
&nbsp;&nbsp;return SquareFactory::Create(s);<br/>
}<br/>
<br/>
const std::string ribi::Chess::SquareSelector::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;const ribi::Chess::Square&gt; ribi::Chess::SquareSelector::GetSelected() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_selected;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::SquareSelector::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
void ribi::Chess::SquareSelector::MoveDown()<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
&nbsp;&nbsp;if (m_cursor-&gt;GetRank().ToInt() != 7)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File(m_cursor-&gt;GetFile().ToInt() + 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank(m_cursor-&gt;GetRank().ToInt() + 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cursor = square;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::Chess::SquareSelector::MoveLeft()<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
&nbsp;&nbsp;if (m_cursor-&gt;GetFile().ToInt() != 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File(m_cursor-&gt;GetFile().ToInt() - 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank(m_cursor-&gt;GetRank().ToInt() + 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cursor = square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::Chess::SquareSelector::MoveRight()<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
&nbsp;&nbsp;if (m_cursor-&gt;GetFile().ToInt() != 7)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File(m_cursor-&gt;GetFile().ToInt() + 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank(m_cursor-&gt;GetRank().ToInt() + 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cursor = square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
void ribi::Chess::SquareSelector::MoveUp()<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
&nbsp;&nbsp;if (m_cursor-&gt;GetRank().ToInt() != 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File(m_cursor-&gt;GetFile().ToInt() + 0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank(m_cursor-&gt;GetRank().ToInt() - 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cursor = square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::string ribi::Chess::SquareSelector::ToStr() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_cursor);<br/>
&nbsp;&nbsp;std::string s = "Cursor: " + m_cursor-&gt;ToStr();<br/>
&nbsp;&nbsp;if (m_selected)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s += ", selected: " + m_selected-&gt;ToStr();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesssquareselector.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesssquareselector.h" border = "1"><tr><td><code>
#ifndef CHESSSQUARESELECTOR_H<br/>
#define CHESSSQUARESELECTOR_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/scoped_ptr.hpp&gt;<br/>
#include &lt;boost/signals2.hpp&gt;<br/>
<br/>
#include "chesscolor.h"<br/>
#include "chessfwd.h"<br/>
//#include "chesssquare.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Chess {<br/>
<br/>
///SquareSelector is the selector of a Chess::BoardWidget<br/>
///It consists of an ever-present cursor and a possibly selected square<br/>
struct SquareSelector<br/>
{<br/>
&nbsp;&nbsp;SquareSelector();<br/>
<br/>
&nbsp;&nbsp;///Respond to a click on a certain square<br/>
&nbsp;&nbsp;void Click(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; square,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const bool can_select_square);<br/>
<br/>
&nbsp;&nbsp;///Select the square the cursor is on<br/>
&nbsp;&nbsp;void DoSelect();<br/>
<br/>
&nbsp;&nbsp;///The initially selected Square<br/>
&nbsp;&nbsp;static boost::shared_ptr&lt;Square&gt; GetInitialSquare();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the location of the cursor<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; GetCursor() const { return m_cursor; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the location of the cursor<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; GetSelected() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Try to move the cursor down<br/>
&nbsp;&nbsp;void MoveDown();<br/>
<br/>
&nbsp;&nbsp;///Try to move the cursor to the left<br/>
&nbsp;&nbsp;void MoveLeft();<br/>
<br/>
&nbsp;&nbsp;///Try to move the cursor to the right<br/>
&nbsp;&nbsp;void MoveRight();<br/>
<br/>
&nbsp;&nbsp;///Try to move the cursor up<br/>
&nbsp;&nbsp;void MoveUp();<br/>
<br/>
&nbsp;&nbsp;///Convert the SquareSelector to a std::string<br/>
&nbsp;&nbsp;const std::string ToStr() const;<br/>
<br/>
&nbsp;&nbsp;///Respond to a change in size<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void ()&gt; m_signal_changed;<br/>
<br/>
&nbsp;&nbsp;static const Chess::Color m_cursor_color = Color::green;<br/>
&nbsp;&nbsp;static const Chess::Color m_selected_color = Color::red;<br/>
&nbsp;&nbsp;static const Chess::Color m_moves_color = Color::blue;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;~SquareSelector() {}<br/>
<br/>
&nbsp;&nbsp;///The Square the cursor is.<br/>
&nbsp;&nbsp;///There will always be a cursor somewhere<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Square&gt; m_cursor;<br/>
<br/>
&nbsp;&nbsp;///The selected Square, if any<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;const Square&gt; m_selected;<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(SquareSelector* x);<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSSQUARESELECTOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesswidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesswidget.cpp" border = "1"><tr><td><code>
#include "chesswidget.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#ifdef MXE_SUPPORTS_THREADS<br/>
#include &lt;thread&gt;<br/>
#endif<br/>
<br/>
#include "chessboard.h"<br/>
#include "chesspiece.h"<br/>
#include "chessgame.h"<br/>
#include "chesssquare.h"<br/>
#include "chesssquarefactory.h"<br/>
#include "chesssquareselector.h"<br/>
#include "trace.h"<br/>
<br/>
ribi::Chess::ChessWidget::ChessWidget(const Rect&amp; geometry)<br/>
&nbsp;&nbsp;: m_signal_graphic_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_selector{new SquareSelector}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;ribi::Chess::ChessWidget::Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;m_selector-&gt;m_signal_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::bind(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ribi::Chess::ChessWidget::OnChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;this-&gt;SetGeometry(geometry);<br/>
}<br/>
<br/>
ribi::Chess::ChessWidget::~ChessWidget()<br/>
{<br/>
&nbsp;&nbsp;//All done automatically<br/>
}<br/>
<br/>
void ribi::Chess::ChessWidget::ClickPixel(const int x,const int y)<br/>
{<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Square&gt; square {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SquareFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File(8 * x / this-&gt;GetGeometry().GetWidth()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rank(8 * y / this-&gt;GetGeometry().GetHeight())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(square);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;Click(square);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//No problem<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const std::string ribi::Chess::ChessWidget::GetVersion()<br/>
{<br/>
&nbsp;&nbsp;return "1.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Chess::ChessWidget::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: version 1.0: initial version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
void ribi::Chess::ChessWidget::OnChanged() const<br/>
{<br/>
&nbsp;&nbsp;m_signal_graphic_changed();<br/>
}<br/>
<br/>
void ribi::Chess::ChessWidget::PressKey(const ChessWidget::Key key)<br/>
{<br/>
&nbsp;&nbsp;switch (key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Key::up&nbsp;&nbsp;&nbsp;&nbsp;: m_selector-&gt;MoveUp(); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Key::right : m_selector-&gt;MoveRight(); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Key::down&nbsp;&nbsp;: m_selector-&gt;MoveDown(); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Key::left&nbsp;&nbsp;: m_selector-&gt;MoveLeft(); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Key::select: this-&gt;Click(m_selector-&gt;GetCursor()); break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::Chess::ChessWidget::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;//Testing Chess::Widget exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;std::thread t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Widget &gt; w(new Widget);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w-&gt;SetGeometry(Rect(0,0,100,100));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Nothing to test<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#ifdef MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.join();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/chesswidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/chesswidget.h" border = "1"><tr><td><code>
#ifndef CHESSWIDGET_H<br/>
#define CHESSWIDGET_H<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
//#include "chessboard.h"<br/>
#include "chessfwd.h"<br/>
#include "widget.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
struct Rect;<br/>
<br/>
namespace Chess {<br/>
<br/>
///Chess::ChessWidget is a Widget to interact with a Chess class:<br/>
///Where the Chess::Board is very picky about valid moves,<br/>
///the Chess::ChessWidget enables simple interaction with it<br/>
///Note the name, which is to prevent conflict with the Widget class<br/>
struct ChessWidget : public ribi::Widget<br/>
{<br/>
&nbsp;&nbsp;enum class Key { up, down, left, right, select };<br/>
<br/>
&nbsp;&nbsp;///Emit this signal when the chessboard changes<br/>
&nbsp;&nbsp;mutable boost::signals2::signal&lt;void ()&gt; m_signal_graphic_changed;<br/>
<br/>
&nbsp;&nbsp;ChessWidget(const Rect&amp; geometry);<br/>
<br/>
&nbsp;&nbsp;//Base classes must have a public destructor:<br/>
&nbsp;&nbsp;//Herb Sutter, Andrei Alexandrescu. C++ coding standards:<br/>
&nbsp;&nbsp;//101 rules, guidelines, and best practices.<br/>
&nbsp;&nbsp;//ISBN: 0-32-111358-6. Item 50: 'Make base class destructors<br/>
&nbsp;&nbsp;//public and virtual, or protected and nonvirtual'.<br/>
&nbsp;&nbsp;virtual ~ChessWidget();<br/>
<br/>
&nbsp;&nbsp;///Can do a move?<br/>
&nbsp;&nbsp;virtual bool CanDoMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; to) const noexcept = 0;<br/>
<br/>
&nbsp;&nbsp;///Respond to a click<br/>
&nbsp;&nbsp;///Note: originally, this method was called Click, but it conflicted with Click(const Square&amp;) :-(<br/>
&nbsp;&nbsp;void ClickPixel(const int x, const int y);<br/>
<br/>
&nbsp;&nbsp;///Do a move<br/>
&nbsp;&nbsp;virtual void DoMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;const Square&gt; to) = 0;<br/>
<br/>
&nbsp;&nbsp;///Obtain the SquareSelector<br/>
&nbsp;&nbsp;boost::scoped_ptr&lt;Chess::SquareSelector&gt;&amp; GetSelector() { return m_selector; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the SquareSelector<br/>
&nbsp;&nbsp;const boost::scoped_ptr&lt;Chess::SquareSelector&gt;&amp; GetSelector() const { return m_selector; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the version of this class<br/>
&nbsp;&nbsp;static const std::string GetVersion();<br/>
<br/>
&nbsp;&nbsp;///Obtain the version history of this class<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;///Respond to a key being pressed<br/>
&nbsp;&nbsp;void PressKey(const Chess::ChessWidget::Key key);<br/>
<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
<br/>
&nbsp;&nbsp;///The Selector (a cursor and possibly a selected square)<br/>
&nbsp;&nbsp;boost::scoped_ptr&lt;Chess::SquareSelector&gt; m_selector;<br/>
<br/>
&nbsp;&nbsp;///Respond to a click, transformed click coordinats to a square<br/>
&nbsp;&nbsp;virtual void Click(const boost::shared_ptr&lt;const Chess::Square&gt; square) = 0;<br/>
<br/>
&nbsp;&nbsp;///OnChanged is called when the BoardWidget is changed and needs a repaint.<br/>
&nbsp;&nbsp;///BoardWidget requests for a repaint by emitting m_signal_board_changed<br/>
&nbsp;&nbsp;void OnChanged() const;<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(ChessWidget* x);<br/>
};<br/>
<br/>
} //~namespace Chess<br/>
} //~namespace ribi<br/>
<br/>
#endif // CHESSWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/CppChess.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/CppChess.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesswidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesssquareselector.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesssquarefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesssquare.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessscore.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessrank.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessplayer.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesspiecetest.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesspiecefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesspiece.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessmovetest.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessmoves.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessmovefactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessmove.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesshelper.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessgamewidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessgame.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesscolor.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesscastling.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessboardwidget.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessboardtest.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessboardfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessboard.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessbitboard.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesswidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesssquareselector.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesssquarefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesssquare.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessscore.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessrank.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessplayer.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesspiecefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesspiece.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessmoves.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessmovefactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessmove.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesshelper.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessgamewidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessgame.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessfwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesscolor.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chesscastling.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessboardwidget.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessboardfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessboard.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/chessbitboard.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppChess/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChess/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChess/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
