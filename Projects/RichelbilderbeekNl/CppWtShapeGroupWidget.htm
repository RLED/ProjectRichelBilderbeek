<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>WtShapeGroupWidget</title>
  <meta name="description" content="C++ WtShapeGroupWidget"/>
  <meta name="keywords" content="C++ WtShapeGroupWidget code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicWt.png" alt="Wt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a> is a <a href="CppWt.htm">Wt</a> 
<a href="CppWidget.htm">widget</a> <a href="CppClass.htm">class</a> to display an <a href="CppShapeGroupWidget.htm">ShapeGroupWidget</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>wtshapegroupwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="wtshapegroupwidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>, <a href="CppWt.htm">Wt</a> <a href="CppWidget.html">widget</a> <b><a href="CppFor.htm">for</a></b> displaying <a href="CppShape.html">Shape</a>s<br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtShapeGroupWidget.html">CppWtShapeGroupWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> WTSHAPEGROUPWIDGET_H<br/>
<a href="CppDefine.html">#define</a> WTSHAPEGROUPWIDGET_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintDevice.html">WPaintDevice</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintedWidget.html">WPaintedWidget</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppShape.html">Shape</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a> displays a collection of <a href="CppShape.html">Shape</a> <a href="CppInstance.html">instances</a><br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppWPaintedWidget.html">Wt::WPaintedWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppShape.html">Shape</a>s(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppShape.html">Shape</a>*&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppWPaintDevice.html">Wt::WPaintDevice</a> *paintDevice);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoRepaint();<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppShape.html">Shape</a> *&gt; &gt; m_v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppRainbow.html">Rainbow</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x,<b><a href="CppDouble.html">double</a></b>&amp; r,<b><a href="CppDouble.html">double</a></b>&amp; g,<b><a href="CppDouble.html">double</a></b>&amp; b);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> WTGROUPWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>wtshapegroupwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="wtshapegroupwidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>, <a href="CppWt.htm">Wt</a> <a href="CppWidget.html">widget</a> <b><a href="CppFor.htm">for</a></b> displaying <a href="CppShape.html">Shape</a>s<br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtShapeGroupWidget.html">CppWtShapeGroupWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppAlgorithmH.html">algorithm</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppNumericH.html">numeric</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppBOOST_FOREACH.html">foreach</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/bounds<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/bind<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/lambda/bind<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WBrush&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWEvent.html">WEvent</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintDevice.html">WPaintDevice</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPainter.html">WPainter</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WPen&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppShape.html">shape</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWtGroupWidget.html">wtgroupwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWtShapeGroupWidget.html">wtshapegroupwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWtShapeWidget.html">wtshapewidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>()<br/>
&nbsp;&nbsp;: m_v{}<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;resize(100,100);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>::DoRepaint()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-25: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>::paintEvent(<a href="CppWPaintDevice.html">Wt::WPaintDevice</a> *paintDevice)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWPainter.html">Wt::WPainter</a> painter(paintDevice);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;width().toPixels();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;height().toPixels();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw a background <a href="CppRectangle.html">rectangle</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPen.html">Wt::WPen</a> pen <a href="CppOperatorAssign.htm">=</a> painter.pen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppWColor.html">Wt::WColor</a>(1,1,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setPen(pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setBrush(<a href="CppWBrush.html">Wt::WBrush</a>(<a href="CppWColor.html">Wt::WColor</a>(254,254,254)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawRect(0.0,0.0,width,height);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_v.empty()) <b><a href="CppReturn.html">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mid_x <a href="CppOperatorAssign.htm">=</a> 0.5 * <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(width);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> mid_y <a href="CppOperatorAssign.htm">=</a> 0.5 * <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(height);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> ray_center <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.html">std::min</a>(mid_x,mid_y);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> ray_group&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.33 * ray_center;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> ray_member <a href="CppOperatorAssign.htm">=</a> 0.33 * ray_group;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_groups <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(m_v.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> group=0; group<a href="CppOperatorNotEqual.htm">!=</a>n_groups; <a href="CppOperatorPlus.htm">+</a>+group)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the larger (group) circles first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the pen to black<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPen.html">Wt::WPen</a> pen <a href="CppOperatorAssign.htm">=</a> painter.pen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppWColor.html">Wt::WColor</a>(1,1,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.setPen(pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> f_group<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (n_groups <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp; ? <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(group) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(n_groups)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; : 1.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the brush to the group's index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> r,g,b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRainbow.html">Rainbow</a>(f_group,r,g,b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.setBrush(<a href="CppWBrush.html">Wt::WBrush</a>(<a href="CppWColor.html">Wt::WColor</a>(r*255.0,g*255.0,b*255.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a> * f_group;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> group_mid_x <a href="CppOperatorAssign.htm">=</a> mid_x <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(angle) * 0.66 * ray_center);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> group_mid_y <a href="CppOperatorAssign.htm">=</a> mid_y <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(angle) * 0.66 * ray_center);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the group ellipse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawEllipse(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group_mid_x <a href="CppOperatorMinus.htm">-</a> ray_group,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group_mid_y <a href="CppOperatorMinus.htm">-</a> ray_group,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0 * ray_group,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0 * ray_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppShape.html">Shape</a>*&gt;&amp; members <a href="CppOperatorAssign.htm">=</a> m_v[group];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_members <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(members.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> member=0; member<a href="CppOperatorNotEqual.htm">!=</a>n_members;<a href="CppOperatorIncrement.htm">++</a>member)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> f_member<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (n_members <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ? <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(member) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(n_members)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a> * f_member;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> member_mid_x <a href="CppOperatorAssign.htm">=</a> group_mid_x <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(angle) * 0.66 * ray_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> member_mid_y <a href="CppOperatorAssign.htm">=</a> group_mid_y <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(angle) * 0.66 * ray_group);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the member his/her <a href="CppShape.html">Shape</a> ellipse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtShapeWidget.html">WtShapeWidget</a>::Draw<a href="CppShape.html">Shape</a>(painter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;member_mid_x <a href="CppOperatorMinus.htm">-</a> ray_member,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;member_mid_y <a href="CppOperatorMinus.htm">-</a> ray_member,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0 * ray_member,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0 * ray_member,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;members[member]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRainbow.html">CppRainbow</a>.html<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>::<a href="CppRainbow.html">Rainbow</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; r,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; g,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> f_r <a href="CppOperatorAssign.htm">=</a> <a href="CppMax.html">std::max</a>(0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(x &lt; 0.5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppCos.html">std::cos</a>(x * 1.5 * <a href="CppM_PI.htm">M_PI</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppOperatorMinus.htm">-</a><a href="CppSin.html">std::sin</a>(x * 1.5 * <a href="CppM_PI.htm">M_PI</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> f_g <a href="CppOperatorAssign.htm">=</a> <a href="CppMax.html">std::max</a>(0.0, <a href="CppSin.html">std::sin</a>( x * 1.5 * <a href="CppM_PI.htm">M_PI</a> ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> f_b <a href="CppOperatorAssign.htm">=</a> <a href="CppMax.html">std::max</a>(0.0, <a href="CppOperatorMinus.htm">-</a><a href="CppCos.html">std::cos</a>( x * 1.5 * <a href="CppM_PI.htm">M_PI</a> ) );<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> max <a href="CppOperatorAssign.htm">=</a> <a href="CppMax.html">std::max</a>(f_r, <a href="CppMax.html">std::max</a>(f_g,f_b));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(max<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;r <a href="CppOperatorAssign.htm">=</a> f_r <a href="CppOperatorDivide.htm">/</a> max;<br/>
&nbsp;&nbsp;g <a href="CppOperatorAssign.htm">=</a> f_g <a href="CppOperatorDivide.htm">/</a> max;<br/>
&nbsp;&nbsp;b <a href="CppOperatorAssign.htm">=</a> f_b <a href="CppOperatorDivide.htm">/</a> max;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtShapeGroupWidget.html">WtShapeGroupWidget</a>::Set<a href="CppShape.html">Shape</a>s(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppShape.html">Shape</a>*&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;m_v <a href="CppOperatorAssign.htm">=</a> v;<br/>
&nbsp;&nbsp;update();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
