 
<title>std::mem_fun</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ std::mem_fun</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek std::mem_fun_ref std mem_fun member function algorithm for_each</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>10</o:Revision>
  <o:TotalTime>132</o:TotalTime>
  <o:Created>2008-05-03T07:00:00Z</o:Created>
  <o:LastSaved>2009-12-29T14:22:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>324</o:Words>
  <o:Characters>1847</o:Characters>
  <o:Category>C++ Richel Bilderbeek std::mem_fun</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>15</o:Lines>
  <o:Paragraphs>3</o:Paragraphs>
  <o:CharactersWithSpaces>2268</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::mem_fun</title>
  <meta name="description" content="C++ std::mem_fun"/>
  <meta name="keywords" content="C++ std::mem_fun std mem_fun mem fun"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMem_fun.htm">std::mem_fun</a></h1>
<p>&nbsp;</p>
<p>An <a href="CppAdapter.htm">adapter</a> to be able to use <a href="CppFor_each.htm">for_each</a>
on a <a href="CppMemberFunction.htm">member function</a> of T stored in a <a href="CppContainer.htm">container</a> as T* (compare 
<a href="CppMem_fun_ref.htm">std::mem_fun_ref</a>, to use <a href="CppFor_each.htm">for_each</a>
on a <a href="CppMemberFunction.htm">member function</a> of T stored in a <a href="CppContainer.htm">container</a> as T ).</p>
<p>&nbsp;</p>
<p>Use a <a href="CppContainer.htm">container</a> of <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt; instead.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Replacing a <a href="CppFor.htm">for</a> loop by algorithms using <a href="CppMem_fun.htm">std::mem_fun</a></h2>
<p>&nbsp;</p>




<p><a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;</p>

<p>&nbsp;</p>

<p><b> <a href="CppStruct.htm">struct</a> </b>  Widget</p>

<p>{</p>

<p>   <b><a href="CppVoid.htm">void</a></b>
DoIt() <b><a href="CppConst.htm">const</a></b> { /* do it */ }</p>

<p>};</p>

<p>&nbsp;</p>

<p><b> <a href="CppVoid.htm">void</a> </b>  DoIt(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Widget*&gt;&amp;
v)</p>

<p>{</p>

<p>   <b><a href="CppConst.htm">const</a></b>
<b><a href="CppInt.htm">int</a></b> sz = v.size();</p>

<p>   <b><a href="CppFor.htm">for</a></b>
(<b><a href="CppInt.htm">int</a></b> i=0; i!=sz; ++i)</p>

<p>   {</p>

<p>     v[i]-&gt;DoIt();</p>

<p>   }</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p><a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;</p>

<p>&nbsp;</p>

<p><b> <a href="CppStruct.htm">struct</a> </b>  Widget</p>

<p>{</p>

<p>   <b><a href="CppVoid.htm">void</a></b>
DoIt() <b><a href="CppConst.htm">const</a></b> { /* do it */ }</p>

<p>};</p>

<p>&nbsp;</p>

<p><b> <a href="CppVoid.htm">void</a> </b>  DoIt(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;Widget*&gt;&amp;
v)</p>

<p>{</p>

<p>   <a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<a
href="CppMem_fun.htm">std::mem_fun</a>(&amp;Widget::DoIt));</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
