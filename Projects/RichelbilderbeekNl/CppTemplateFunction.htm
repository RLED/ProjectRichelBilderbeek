<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>template function</title>
  <meta name="description" content="C++ template function"/>
  <meta name="keywords" content="C++ template function code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTemplateFunction.htm">template function</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppTemplateFunction.htm">template function</a> is a <a href="CppFunction.htm">function</a> 
with <a href="CppTemplate.htm">template</a> arguments.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: abs</h2>
<p>&nbsp;</p>
<p>Suppose you want to write a <a href="CppFunction.htm">function</a> that <a
href="CppReturn.htm">returns</a> the absolute value of a number, for both <b><a
href="CppInt.htm">int</a></b> and <b><a href="CppDouble.htm">double</a></b>. The
absolute value of a number is its value without regard to its sign: The
absolute value of 3 is 3 and the absolute value of -3 is also 3.</p>
<p>&nbsp;</p>
<p>These functions could be written like below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> Abs(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (n &lt; 0 ? <a href="CppOperatorMinus.htm">-</a>n : n);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppDouble.htm">double</a></b> Abs(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (n &lt; 0 ? <a href="CppOperatorMinus.htm">-</a>n : n);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The body of these are identical, yet for every <a href="CppDataType.htm">data type</a>
you will need to write a different <a href="CppFunction.htm">function</a>.</p>
<p>&nbsp;</p>
<p>Instead, a <a href="CppTemplateFunction.htm">template function</a> can be used:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
T Abs(<b><a href="CppConst.htm">const</a></b> T n)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (n &lt; 0 ? <a href="CppOperatorMinus.htm">-</a>n : n);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note that this example is similar to <a href="CppAbs.htm">std::abs</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
