 
<title>std::search_n</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ std::search_n</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek std::search_n std search_n search algorithm</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>15</o:Revision>
  <o:TotalTime>166</o:TotalTime>
  <o:Created>2009-05-07T10:05:00Z</o:Created>
  <o:LastSaved>2009-05-07T10:20:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>261</o:Words>
  <o:Characters>1491</o:Characters>
  <o:Category>C++ Richel Bilderbeek std::search_n</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>12</o:Lines>
  <o:Paragraphs>2</o:Paragraphs>
  <o:CharactersWithSpaces>1831</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::search_n</title>
  <meta name="description" content="C++ std::search_n"/>
  <meta name="keywords" content="C++ std::search_n"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSearch_n.htm">std::search_n</a></h1>
<p>&nbsp;</p>
<p><a href="CppAlgorithm.htm">Algorithm</a> to find a repeating sequence in a <a href="CppContainer.htm">container</a>.</p>
<p>&nbsp;</p>
<p>Prefer algorithm calls over hand-written loops [1,2].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>

 

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppCassertH.htm">cassert</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppStringH.htm">string</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;</p>

<p>&nbsp;</p>

<p><b> <a href="CppInt.htm">int</a> </b>  <a href="CppMain.htm">main</a>()</p>

<p>{</p>

<p>
 <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>
s = &quot;abc***def&quot;;</p>

<p>
 /* <b><a href="CppConst.htm">const</a></b> */ <b><a href="CppInt.htm">int</a></b>
n = 3; //Number of repeats //Note: Must leave out <b><a href="CppConst.htm">const</a></b>,
don't known why</p>

<p>
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b>
c = '*'; //Character to find</p>

<p>&nbsp;</p>

<p>
 //Assume three Kleene stars can be found</p>

<p>
 <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>::
<a href="CppConst_iterator.htm">const_iterator</a> i =   <a
href="CppSearch_n.htm"> std::search_n</a> ( s.begin(),s.end(),n,c);</p>

<p>
 <a href="CppAssert.htm">assert</a>( i != s.end() );</p>

<p>&nbsp;</p>

<p>
 //Assume four Kleene stars cannot be found</p>

<p>
 <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>::<a
href="CppConst_iterator.htm">const_iterator</a> j =   <a
href="CppSearch_n.htm"> std::search_n</a> ( s.begin(),s.end(),n+1,c);</p>

<p>
 <a href="CppAssert.htm">assert</a>( j == s.end() );</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4. Chapter 18.12.1: 'Prefer algorithms to loops'.</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective STL. ISBN: 0-201-74962-9. Item 43: 'Prefer algorithm calls over hand-written loops'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
