<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ArrayExample1</title>
  <meta name="description" content="C++ ArrayExample1"/>
  <meta name="keywords" content="C++ ArrayExample1 code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppArrayExample1.htm">ArrayExample1</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppArrayExample1.htm">array/std::array/boost::array example 1: comparison</a></h1>
<p>&nbsp;</p>
<p><a href="CppArrayExample1.htm">array/std::array/boost::array example 1: comparison</a> is a comparison between
a plain <a href="CppArray.htm">array</a>, <a href="CppStdArray.htm">std::array</a>, <a href="CppTr1Array.htm">std::tr1::array</a> 
and <a href="CppBoostArray.htm">boost::array</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppArrayExample1.zip">Download the Qt Creator project 'CppArrayExample1' (zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><a href="CppArrayExample1Exe.zip">Download the Windows executable of 'CppArrayExample1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>The conclusions draws are (note that every 'Yes' is 'a good thing'):</p>
<p>&nbsp;</p>
<table summary="Comparison" border = "1">
  <tr>
    <td>Property tested</td>
    <td>Statically allocated plain array</td>
    <td>Dynamically allocated plain array</td>
    <td><a href="CppTr1Array.htm">std::tr1::array</a></td>
    <td><a href="CppStdArray.htm">std::array</a></td>
    <td><a href="CppBoostArray.htm">boost::array</a></td>
  </tr>
  <tr><td>Initialization at creation</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr>
  <tr><td>Initialization at creation checked against too few elements</td><td>No</td><td>N/A</td><td>No</td><td>No</td><td>No</td></tr>
  <tr><td>Initialization at creation checked against too many elements</td><td>Yes</td><td>N/A</td><td>Yes</td><td>Yes</td><td>Yes</td></tr>
  <tr><td>Size requestable at compile-time</td><td>Yes</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr>
  <tr><td>Size requestable at run-time</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppArrayExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppArrayExample1.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
#<br/>
#<br/>
# Type of compile<br/>
#<br/>
#<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(debug, debug|release) {<br/>
&nbsp;&nbsp;message(Debug mode)<br/>
}<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;message(Release mode)<br/>
<br/>
&nbsp;&nbsp;#Remove all <a href="CppAssert.htm">assert</a>s and <a href="CppTRACE.htm">TRACE</a><br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
}<br/>
<br/>
#<br/>
#<br/>
# Platform specific<br/>
#<br/>
#<br/>
<br/>
#<br/>
#<br/>
# Compiler flags<br/>
#<br/>
#<br/>
<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a> <a href="CppWerror.htm">-Werror</a><br/>
<br/>
#<br/>
#<br/>
# Boost<br/>
#<br/>
#<br/>
<br/>
unix {<br/>
&nbsp;&nbsp;message(Unix: Boost already in include path)<br/>
}<br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;message(Windows: add Boost to include path)<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../../<a href="Projects.htm">Projects</a>/<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> &lt;<a href="CppArrayH.html">array</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppArray.html">array</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppTr1.htm">tr1</a>/<a href="CppArray.html">array</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Statically allocated plain <a href="CppArray.html">array</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> w[3] <a href="CppOperatorAssign.htm">=</a> { 0,1 }; <a href="CppComment.htm">//</a>Does <a href="CppCompile.html">compile</a>: too few elements is not checked in assignment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x[3] <a href="CppOperatorAssign.htm">=</a> { 0,1,2,3 }; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.html">compile</a>: too m<a href="CppAny.htm">any</a> elements is checked in assignment<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> v[3] { 0,1,2 };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_assert.html">static_assert</a></b>(<b><a href="CppSizeof.html">sizeof</a></b>(v) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppSizeof.html">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3,"");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v[1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dynamically allocated plain <a href="CppArray.html">array</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> * <b><a href="CppConst.html">const</a></b> v { <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>(3) }; <a href="CppComment.htm">//</a>Cannot <a href="CppInitialize.html">initialize</a> directly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> 0; v[1] <a href="CppOperatorAssign.htm">=</a> 1; v[2] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_assert.html">static_assert</a></b>(<b><a href="CppSizeof.html">sizeof</a></b>(v) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppSizeof.html">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"WARNING: you might have expected <b><a href="CppThis.htm">this</a></b> to be 3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<b><a href="CppSizeof.html">sizeof</a></b>(v) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppSizeof.html">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "WARNING: you might have expected <b><a href="CppThis.htm">this</a></b> to be 3");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v[1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b>[] v; <a href="CppComment.htm">//</a>Do not forget to free <a href="CppMemory.html">memory</a> with right syntax<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTr1Array.html">std::tr1::array</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppTr1Array.html">std::tr1::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; w <a href="CppOperatorAssign.htm">=</a> { 0,1 }; <a href="CppComment.htm">//</a>Does <a href="CppCompile.html">compile</a>: too few elements is not checked in assignment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppTr1Array.html">std::tr1::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; x <a href="CppOperatorAssign.htm">=</a> { 0,1,2,3 }; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.html">compile</a>: too m<a href="CppAny.htm">any</a> elements is checked in assignment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppTr1Array.html">std::tr1::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; v { 0,1,2 }; <a href="CppComment.htm">//</a>Note the <b><a href="CppDouble.html">double</a></b> braces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic_assert.html">static_assert</a></b>(v.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3,""); <a href="CppComment.htm">//</a>Not allowed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v[1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdArray.html">std::array</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppStdArray.html">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; w <a href="CppOperatorAssign.htm">=</a> { 0,1 }; <a href="CppComment.htm">//</a>Does <a href="CppCompile.html">compile</a>: too few elements is not checked in assignment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppStdArray.html">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; x <a href="CppOperatorAssign.htm">=</a> { 0,1,2,3 }; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.html">compile</a>: too m<a href="CppAny.htm">any</a> elements is checked in assignment<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppStdArray.html">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; v { 0,1,2 }; <a href="CppComment.htm">//</a>Note the <b><a href="CppDouble.html">double</a></b> braces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_assert.html">static_assert</a></b>(v.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3,"");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v[1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostArray.html">boost::array</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppBoostArray.html">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; w <a href="CppOperatorAssign.htm">=</a> { 0,1 }; <a href="CppComment.htm">//</a>Does <a href="CppCompile.html">compile</a>: to few elements is not checked in assignment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppBoostArray.html">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; x <a href="CppOperatorAssign.htm">=</a> { 0,1,2,3 }; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.html">compile</a>: too m<a href="CppAny.htm">any</a> elements is checked in assignment<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostArray.html">boost::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,3&gt; v { 0,1,2 }; <a href="CppComment.htm">//</a>Note the <b><a href="CppDouble.html">double</a></b> braces<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic_assert.html">static_assert</a></b>(v.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3,""); <a href="CppComment.htm">//</a>Not allowed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v[1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>crosscompile.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="crosscompile.sh" border = "1"><tr><td><code>
#!/bin/bash<br/>
myqmake="../../Libraries/mxe/usr/i686-pc-mingw32/qt5/bin/qmake"<br/>
 <br/>
#Cleaning up<br/>
rm *.pro.user<br/>
rm Makefile<br/>
rm Makefile.*<br/>
rm -r release<br/>
rm -r debug<br/>
rm ui_*.h<br/>
rm qrc_*.cpp<br/>
rm moc_*.cpp<br/>
rm object_script*.*<br/>
rm *_plugin_import.cpp<br/>
 <br/>
for myprofile in `ls | egrep ".pro\&gt;"`<br/>
do<br/>
&nbsp;&nbsp;mytarget=`echo $myprofile | sed "s/\.pro//"`<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;$myqmake $myprofile<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;if [ ! -e Makefile ]<br/>
&nbsp;&nbsp;then<br/>
&nbsp;&nbsp;&nbsp;&nbsp;echo "FAIL: $myqmake $myprofile"<br/>
&nbsp;&nbsp;fi<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;make<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;if [ -e ./release/$mytarget".exe" ]<br/>
&nbsp;&nbsp;then<br/>
&nbsp;&nbsp;&nbsp;&nbsp;echo $mytarget": SUCCESS"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cp ./release/$mytarget".exe" ~/bin/<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;echo $mytarget": FAIL"<br/>
&nbsp;&nbsp;fi<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;#Cleaning up<br/>
&nbsp;&nbsp;rm Makefile<br/>
&nbsp;&nbsp;rm Makefile.*<br/>
&nbsp;&nbsp;rm -r release<br/>
&nbsp;&nbsp;rm -r debug<br/>
&nbsp;&nbsp;rm ui_*.h<br/>
&nbsp;&nbsp;rm qrc_*.cpp<br/>
&nbsp;&nbsp;rm moc_*.cpp<br/>
&nbsp;&nbsp;rm object_script*.*<br/>
&nbsp;&nbsp;rm *_plugin_import.cpp<br/>
<br/>
done #next .pro file<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
