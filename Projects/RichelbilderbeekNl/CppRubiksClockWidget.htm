<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>RubiksClockWidget</title>
  <meta name="description" content="C++ RubiksClockWidget"/>
  <meta name="keywords" content="C++ RubiksClockWidget code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppRubiksClockWidget.htm">RubiksClockWidget</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppRubiksClockWidget.htm">RubiksClockWidget</a> is a <a href="CppWidget.htm">widget</a> <a href="CppClass.htm">class</a> for a <a href="CppRubiksClock.htm">RubiksClock</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclockdial.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclockdial.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> displaying a Rubik's Clock <a href="CppDial.htm">Dial</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClockWidget.html">CppRubiksClockWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> RUBIKSCLOCKDIAL_H<br/>
<a href="CppDefine.html">#define</a> RUBIKSCLOCKDIAL_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIosfwdH.html">iosfwd</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppSignals2.html">signals2</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWidget.html">widget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppDial.htm">Dial</a>;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a> is a <b><a href="CppClass.html">class</a></b> to display a Rubik's Clock <a href="CppDial.htm">Dial</a><br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppWidget.html">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-and-write <a href="CppPointer.html">pointer</a>t to the <a href="CppDial.htm">Dial</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDial.htm">Dial</a> * GetDial() { <b><a href="CppReturn.html">return</a></b> m_dial.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppPointer.html">pointer</a>t to the <a href="CppDial.htm">Dial</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppDial.htm">Dial</a> * GetDial() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_dial.get(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetTime.html">GetTime</a>() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_<a href="CppTime.htm">time</a> <a href="CppOperatorModulus.htm">%</a> 12; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Turn the dials n_positions_clockwise clockwise,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/negative values are also allowed<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Turn(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_positions_clockwise);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDialWidget.html">DialWidget</a> can only be deleted by <a href="CppBoost.html">Boost</a> <a href="CppSmartPointer.html">smart pointer</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;<a href="CppDial.htm">Dial</a>&gt; m_dial;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Denotes the <a href="CppTime.htm">time</a> shown by the <a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a> as in a clock<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_<a href="CppTime.htm">time</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.html">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the angle in radians between two deltas<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/12 o'clock is 0.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 3 o'clock is 0.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 6 o'clock is 1.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 9 o'clock is 1.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetAngle.html">GetAngle</a>.html<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.html">static</a></b> <b><a href="CppDouble.html">double</a></b> <a href="CppGetAngle.html">GetAngle</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dX, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dY);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.html">GetDistance</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppDouble.html">double</a></b> <a href="CppGetDistance.html">GetDistance</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dX, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dY);<br/>
};<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> RUBIKSCLOCKDIAL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclockdial.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclockdial.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> displaying a Rubik's Clock <a href="CppDial.htm">Dial</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClockWidget.html">CppRubiksClockWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRubiksClock.html">rubiksclock</a><a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCmathH.html">cmath</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRectangle.html">rectangle</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
&nbsp;&nbsp;: m_dial(<b><a href="CppNew.htm">new</a></b> <a href="CppDial.htm">Dial</a>(0.0,red,green,blue)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorPlus.htm">+</a> 1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetGeometry(Rect(x,y,width,height));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Turn(-1);<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-08: <a href="CppVersion.html">Version</a> 1.0: initial <a href="CppVersion.html">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>::Turn(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_positions_clockwise)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_positions_clockwise <a href="CppOperatorModulus.htm">%</a> 12 <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> n_positions_clockwise;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorModulus.htm">%</a><a href="CppOperatorAssign.htm">=</a> 12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> 12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorModulus.htm">%</a><a href="CppOperatorAssign.htm">=</a> 12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppTime.htm">time</a> <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppTime.htm">time</a> &lt; 12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dial-&gt;SetPosition(<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(m_<a href="CppTime.htm">time</a>) <a href="CppOperatorDivide.htm">/</a> 12.0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>&amp; <a href="CppWidget.html">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> *<a href="CppWidget.html">widget</a>.m_dial<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppWidget.html">widget</a>.GetGeometry()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclockdialwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclockdialwidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> displaying a <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClock.html">CppRubiksClock</a><a href="CppDialWidget.html">DialWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> RUBIKSCLOCKDIALWIDGET_H<br/>
<a href="CppDefine.html">#define</a> RUBIKSCLOCKDIALWIDGET_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIosfwdH.html">iosfwd</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppSignals2.html">signals2</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWidget.html">widget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a> is a <b><a href="CppClass.html">class</a></b> to display a <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a><br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppWidget.html">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> position,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-and-write <a href="CppPointer.html">pointer</a>t to the <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a><br/>
&nbsp;&nbsp;<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a> * Get<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>() { <b><a href="CppReturn.html">return</a></b> m_dial.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppPointer.html">pointer</a>t to the <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a> * Get<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_dial.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is the <a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a> clicked?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsClicked(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a> can only be deleted by <a href="CppBoost.html">Boost</a> <a href="CppSmartPointer.html">smart pointer</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>&gt; m_dial;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppDouble.html">double</a></b> <a href="CppGetDistance.html">GetDistance</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dX, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dY);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
};<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> RUBIKSCLOCKDIALWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclockdialwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclockdialwidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> displaying a <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClock.html">CppRubiksClock</a><a href="CppDialWidget.html">DialWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRubiksClock.html">rubiksclock</a><a href="CppDialWidget.html">dialwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCmathH.html">cmath</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRubiksClock.html">rubiksclock</a><a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRectangle.html">rectangle</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> position,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
&nbsp;&nbsp;: m_dial(<b><a href="CppNew.htm">new</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDial.htm">Dial</a>(position,x,y,width,height,red,green,blue))<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetGeometry(Rect(x,y,width,height));<br/>
}<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>::<a href="CppGetDistance.html">GetDistance</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dX, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dY)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppSqrt.html">std::sqrt</a>( (dX * dX) <a href="CppOperatorPlus.htm">+</a> (dY * dY) );<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-08: <a href="CppVersion.html">Version</a> 1.0: initial <a href="CppVersion.html">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>::IsClicked(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> <a href="CppWidget.html">widget</a>_midx<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(GetGeometry().GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;GetGeometry().GetWidth()) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> <a href="CppWidget.html">widget</a>_midy<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(GetGeometry().GetY())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;GetGeometry().GetHeight()) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppGetDistance.html">GetDistance</a>(x_d <a href="CppOperatorMinus.htm">-</a> <a href="CppWidget.html">widget</a>_midx, y_d <a href="CppOperatorMinus.htm">-</a> <a href="CppWidget.html">widget</a>_midy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt; (<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;GetGeometry().GetWidth()) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
}<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>&amp; <a href="CppWidget.html">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> *<a href="CppWidget.html">widget</a>.m_dial<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppWidget.html">widget</a>.GetGeometry()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/<a href="CppRubiksClock.html">RubiksClock</a><a href="CppDialWidget.html">DialWidget</a>&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclockwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclockwidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> displaying a <a href="CppRubiksClock.html">RubiksClock</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClockWidget.html">CppRubiksClockWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> RUBIKSCLOCKWIDGET_H<br/>
<a href="CppDefine.html">#define</a> RUBIKSCLOCKWIDGET_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIosfwdH.html">iosfwd</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppSignals2.html">signals2</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWidget.html">widget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppRubiksClock.html">RubiksClock</a>;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppRubiksClockWidget.html">RubiksClockWidget</a> is a <b><a href="CppClass.html">class</a></b> to display a <a href="CppRubiksClock.html">RubiksClock</a><br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppRubiksClockWidget.html">RubiksClockWidget</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppWidget.html">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppRubiksClockWidget.html">RubiksClockWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> 192,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 192);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Click on the <a href="CppRubiksClock.html">RubiksClock</a> by the left mouse button or another<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Click(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> button_left);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Flip the Rubik's Clock and display the other side<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Flip();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the <a href="CppWidget.html">widget</a> display the front side?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> GetDisplayFront() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_display_front; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-and-write <a href="CppPointer.html">pointer</a>t to the <a href="CppRubiksClock.html">RubiksClock</a><br/>
&nbsp;&nbsp;<a href="CppRubiksClock.html">RubiksClock</a> * Get<a href="CppRubiksClock.html">RubiksClock</a>() { <b><a href="CppReturn.html">return</a></b> m_clock.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a read-only <a href="CppPointer.html">pointer</a>t to the <a href="CppRubiksClock.html">RubiksClock</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppRubiksClock.html">RubiksClock</a> * Get<a href="CppRubiksClock.html">RubiksClock</a>() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_clock.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to a change in the clock<br/>
&nbsp;&nbsp;<b><a href="CppMutable.html">mutable</a></b> <a href="CppBoostSignal.html">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_<a href="CppWidget.html">widget</a>_flipped;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppRubiksClockWidget.html">RubiksClockWidget</a> can only be deleted by <a href="CppBoost.html">Boost</a> <a href="CppSmartPointer.html">smart pointer</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppRubiksClock.html">RubiksClock</a><br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;<a href="CppRubiksClock.html">RubiksClock</a>&gt; m_clock;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does <b><a href="CppThis.htm">this</a></b> <a href="CppWidget.html">widget</a> display the front or the back side?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_display_front;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to a change in <a href="CppGeometry.html">geometry</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnResize();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClockWidget.html">RubiksClockWidget</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
};<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClockWidget.html">RubiksClockWidget</a>&amp; <a href="CppWidget.html">widget</a>);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> RUBIKSCLOCKWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclockwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclockwidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> displaying a <a href="CppRubiksClock.html">RubiksClock</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClockWidget.html">CppRubiksClockWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRubiksClockWidget.html">rubiksclockwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCmathH.html">cmath</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRubiksClock.html">rubiksclock</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRubiksClock.html">rubiksclock</a><a href="CppDial<a href="CppHeaderFile.htm">.h</a>tm">dial</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRubiksClock.html">rubiksclock</a><a href="CppDialWidget.html">dialwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppRectangle.html">rectangle</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppToggleButton.html">togglebutton</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppToggleButtonWidget.html">togglebuttonwidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> "<a href="CppTrace.html">trace</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height)<br/>
&nbsp;&nbsp;: m_signal_<a href="CppWidget.html">widget</a>_flipped{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_clock{<b><a href="CppNew.htm">new</a></b> <a href="CppRubiksClock.html">RubiksClock</a>},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_display_front{<b><a href="CppTrue.htm">true</a></b>}<br/>
{<br/>
&nbsp;&nbsp;m_signal_<a href="CppGeometry.html">geometry</a>_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.html">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>::OnResize,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetGeometry(Rect(x,y,width,height));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>::Click(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> button_left)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.html">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; <a href="CppTime.htm">time</a>s <a href="CppOperatorAssign.htm">=</a> (m_display_front ? m_clock-&gt;GetFront<a href="CppTime.htm">Time</a>s() : m_clock-&gt;GetBack<a href="CppTime.htm">Time</a>s());<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.html">RubiksClock</a>::Pegs&amp; pegs <a href="CppOperatorAssign.htm">=</a> m_clock-&gt;GetFrontPegs();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorPlus.htm">+</a>+j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a>s.<a href="CppTime.htm">time</a>s[i*2][j*2]-&gt;IsClicked(x,y))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(m_display_front)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_clock-&gt;TurnWheel(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? (j ? <a href="CppRubiksClock.html">RubiksClock</a>::bottomRight : <a href="CppRubiksClock.html">RubiksClock</a>::topRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: (j ? <a href="CppRubiksClock.html">RubiksClock</a>::bottomLeft : <a href="CppRubiksClock.html">RubiksClock</a>::topLeft),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_left ? 1 : <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_clock-&gt;TurnWheel(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? (j ? <a href="CppRubiksClock.html">RubiksClock</a>::bottomLeft : <a href="CppRubiksClock.html">RubiksClock</a>::topLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: (j ? <a href="CppRubiksClock.html">RubiksClock</a>::bottomRight : <a href="CppRubiksClock.html">RubiksClock</a>::topRight),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_left ? 1 : <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (pegs.pegs[i][j]-&gt;GetGeometry().IsIn(x,y))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_clock-&gt;TogglePeg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? (j ? <a href="CppRubiksClock.html">RubiksClock</a>::bottomRight : <a href="CppRubiksClock.html">RubiksClock</a>::topRight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: (j ? <a href="CppRubiksClock.html">RubiksClock</a>::bottomLeft : <a href="CppRubiksClock.html">RubiksClock</a>::topLeft));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>::Flip()<br/>
{<br/>
&nbsp;&nbsp;m_display_front <a href="CppOperatorAssign.htm">=</a> !m_display_front;<br/>
&nbsp;&nbsp;m_signal_<a href="CppWidget.html">widget</a>_flipped();<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.2";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-01: <a href="CppVersion.html">Version</a> 1.0: initial <a href="CppVersion.html">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-09: <a href="CppVersion.html">Version</a> 1.1: use of geometries",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-15: <a href="CppVersion.html">Version</a> 1.2: allow flipping the clock"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>::OnResize()<br/>
{<br/>
&nbsp;&nbsp;m_clock-&gt;SetGeometry(<b><a href="CppThis.htm">this</a></b>-&gt;GetGeometry());<br/>
}<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> <a href="CppRubiksClockWidget.html">RubiksClockWidget</a>&amp; <a href="CppWidget.html">widget</a>)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> *<a href="CppWidget.html">widget</a>.m_clock<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppWidget.html">widget</a>.GetGeometry()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/<a href="CppRubiksClockWidget.html">RubiksClockWidget</a>&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
