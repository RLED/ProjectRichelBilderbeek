<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Coordinat</title>
  <meta name="description" content="C++ Coordinat"/>
  <meta name="keywords" content="C++ Coordinat "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCoordinat.htm">Coordinat</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.596 at Mon Feb 17 16:27:59 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppCoordinat.htm">Coordinat</a> is a <a href="CppClass.htm">class</a>
  for a coordinat.
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/CppCoordinat.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/CppCoordinat.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/coordinat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/coordinat3d.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/coordinat2d.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/constcoordinat2d.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/coordinat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/coordinat3d.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/coordinat2d.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/constcoordinat2d.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppCoordinat.htm">CppCoordinat</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/constcoordinat2d.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/constcoordinat2d.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> CONSTCOORDINAT2D_H<br/>
<a href="CppDefine.htm">#define</a> CONSTCOORDINAT2D_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An im<b><a href="CppMutable.htm">mutable</a></b> X-Y coordinat<br/>
<a href="CppComment.htm">//</a>Note: I dislike to write <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b>: I wish there was a <a href="CppLibrary.htm">library</a> (<a href="CppStl.htm">STL</a>, <a href="CppBoost.htm">Boost</a>)<br/>
<a href="CppComment.htm">//</a>with an alternative.<br/>
<b><a href="CppStruct.htm">struct</a></b> ConstCoordinat2D<br/>
{<br/>
&nbsp;&nbsp;ConstCoordinat2D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_co[0]; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_co[1]; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[0] <a href="CppOperatorAssign.htm">=</a> x; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[1] <a href="CppOperatorAssign.htm">=</a> y; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ConstCoordinat2D&amp; <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ConstCoordinat2D&amp; <b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;ConstCoordinat2D(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;ConstCoordinat2D&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~ConstCoordinat2D() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(ConstCoordinat2D*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dimensionality <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppDouble.htm">double</a></b>,dimensionality&gt; m_co;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFriend.htm">friend</a></b> <b><a href="CppConst.htm">const</a></b> ConstCoordinat2D <b><a href="CppOperatorMultiply.htm">operator*</a></b>(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scalar,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Distance(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; lhs,<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Dot<a href="CppProduct.htm">Product</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v2) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Distance to origin<br/>
<b><a href="CppDouble.htm">double</a></b> Length(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; Scale(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scalar,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; n) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; <b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v2<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; <b><a href="CppOperatorMinus.htm">operator-</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v2<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> CONSTCOORDINAT2D_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/constcoordinat2d.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/constcoordinat2d.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "constcoordinat2d.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::ConstCoordinat2D::ConstCoordinat2D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_co{ { x,y } }<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Dot<a href="CppProduct.htm">Product</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v2<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( v1-&gt;GetX() * v2-&gt;GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ( v1-&gt;GetY() * v2-&gt;GetY())<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Distance(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; lhs,<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> lhs.GetX() <a href="CppOperatorMinus.htm">-</a> rhs.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> lhs.GetY() <a href="CppOperatorMinus.htm">-</a> rhs.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dx * dx)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (dy * dy)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Length(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> v-&gt;GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> v-&gt;GetY();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>((dx*dx)+(dy*dy));<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; <a href="CppRibi.htm">ribi</a>::Scale(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scalar,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scalar * v-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scalar * v-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorMinus.htm">operator-</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v2) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1-&gt;GetX() <a href="CppOperatorMinus.htm">-</a> v2-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1-&gt;GetY() <a href="CppOperatorMinus.htm">-</a> v2-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::ConstCoordinat2D&gt; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; v2) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ConstCoordinat2D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1-&gt;GetX() <a href="CppOperatorPlus.htm">+</a> v2-&gt;GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1-&gt;GetY() <a href="CppOperatorPlus.htm">+</a> v2-&gt;GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetX() <a href="CppOperatorEqual.htm">==</a> rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetY() <a href="CppOperatorEqual.htm">==</a> rhs.GetY();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetX() &lt; rhs.GetX()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetX() &gt; rhs.GetX()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetY() &lt; rhs.GetY()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetY() &gt; rhs.GetY()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ConstCoordinat2D&amp; n) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("x",n.GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("y",n.GetY())<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("coordinat2d",s.str());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/coordinat.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/coordinat.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> COORDINAT_H<br/>
<a href="CppDefine.htm">#define</a> COORDINAT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>A normal (x,y) coordinat<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> Coordinat<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Coordinat(<b><a href="CppConst.htm">const</a></b> Length&amp; x, <b><a href="CppConst.htm">const</a></b> Length&amp; y) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Length&amp; GetX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_x; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Length&amp; GetY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_y; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Translate(<b><a href="CppConst.htm">const</a></b> Length&amp; dx, <b><a href="CppConst.htm">const</a></b> Length&amp; dy) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Translate(<b><a href="CppConst.htm">const</a></b> Coordinat&amp; delta) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Length m_x;<br/>
&nbsp;&nbsp;Length m_y;<br/>
};<br/>
<br/>
<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
Coordinat&lt;Length&gt;::Coordinat(<b><a href="CppConst.htm">const</a></b> Length&amp; x, <b><a href="CppConst.htm">const</a></b> Length&amp; y) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_x { x },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y { y }<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Coordinat&lt;Length&gt;::Translate(<b><a href="CppConst.htm">const</a></b> Coordinat&amp; delta) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;Translate(delta.GetX(),delta.GetY());<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Coordinat&lt;Length&gt;::Translate(<b><a href="CppConst.htm">const</a></b> Length&amp; dx, <b><a href="CppConst.htm">const</a></b> Length&amp; dy) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorPlusAssign.htm">+=</a> dx;<br/>
&nbsp;&nbsp;m_y <a href="CppOperatorPlusAssign.htm">+=</a> dy;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat&lt;Length&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat&lt;Length&gt;&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetX() <a href="CppOperatorEqual.htm">==</a> rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetY() <a href="CppOperatorEqual.htm">==</a> rhs.GetY();<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Length&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> Coordinat&lt;Length&gt;::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested { <b><a href="CppFalse.htm">false</a></b> };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat&lt;<b><a href="CppDouble.htm">double</a></b>&gt; a(0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat&lt;<b><a href="CppDouble.htm">double</a></b>&gt; b(0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat&lt;<b><a href="CppDouble.htm">double</a></b>&gt; c(a);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> COORDINAT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/coordinat.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/coordinat.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "coordinat.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/coordinat2d.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/coordinat2d.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> COORDINAT2D_H<br/>
<a href="CppDefine.htm">#define</a> COORDINAT2D_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An X-Y coordinat<br/>
<a href="CppComment.htm">//</a>Note: I dislike to write <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b>: I wish there was a <a href="CppLibrary.htm">library</a> (<a href="CppStl.htm">STL</a>, <a href="CppBoost.htm">Boost</a>)<br/>
<a href="CppComment.htm">//</a>with an alternative.<br/>
<b><a href="CppStruct.htm">struct</a></b> Coordinat2D<br/>
{<br/>
&nbsp;&nbsp;Coordinat2D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ChangeX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[0] <a href="CppOperatorPlusAssign.htm">+=</a> dx; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ChangeY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[1] <a href="CppOperatorPlusAssign.htm">+=</a> dy; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_co[0]; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_co[1]; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[0] <a href="CppOperatorAssign.htm">=</a> x; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[1] <a href="CppOperatorAssign.htm">=</a> y; }<br/>
<br/>
&nbsp;&nbsp;Coordinat2D&amp; <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Coordinat2D&amp; <b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coordinat2D(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coordinat2D&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dimensionality <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppDouble.htm">double</a></b>,dimensionality&gt; m_co;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFriend.htm">friend</a></b> <b><a href="CppConst.htm">const</a></b> Coordinat2D <b><a href="CppOperatorMultiply.htm">operator*</a></b>(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scalar,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; n) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>The dot product<br/>
<b><a href="CppDouble.htm">double</a></b> <b><a href="CppOperatorMultiply.htm">operator*</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v1,<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v2) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Distance(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; lhs,<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Distance to origin<br/>
<b><a href="CppDouble.htm">double</a></b> Length(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> Coordinat2D <b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v2) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> Coordinat2D <b><a href="CppOperatorMultiply.htm">operator*</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scalar,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> Coordinat2D <b><a href="CppOperatorMinus.htm">operator-</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v2) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> COORDINAT2D_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/coordinat2d.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/coordinat2d.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "coordinat2d.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat2D::Coordinat2D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_co{ { x,y } }<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppRibi.htm">ribi</a>::Coordinat2D::Coordinat2D(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;: m_co{ { rhs.GetX(), rhs.GetY() } }<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*<b><a href="CppThis.htm">this</a></b> <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
<a href="CppComment.htm">//</a>}<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppRibi.htm">ribi</a>::Coordinat2D&amp; <a href="CppRibi.htm">ribi</a>::Coordinat2D::<b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs)<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;m_co <a href="CppOperatorAssign.htm">=</a> { rhs.GetX(), rhs.GetY() };<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*<b><a href="CppThis.htm">this</a></b> <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
<a href="CppComment.htm">//</a>}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat2D&amp; <a href="CppRibi.htm">ribi</a>::Coordinat2D::<b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_co[0] <a href="CppOperatorPlusAssign.htm">+=</a> rhs.GetX();<br/>
&nbsp;&nbsp;m_co[1] <a href="CppOperatorPlusAssign.htm">+=</a> rhs.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat2D&amp; <a href="CppRibi.htm">ribi</a>::Coordinat2D::<b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_co[0] <a href="CppOperatorMinusAssign.htm">-=</a> rhs.GetX();<br/>
&nbsp;&nbsp;m_co[1] <a href="CppOperatorMinusAssign.htm">-=</a> rhs.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorMultiply.htm">operator*</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v1,<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v2) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( v1.GetX() * v2.GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ( v1.GetY() * v2.GetY())<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Distance(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; lhs,<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> lhs.GetX() <a href="CppOperatorMinus.htm">-</a> rhs.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> lhs.GetY() <a href="CppOperatorMinus.htm">-</a> rhs.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dx * dx)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (dy * dy)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Length(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>( (v.GetX() * v.GetX()) <a href="CppOperatorPlus.htm">+</a> (v.GetY() * v.GetY()));<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat2D <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorMinus.htm">operator-</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v2) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetX()-v2.GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetY()-v2.GetY()<br/>
&nbsp;&nbsp;};<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat2D <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v2) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetX()+v2.GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetY()+v2.GetY()<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat2D <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorMultiply.htm">operator*</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scalar,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat2D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;scalar * v.GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;scalar * v.GetY()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetX() <a href="CppOperatorEqual.htm">==</a> rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetY() <a href="CppOperatorEqual.htm">==</a> rhs.GetY();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetX() &lt; rhs.GetX()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetX() &gt; rhs.GetX()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetY() &lt; rhs.GetY()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetY() &gt; rhs.GetY()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Coordinat2D&amp; n) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("x",n.GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("y",n.GetY())<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("coordinat2d",s.str());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/coordinat3d.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/coordinat3d.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> COORDINAT3D_H<br/>
<a href="CppDefine.htm">#define</a> COORDINAT3D_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An X-Y-Z coordinat<br/>
<a href="CppComment.htm">//</a>Note: I dislike to write <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b>: I wish there was a <a href="CppLibrary.htm">library</a> (<a href="CppStl.htm">STL</a>, <a href="CppBoost.htm">Boost</a>)<br/>
<a href="CppComment.htm">//</a>with an alternative.<br/>
<b><a href="CppStruct.htm">struct</a></b> Coordinat3D<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z <a href="CppOperatorAssign.htm">=</a> 0.0<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ChangeX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[0] <a href="CppOperatorPlusAssign.htm">+=</a> dx; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ChangeY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[1] <a href="CppOperatorPlusAssign.htm">+=</a> dy; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ChangeZ(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dz) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[2] <a href="CppOperatorPlusAssign.htm">+=</a> dz; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_co[0]; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_co[1]; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetZ() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_co[2]; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[0] <a href="CppOperatorAssign.htm">=</a> x; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[1] <a href="CppOperatorAssign.htm">=</a> y; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetZ(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_co[2] <a href="CppOperatorAssign.htm">=</a> z; }<br/>
<br/>
&nbsp;&nbsp;Coordinat3D&amp; <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Coordinat3D&amp; <b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;Coordinat3D&amp; <b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f);<br/>
&nbsp;&nbsp;Coordinat3D&amp; <b><a href="CppOperatorMultiply.htm">operator*</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dimensionality <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppDouble.htm">double</a></b>,dimensionality&gt; m_co;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs);<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; n);<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> Coordinat3D <b><a href="CppOperatorMinus.htm">operator-</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v2);<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> Coordinat3D <b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v2);<br/>
<br/>
<a href="CppComment.htm">///</a>Divide all <a href="CppComponent.htm">component</a>s of the coordinat by f<br/>
<b><a href="CppConst.htm">const</a></b> Coordinat3D <b><a href="CppOperatorDivide.htm">operator/</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; c,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f);<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppMultiply.htm">Multiply</a> all <a href="CppComponent.htm">component</a>s of the coordinat by f<br/>
<b><a href="CppConst.htm">const</a></b> Coordinat3D <b><a href="CppOperatorMultiply.htm">operator*</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; c,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Calculate the distance between two coordinats<br/>
<b><a href="CppDouble.htm">double</a></b> Distance(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs,<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs);<br/>
<br/>
<a href="CppComment.htm">///</a>When viewing a coordinat as a vector from origin, calculate its length<br/>
<b><a href="CppDouble.htm">double</a></b> Length(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> COORDINAT3D_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCoordinat/coordinat3d.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCoordinat/coordinat3d.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "coordinat3d.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat3D::Coordinat3D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z)<br/>
&nbsp;&nbsp;: m_co{ { x,y,z } }<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; <a href="CppRibi.htm">ribi</a>::Coordinat3D::<b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_co[0] <a href="CppOperatorPlusAssign.htm">+=</a> rhs.GetX();<br/>
&nbsp;&nbsp;m_co[1] <a href="CppOperatorPlusAssign.htm">+=</a> rhs.GetY();<br/>
&nbsp;&nbsp;m_co[2] <a href="CppOperatorPlusAssign.htm">+=</a> rhs.GetZ();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; <a href="CppRibi.htm">ribi</a>::Coordinat3D::<b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_co[0] <a href="CppOperatorMinusAssign.htm">-=</a> rhs.GetX();<br/>
&nbsp;&nbsp;m_co[1] <a href="CppOperatorMinusAssign.htm">-=</a> rhs.GetY();<br/>
&nbsp;&nbsp;m_co[2] <a href="CppOperatorMinusAssign.htm">-=</a> rhs.GetZ();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; <a href="CppRibi.htm">ribi</a>::Coordinat3D::<b><a href="CppOperatorDivide.htm">operator/</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;m_co[0] <a href="CppOperatorDivideAssign.htm">/=</a> f;<br/>
&nbsp;&nbsp;m_co[1] <a href="CppOperatorDivideAssign.htm">/=</a> f;<br/>
&nbsp;&nbsp;m_co[2] <a href="CppOperatorDivideAssign.htm">/=</a> f;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Coordinat3D&amp; <a href="CppRibi.htm">ribi</a>::Coordinat3D::<b><a href="CppOperatorMultiply.htm">operator*</a></b>=(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_co[0] <a href="CppOperatorMultiplyAssign.htm">*=</a> f;<br/>
&nbsp;&nbsp;m_co[1] <a href="CppOperatorMultiplyAssign.htm">*=</a> f;<br/>
&nbsp;&nbsp;m_co[2] <a href="CppOperatorMultiplyAssign.htm">*=</a> f;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Distance(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs,<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> lhs.GetX() <a href="CppOperatorMinus.htm">-</a> rhs.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> lhs.GetY() <a href="CppOperatorMinus.htm">-</a> rhs.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dz <a href="CppOperatorAssign.htm">=</a> lhs.GetZ() <a href="CppOperatorMinus.htm">-</a> rhs.GetZ();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dx * dx)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (dy * dy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (dz * dz)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Length(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(v.GetX() * v.GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (v.GetY() * v.GetY())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (v.GetZ() * v.GetZ())<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorMinus.htm">operator-</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetX()-v2.GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetY()-v2.GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetZ()-v2.GetZ()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; v2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetX()+v2.GetX(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetY()+v2.GetY(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v1.GetZ()+v2.GetZ()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorDivide.htm">operator/</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; c,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.GetX() <a href="CppOperatorDivide.htm">/</a> f,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.GetY() <a href="CppOperatorDivide.htm">/</a> f,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.GetZ() <a href="CppOperatorDivide.htm">/</a> f<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Coordinat3D <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorMultiply.htm">operator*</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; c,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.GetX() * f,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.GetY() * f,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.GetZ() * f<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetX() <a href="CppOperatorEqual.htm">==</a> rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetY() <a href="CppOperatorEqual.htm">==</a> rhs.GetY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetZ() <a href="CppOperatorEqual.htm">==</a> rhs.GetZ();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetX() &lt; rhs.GetX()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetX() &gt; rhs.GetX()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetY() &lt; rhs.GetY()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetY() &gt; rhs.GetY()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetZ() &lt; rhs.GetZ();<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("x",n.GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("y",n.GetY())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("z",n.GetZ());<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("coordinat3d",s.str());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
