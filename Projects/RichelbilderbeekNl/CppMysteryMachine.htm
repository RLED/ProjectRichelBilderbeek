<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MysteryMachine</title>
  <meta name="description" content="C++ MysteryMachine"/>
  <meta name="keywords" content="C++ MysteryMachine "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMysteryMachine.htm">MysteryMachine</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.578 at Thu Jan 16 06:21:32 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppMysteryMachine.htm">MysteryMachine</a> is a <a href="CppClass.htm">class</a> to simulate
my mystery machine.</p>
<p>&nbsp;</p>
<p><a href="CppMysteryMachine.htm">MysteryMachine</a> is used in the  
<a href="Tools.htm">tool</a> <a href="ToolSimMysteryMachine.htm">SimMysteryMachine</a>.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMysteryMachine/CppMysteryMachine.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMysteryMachine/CppMysteryMachine.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMysteryMachine.htm">CppMysteryMachine</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMysteryMachine.htm">CppMysteryMachine</a>/<a href="CppMysteryMachine.htm">mysterymachine</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMysteryMachine.htm">CppMysteryMachine</a>/<a href="CppMysteryMachine.htm">mysterymachine</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMysteryMachine.htm">CppMysteryMachine</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMysteryMachine/mysterymachine.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMysteryMachine/mysterymachine.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMysteryMachine.htm">MysteryMachine</a>, my mystery machine <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppMysteryMachine.htm">CppMysteryMachine</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> MYSTERYMACHINE_H<br/>
<a href="CppDefine.htm">#define</a> MYSTERYMACHINE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDialWidget.htm">DialWidget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppLedWidget.htm">LedWidget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppMysteryMachine.htm">MysteryMachine</a> contains the logic behind my Mystery Machine<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMysteryMachine.htm">MysteryMachine</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppMysteryMachine.htm">MysteryMachine</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppMysteryMachine.htm">MysteryMachine</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppMysteryMachine.htm">MysteryMachine</a>&amp;);<br/>
&nbsp;&nbsp;<a href="CppMysteryMachine.htm">MysteryMachine</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppMysteryMachine.htm">MysteryMachine</a>&amp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppDialWidget.htm">DialWidget</a> * GetDialBack() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dial_back.get(); }<br/>
&nbsp;&nbsp;<a href="CppDialWidget.htm">DialWidget</a> * GetDialFront() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dial_front.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Back1() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_back_1.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Back2() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_back_2.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Back3() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_back_3.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Front1() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_front_1.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Front2() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_front_2.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Front3() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_front_3.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>TopFront() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_top_front.get();&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>TopMiddle() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_top_middle.get(); }<br/>
&nbsp;&nbsp;<a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>TopBack() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_top_back.get();&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;<a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a> * Get<a href="CppToggleButton.htm">ToggleButton</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_toggle_button.get(); }<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDialWidget.htm">DialWidget</a> * GetDialBack() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dial_back.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDialWidget.htm">DialWidget</a> * GetDialFront() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dial_front.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Back1() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_back_1.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Back2() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_back_2.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Back3() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_back_3.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Front1() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_front_1.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Front2() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_front_2.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>Front3() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_front_3.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>TopFront() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_led_top_front.get();&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>TopMiddle() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_led_top_middle.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppLedWidget.htm">LedWidget</a> * Get<a href="CppLed.htm">Led</a>TopBack() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_led_top_back.get();&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a> * Get<a href="CppToggleButton.htm">ToggleButton</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_toggle_button.get(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppMysteryMachine.htm">MysteryMachine</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppMysteryMachine.htm">MysteryMachine</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppDialWidget.htm">DialWidget</a>&gt; m_dial_back;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppDialWidget.htm">DialWidget</a>&gt; m_dial_front;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_front_1;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_front_2;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_front_3;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_back_1;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_back_2;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_back_3;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_top_front;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_top_middle;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppLedWidget.htm">LedWidget</a>&gt; m_led_top_back;<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>&gt; m_toggle_button;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppMysteryMachine.htm">MysteryMachine</a>&amp; machine) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppMysteryMachine.htm">MysteryMachine</a>&amp; machine) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MYSTERYMACHINE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMysteryMachine/mysterymachine.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMysteryMachine/mysterymachine.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMysteryMachine.htm">MysteryMachine</a>, my mystery machine <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppMysteryMachine.htm">CppMysteryMachine</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMysteryMachine.htm">mysterymachine</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppDial.htm">dial</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppDialWidget.htm">dialwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLed.htm">led</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLedWidget.htm">ledwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppToggleButton.htm">togglebutton</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppToggleButtonWidget.htm">togglebuttonwidget</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_dial_back(<b><a href="CppNew.htm">new</a></b> <a href="CppDialWidget.htm">DialWidget</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dial_front(<b><a href="CppNew.htm">new</a></b> <a href="CppDialWidget.htm">DialWidget</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_front_1(<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,1.0,255,&nbsp;&nbsp;0,&nbsp;&nbsp;0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_front_2(<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,0.0,&nbsp;&nbsp;0,255,&nbsp;&nbsp;0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_front_3(<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,0.0,&nbsp;&nbsp;0,&nbsp;&nbsp;0,255)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_back_1(<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,1.0,255,&nbsp;&nbsp;0,&nbsp;&nbsp;0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_back_2(<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,0.0,&nbsp;&nbsp;0,255,&nbsp;&nbsp;0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_back_3(<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,0.0,&nbsp;&nbsp;0,&nbsp;&nbsp;0,255)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_top_front( <b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,0.0,255,0,0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_top_middle(<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,0.0,255,0,0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_led_top_back(&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppLedWidget.htm">LedWidget</a>(0,0,32,32,0.0,255,0,0)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_toggle_button(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_back(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_front(0),<br/>
{<br/>
&nbsp;&nbsp;m_dial_back-&gt;GetDial()-&gt;m_signal_position_changed.connect(<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>::Update,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;m_dial_front-&gt;GetDial()-&gt;m_signal_position_changed.connect(<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>::Update,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;m_toggle_button-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;m_signal_toggled.connect(<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>::Update,<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;Update();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-04-10: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-20: <a href="CppVersion.htm">Version</a> 1.1: added <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMysteryMachine.htm">MysteryMachine</a>::Update() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> back <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetDialBack()-&gt;GetDial()-&gt;GetPosition() * 16.0) <a href="CppOperatorModulus.htm">%</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> front <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetDialFront()-&gt;GetDial()-&gt;GetPosition() * 16.0) <a href="CppOperatorModulus.htm">%</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> top <a href="CppOperatorAssign.htm">=</a> (Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? (1 <a href="CppOperatorPlus.htm">+</a> front <a href="CppOperatorMinus.htm">-</a> back <a href="CppOperatorPlus.htm">+</a> 3) <a href="CppOperatorModulus.htm">%</a> 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(front <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(front&nbsp;&nbsp;&lt; 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(back <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(back&nbsp;&nbsp;&lt; 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1); <a href="CppComment.htm">//</a>-1 denotes off<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top&nbsp;&nbsp;&lt; 3);<br/>
&nbsp;&nbsp;m_led_front_1-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(front <a href="CppOperatorEqual.htm">==</a> 0 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_front_2-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(front <a href="CppOperatorEqual.htm">==</a> 1 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_front_3-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(front <a href="CppOperatorEqual.htm">==</a> 2 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_back_1-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(back <a href="CppOperatorEqual.htm">==</a> 0 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_back_2-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(back <a href="CppOperatorEqual.htm">==</a> 1 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_back_3-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(back <a href="CppOperatorEqual.htm">==</a> 2 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_top_front-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity( top <a href="CppOperatorEqual.htm">==</a> 0 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_top_middle-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(top <a href="CppOperatorEqual.htm">==</a> 1 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;m_led_top_back-&gt;Get<a href="CppLed.htm">Led</a>()-&gt;SetIntensity(&nbsp;&nbsp;top <a href="CppOperatorEqual.htm">==</a> 2 ? 1.0 : 0.0);<br/>
}<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppMysteryMachine.htm">MysteryMachine</a>&amp; machine) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;<a href="CppMysteryMachine.htm">MysteryMachine</a>&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;dial_back&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_dial_back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/dial_back&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;dial_front&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_dial_front<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/dial_front&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_back_1&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_back_1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_back_1&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_back_2&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_back_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_back_2&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_back_3&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_back_3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_back_3&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_front_1&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_front_1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_front_1&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_front_2&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_front_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_front_2&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_front_3&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_front_3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_front_3&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_top_back&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_top_back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_top_back&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_top_front&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_top_front<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_top_front&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;led_top_middle&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_led_top_middle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/led_top_middle&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;toggle_button&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *machine.m_toggle_button<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/toggle_button&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/<a href="CppMysteryMachine.htm">MysteryMachine</a>&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
