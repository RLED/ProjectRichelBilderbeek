<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SimplifyNewick</title>
  <meta name="description" content="C++ SimplifyNewick"/>
  <meta name="keywords" content="C++ SimplifyNewick code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolSimplifyNewick.htm">SimplifyNewick</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="ToolSimplifyNewick.htm">SimplifyNewick</a> is a <a href="Tools.htm">tool</a> to randomly simplify <a href="CppNewick.htm">Newicks</a>.</p>
<p>&nbsp;</p>
<p><a href="ToolSimplifyNewick.htm">SimplifyNewick</a> is programmed in <a href="Cpp.htm">C++</a> 
using the <a href="CppIde.htm">IDE</a> <a href="CppQtCreator.htm">Qt Creator</a>. 
It uses the  <a href="CppBoost.htm">Boost</a>, <a href="CppCln.htm">CLN</a>, <a href="CppQt.htm">Qt</a> 
and <a href="CppStl.htm">STL</a> <a href="CppLibrary.htm">libraries</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolSimplifyNewick_1_2.png">View a screenshot of 'SimplifyNewick' (version 1.2)(png)</a></li>
  <li><a href="ToolSimplifyNewickSource_2_0.zip">Download the 'SimplifyNewick' source code (version 2.0)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolSimplifyNewickSource_1_2.zip">Download the 'SimplifyNewick' source code (version 1.2)(zip)</a></li>
  <li><a href="ToolSimplifyNewick_1_1.png">View a screenshot of 'SimplifyNewick' (version 1.1)(png)</a></li>
  <li><a href="ToolSimplifyNewick_1_0.png">View a screenshot of 'SimplifyNewick' (version 1.0)(png)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.49</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ToolSimplifyNewick.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ToolSimplifyNewick.pro" border = "1"><tr><td><code>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp0x.htm">c++11</a><br/>
#Configure difference in debug and release version<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(debug, debug|release) {<br/>
&nbsp;&nbsp;message(Building debug version)<br/>
<br/>
} else {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG<br/>
&nbsp;&nbsp;message(Building release version)<br/>
}<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppNewick.htm">CppNewick</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppNewickVector.htm">CppNewickVector</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a> \<br/>
&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a> \<br/>
&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += <a href="CppRegex.htm">-lboost_regex</a><br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogsimplify<a href="CppNewick.htm">newick</a>.cpp \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;../<a href="ToolTestNewickVector.htm">ToolTestNewickVector</a>/<a href="CppNewickVector.htm">newickvector</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppNewick.htm">CppNewick</a>/<a href="CppNewick.htm">newick</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigUnsignedInABase.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigUnsigned.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigIntegerUtils.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigIntegerAlgorithms.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigInteger.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppNewickVector.htm">CppNewickVector</a>/<a href="CppNewickVector.htm">newickvector</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.cpp<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \ <br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogsimplify<a href="CppNewick.htm">newick</a>.h \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;../<a href="ToolTestNewickVector.htm">ToolTestNewickVector</a>/<a href="CppNewickVector.htm">newickvector</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppNewick.htm">CppNewick</a>/<a href="CppNewick.htm">newick</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigUnsignedInABase.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigUnsigned.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigIntegerUtils.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigIntegerLibrary.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigIntegerAlgorithms.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/bigint-2010.04.30/BigInteger.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">trace</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppNewickVector.htm">CppNewickVector</a>/<a href="CppNewickVector.htm">newickvector</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogsimplify<a href="CppNewick.htm">newick</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppAbout.htm">about</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogwhatsnew.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ToolSimplifyNewick.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialogsimplifynewick.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialogsimplifynewick.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Simplify<a href="CppNewick.html">Newick</a>, <a href="Tools.htm">tool</a> to randomly simplify <a href="CppNewick.html">Newick</a> phylogenies<br/>
Copyright (C) 2010-2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>Simplify<a href="CppNewick.html">Newick</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> DIALOGSIMPLIFYNEWICK_H<br/>
<a href="CppDefine.html">#define</a> DIALOGSIMPLIFYNEWICK_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> &lt;cln/cln<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<a href="CppInclude.html">#include</a> "<a href="CppAbout.html">about</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppBigInt.html">BigInteger</a><a href="CppHeaderFile.htm">.h</a>h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDialog.html">QDialog</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.html">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.html">class</a></b> DialogSimplify<a href="CppNewick.html">Newick</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.html">class</a></b> DialogSimplify<a href="CppNewick.html">Newick</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppQDialog.html">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.html">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> DialogSimplify<a href="CppNewick.html">Newick</a>(<a href="CppQWidget.html">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~DialogSimplify<a href="CppNewick.html">Newick</a>();<br/>
<br/>
<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> changeEvent(<a href="CppQEvent.html">QEvent</a> *e);<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::DialogSimplify<a href="CppNewick.html">Newick</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b> <b><a href="CppSlots.html">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on<a href="CppAbout.html">About</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onEditChange();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onStart();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppCliToStr.html">CliToStr</a> <a href="CppConvert.html">converts</a> a <a href="CppCl_I.html">cln::cl_I</a> to <a href="CppString.html">std::string</a>.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCliToStr.html">CliToStr</a>.html<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppCliToStr.html">CliToStr</a>(<b><a href="CppConst.html">const</a></b> <a href="CppCl_I.html">cln::cl_I</a>&amp; i);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppIntToStrWithSep.html">IntToStrWithSep</a> <a href="CppConvert.html">converts</a> an <a href="CppInt.html">integer</a> to <a href="CppString.html">std::string</a><br/>
<a href="CppComment.htm">///</a>and adds thousands seperators.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIntToStrWithSep.html">IntToStrWithSep</a>.html<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppIntToStrWithSep.html">IntToStrWithSep</a>(<a href="CppCl_I.html">cln::cl_I</a> i);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppGetMaxInt.html">GetMaxInt</a> <a href="CppReturn.html">returns</a> the highest possible value of a <b><a href="CppInt.htm">int</a></b>.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetMaxInt.html">GetMaxInt</a>.html<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppGetMaxInt.html">GetMaxInt</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.html">RandomizeTimer</a>.html<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.html">RandomizeTimer</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppSafeIntToCli.html">SafeIntToCli</a> <a href="CppConvert.html">converts</a> an <b><a href="CppInt.htm">int</a></b> to <a href="CppCl_I.html">cln::cl_I</a> safely.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSafeIntToCli.html">SafeIntToCli</a>.html<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppCl_I.html">cln::cl_I</a> <a href="CppSafeIntToCli.html">SafeIntToCli</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> i);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Simplify<a href="CppNewick.html">Newick</a> simplifies a <a href="CppNewick.html">Newick</a> below a certain complexity.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppSimplify<a href="CppNewick.html">Newick</a>.html<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Simplify<a href="CppNewick.html">Newick</a>(<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; <a href="CppNewick.html">newick</a>, <b><a href="CppConst.html">const</a></b> <a href="CppCl_I.html">cln::cl_I</a>&amp; max_complexity);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Simplify<a href="CppNewick.html">Newick</a> simplifies a <a href="CppNewick.html">Newick</a> below a certain complexity.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppSimplify<a href="CppNewick.html">Newick</a>.html<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Simplify<a href="CppNewick.html">Newick</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; <a href="CppNewick.html">newick</a>, <b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a>&amp; max_complexity);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> DIALOGSIMPLIFYNEWICK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialogsimplifynewick.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialogsimplifynewick.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Simplify<a href="CppNewick.html">Newick</a>, <a href="Tools.htm">tool</a> to randomly simplify <a href="CppNewick.html">Newick</a> phylogenies<br/>
Copyright (C) 2010-2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>Simplify<a href="CppNewick.html">Newick</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCstdlibH.html">cstdlib</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCtimeH.html">ctime</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppBOOST_FOREACH.html">foreach</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppLexical_cast.html">lexical_cast</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/bounds<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQt.htm">Qt</a>Gui/<a href="CppQDesktopWidget.html">QDesktopWidget</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "<a href="CppBigInt.html">BigInteger</a>Utils<a href="CppHeaderFile.htm">.h</a>h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "<a href="CppNewickVector.html">newickvector</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppQtAboutDialog.html">qtaboutdialog</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "dialogsimplify<a href="CppNewick.html">newick</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppNewick.html">newick</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "ui_dialogsimplify<a href="CppNewick.html">newick</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DialogSimplify<a href="CppNewick.html">Newick</a>::DialogSimplify<a href="CppNewick.html">Newick</a>(<a href="CppQWidget.html">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>(parent, <a href="CppQt.htm">Qt</a>::Window),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::DialogSimplify<a href="CppNewick.html">Newick</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_<a href="CppNewick.html">newick</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSignalMacro.html">SIGNAL</a>(textChanged(<a href="CppQString.html">QString</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onEditChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_max_complexity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSignalMacro.html">SIGNAL</a>(textChanged(<a href="CppQString.html">QString</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onEditChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_start,<a href="CppSignalMacro.html">SIGNAL</a>(clicked()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onStart()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_about,<a href="CppSignalMacro.html">SIGNAL</a>(clicked()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on<a href="CppAbout.html">About</a>()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppQRect.html">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.html">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;setWindowTitle(windowTitle()+" (<a href="CppDebug.html">debug</a>)");<br/>
&nbsp;&nbsp;<a href="CppPreElse.html">#else</a><br/>
&nbsp;&nbsp;setWindowTitle(windowTitle()+" (release)");<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;onEditChange();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DialogSimplify<a href="CppNewick.html">Newick</a>::~DialogSimplify<a href="CppNewick.html">Newick</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> ui;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DialogSimplify<a href="CppNewick.html">Newick</a>::changeEvent(<a href="CppQEvent.html">QEvent</a> *e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>::changeEvent(e);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (e-&gt;type()) {<br/>
&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQEvent.html">QEvent</a>::LanguageChange:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;retranslateUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDefault.html">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> DialogSimplify<a href="CppNewick.html">Newick</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "2.0";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; DialogSimplify<a href="CppNewick.html">Newick</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-09-12: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2010-09-16: <a href="CppVersion.html">version</a> 1.1: use of <a href="CppBinaryNewickVector.html">BinaryNewickVector</a> <a href="CppVersion.html">version</a> 1.0, added <a href="CppLibrary.html">library</a> <a href="CppVersion.html">version</a> numbers in <a href="CppAbout.html">About</a> screen, added 'What's New?' dialog, added difference in <a href="CppDebug.html">debug</a> and release <a href="CppVersion.html">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2010-09-16: <a href="CppVersion.html">version</a> 1.2: simplification is frequency dependent. For example: (100,2) will be simplified to (99,2) 50x more often than to (100,1)");<br/>
&nbsp;&nbsp;v.push_back("2011-05-07: <a href="CppVersion.html">version</a> 2.0: use <a href="CppNewickVector.html">NewickVector</a> instead of <a href="CppBinaryNewickVector.html">BinaryNewickVector</a>, replace custom <a href="CppAbout.html">about</a> and whats <b><a href="CppNew.htm">new</a></b> dialog by <a href="CppQtAboutDialog.html">QtAboutDialog</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DialogSimplify<a href="CppNewick.html">Newick</a>::on<a href="CppAbout.html">About</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.html">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Simplify<a href="CppNewick.html">Newick</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="Tools.htm">tool</a> to randomly simplify <a href="CppNewick.html">Newick</a> phylogenies",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 7th of May 2011",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-2011",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>Simplify<a href="CppNewick.html">Newick</a>.html",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>History());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.html">Library</a>("<a href="CppNewickVector.html">NewickVector</a> <a href="CppVersion.html">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppNewickVector.html">NewickVector</a>::Get<a href="CppVersion.html">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.html">Library</a>("<a href="CppLoopReader.html">LoopReader</a> <a href="CppVersion.html">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppLoopReader.html">LoopReader</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::Get<a href="CppVersion.html">Version</a>());<br/>
<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.html">QtAboutDialog</a> d(a);<br/>
&nbsp;&nbsp;d.exec();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DialogSimplify<a href="CppNewick.html">Newick</a>::onEditChange()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;button_start-&gt;setEnabled(<b><a href="CppFalse.html">false</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;clear();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <a href="CppNewick.html">newick</a><br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ui-&gt;edit_<a href="CppNewick.html">newick</a>-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppNewick.html">Newick</a>::<a href="CppCheckNewick.html">CheckNewick</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;text_output-&gt;appendPlainText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.html">QString</a>("Current <a href="CppNewick.html">Newick</a>: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQString.html">QString</a>(s.c_str()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b> (<a href="CppStdException.html">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;text_output-&gt;appendPlainText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.html">QString</a>("Invalid <a href="CppNewick.html">Newick</a>: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQString.html">QString</a>(e.what()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display current complexity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppNewickVector.html">NewickVector</a> n(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_<a href="CppNewick.html">newick</a>-&gt;text().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ::big<a href="CppInt.html">Integer</a>ToString(<a href="CppNewick.html">Newick</a>::<a href="CppCalcComplexity.html">CalcComplexity</a>(n.Peek()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;text_output-&gt;appendPlainText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.html">QString</a>("Current complexity: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQString.html">QString</a>(s.c_str()));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check complexity<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ui-&gt;edit_max_complexity-&gt;text().toStdString();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a> i <a href="CppOperatorAssign.htm">=</a> ::stringTo<a href="CppBigInt.html">BigInteger</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;text_output-&gt;appendPlainText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Invalid input of maximum complexity: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"must be bigger than zero");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b> (<a href="CppStdException.html">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;text_output-&gt;appendPlainText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Invalid input of maximum complexity: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"must be a number");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set current maximum complexity to <a href="CppNewick.html">Newick</a> complexity minus one<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppNewickVector.html">NewickVector</a> n(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_<a href="CppNewick.html">newick</a>-&gt;text().toStdString());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a> <a href="CppNewick.html">newick</a>_complexity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppNewick.html">Newick</a>::<a href="CppCalcComplexity.html">CalcComplexity</a>(n.Peek());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a> current_complexity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ::stringTo<a href="CppBigInt.html">BigInteger</a>(ui-&gt;edit_max_complexity-&gt;text().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (current_complexity &gt; <a href="CppNewick.html">newick</a>_complexity)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_max_complexity-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.html">QString</a>(::big<a href="CppInt.html">Integer</a>ToString(<a href="CppNewick.html">newick</a>_complexity <a href="CppOperatorMinus.htm">-</a> 1).c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;button_start-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DialogSimplify<a href="CppNewick.html">Newick</a>::onStart()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;clear();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the onEditChange output<br/>
&nbsp;&nbsp;onEditChange();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.html">#ifdef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.html">RandomizeTimer</a>();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s_in <a href="CppOperatorAssign.htm">=</a> ui-&gt;edit_<a href="CppNewick.html">newick</a>-&gt;text().toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a> max_complexity <a href="CppOperatorAssign.htm">=</a> ::stringTo<a href="CppBigInt.html">BigInteger</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_max_complexity-&gt;text().toStdString());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s_out <a href="CppOperatorAssign.htm">=</a> Simplify<a href="CppNewick.html">Newick</a>(s_in,max_complexity);<br/>
&nbsp;&nbsp;<a href="CppNewickVector.html">NewickVector</a> n(s_out);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> complexity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ::big<a href="CppInt.html">Integer</a>ToString(<a href="CppNewick.html">Newick</a>::<a href="CppCalcComplexity.html">CalcComplexity</a>(n.Peek()));<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;appendHtml("<a href="CppNewick.html">Newick</a> found:");<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;appendHtml(n.ToStr().c_str());<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;appendHtml("<a href="CppNewick.html">Newick</a> complexity:");<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;appendHtml(<a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(complexity).c_str());<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppIntToStrWithSep.html">IntToStrWithSep</a> <a href="CppConvert.html">converts</a> an <a href="CppInt.html">integer</a> to <a href="CppString.html">std::string</a><br/>
<a href="CppComment.htm">///</a>and adds thousands seperators.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIntToStrWithSep.html">IntToStrWithSep</a>.html<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppIntToStrWithSep.html">IntToStrWithSep</a>(<a href="CppCl_I.html">cln::cl_I</a> i)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(<a href="CppCln.html">cln</a>::mod(i,10));<br/>
&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> <a href="CppCln.html">cln</a>::floor1(i,10);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> d <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.html">while</a></b> (!<a href="CppCln.html">cln</a>::zerop(i))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(<a href="CppCln.html">cln</a>::mod(i,10))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (d <a href="CppOperatorModulus.htm">%</a> 3 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0 ? "," : "")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> <a href="CppCln.html">cln</a>::floor1(i,10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+d;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppSafeIntToCli.html">SafeIntToCli</a> <a href="CppConvert.html">converts</a> an <b><a href="CppInt.htm">int</a></b> to <a href="CppCl_I.html">cln::cl_I</a> safely.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSafeIntToCli.html">SafeIntToCli</a>.html<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppConst.html">const</a></b> <a href="CppCl_I.html">cln::cl_I</a> <a href="CppSafeIntToCli.html">SafeIntToCli</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A <a href="CppCl_I.html">cln::cl_I</a> can handle <a href="CppInt.html">integer</a> values to 2^29 in its <a href="CppConstructor.html">constructor</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i &lt; 536870912)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppCl_I.html">cln::cl_I</a>(i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppCl_I.html">cln::cl_I</a>(s.c_str());<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppGetMaxInt.html">GetMaxInt</a> <a href="CppReturn.html">returns</a> the highest possible value of a <b><a href="CppInt.htm">int</a></b>.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetMaxInt.html">GetMaxInt</a>.html<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppGetMaxInt.html">GetMaxInt</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppBoost.html">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIntToStrWithSep.html">IntToStrWithSep</a>.html<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> T, <b><a href="CppClass.html">class</a></b> U&gt;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppSumSecond.html">SumSecond</a>(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppPair.html">std::pair</a>&lt;T,U&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> sum <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.html">typedef</a></b> <a href="CppPair.html">std::pair</a>&lt;T,U&gt; Pair;<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.html">BOOST_FOREACH</a>(<b><a href="CppConst.html">const</a></b> Pair&amp; p,v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum<a href="CppOperatorPlusAssign.htm">+=</a>p.second;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> sum;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Simplify<a href="CppNewick.html">Newick</a> simplifies a <a href="CppNewick.html">Newick</a> below a certain complexity,<br/>
<a href="CppComment.htm">///</a>in a frequency dependent way.<br/>
<a href="CppComment.htm">///</a>For example, <b><a href="CppFor.htm">for</a></b> the phylogeny (100,2), Simplify<a href="CppNewick.html">Newick</a><br/>
<a href="CppComment.htm">///</a><a href="CppReturn.html">returns</a> (99,2) 50x as often as (100,1).<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppSimplify<a href="CppNewick.html">Newick</a>.html<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Simplify<a href="CppNewick.html">Newick</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s, <b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a>&amp; max_complexity)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppNewickVector.html">NewickVector</a> n(s);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.html">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a> complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppNewick.html">Newick</a>::<a href="CppCalcComplexity.html">CalcComplexity</a>(n.Peek());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (complexity <a href="CppOperatorLessEqual.html">&lt;=</a> max_complexity) <b><a href="CppReturn.html">return</a></b> n.ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppPair.html">std::pair</a>&lt;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;,<b><a href="CppInt.htm">int</a></b>&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppNewick.html">Newick</a>::<a href="CppGetSimplerNewicks.html">GetSimplerNewicks</a>FrequencyPairs(n.Peek());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.html">return</a></b> n.ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sum <a href="CppOperatorAssign.htm">=</a> <a href="CppSumSecond.html">SumSecond</a>(v);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> index_chosen <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.html">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> sum;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.html">std::clog</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Index chosen: " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> index_chosen <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> current_sum <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_sum<a href="CppOperatorPlusAssign.htm">+=</a>v[i].second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.html">std::clog</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Index " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> i <a href="CppOperatorStreamOut.html">&lt;&lt;</a> ", sum: " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> current_sum <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (current_sum <a href="CppOperatorGreaterEqual.html">&gt;=</a> index_chosen)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.html">std::clog</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Index " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> i <a href="CppOperatorStreamOut.html">&lt;&lt;</a> " chosen\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorAssign.htm">=</a> v[i].first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Simplify<a href="CppNewick.html">Newick</a>FreqInd simplifies a <a href="CppNewick.html">Newick</a> below a certain<br/>
<a href="CppComment.htm">///</a>complexity, independent of the frequencies in the<br/>
<a href="CppComment.htm">///</a>phylogeny.<br/>
<a href="CppComment.htm">///</a>For example, <b><a href="CppFor.htm">for</a></b> the phylogeny (100,2), Simplify<a href="CppNewick.html">Newick</a>FreqInd<br/>
<a href="CppComment.htm">///</a><a href="CppReturn.html">returns</a> (99,2) as often as (100,1).<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppSimplify<a href="CppNewick.html">Newick</a>FreqInd.html<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Simplify<a href="CppNewick.html">Newick</a>FreqInd(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s, <b><a href="CppConst.html">const</a></b> <a href="CppCl_I.html">cln::cl_I</a>&amp; max_complexity)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBinaryNewickVector.html">BinaryNewickVector</a> n(s);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.html">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppCl_I.html">cln::cl_I</a> complexity <a href="CppOperatorAssign.htm">=</a> <a href="CppCalcComplexity.html">CalcComplexity</a>(n.Get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (complexity <a href="CppOperatorLessEqual.html">&lt;=</a> max_complexity) <b><a href="CppReturn.html">return</a></b> n.ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppNewickVector.html">NewickVector</a>&gt; v <a href="CppOperatorAssign.htm">=</a> n.<a href="CppGetSimplerNewicks.html">GetSimplerNewicks</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.html">return</a></b> n.ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.html">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.html">RandomizeTimer</a>.html<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.html">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppSrand.html">std::srand</a>(<a href="CppTime.html">std::time</a>(0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppCliToStr.html">CliToStr</a> <a href="CppConvert.html">converts</a> a <a href="CppCl_I.html">cln::cl_I</a> to <a href="CppString.html">std::string</a>.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCliToStr.html">CliToStr</a>.html<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppCliToStr.html">CliToStr</a>(<b><a href="CppConst.html">const</a></b> <a href="CppCl_I.html">cln::cl_I</a>&amp; i)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> i;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> s.str();<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Simplify<a href="CppNewick.html">Newick</a>, <a href="Tools.htm">tool</a> to randomly simplify <a href="CppNewick.html">Newick</a> phylogenies<br/>
Copyright (C) 2010-2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>Simplify<a href="CppNewick.html">Newick</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppAlgorithmH.html">algorithm</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCctypeH.html">cctype</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCstdlibH.html">cstdlib</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppExceptionH.html">exception</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppFstreamH.html">fstream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppFunctionalH.html">functional</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStdexceptH.html">stdexcept</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppBOOST_FOREACH.html">foreach</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQApplication.html">QApplication</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "<a href="CppNewickVector.html">newickvector</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "dialogsimplify<a href="CppNewick.html">newick</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppNewick.html">newick</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppAskUserForString.html">AskUserForString</a>.html<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppAskUserForString.html">AskUserForString</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> s;<br/>
&nbsp;&nbsp;<a href="CppGetline.html">std::getline</a>(<a href="CppCin.html">std::cin</a>,s);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToLower.html">StrToLower</a>.html<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppStrToLower.html">StrToLower</a>(<a href="CppString.html">std::string</a> s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTransform.html">std::transform</a>(s.begin(), s.end(), s.begin(),<a href="CppPtr_fun.html">std::ptr_fun</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppTolower.html">std::tolower</a>));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileExists.html">FileExists</a>.html<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppFileExists.html">FileExists</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFstream.html">std::fstream</a> fin;<br/>
&nbsp;&nbsp;fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> fin.is_open();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFileToVector.html">FileToVector</a>.html<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppFileToVector.html">FileToVector</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; fileName)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppFileExists.html">FileExists</a>(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; myVector;<br/>
&nbsp;&nbsp;<a href="CppIfstream.html">std::ifstream</a> in(fileName.c_str());<br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> myString;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetline.html">std::getline</a>(in,myString);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myVector.push_back(myString);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> myVector;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; GetBadlyFormed<a href="CppNewick.html">Newick</a>s()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("1,(2,3))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2,3)");<br/>
&nbsp;&nbsp;v.push_back("(1,((2,3))");<br/>
&nbsp;&nbsp;v.push_back("(1,(2,3)))");<br/>
<br/>
&nbsp;&nbsp;v.push_back("(((1,(2,3)),4)");<br/>
&nbsp;&nbsp;v.push_back("((2,((1,3)),4)");<br/>
&nbsp;&nbsp;v.push_back("((2,(3,1))),4)");<br/>
&nbsp;&nbsp;v.push_back("((2,(3,4)),1))");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; GetWellFormed<a href="CppNewick.html">Newick</a>s()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("(1,(2,3))");<br/>
&nbsp;&nbsp;v.push_back("(2,(1,3))");<br/>
&nbsp;&nbsp;v.push_back("(2,(3,1))");<br/>
&nbsp;&nbsp;v.push_back("(1,(1,1))");<br/>
<br/>
&nbsp;&nbsp;v.push_back("((1,(2,3)),4)");<br/>
&nbsp;&nbsp;v.push_back("((2,(1,3)),4)");<br/>
&nbsp;&nbsp;v.push_back("((2,(3,1)),4)");<br/>
&nbsp;&nbsp;v.push_back("((2,(3,4)),1)");<br/>
&nbsp;&nbsp;v.push_back("((1,(1,1)),1)");<br/>
<br/>
&nbsp;&nbsp;v.push_back("(1,((20,(30,40)),50))");<br/>
&nbsp;&nbsp;v.push_back("(10,((1,(30,40)),50))");<br/>
&nbsp;&nbsp;v.push_back("(10,((20,(1,40)),50))");<br/>
&nbsp;&nbsp;v.push_back("(10,((20,(30,1)),50))");<br/>
&nbsp;&nbsp;v.push_back("(10,((20,(30,40)),1))");<br/>
&nbsp;&nbsp;v.push_back("(1,((1,(1,1)),1))");<br/>
<br/>
&nbsp;&nbsp;v.push_back("(((1,(20,30)),40),50)");<br/>
&nbsp;&nbsp;v.push_back("(((10,(1,30)),40),50)");<br/>
&nbsp;&nbsp;v.push_back("(((10,(20,1)),40),50)");<br/>
&nbsp;&nbsp;v.push_back("(((10,(20,30)),1),50)");<br/>
&nbsp;&nbsp;v.push_back("(((10,(20,30)),40),1)");<br/>
&nbsp;&nbsp;v.push_back("(((11,(1,1)),1),1)");<br/>
<br/>
&nbsp;&nbsp;v.push_back("(1,(((200,(300,400)),500),600))");<br/>
&nbsp;&nbsp;v.push_back("(100,(((1,(300,400)),500),600))");<br/>
&nbsp;&nbsp;v.push_back("(100,(((200,(1,400)),500),600))");<br/>
&nbsp;&nbsp;v.push_back("(100,(((200,(300,1)),500),600))");<br/>
&nbsp;&nbsp;v.push_back("(100,(((200,(300,400)),1),600))");<br/>
&nbsp;&nbsp;v.push_back("(100,(((200,(300,400)),500),1))");<br/>
&nbsp;&nbsp;v.push_back("(1,(((1,(1,1)),1),1))");<br/>
<br/>
&nbsp;&nbsp;v.push_back("((((1,(200,300)),400),500),600)");<br/>
&nbsp;&nbsp;v.push_back("((((100,(1,300)),400),500),600)");<br/>
&nbsp;&nbsp;v.push_back("((((100,(200,1)),400),500),600)");<br/>
&nbsp;&nbsp;v.push_back("((((100,(200,300)),1),500),600)");<br/>
&nbsp;&nbsp;v.push_back("((((100,(200,300)),400),1),600)");<br/>
&nbsp;&nbsp;v.push_back("((((100,(200,300)),400),500),1)");<br/>
&nbsp;&nbsp;v.push_back("((((1,(1,1)),1),1),1)");<br/>
<br/>
&nbsp;&nbsp;v.push_back("(1,(1,1),(1,1))");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Test<a href="CppNewick.html">Newick</a>MustFail(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppNewickVector.html">NewickVector</a> n(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b>(<a href="CppInvalid_argument.html">std::invalid_argument</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStringstream.html">std::stringstream</a> err_msg;<br/>
&nbsp;&nbsp;err_msg <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Test that had to fail succeeded from <a href="CppNewick.html">newick</a> '" <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\'';<br/>
&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppLogic_error.html">std::logic_error</a>(err_msg.str());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Test<a href="CppNewick.html">Newick</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppNewickVector.html">NewickVector</a> n(s);<br/>
&nbsp;&nbsp;<a href="CppCout.html">std::cout</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Obtaining simpler <a href="CppNewick.html">newick</a>s of " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppNewickVector.html">NewickVector</a>&gt; v <a href="CppOperatorAssign.htm">=</a> n.<a href="CppGetSimplerNewicks.html">GetSimplerNewicks</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "[no simpler <a href="CppNewick.html">newick</a> obtained]\n";<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.html">typedef</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppNewickVector.html">NewickVector</a>&gt;::const_iterator <a href="CppIterator.html">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppIterator.html">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.html">Iterator</a> i=v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> (*i).ToStr();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Test<a href="CppNewick.html">Newick</a>sFromFile()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileExists.html">FileExists</a>("subs_in.txt")) <b><a href="CppThrow.html">throw</a></b> <a href="CppRuntime_error.html">std::runtime_error</a>("File subs_in.txt must exist");<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppNewick.html">newick</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppFileToVector.html">FileToVector</a>("subs_in.txt");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;::const_iterator <a href="CppNewick.html">newick</a>_str <a href="CppOperatorAssign.htm">=</a> <a href="CppNewick.html">newick</a>s.begin();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;::const_iterator last_<a href="CppNewick.html">newick</a>_str <a href="CppOperatorAssign.htm">=</a> <a href="CppNewick.html">newick</a>s.end();<br/>
<br/>
&nbsp;&nbsp;<a href="CppOfstream.html">std::ofstream</a> f("subs_out.txt");<br/>
<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.html">BOOST_FOREACH</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; s, <a href="CppNewick.html">newick</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppContinue.html">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppNewickVector.html">NewickVector</a> n(s);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppNewickVector.html">NewickVector</a>&gt; simplers <a href="CppOperatorAssign.htm">=</a> n.<a href="CppGetSimplerNewicks.html">GetSimplerNewicks</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBOOST_FOREACH.html">BOOST_FOREACH</a>(<b><a href="CppConst.html">const</a></b> <a href="CppNewickVector.html">NewickVector</a>&amp; simple,simplers)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.html">&lt;&lt;</a> simple.ToStr();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TestPredefined<a href="CppNewick.html">Newick</a>s()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppNewick.html">newick</a>s <a href="CppOperatorAssign.htm">=</a> GetWellFormed<a href="CppNewick.html">Newick</a>s();<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;::const_iterator <a href="CppNewick.html">newick</a>_str <a href="CppOperatorAssign.htm">=</a> <a href="CppNewick.html">newick</a>s.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;::const_iterator last_<a href="CppNewick.html">newick</a>_str <a href="CppOperatorAssign.htm">=</a> <a href="CppNewick.html">newick</a>s.end();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; <a href="CppNewick.html">newick</a>_str<a href="CppOperatorNotEqual.htm">!=</a>last_<a href="CppNewick.html">newick</a>_str; <a href="CppOperatorPlus.htm">+</a>+<a href="CppNewick.html">newick</a>_str)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test<a href="CppNewick.html">Newick</a>(*<a href="CppNewick.html">newick</a>_str);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Test<a href="CppNewick.html">Newick</a>sManually()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.html">while</a></b>(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Please enter a <a href="CppNewick.html">Newick</a>, <b><a href="CppFor.htm">for</a></b> example '(1,(2,3))'. Press enter to quit.\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppAskUserForString.html">AskUserForString</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test<a href="CppNewick.html">Newick</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b> (<a href="CppInvalid_argument.html">std::invalid_argument</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Invalid input: " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n' <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ShowProgramUse()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.html">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Invalid use of Simplify<a href="CppNewick.html">Newick</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Correct use:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Simplify<a href="CppNewick.html">Newick</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Simplify<a href="CppNewick.html">Newick</a> [phylogeny]\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Simplify<a href="CppNewick.html">Newick</a> [phylogeny] [maximum complexity]\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Example uses:"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;Simplify<a href="CppNewick.html">Newick</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; start GUI mode\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;Simplify<a href="CppNewick.html">Newick</a> '(((10,10),10),10)'\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; simplify <b><a href="CppThis.htm">this</a></b> phylogeny once\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;Simplify<a href="CppNewick.html">Newick</a> '(((10,10),10),10)' 100\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; simplify <b><a href="CppThis.htm">this</a></b> phylogeny until complexity is lower than 100\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a><a href="CppOperatorEqual.htm">==</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQApplication.html">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DialogSimplify<a href="CppNewick.html">Newick</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.show();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> a.exec();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> &gt; 3)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ShowProgramUse();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppNewickVector.html">NewickVector</a> n(<a href="CppArgc.htm">argv</a>[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b> (<a href="CppStdException.html">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCerr.html">std::cerr</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Invalid <a href="CppNewick.html">Newick</a>: " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a> i(<a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorLessEqual.html">&lt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCerr.html">std::cerr</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "The value of complexity must be a positive <a href="CppInt.html">integer</a>\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b>(<a href="CppStdException.html">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCerr.html">std::cerr</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "The value of complexity must be an <a href="CppInt.html">integer</a>\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>All is well<br/>
&nbsp;&nbsp;<a href="CppIfdef.html">#ifdef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.html">RandomizeTimer</a>();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s_in(<a href="CppArgc.htm">argv</a>[1]);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBigInt.html">BigInteger</a> max_complexity <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppBigInt.html">BigInteger</a>(<a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>[2]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppNewick.html">Newick</a>::<a href="CppCalcComplexity.html">CalcComplexity</a>(<a href="CppNewickVector.html">NewickVector</a>(s_in).Peek()) <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> s_out <a href="CppOperatorAssign.htm">=</a> Simplify<a href="CppNewick.html">Newick</a>(s_in,max_complexity);<br/>
&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> s_out <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#zip packs all the files to port into a single .zip file,<br/>
#minicking the same folder structure<br/>
#Folder structure<br/>
# *<br/>
#&nbsp;&nbsp; * Classes<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * CppAbout<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * CppNewick<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * CppNewickVector<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * CppQtAboutDialog<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * CppTrace<br/>
#&nbsp;&nbsp; * Libraries<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; * bigint-2010.04.30<br/>
#&nbsp;&nbsp; * Tools<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;* ToolSimplifyNewick<br/>
echo "Mimicking file structure"<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Classes/CppAbout<br/>
mkdir temp_zip/Classes/CppNewick<br/>
mkdir temp_zip/Classes/CppNewickVector<br/>
mkdir temp_zip/Classes/CppQtAboutDialog<br/>
mkdir temp_zip/Classes/CppTrace<br/>
mkdir temp_zip/Libraries<br/>
mkdir temp_zip/Libraries/bigint-2010.04.30<br/>
mkdir temp_zip/Tools<br/>
mkdir temp_zip/Tools/ToolSimplifyNewick<br/>
<br/>
echo "Copying files"<br/>
cp ../../Classes/CppAbout/*.* temp_zip/Classes/CppAbout<br/>
cp ../../Classes/CppNewick/*.* temp_zip/Classes/CppNewick<br/>
cp ../../Classes/CppNewickVector/*.* temp_zip/Classes/CppNewickVector<br/>
cp ../../Classes/CppQtAboutDialog/*.* temp_zip/Classes/CppQtAboutDialog<br/>
cp ../../Classes/CppTrace/*.* temp_zip/Classes/CppTrace<br/>
cp ../../Libraries/bigint-2010.04.30/*.* temp_zip/Libraries/bigint-2010.04.30<br/>
cp ../../Tools/ToolSimplifyNewick/*.* temp_zip/Tools/ToolSimplifyNewick<br/>
<br/>
echo "Compressing files"<br/>
cd temp_zip<br/>
<br/>
zip -r ToolSimplifyNewickSource_2_0 Classes<br/>
zip -r ToolSimplifyNewickSource_2_0 Libraries<br/>
zip -r ToolSimplifyNewickSource_2_0 Tools<br/>
cd ..<br/>
cp temp_zip/ToolSimplifyNewickSource_2_0.zip ToolSimplifyNewickSource_2_0.zip<br/>
<br/>
echo "Cleaning up"<br/>
#Classes<br/>
rm temp_zip/Classes/CppAbout/*.*<br/>
rm temp_zip/Classes/CppNewick/*.*<br/>
rm temp_zip/Classes/CppNewickVector/*.*<br/>
rm temp_zip/Classes/CppQtAboutDialog/*.*<br/>
rm temp_zip/Classes/CppTrace/*.*<br/>
rmdir temp_zip/Classes/CppAbout<br/>
rmdir temp_zip/Classes/CppNewick<br/>
rmdir temp_zip/Classes/CppNewickVector<br/>
rmdir temp_zip/Classes/CppQtAboutDialog<br/>
rmdir temp_zip/Classes/CppTrace<br/>
rmdir temp_zip/Classes<br/>
#Libraries<br/>
rm temp_zip/Libraries/bigint-2010.04.30/*.*<br/>
rmdir temp_zip/Libraries/bigint-2010.04.30<br/>
rmdir temp_zip/Libraries<br/>
#Tools<br/>
rm temp_zip/Tools/ToolSimplifyNewick/*.*<br/>
rmdir temp_zip/Tools/ToolSimplifyNewick<br/>
rmdir temp_zip/Tools<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
echo "Done"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
