<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>WtConnectThreeWidget</title>
  <meta name="description" content="C++ WtConnectThreeWidget"/>
  <meta name="keywords" content="C++ WtConnectThreeWidget code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppWtConnectThreeWidget.htm">WtConnectThreeWidget</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicWt.png" alt="Wt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppWtConnectThreeWidget.htm">WtConnectThreeWidget</a> is a <a href="CppWt.htm">Wt</a> 
<a href="CppWidget.htm">widget</a> <a href="CppClass.htm">class</a> to display an <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>wtconnectthreewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="wtconnectthreewidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>, <a href="CppWt.htm">Wt</a> <a href="CppWidget.html">widget</a> <b><a href="CppFor.htm">for</a></b> <a href="CppConnectThree.html">ConnectThree</a> display<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtConnectThreeWidget.html">CppWtConnectThreeWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> WTCONNECTTHREEWIDGET_H<br/>
<a href="CppDefine.html">#define</a> WTCONNECTTHREEWIDGET_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBitsetH.html">bitset</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppSignals2.html">signals2</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintedWidget.html">WPaintedWidget</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> "<a href="CppConnectThree.html">connectthree</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppWt.htm">Wt</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.html">struct</a></b> <a href="CppWPaintDevice.html">WPaintDevice</a>;<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> WPAINTER_H_<br/>
&nbsp;&nbsp;<b><a href="CppStruct.html">struct</a></b> <a href="CppWPainter.html">WPainter</a> { <b><a href="CppStruct.html">struct</a></b> Image; };<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.html">struct</a></b> <a href="CppWTimer.html">WTimer</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppConnectThreeWidget.html">ConnectThreeWidget</a>;<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppConnectThree.html">ConnectThree</a>Resources;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a> is a <a href="CppWt.htm">Wt</a> <a href="CppWidget.html">widget</a> to display<br/>
<a href="CppComment.htm">///</a>the area/board of the <a href="CppConnectThree.html">ConnectThree</a> <b><a href="CppClass.html">class</a></b>.<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppWPaintedWidget.html">Wt::WPaintedWidget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppConnectThree.html">ConnectThree</a>Resources&gt; resources,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBitset.html">std::bitset</a>&lt;3&gt;&amp; is_player_human <a href="CppOperatorAssign.htm">=</a> <a href="CppBitset.html">std::bitset</a>&lt;3&gt;(<b><a href="CppTrue.htm">true</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 16,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 12);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoComputerTurn();<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetActivePlayer() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBitset.html">std::bitset</a>&lt;3&gt;&amp; GetIsPlayerHuman() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWinner() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsComputerTurn() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIsPlayerHuman(<b><a href="CppConst.html">const</a></b> <a href="CppBitset.html">std::bitset</a>&lt;3&gt;&amp; is_player_human);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_signal_valid_move is <a href="CppEmit.html">emitted</a> on a valid move,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ca<b><a href="CppUsing.html">using</a></b> the game to be terminated or let<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the next player <b><a href="CppDo.htm">do</a></b> his/her move.<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.html">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_valid_move;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnClick(<b><a href="CppConst.html">const</a></b> <a href="CppWMouseEvent.html">Wt::WMouseEvent</a>&amp; e);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppWPaintDevice.html">Wt::WPaintDevice</a> *paintDevice);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;<a href="CppConnectThreeWidget.html">ConnectThreeWidget</a>&gt; m_<a href="CppWidget.html">widget</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image&gt; &gt; m_players;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image&gt; m_empty;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;<a href="CppWTimer.html">Wt::WTimer</a>&gt; m_<a href="CppTime.htm">time</a>r;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image&amp; GetImage(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite) <b><a href="CppConst.html">const</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> WTCONNECTTHREEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>wtconnectthreewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="wtconnectthreewidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>, <a href="CppWt.htm">Wt</a> <a href="CppWidget.html">widget</a> <b><a href="CppFor.htm">for</a></b> <a href="CppConnectThree.html">ConnectThree</a> display<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtConnectThreeWidget.html">CppWtConnectThreeWidget</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintDevice.html">WPaintDevice</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPainter.html">WPainter</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTimer.html">WTimer</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppConnectThree.html">connectthree</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppConnectThree.html">connectthree</a><a href="CppWidget.html">widget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppConnectThree.html">connectthree</a>resources<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppWtConnectThreeWidget.html">wtconnectthreewidget</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Yes, naming the filename twice feels dumb, but<br/>
<a href="CppComment.htm">///</a>I could not find enough <a href="CppDocumentation.html">documentation</a> <a href="CppAbout.html">about</a><br/>
<a href="CppComment.htm">///</a>how I should use the <a href="CppWPainter.html">Wt::WPainter</a>::Image <a href="CppConstructor.html">constructor</a><br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppConnectThree.html">ConnectThree</a>Resources&gt; resources,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBitset.html">std::bitset</a>&lt;3&gt;&amp; is_player_human,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows)<br/>
&nbsp;&nbsp;: m_signal_valid_move{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppWidget.html">widget</a>(<b><a href="CppNew.htm">new</a></b> <a href="CppConnectThreeWidget.html">ConnectThreeWidget</a>(is_player_human,n_cols,n_rows)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_players(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetPlayersFilenames()[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetPlayersFilenames()[0])),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetPlayersFilenames()[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetPlayersFilenames()[1])),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;<b><a href="CppConst.html">const</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetPlayersFilenames()[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetPlayersFilenames()[2])),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_empty(<b><a href="CppNew.htm">new</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetEmptyFilename(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;GetEmptyFilename())),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r(<b><a href="CppNew.htm">new</a></b> <a href="CppWTimer.html">Wt::WTimer</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_empty-&gt;width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_height <a href="CppOperatorAssign.htm">=</a> m_empty-&gt;height();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;resize(n_cols * sprite_width,n_rows * sprite_height);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;mouseWentDown().connect(<b><a href="CppThis.htm">this</a></b>, &amp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::OnClick);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;setInterval(100);<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;<a href="CppTime.htm">time</a>out().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.html">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppConnectThreeWidget.html">ConnectThreeWidget</a>::Tick,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppWidget.html">widget</a>.get()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::DoComputerTurn()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(IsComputerTurn());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppConnectThree.html">ConnectThree</a>::Move move <a href="CppOperatorAssign.htm">=</a> m_<a href="CppWidget.html">widget</a>-&gt;SuggestMove();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> draw<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppWidget.html">widget</a>-&gt;GetGame()-&gt;IsInvalidMove(move)) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;m_<a href="CppWidget.html">widget</a>-&gt;DoMove(move.get&lt;0&gt;(),move.get&lt;1&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::GetActivePlayer() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_<a href="CppWidget.html">widget</a>-&gt;GetGame()-&gt;GetActivePlayer();<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppBitset.html">std::bitset</a>&lt;3&gt;&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::GetIsPlayerHuman() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_<a href="CppWidget.html">widget</a>-&gt;GetIsPlayerHuman();<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "2.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2011-01-08: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>");<br/>
&nbsp;&nbsp;v.push_back("2011-01-10: <a href="CppVersion.html">version</a> 1.1: added use of <a href="CppConnectThree.html">ConnectThree</a>Resources");<br/>
&nbsp;&nbsp;v.push_back("2011-04-22: <a href="CppVersion.html">version</a> 2.0: added Restart, SetIsPlayerHuman <a href="CppMemberFunction.html">member function</a>s and a different way of resource acquisition");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::GetWinner() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppWidget.html">widget</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppWidget.html">widget</a>-&gt;GetGame());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_<a href="CppWidget.html">widget</a>-&gt;GetGame()-&gt;GetWinner();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::IsComputerTurn() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppWidget.html">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_<a href="CppWidget.html">widget</a>-&gt;IsComputerTurn();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::OnClick(<b><a href="CppConst.html">const</a></b> <a href="CppWMouseEvent.html">Wt::WMouseEvent</a>&amp; e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Disable clicking <b><a href="CppIf.htm">if</a></b> it's the AI's turn<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsComputerTurn()) <b><a href="CppReturn.html">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_empty-&gt;width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_height <a href="CppOperatorAssign.htm">=</a> m_empty-&gt;height();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x <a href="CppOperatorAssign.htm">=</a> e.<a href="CppWidget.html">widget</a>().x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y <a href="CppOperatorAssign.htm">=</a> e.<a href="CppWidget.html">widget</a>().y;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> mouse_x <a href="CppOperatorDivide.htm">/</a> sprite_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> mouse_y <a href="CppOperatorDivide.htm">/</a> sprite_height;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppWidget.html">widget</a>-&gt;GetGame()-&gt;CanDoMove(x,y))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppWidget.html">widget</a>-&gt;DoMove(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_valid_move();<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::paintEvent(<a href="CppWPaintDevice.html">Wt::WPaintDevice</a> *paintDevice)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWPainter.html">Wt::WPainter</a> painter(paintDevice);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppWidget.html">widget</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppWidget.html">widget</a>-&gt;GetGame());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_empty-&gt;width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_height <a href="CppOperatorAssign.htm">=</a> m_empty-&gt;height();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> m_<a href="CppWidget.html">widget</a>-&gt;GetGame()-&gt;GetRows();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> m_<a href="CppWidget.html">widget</a>-&gt;GetGame()-&gt;GetCols();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawImage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x * sprite_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y * sprite_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetImage(m_<a href="CppWidget.html">widget</a>-&gt;GetGame()-&gt;GetSquare(x,y)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppWPainter.html">Wt::WPainter</a>::Image&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::GetImage(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppConnectThree.html">ConnectThree</a>::player1 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppConnectThree.html">ConnectThree</a>::player2 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppConnectThree.html">ConnectThree</a>::player3 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_players[sprite]);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (sprite)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppConnectThree.html">ConnectThree</a>::no_player: <b><a href="CppReturn.html">return</a></b> *m_empty.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppConnectThree.html">ConnectThree</a>::player1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppConnectThree.html">ConnectThree</a>::player2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppConnectThree.html">ConnectThree</a>::player3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> *m_players[sprite].get();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppLogic_error.html">std::logic_error</a>("Unknown <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::GetImage value");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::Restart()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppWidget.html">widget</a>);<br/>
&nbsp;&nbsp;m_<a href="CppWidget.html">widget</a>-&gt;Restart();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtConnectThreeWidget.html">WtConnectThreeWidget</a>::SetIsPlayerHuman(<b><a href="CppConst.html">const</a></b> <a href="CppBitset.html">std::bitset</a>&lt;3&gt;&amp; is_player_human)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_<a href="CppWidget.html">widget</a>);<br/>
&nbsp;&nbsp;m_<a href="CppWidget.html">widget</a>-&gt;SetIsPlayerHuman(is_player_human);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
