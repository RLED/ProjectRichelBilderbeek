 
<title>std::bind1st</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ std::bind1st</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek std::bind1st std bind1st</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>12</o:Revision>
  <o:TotalTime>153</o:TotalTime>
  <o:Created>2010-02-02T10:33:00Z</o:Created>
  <o:LastSaved>2010-02-04T12:23:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>99</o:Words>
  <o:Characters>567</o:Characters>
  <o:Category>C++ Richel Bilderbeek std::bind1st</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>4</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:CharactersWithSpaces>696</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
 </head>

 

 

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>(<a href="Cpp.htm">C++</a>)
<a href="CppBind1st.htm">std::bind1st</a></h1>

<p>&nbsp;</p>

<p>A <a
href="CppBinder.htm">binder</a> to call a binary function with the value bound
as first argument. If the second argument needs to be bound, use <a
href="CppBind2nd.htm">std::bind2nd</a> instead.</p>

<p>&nbsp;</p>

<p>The use of   <a href="CppBind1st.htm">std::bind1st</a>
is clearest in division:</p>

   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     If on all elements, an element called x, you
want to perform '1.0 / x', use   <a href="CppBind1st.htm">std::bind1st</a> one the 1.0. This is demonstrated
in the function <a href="CppReciprocal.htm">Reciprocal</a>, which is shown
below in the example.  </p>

   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     If on all elements, an element called x, you
want to perform 'x / 2.0', use   <a href="CppBind2nd.htm">std::bind2nd</a> one the 2.0. This is
demonstrated in the function <a href="CppHalve.htm">Halve</a>.  </p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>Example:   <a
href="CppReciprocal.htm">Reciprocal</a></h2>

<p>&nbsp;</p>

<p>Replaces all elements by their reprocicals,
that is replaces all elements called 'x' by '1.0/x'.</p>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p><a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;</p>

<p>&nbsp;</p>

<p><a href="CppComment.htm">//</a>From
http://www.richelbilderbeek.nl/CppReciprocal.htm</p>

<p><b> <a href="CppVoid.htm">void</a> </b>    <a href="CppReciprocal.htm">Reciprocal</a>  (<a href="CppVector.htm">std::vector</a>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;&amp; v)</p>

<p>{</p>

<p>   <a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),</p>

<p>     <a href="CppBind1st.htm">std::bind1st</a>(<a
href="CppDivides.htm">std::divides</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),1.0));    </p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a href="CppReferences.htm">References</a></h2>

<p>  [0] &nbsp;     ...</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
