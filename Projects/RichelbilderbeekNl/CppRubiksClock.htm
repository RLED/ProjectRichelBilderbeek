<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>RubiksClock</title>
  <meta name="description" content="C++ RubiksClock"/>
  <meta name="keywords" content="C++ RubiksClock code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppRubiksClock.htm">RubiksClock</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ./CppRubiksClock-->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclock.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclock.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClock.htm">RubiksClock</a>, <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> Rubik's clock<br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClock.htm">CppRubiksClock</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RUBIKSCLOCK_H<br/>
<a href="CppDefine.htm">#define</a> RUBIKSCLOCK_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Rect;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDialWidget.htm">DialWidget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppRubiksClock.htm">RubiksClock</a> is a Rubik's Clock<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppRubiksClock.htm">RubiksClock</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Pegs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Pegs();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>&gt; pegs[2][2]; <a href="CppComment.htm">//</a>Is peg pressed?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Pegs CreatePegsFromIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> Side<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;topLeft, topRight, bottomLeft, bottomRight<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppTime.htm">Time</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>s(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_front);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDialWidget.htm">DialWidget</a>&gt; <a href="CppTime.htm">time</a>s[3][3];<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppGeometry.htm">geometry</a> of all <a href="CppWidget.htm">Widget</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetGeometry(<b><a href="CppConst.htm">const</a></b> Rect&amp; r);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change a peg, as seen from the front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TogglePeg(<b><a href="CppConst.htm">const</a></b> Side side);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change a wheel, as seen from the front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheel(<b><a href="CppConst.htm">const</a></b> Side side, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Check();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppTime.htm">time</a> dials of the back side<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>s&amp; GetBack<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppTime.htm">time</a> dials of the back side<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>s&amp; GetBack<a href="CppTime.htm">Time</a>s();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the pegs of the back side<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Pegs GetBackPegs() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppTime.htm">time</a> dials of the front side<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>s&amp; GetFront<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppTime.htm">time</a> dials of the front side<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>s&amp; GetFront<a href="CppTime.htm">Time</a>s();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the pegs of the front side<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Pegs&amp; GetFrontPegs() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the pegs of the front side<br/>
&nbsp;&nbsp;Pegs&amp; GetFrontPegs();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to a change in the clock<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_clock_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>s mFront;<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>s mBack;<br/>
&nbsp;&nbsp;Pegs mPegs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the top-left wheel, as seen from the front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelTopLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the top-right wheel, as seen from the front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelTopRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the bottom-left wheel, as seen from the front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelBottomLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the bottom-right wheel, as seen from the front<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnWheelBottomRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>&amp; r);<br/>
<br/>
};<br/>
<br/>
<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs CreatePegsFromIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>&amp; r);<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; t);<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; p);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RUBIKSCLOCK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>rubiksclock.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="rubiksclock.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRubiksClock.htm">RubiksClock</a>, <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> Rubik's clock<br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppRubiksClock.htm">CppRubiksClock</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.htm">typedef</a></b>s"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRubiksClock.htm">rubiksclock</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/con<a href="CppVersion.htm">version</a>/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppDial.htm">dial</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppDialWidget.htm">dialwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRubiksClock.htm">rubiksclock</a><a href="CppDial.htm">dial</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRubiksClock.htm">rubiksclock</a><a href="CppDialWidget.htm">dialwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppToggleButton.htm">togglebutton</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppToggleButtonWidget.htm">togglebuttonwidget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s::<a href="CppTime.htm">Time</a>s(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_front)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>s[x][y].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDialWidget.htm">DialWidget</a>(0,0,0,32,32,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_front ? 196 : 128,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_front ? 196 : 128,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_front ? 255 : 255));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> rhs.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs::Pegs()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pegs[x][y].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(<b><a href="CppFalse.htm">false</a></b>,255,255,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.pegs[x][y] <a href="CppOperatorNotEqual.htm">!=</a> rhs.pegs[x][y]) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs <a href="CppRibi.htm">ribi</a>::CreatePegsFromIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 0: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 1: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 2: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 3: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 4: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 5: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 6: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 7: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 8: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 9: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 10: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 11: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 12: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 13: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p u<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 14: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> u p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 15: (p <a href="CppOperatorAssign.htm">=</a> pressed, u <a href="CppOperatorAssign.htm">=</a> unpressed)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> p p<br/>
<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs pegs;<br/>
&nbsp;&nbsp;pegs.pegs[0][0].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(((index &amp; 1) <a href="CppOperatorEqual.htm">==</a> 1),255,255,0));<br/>
&nbsp;&nbsp;pegs.pegs[1][0].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(((index &amp; 2) <a href="CppOperatorEqual.htm">==</a> 2),255,255,0));<br/>
&nbsp;&nbsp;pegs.pegs[0][1].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(((index &amp; 4) <a href="CppOperatorEqual.htm">==</a> 4),255,255,0));<br/>
&nbsp;&nbsp;pegs.pegs[1][1].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(((index &amp; 8) <a href="CppOperatorEqual.htm">==</a> 8),255,255,0));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pegs;<br/>
<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppRubiksClock.htm">RubiksClock</a>()<br/>
&nbsp;&nbsp;: m_signal_clock_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFront{<a href="CppTime.htm">Time</a>s{<b><a href="CppTrue.htm">true</a></b>}},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mBack{<a href="CppTime.htm">Time</a>s{<b><a href="CppFalse.htm">false</a></b>}},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs{}<br/>
{<br/>
&nbsp;&nbsp;Check();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::SetGeometry(<b><a href="CppConst.htm">const</a></b> Rect&amp; r)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> left <a href="CppOperatorAssign.htm">=</a> r.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> top <a href="CppOperatorAssign.htm">=</a> r.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> r.GetWidth();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> r.GetHeight();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> w3 <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width) <a href="CppOperatorDivide.htm">/</a> 3.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> h3 <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 3.0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mBack.<a href="CppTime.htm">time</a>s[x][y]-&gt;SetGeometry(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left <a href="CppOperatorPlus.htm">+</a> (x_d*w3),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top <a href="CppOperatorPlus.htm">+</a> (y_d*h3),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFront.<a href="CppTime.htm">time</a>s[x][y]-&gt;SetGeometry(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left <a href="CppOperatorPlus.htm">+</a> (x_d*w3),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top <a href="CppOperatorPlus.htm">+</a> (y_d*h3),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[x][y]-&gt;SetGeometry(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left <a href="CppOperatorPlus.htm">+</a> ((0.9+x_d)*w3),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top <a href="CppOperatorPlus.htm">+</a> ((0.9+y_d)*h3),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w3*0.2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h3*0.2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::TogglePeg(<b><a href="CppConst.htm">const</a></b> Side side)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (side <a href="CppOperatorEqual.htm">==</a> topLeft <a href="CppOperatorLogicalOr.htm">||</a> side <a href="CppOperatorEqual.htm">==</a> bottomLeft ? 0 : 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (side <a href="CppOperatorEqual.htm">==</a> topLeft <a href="CppOperatorLogicalOr.htm">||</a> side <a href="CppOperatorEqual.htm">==</a> topRight ? 0 : 1);<br/>
&nbsp;&nbsp;mPegs.pegs[x][y]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;Toggle();<br/>
&nbsp;&nbsp;m_signal_clock_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheel(<b><a href="CppConst.htm">const</a></b> Side side, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (side)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> topLeft: TurnWheelTopLeft(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> topRight: TurnWheelTopRight(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bottomLeft: TurnWheelBottomLeft(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> bottomRight: TurnWheelBottomRight(nSteps); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nSteps <a href="CppOperatorModulus.htm">%</a> 12 <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_clock_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelTopLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y]) { mFront.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]) { mBack.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(-nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelTopRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y]) { mFront.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]) { mBack.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(-nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelBottomLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y]) { mFront.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]) { mBack.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(-nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::TurnWheelBottomRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnFront[3][3];<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> turnBack[3][3];<br/>
<br/>
&nbsp;&nbsp;turnFront[2][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;turnFront[1][2] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[0][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[2][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[1][1] <a href="CppOperatorAssign.htm">=</a> !mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnFront[0][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnFront[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnFront[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;!mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;!mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> !mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()&nbsp;&nbsp;) );<br/>
&nbsp;&nbsp;turnFront[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;turnBack[2][2] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][2] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnBack[0][2] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;turnBack[2][1] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[1][1] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
&nbsp;&nbsp;turnBack[0][1] <a href="CppOperatorAssign.htm">=</a> mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed();<br/>
<br/>
&nbsp;&nbsp;turnBack[2][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
&nbsp;&nbsp;turnBack[1][0] <a href="CppOperatorAssign.htm">=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() ) );<br/>
&nbsp;&nbsp;turnBack[0][0] <a href="CppOperatorAssign.htm">=</a> (mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed() <a href="CppOperatorEqual.htm">==</a> mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnFront[x][y]) { mFront.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (turnBack[x][y]) { mBack.<a href="CppTime.htm">time</a>s[x][y]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;Turn(-nSteps); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::GetFront<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mFront;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::GetFront<a href="CppTime.htm">Time</a>s()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mFront;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::GetBack<a href="CppTime.htm">Time</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mBack;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::GetBack<a href="CppTime.htm">Time</a>s()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mBack;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::GetFrontPegs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPegs;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::GetFrontPegs()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPegs;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::GetBackPegs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;Pegs back;<br/>
&nbsp;&nbsp;back.pegs[0][0].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(!mPegs.pegs[1][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed(),255,255,0));<br/>
&nbsp;&nbsp;back.pegs[1][0].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(!mPegs.pegs[0][0]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed(),255,255,0));<br/>
&nbsp;&nbsp;back.pegs[0][1].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(!mPegs.pegs[1][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed(),255,255,0));<br/>
&nbsp;&nbsp;back.pegs[1][1].reset(<b><a href="CppNew.htm">new</a></b> <a href="CppToggleButton.htm">ToggleButton</a><a href="CppWidget.htm">Widget</a>(!mPegs.pegs[0][1]-&gt;Get<a href="CppToggleButton.htm">ToggleButton</a>()-&gt;IsPressed(),255,255,0));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;back.pegs[x][y]-&gt;SetGeometry(mPegs.pegs[1-x][y]-&gt;GetGeometry());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> back;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Check()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>s originalFront <a href="CppOperatorAssign.htm">=</a> mFront;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>s originalBack <a href="CppOperatorAssign.htm">=</a> mBack;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Pegs originalPegs <a href="CppOperatorAssign.htm">=</a> mPegs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the corner clocks<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (mFront.<a href="CppTime.htm">time</a>s[0][0]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[2][0]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()) <a href="CppOperatorModulus.htm">%</a> 12 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (mFront.<a href="CppTime.htm">time</a>s[2][0]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[0][0]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()) <a href="CppOperatorModulus.htm">%</a> 12 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (mFront.<a href="CppTime.htm">time</a>s[0][2]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[2][2]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()) <a href="CppOperatorModulus.htm">%</a> 12 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (mFront.<a href="CppTime.htm">time</a>s[2][2]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> mBack.<a href="CppTime.htm">time</a>s[0][2]-&gt;Get<a href="CppRubiksClock.htm">RubiksClock</a><a href="CppDial.htm">Dial</a>()-&gt;<a href="CppGetTime.htm">GetTime</a>()) <a href="CppOperatorModulus.htm">%</a> 12 <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check all peg combinations<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>16; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mPegs <a href="CppOperatorAssign.htm">=</a> CreatePegsFromIndex(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check all wheels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> after turning around in two steps, everything stays the same<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>s front <a href="CppOperatorAssign.htm">=</a> mFront;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>s back <a href="CppOperatorAssign.htm">=</a> mBack;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Side side <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Side&gt;(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSteps <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;TurnWheel(side,nSteps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 11<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;TurnWheel(side,12-nSteps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mFront <a href="CppOperatorEqual.htm">==</a> front);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( mBack <a href="CppOperatorEqual.htm">==</a> back);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2011-09-08: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRubiksClock.htm">RubiksClock</a>&amp; r)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;rubiks_clock&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;front&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> r.mFront<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/front&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;back&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> r.mBack<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/back&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;pegs&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> r.mPegs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/pegs&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/rubiks_clock&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::<a href="CppTime.htm">Time</a>s&amp; t)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;rubiks_clock_<a href="CppTime.htm">time</a>s&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;rubiks_clock_dial&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;x&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/x&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;y&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/y&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t.<a href="CppTime.htm">time</a>s[x][y].get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/rubiks_clock_dial&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/rubiks_clock_<a href="CppTime.htm">time</a>s&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppRubiksClock.htm">RubiksClock</a>::Pegs&amp; p)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;rubiks_clock_pegs&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;rubiks_clock_pegs&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;x&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/x&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;y&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/y&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.pegs[x][y].get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/rubiks_clock_dial&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/rubiks_clock_pegs&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
