<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Xml</title>
  <meta name="description" content="C++ Xml"/>
  <meta name="keywords" content="C++ Xml "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppXml.htm">Xml</a></h1>
<p>&nbsp;</p>
<h2>./CppXml/CppXml.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppXml/CppXml.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppXml<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppXml/xml.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppXml/xml.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppXml/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppXml/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppXml/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppXml/xml.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppXml/xml.cpp" border = "1"><tr><td><code>
#include "xml.h"<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;sstream&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "trace.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::xml::SplitXml(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;std::string::const_iterator i = s.begin();<br/>
&nbsp;&nbsp;std::string::const_iterator j = s.begin();<br/>
&nbsp;&nbsp;const std::string::const_iterator end = s.end();<br/>
&nbsp;&nbsp;while (j!=end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((*j=='&gt;' || *j == '&lt;') &amp;&amp; std::distance(i,j) &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::string t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*i=='&lt;' ? i&nbsp;&nbsp; : i+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*j=='&gt;' ? j+1 : j,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::back_inserter(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::xml::StripXmlTag(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;if (s.empty()) return "";<br/>
&nbsp;&nbsp;if (s[0]!='&lt;') return "";<br/>
&nbsp;&nbsp;if (s[s.size() - 1]!='&gt;') return "";<br/>
&nbsp;&nbsp;const int begin = s.find_first_of('&gt;');<br/>
&nbsp;&nbsp;if (begin == static_cast&lt;int&gt;(std::string::npos)) return "";<br/>
&nbsp;&nbsp;const int end = s.find_last_of('&lt;');<br/>
&nbsp;&nbsp;if (end == static_cast&lt;int&gt;(std::string::npos)) return "";<br/>
&nbsp;&nbsp;if (begin &gt; end) return "";<br/>
&nbsp;&nbsp;assert(begin &lt; end);<br/>
&nbsp;&nbsp;const std::string tag_left = s.substr(0,begin+1);<br/>
&nbsp;&nbsp;assert(!tag_left.empty());<br/>
&nbsp;&nbsp;assert(tag_left[0] == '&lt;');<br/>
&nbsp;&nbsp;assert(tag_left[tag_left.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;const std::string tag_left_text = tag_left.substr(1,tag_left.size() - 2);<br/>
&nbsp;&nbsp;if (tag_left_text.empty()) return "";<br/>
&nbsp;&nbsp;const std::string tag_right = s.substr(end,s.size() - end);<br/>
&nbsp;&nbsp;if (tag_right.size() &lt; 2) return "";<br/>
&nbsp;&nbsp;assert(!tag_right.empty());<br/>
&nbsp;&nbsp;assert(tag_right[0] == '&lt;');<br/>
&nbsp;&nbsp;assert(tag_right[tag_right.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;const std::string tag_right_text = tag_right.substr(2,tag_right.size() - 3);<br/>
&nbsp;&nbsp;if (tag_right_text.empty()) return "";<br/>
&nbsp;&nbsp;if (tag_left_text != tag_right_text) return "";<br/>
&nbsp;&nbsp;const std::string text = s.substr(begin + 1,end - begin - 1);<br/>
&nbsp;&nbsp;return text;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::xml::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;static bool is_tested = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (is_tested) return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested = true;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//StripXmlTag<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;my_tag&gt;text&lt;/my_tag&gt;") == "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;mytag&gt;text&lt;/mytag&gt;") == "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;tags&gt;text&lt;/tags&gt;") == "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;tag&gt;text&lt;/tag&gt;") == "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;tg&gt;text&lt;/tg&gt;") == "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;t&gt;text&lt;/t&gt;") == "text");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;y&lt;/x&gt;") == "y");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;y&lt;/x&gt;&lt;/x&gt;") == "y&lt;/x&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;&lt;x&gt;y&lt;/x&gt;") == "&lt;x&gt;y");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;&lt;x&gt;y&lt;/x&gt;&lt;/x&gt;") == "&lt;x&gt;y&lt;/x&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;y&lt;/z&gt;") == "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;y&lt;x&gt;") == "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;&gt;y&lt;&gt;") == "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;&gt;y&lt;/&gt;") == "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;y") == "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(StripXmlTag("&lt;x&gt;&lt;/x&gt;") == "");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//StrToXml and XmlToStr<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v { "a", "ab", "abc", " ", "" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i=0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string tag_name = v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t j=0; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string content = v[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml = ToXml(tag_name,content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(FromXml(xml).first&nbsp;&nbsp;== tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(FromXml(xml).second == content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//MapToXml<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Use int to std::string map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create a map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef int KeyType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string ValueType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::map&lt;KeyType,ValueType&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair(1,"one") );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair(2,"two") );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair(4,"four") );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string tag_name = "integers";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert map to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml = MapToXml(tag_name,m);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert XML back to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;KeyType(const std::string&amp;)&gt;&amp; str_to_key_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::lexical_cast&lt;KeyType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;ValueType(const std::string&amp;)&gt;&amp; str_to_value_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::lexical_cast&lt;ValueType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;std::string,std::map&lt;KeyType,ValueType&gt;&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmlToMap&lt;KeyType,ValueType&gt;(xml,str_to_key_function,str_to_value_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first == tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second.size() == m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::equal(m.begin(),m.end(),p.second.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Again convert pointers to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; MapToXml(p.first,p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Use std::string to int map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create a map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string KeyType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef int ValueType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::map&lt;KeyType,ValueType&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair("one",1) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair("two",2) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair("four",4) );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string tag_name = "integers";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert map to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml = MapToXml(tag_name,m);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert XML back to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;KeyType(const std::string&amp;)&gt;&amp; str_to_key_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::lexical_cast&lt;KeyType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;ValueType(const std::string&amp;)&gt;&amp; str_to_value_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::lexical_cast&lt;ValueType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;std::string,std::map&lt;KeyType,ValueType&gt;&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmlToMap&lt;KeyType,ValueType&gt;(xml,str_to_key_function,str_to_value_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first == tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second.size() == m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(std::equal(m.begin(),m.end(),p.second.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Again convert pointers to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; MapToXml(p.first,p.second) &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Use int to boost::shared_ptr&lt;const std::string&gt; map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create a map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef int KeyType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef boost::shared_ptr&lt;const std::string&gt; ValueType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TagType tag_name { "integers again" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::map&lt;KeyType,ValueType&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair(1,boost::shared_ptr&lt;const std::string&gt;(new std::string("one" )) ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair(4,boost::shared_ptr&lt;const std::string&gt;(new std::string("four")) ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert( std::make_pair(9,boost::shared_ptr&lt;const std::string&gt;(new std::string("nine")) ));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert map to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;std::string(const TagType&amp;)&gt; tag_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const TagType&amp; tag)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tag;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;std::string(const KeyType&amp;&nbsp;&nbsp;)&gt; key_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const KeyType&amp; key)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::lexical_cast&lt;std::string&gt;(key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;std::string(const ValueType&amp;)&gt; value_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const ValueType&amp; value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MapToXml(tag_name,m,tag_to_str_function,key_to_str_function,value_to_str_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert XML back to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//const std::function&lt;TagType(const std::string&amp;)&gt;&amp; str_to_tag_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;return s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;KeyType(const std::string&amp;)&gt;&amp; str_to_key_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::lexical_cast&lt;KeyType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;ValueType(const std::string&amp;)&gt;&amp; str_to_value_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return boost::shared_ptr&lt;const std::string&gt;(new std::string(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;std::string,std::map&lt;KeyType,ValueType&gt;&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmlToMap&lt;KeyType,ValueType&gt;(xml,str_to_key_function,str_to_value_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first == tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second.size() == m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::equal(m.begin(),m.end(),p.second.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[key_to_str_function,value_to_str_function](<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;KeyType,ValueType&gt;&amp; lhs, const std::pair&lt;KeyType,ValueType&gt;&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return key_to_str_function(lhs.first) == key_to_str_function(rhs.first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; value_to_str_function(lhs.second) == value_to_str_function(rhs.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Again convert pointers to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; MapToXml(tag_name,m,tag_to_str_function,key_to_str_function,value_to_str_function);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//SetToXml and XmlToSet<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::set&lt;std::string&gt; content { "cats", "dog", "zebrafinch" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string tag_name = "animals";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml = ToXml(tag_name,content.begin(),content.begin());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//const std::pair&lt;std::string,std::set&lt;std::string&gt;&gt; p { XmlToSet(xml) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//assert(p.first == tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//assert(p.second == content);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//ToXml and FromXml<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//tag: std::string, content: std::string<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string ContentType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TagType&nbsp;&nbsp;&nbsp;&nbsp; tag_name { "name"&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ContentType content&nbsp;&nbsp;{ "Kitty" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml { ToXml(tag_name,content) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;TagType,ContentType&gt; p { FromXml&lt;TagType,ContentType&gt;(xml) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first&nbsp;&nbsp;== tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second == content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//tag: int, content: std::string<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef int TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string ContentType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TagType&nbsp;&nbsp;&nbsp;&nbsp; tag_name { 42&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ContentType content&nbsp;&nbsp;{ "The answer" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml { ToXml(tag_name,content) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;TagType,ContentType&gt; p { FromXml&lt;TagType,ContentType&gt;(xml) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first&nbsp;&nbsp;== tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second == content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//tag: int, content: std::string<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef int ContentType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TagType&nbsp;&nbsp;&nbsp;&nbsp; tag_name { "The answer" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ContentType content&nbsp;&nbsp;{ 42 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml { ToXml(tag_name,content) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;TagType,ContentType&gt; p { FromXml&lt;TagType,ContentType&gt;(xml) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first&nbsp;&nbsp;== tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second == content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//tag: int, content: int<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef int ContentType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TagType&nbsp;&nbsp;&nbsp;&nbsp; tag_name { 123 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ContentType content&nbsp;&nbsp;{ 456 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml { ToXml(tag_name,content) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;TagType,ContentType&gt; p { FromXml&lt;TagType,ContentType&gt;(xml) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first&nbsp;&nbsp;== tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second == content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//tag: std::string, content: boost::shared_ptr&lt;const std::string&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef std::string TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef boost::shared_ptr&lt;const std::string&gt; ContentType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TagType&nbsp;&nbsp;&nbsp;&nbsp; tag_name { "name" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ContentType content&nbsp;&nbsp;{ boost::shared_ptr&lt;const std::string&gt;(new std::string("Kitty")) };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert tag and content to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;std::string(const TagType&amp;)&gt; tag_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const TagType&amp; t) { return t; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;std::string(const ContentType&amp;)&gt; content_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const ContentType&amp; c) { return *c; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToXml(tag_name,content,tag_to_str_function,content_to_str_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert XML back to its tag and content<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//with custom functions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;TagType(const std::string&amp;)&gt; str_to_tag_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s) { return s; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;ContentType(const std::string&amp;)&gt; str_to_content_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s) { return boost::shared_ptr&lt;const std::string&gt;(new std::string(s)); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check both conversion functions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot simply compare to tag_name and content, as these may be of any type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(tag_to_str_function(str_to_tag_function(tag_to_str_function(tag_name)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;&nbsp; tag_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(content_to_str_function(str_to_content_function(content_to_str_function(content)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;&nbsp; content_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;TagType,ContentType&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FromXml&lt;TagType,ContentType&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_tag_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_content_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot simply compare to tag_name and content, as these may be of any type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(tag_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;p.first ) == tag_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;tag_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(content_to_str_function(p.second) == content_to_str_function(content ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//tag: int, content: boost::shared_ptr&lt;const std::string&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef int TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef boost::shared_ptr&lt;const std::string&gt; ContentType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TagType&nbsp;&nbsp;&nbsp;&nbsp; tag_name { 123 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const ContentType content&nbsp;&nbsp;{ boost::shared_ptr&lt;const std::string&gt;(new std::string("one-two-three")) };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert tag and content to XML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;std::string(const TagType&amp;)&gt; tag_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const TagType&amp; t) { return boost::lexical_cast&lt;std::string&gt;(t); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;std::string(const ContentType&amp;)&gt; content_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const ContentType&amp; c) { return *c; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToXml(tag_name,content,tag_to_str_function,content_to_str_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Convert XML back to its tag and content<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//with custom functions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;TagType(const std::string&amp;)&gt; str_to_tag_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s) { return boost::lexical_cast&lt;TagType&gt;(s); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;ContentType(const std::string&amp;)&gt; str_to_content_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s) { return boost::shared_ptr&lt;const std::string&gt;(new std::string(s)); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check both conversion functions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot simply compare to tag_name and content, as these may be of any type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(tag_to_str_function(str_to_tag_function(tag_to_str_function(tag_name)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;&nbsp; tag_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(content_to_str_function(str_to_content_function(content_to_str_function(content)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;&nbsp; content_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;TagType,ContentType&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FromXml&lt;TagType,ContentType&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_tag_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_content_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Cannot simply compare to tag_name and content, as these may be of any type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(tag_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;p.first ) == tag_to_str_function(&nbsp;&nbsp;&nbsp;&nbsp;tag_name));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(content_to_str_function(p.second) == content_to_str_function(content ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//VectorToXml and XmlToVector<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; content { "cats", "dog", "zebrafinch" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string tag_name = "animals";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string xml = VectorToXml(tag_name,content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(xml == ToXml(tag_name,content.begin(),content.end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;std::string,std::vector&lt;std::string&gt;&gt; p { XmlToVector(xml) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p.first == tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(p.second == content);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//XmlToPretty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; result {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmlToPretty("&lt;a&gt;test&lt;/a&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; expected {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"test",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//std::copy(result.begin(),result.end(),std::ostream_iterator&lt;std::string&gt;(std::cerr,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(result == expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; result {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmlToPretty("&lt;a&gt;&lt;b&gt;test&lt;/b&gt;&lt;/a&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; expected {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;test",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//std::copy(result.begin(),result.end(),std::ostream_iterator&lt;std::string&gt;(std::cerr,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(result == expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; result {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmlToPretty("&lt;a&gt;&lt;b&gt;this is&lt;/b&gt;&lt;c&gt;a test&lt;/c&gt;&lt;/a&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; expected {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;this is",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;c&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;a test",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/c&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//std::copy(result.begin(),result.end(),std::ostream_iterator&lt;std::string&gt;(std::cerr,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(result == expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = "&lt;a&gt;A&lt;/a&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; split = SplitXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; split_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(split == split_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; pretty = XmlToPretty(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; pretty_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(pretty == pretty_expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = "&lt;a&gt;A&lt;b&gt;B&lt;/b&gt;&lt;/a&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; split = SplitXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; split_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(split == split_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; pretty = XmlToPretty(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; pretty_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;B",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(pretty == pretty_expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string s = "&lt;a&gt;A&lt;b&gt;B1&lt;/b&gt;&lt;b&gt;B2&lt;/b&gt;&lt;/a&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; split = SplitXml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; split_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"B2",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(split == split_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; pretty = XmlToPretty(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; pretty_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;a&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;B1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;B2",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&lt;/b&gt;",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;/a&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(pretty == pretty_expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
#endif<br/>
<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::xml::XmlToPretty(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v = SplitXml(s);<br/>
&nbsp;&nbsp;int n = -2;<br/>
&nbsp;&nbsp;for (std::string&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s[0] == '&lt;' &amp;&amp; s[1] != '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n+=2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(n &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s = std::string(n,' ') + s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s[n+0] == '&lt;' &amp;&amp; s[n+1] == '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n-=2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
/*<br/>
const std::pair&lt;std::string,std::string&gt; ribi::xml::XmlToStr(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;assert(!s.empty());<br/>
&nbsp;&nbsp;assert(s[0] == '&lt;');<br/>
&nbsp;&nbsp;assert(s[s.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;assert(s.find('&gt;') != std::string::npos);<br/>
&nbsp;&nbsp;const int tag_name_sz = static_cast&lt;int&gt;(s.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;const std::string tag_name = s.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;assert(s.find_last_of('/') != std::string::npos);<br/>
&nbsp;&nbsp;const int content_sz = static_cast&lt;int&gt;(s.find_last_of('/')) - tag_name_sz - 3;<br/>
&nbsp;&nbsp;const std::string content = s.substr(tag_name.size() + 2,content_sz);<br/>
&nbsp;&nbsp;const std::pair&lt;std::string,std::string&gt; p { tag_name, content };<br/>
&nbsp;&nbsp;assert(ToXml(p.first,p.second) == s);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
*/<br/>
<br/>
const std::pair&lt;std::string,std::vector&lt;std::string&gt;&gt; ribi::xml::XmlToVector(<br/>
&nbsp;&nbsp;const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;assert(!s.empty());<br/>
&nbsp;&nbsp;assert(s[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0] == '&lt;');<br/>
&nbsp;&nbsp;assert(s[s.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;assert(s.find('&gt;') != std::string::npos);<br/>
<br/>
&nbsp;&nbsp;//Read the name tag<br/>
&nbsp;&nbsp;//&lt;tag_name&gt;...&lt;/tag_name&gt;<br/>
&nbsp;&nbsp;const std::pair&lt;std::string,std::string&gt; p = FromXml(s);<br/>
&nbsp;&nbsp;const std::string tag_name = p.first;<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; content;<br/>
<br/>
&nbsp;&nbsp;//Remove the name tags<br/>
&nbsp;&nbsp;//std::string t = s.substr(tag_name_sz + 2,s.size() - (2 * tag_name_sz) - 5);<br/>
&nbsp;&nbsp;std::string t = p.second;<br/>
&nbsp;&nbsp;for (int i=0; !t.empty(); ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Read the index tags and item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&lt;index&gt;item&lt;/index&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t[0] == '&lt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t[t.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t.find('&gt;') != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int index_tag_sz = static_cast&lt;int&gt;(t.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string index_tag = t.substr(1,index_tag_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i == boost::lexical_cast&lt;int&gt;(index_tag));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t.find('/') != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int item_sz = static_cast&lt;int&gt;(t.find('/')) - index_tag_sz - 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string item = t.substr(index_tag.size() + 2,item_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int total_sz = (2 * index_tag_sz) + item_sz + 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t = t.substr(total_sz,t.size() - total_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;content.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(VectorToXml(tag_name,content) == s);<br/>
&nbsp;&nbsp;return std::make_pair(tag_name,content);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppXml/xml.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppXml/xml.h" border = "1"><tr><td><code>
#ifndef RIBI_XML_H<br/>
#define RIBI_XML_H<br/>
<br/>
#include &lt;map&gt;<br/>
#include &lt;set&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace xml {<br/>
<br/>
///Convert a std::string to single-line XML<br/>
///For example, a std::string with tag name "cat_name" and content "Kitty" becomes<br/>
/// &lt;cat_name&gt;Kitty&lt;/cat_name&gt;<br/>
///The data can be converted back with XmlToStr<br/>
template &lt;class T, class U&gt;<br/>
const std::string ToXml(<br/>
&nbsp;&nbsp;const T&amp; tag_name,<br/>
&nbsp;&nbsp;const U&amp; content)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "&lt;"&nbsp;&nbsp;&lt;&lt; tag_name &lt;&lt; "&gt;" &lt;&lt; content &lt;&lt; "&lt;/" &lt;&lt; tag_name &lt;&lt; "&gt;";<br/>
&nbsp;&nbsp;//No test here, as ToXml is used in testing FromXml<br/>
&nbsp;&nbsp;return s.str();<br/>
}<br/>
<br/>
///Convert a std::string to single-line XML<br/>
///For example, a std::string with tag name "cat_name" and content "Kitty" becomes<br/>
/// &lt;cat_name&gt;Kitty&lt;/cat_name&gt;<br/>
///The data can be converted back with XmlToStr<br/>
template &lt;class T, class U&gt;<br/>
const std::string ToXml(<br/>
&nbsp;&nbsp;const T&amp; tag_name,<br/>
&nbsp;&nbsp;const U&amp; content,<br/>
&nbsp;&nbsp;const std::function&lt;std::string(const T&amp;)&gt; tag_to_str_function,<br/>
&nbsp;&nbsp;const std::function&lt;std::string(const U&amp;)&gt; content_to_str_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&lt;"&nbsp;&nbsp;&lt;&lt; tag_to_str_function(tag_name) &lt;&lt; "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; content_to_str_function(content)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; "&lt;/" &lt;&lt; tag_to_str_function(tag_name) &lt;&lt; "&gt;";<br/>
&nbsp;&nbsp;//No test here, as ToXml is used in testing FromXml<br/>
&nbsp;&nbsp;return s.str();<br/>
}<br/>
<br/>
///Convert a container to single-line XML<br/>
///For example, a std::vector&lt;std::string&gt; with elements {"cat","dog"} and name "animals" becomes<br/>
/// &lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;<br/>
///The data can be converted back with FromXml<br/>
template &lt;class Iter&gt;<br/>
const std::string ToXml(<br/>
&nbsp;&nbsp;const std::string&amp; tag_name,<br/>
&nbsp;&nbsp;Iter begin,<br/>
&nbsp;&nbsp;const Iter&amp; end)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;int i = 0;<br/>
&nbsp;&nbsp;for ( ; begin!=end; ++begin)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string index_tag_name = boost::lexical_cast&lt;std::string&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string index_content&nbsp;&nbsp;= boost::lexical_cast&lt;std::string&gt;(*begin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; ToXml(index_tag_name,index_content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::string content = s.str();<br/>
&nbsp;&nbsp;//No test here, as this function is used in XmlToVector<br/>
&nbsp;&nbsp;return ToXml(tag_name,content);<br/>
}<br/>
<br/>
//<br/>
//<br/>
// Above: order-dependent for compiling<br/>
// Below: alphabetic ordering<br/>
//<br/>
//<br/>
<br/>
///Convert a single-line XML to its content and its tag name<br/>
///For example, the XML line "&lt;cat_name&gt;Kitty&lt;/cat_name&gt;"<br/>
///becomes a std::pair with elements {"cat_name","Kitty"}<br/>
///The data can be converted back with ToXml<br/>
template &lt;class T = std::string, class U = std::string&gt;<br/>
const std::pair&lt;T,U&gt; FromXml(const std::string&amp; xml)<br/>
{<br/>
&nbsp;&nbsp;assert(!xml.empty());<br/>
&nbsp;&nbsp;assert(xml[0] == '&lt;');<br/>
&nbsp;&nbsp;assert(xml[xml.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;assert(xml.find('&gt;') != std::string::npos);<br/>
&nbsp;&nbsp;const int tag_name_sz = static_cast&lt;int&gt;(xml.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;const std::string tag_name = xml.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;assert(xml.find_last_of('/') != std::string::npos);<br/>
&nbsp;&nbsp;const int content_sz = static_cast&lt;int&gt;(xml.find_last_of('/')) - tag_name_sz - 3;<br/>
&nbsp;&nbsp;const std::string content = xml.substr(tag_name.size() + 2,content_sz);<br/>
&nbsp;&nbsp;const std::pair&lt;T,U&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;T&gt;(tag_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::lexical_cast&lt;U&gt;(content)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;assert(ToXml(p.first,p.second) == xml);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
///Convert a single-line XML to its content and its tag name<br/>
///For example, the XML line "&lt;cat_name&gt;Kitty&lt;/cat_name&gt;"<br/>
///becomes a std::pair with elements {"cat_name","Kitty"}<br/>
///The data can be converted back with ToXml<br/>
template &lt;class T, class U&gt;<br/>
const std::pair&lt;T,U&gt; FromXml(<br/>
&nbsp;&nbsp;const std::string&amp; xml,<br/>
&nbsp;&nbsp;const std::function&lt;T(const std::string&amp;)&gt; str_to_tag_function,<br/>
&nbsp;&nbsp;const std::function&lt;U(const std::string&amp;)&gt; str_to_content_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;assert(!xml.empty());<br/>
&nbsp;&nbsp;assert(xml[0] == '&lt;');<br/>
&nbsp;&nbsp;assert(xml[xml.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;assert(xml.find('&gt;') != std::string::npos);<br/>
&nbsp;&nbsp;const int tag_name_sz = static_cast&lt;int&gt;(xml.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;const std::string tag_name = xml.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;assert(xml.find_last_of('/') != std::string::npos);<br/>
&nbsp;&nbsp;const int content_sz = static_cast&lt;int&gt;(xml.find_last_of('/')) - tag_name_sz - 3;<br/>
&nbsp;&nbsp;const std::string content = xml.substr(tag_name.size() + 2,content_sz);<br/>
&nbsp;&nbsp;const std::pair&lt;T,U&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;str_to_tag_function(tag_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;str_to_content_function(content)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;//Cannot do this debug check anymore, as one would need<br/>
&nbsp;&nbsp;//a tag_to_str_function and content_to_str_function:<br/>
&nbsp;&nbsp;//assert(ToXml(p.first,p.second,tag_to_str_function,content_to_str_function) == xml);<br/>
&nbsp;&nbsp;return p;<br/>
}<br/>
<br/>
///Convert a map to single-line XML<br/>
///For example, an int-to-string map of<br/>
/// {{1,"one"}, {2,"two"}, {4,"four"}} and tag name "numbers" becomes the following XML string:<br/>
///<br/>
/// &lt;numbers&gt;<br/>
///&nbsp;&nbsp; &lt;1&gt;one&lt;/1&gt;<br/>
///&nbsp;&nbsp; &lt;2&gt;two&lt;/2&gt;<br/>
///&nbsp;&nbsp; &lt;4&gt;four&lt;/4&gt;<br/>
/// &lt;/numbers&gt;<br/>
///<br/>
/// &lt;numbers&gt;<br/>
///&nbsp;&nbsp; &lt;0&gt;&lt;key&gt;1&lt;/key&gt;&lt;value&gt;one&lt;/value&gt;&lt;/0&gt;<br/>
///&nbsp;&nbsp; &lt;1&gt;&lt;key&gt;2&lt;/key&gt;&lt;value&gt;two&lt;/value&gt;&lt;/1&gt;<br/>
///&nbsp;&nbsp; &lt;2&gt;&lt;key&gt;4&lt;/key&gt;&lt;value&gt;four&lt;/value&gt;&lt;/2&gt;<br/>
/// &lt;/numbers&gt;<br/>
///<br/>
///(indentation is added for readability)<br/>
///The data can be converted back with XmlToPtrs<br/>
template &lt;<br/>
&nbsp;&nbsp;class TagType = std::string,<br/>
&nbsp;&nbsp;class KeyType = std::string,<br/>
&nbsp;&nbsp;class ValueType = std::string&gt;<br/>
const std::string MapToXml(<br/>
&nbsp;&nbsp;const TagType&amp; tag_name,<br/>
&nbsp;&nbsp;const std::map&lt;KeyType,ValueType&gt; m<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;const auto end = std::end(m);<br/>
&nbsp;&nbsp;for (auto begin = std::begin(m); begin!=end; ++begin)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; ToXml( (*begin).first, (*begin).second);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::string content { s.str() };<br/>
&nbsp;&nbsp;return ToXml(tag_name,content);<br/>
}<br/>
<br/>
<br/>
///Convert a map to single-line XML<br/>
///For example, an int-to-string map of<br/>
/// {{1,"one"}, {2,"two"}, {4,"four"}} and tag name "numbers" becomes the following XML string:<br/>
///<br/>
/// &lt;numbers&gt;<br/>
///&nbsp;&nbsp; &lt;1&gt;one&lt;/1&gt;<br/>
///&nbsp;&nbsp; &lt;2&gt;two&lt;/2&gt;<br/>
///&nbsp;&nbsp; &lt;4&gt;four&lt;/4&gt;<br/>
/// &lt;/numbers&gt;<br/>
///<br/>
/// &lt;numbers&gt;<br/>
///&nbsp;&nbsp; &lt;0&gt;&lt;key&gt;1&lt;/key&gt;&lt;value&gt;one&lt;/value&gt;&lt;/0&gt;<br/>
///&nbsp;&nbsp; &lt;1&gt;&lt;key&gt;2&lt;/key&gt;&lt;value&gt;two&lt;/value&gt;&lt;/1&gt;<br/>
///&nbsp;&nbsp; &lt;2&gt;&lt;key&gt;4&lt;/key&gt;&lt;value&gt;four&lt;/value&gt;&lt;/2&gt;<br/>
/// &lt;/numbers&gt;<br/>
///<br/>
///(indentation is added for readability)<br/>
///The data can be converted back with XmlToPtrs<br/>
template &lt;class TagType, class KeyType, class ValueType&gt;<br/>
const std::string MapToXml(<br/>
&nbsp;&nbsp;const TagType&amp; tag_name,<br/>
&nbsp;&nbsp;const std::map&lt;KeyType,ValueType&gt; m,<br/>
&nbsp;&nbsp;const std::function&lt;std::string(const TagType&amp;&nbsp;&nbsp;)&gt; tag_to_str_function,<br/>
&nbsp;&nbsp;const std::function&lt;std::string(const KeyType&amp;&nbsp;&nbsp;)&gt; key_to_str_function,<br/>
&nbsp;&nbsp;const std::function&lt;std::string(const ValueType&amp;)&gt; value_to_str_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;const auto end = std::end(m);<br/>
&nbsp;&nbsp;for (auto begin = std::begin(m); begin!=end; ++begin)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; ToXml( (*begin).first, (*begin).second, key_to_str_function, value_to_str_function);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::string content { s.str() };<br/>
&nbsp;&nbsp;return ToXml(tag_to_str_function(tag_name),content);<br/>
}<br/>
<br/>
///Convert a container of pointers to single-line XML<br/>
///For example, a std::vector&lt;boost::shared_ptr&lt;std::string&gt;&gt;<br/>
///dynamically allocated std::strings {"cat","dog"} and tag name "animals" becomes<br/>
/// &lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;<br/>
///The data can be converted back with XmlToPtrs<br/>
template &lt;class Iter&gt;<br/>
const std::string PtrsToXml(<br/>
&nbsp;&nbsp;const std::string&amp; tag_name,<br/>
&nbsp;&nbsp;Iter begin,<br/>
&nbsp;&nbsp;const Iter&amp; end<br/>
)<br/>
{<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;int i = 0;<br/>
&nbsp;&nbsp;for ( ; begin!=end; ++begin)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string index_tag_name = boost::lexical_cast&lt;std::string&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string index_content&nbsp;&nbsp;= boost::lexical_cast&lt;std::string&gt;( *(*begin) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s &lt;&lt; ToXml(index_tag_name,index_content); //StrToXml<br/>
&nbsp;&nbsp;&nbsp;&nbsp;++i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::string content = s.str();<br/>
&nbsp;&nbsp;//No test here, as this function is used in XmlToPtrs<br/>
&nbsp;&nbsp;return ToXml(tag_name,content); //StrToXml<br/>
}<br/>
<br/>
template &lt;class T&gt;<br/>
const std::string SetToXml(<br/>
&nbsp;&nbsp;const std::string&amp; tag_name,<br/>
&nbsp;&nbsp;const std::set&lt;T&gt;&amp; content)<br/>
{<br/>
&nbsp;&nbsp;return ToXml(tag_name,content.begin(),content.end());<br/>
}<br/>
<br/>
///Split an XML std::string into its parts<br/>
//From http://www.richelbilderbeek.nl/CppSplitXml.htm<br/>
const std::vector&lt;std::string&gt; SplitXml(const std::string&amp; s);<br/>
<br/>
///Strip the XML tags of an XML item<br/>
///For example '&lt;tag&gt;text&lt;/tag&gt;' becomes 'text'<br/>
///Note that also '&lt;any_tag&gt;text&lt;/other_tag&gt;' fails<br/>
//From http://www.richelbilderbeek.nl/CppStripXmlTag.htm<br/>
const std::string StripXmlTag(const std::string&amp; s);<br/>
<br/>
///Convert a std::string to single-line XML<br/>
///For example, a std::string with tag name "cat_name" and content "Kitty" becomes<br/>
/// &lt;cat_name&gt;Kitty&lt;/cat_name&gt;<br/>
///The data can be converted back with XmlToStr<br/>
//const std::string StrToXml(<br/>
//&nbsp;&nbsp;const std::string&amp; tag_name,<br/>
//&nbsp;&nbsp;const std::string&amp; content)<br/>
//{<br/>
//&nbsp;&nbsp;return ToXml(tag_name,content);<br/>
//}<br/>
<br/>
<br/>
#ifndef NDEBUG<br/>
void Test() noexcept;<br/>
#endif<br/>
<br/>
///Convert a std::vector to single-line XML<br/>
///For example, a std::vector with elements {"cat","dog"} and name "animals" becomes<br/>
/// &lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;<br/>
///The data can be converted back with XmlToVector<br/>
template &lt;class T&gt;<br/>
const std::string VectorToXml(<br/>
&nbsp;&nbsp;const std::string&amp; tag_name,<br/>
&nbsp;&nbsp;const std::vector&lt;T&gt;&amp; v<br/>
)<br/>
{<br/>
&nbsp;&nbsp;//No test here, as this function is used in XmlToVector<br/>
&nbsp;&nbsp;return ToXml(tag_name,v.begin(),v.end());<br/>
}<br/>
<br/>
///Convert a single-line XML to a map<br/>
///The data can be converted back with MapToXml<br/>
template &lt;class KeyType, class ValueType&gt;<br/>
const std::pair&lt;std::string,std::map&lt;KeyType,ValueType&gt;&gt; XmlToMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;KeyType(const std::string&amp;)&gt; str_to_key_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;ValueType(const std::string&amp;)&gt; str_to_value_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;assert(!s.empty());<br/>
&nbsp;&nbsp;assert(s[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0] == '&lt;');<br/>
&nbsp;&nbsp;assert(s[s.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;assert(s.find('&gt;') != std::string::npos);<br/>
<br/>
&nbsp;&nbsp;//Read the name tag<br/>
&nbsp;&nbsp;//&lt;name&gt;...&lt;/name&gt;<br/>
&nbsp;&nbsp;const int tag_name_sz = static_cast&lt;int&gt;(s.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;const std::string tag_name = s.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;std::map&lt;KeyType,ValueType&gt; map;<br/>
<br/>
&nbsp;&nbsp;//Remove the name tags<br/>
&nbsp;&nbsp;std::string t = s.substr(tag_name_sz + 2,s.size() - (2 * tag_name_sz) - 5);<br/>
&nbsp;&nbsp;for (int i=0; !t.empty(); ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Read the index tags and item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&lt;index&gt;item&lt;/index&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t[0] == '&lt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t[t.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t.find('&gt;') != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int index_sz = static_cast&lt;int&gt;(t.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string index = t.substr(1,index_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//assert(i == boost::lexical_cast&lt;int&gt;(index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t.find('/') != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int item_sz = static_cast&lt;int&gt;(t.find('/')) - index_sz - 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string item_str = t.substr(index.size() + 2,item_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int total_sz = (2 * index_sz) + item_sz + 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t = t.substr(total_sz,t.size() - total_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;map.insert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::make_pair(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_key_function(index),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_value_function(item_str)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Cannot do the test below, as one would need a key_to_str_function and content_to_str_function<br/>
&nbsp;&nbsp;//assert(MapToXml(tag_name,map.begin(),map.end(),key_to_str_function,content_to_str_function) == s);<br/>
&nbsp;&nbsp;return std::make_pair(tag_name,map);<br/>
}<br/>
<br/>
///Pretty-print an XML std::string by indenting its elements<br/>
//From http://www.richelbilderbeek.nl/CppXmlToPretty.htm<br/>
const std::vector&lt;std::string&gt; XmlToPretty(const std::string&amp; s);<br/>
<br/>
///Convert a single-line XML to a std::vector of smart pointers and its name<br/>
///For example, the XML line "&lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;"<br/>
///becomes a std::vector of smart pointers of dynamically allocated strings<br/>
///with values {"cat","dog"} and the tag name "animals"<br/>
///The conversion from std::string to smart pointer needs to be supplied, for example<br/>
///a conversion from string to a smart pointer of a dynamically allocated string:<br/>
///<br/>
/// const std::function&lt;const boost::shared_ptr&lt;std::string&gt;(const std::string&amp;)&gt; str_to_ptr_function {<br/>
///&nbsp;&nbsp; [](const std::string&amp; s)<br/>
///&nbsp;&nbsp; {<br/>
///&nbsp;&nbsp;&nbsp;&nbsp; return boost::shared_ptr&lt;std::string&gt;(new std::string(s));<br/>
///&nbsp;&nbsp; }<br/>
/// };<br/>
///<br/>
///The data can be converted back with PtrsToXml<br/>
template &lt;class T&gt;<br/>
const std::pair&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;T&gt;&gt;<br/>
&nbsp;&nbsp;&gt;<br/>
&nbsp;&nbsp;XmlToPtrs(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::function&lt;const boost::shared_ptr&lt;T&gt;(const std::string&amp;)&gt; str_to_ptr_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;assert(!s.empty());<br/>
&nbsp;&nbsp;assert(s[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0] == '&lt;');<br/>
&nbsp;&nbsp;assert(s[s.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;assert(s.find('&gt;') != std::string::npos);<br/>
<br/>
&nbsp;&nbsp;//Read the name tag<br/>
&nbsp;&nbsp;//&lt;name&gt;...&lt;/name&gt;<br/>
&nbsp;&nbsp;const int name_sz = static_cast&lt;int&gt;(s.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;const std::string name = s.substr(1,name_sz);<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;boost::shared_ptr&lt;T&gt;&gt; v;<br/>
<br/>
&nbsp;&nbsp;//Remove the name tags<br/>
&nbsp;&nbsp;std::string t = s.substr(name_sz + 2,s.size() - (2 * name_sz) - 5);<br/>
&nbsp;&nbsp;for (int i=0; !t.empty(); ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Read the index tags and item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//&lt;index&gt;item&lt;/index&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t[0] == '&lt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t[t.size() - 1] == '&gt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t.find('&gt;') != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int index_sz = static_cast&lt;int&gt;(t.find('&gt;')) - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string index = t.substr(1,index_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i == boost::lexical_cast&lt;int&gt;(index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(t.find('/') != std::string::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int item_sz = static_cast&lt;int&gt;(t.find('/')) - index_sz - 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string item_str = t.substr(index.size() + 2,item_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int total_sz = (2 * index_sz) + item_sz + 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t = t.substr(total_sz,t.size() - total_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;T&gt; item { str_to_ptr_function(item_str) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(PtrsToXml(name,v.begin(),v.end()) == s);<br/>
&nbsp;&nbsp;return std::make_pair(name,v);<br/>
}<br/>
<br/>
///Convert a single-line XML to its content and its tag name<br/>
///For example, the XML line "&lt;cat_name&gt;Kitty&lt;/cat_name&gt;"<br/>
///becomes a std::pair with elements {"cat_name","Kitty"}<br/>
///The data can be converted back with StrToXml<br/>
//const std::pair&lt;std::string,std::string&gt; XmlToStr(<br/>
//&nbsp;&nbsp;const std::string&amp; s);<br/>
<br/>
///Convert a single-line XML to a std::vector and its name<br/>
///For example, the XML line "&lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;"<br/>
///becomes a std::vector with elements {"cat","dog"} and the name "animals"<br/>
///The data can be converted back with VectorToXml<br/>
const std::pair&lt;std::string,std::vector&lt;std::string&gt;&gt; XmlToVector(<br/>
&nbsp;&nbsp;const std::string&amp; s);<br/>
<br/>
} //~namespace xml<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // RIBI_XML_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
