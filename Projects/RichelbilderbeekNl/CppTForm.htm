 
<title>VCL TImage</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>VCL TImage</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ VCL Richel Bilderbeek TImage Image VCL Builder Turbo</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>26</o:Revision>
  <o:TotalTime>178</o:TotalTime>
  <o:Created>2009-04-28T09:30:00Z</o:Created>
  <o:LastSaved>2009-04-28T12:10:00Z</o:LastSaved>
  <o:Pages>4</o:Pages>
  <o:Words>964</o:Words>
  <o:Characters>5495</o:Characters>
  <o:Category>C++ VCL Richel Bilderbeek TImage</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>45</o:Lines>
  <o:Paragraphs>10</o:Paragraphs>
  <o:CharactersWithSpaces>6748</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TForm</title>
  <meta name="description" content="C++ TForm"/>
  <meta name="keywords" content="C++ TForm"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTForm.htm">TForm</a></h1>
<p>&nbsp;</p>
<p>VCL data type for a form, the
Component you put all others on. Without any
others on it, it is an empty window. Can be found in the <a
href="CppHeaderFile.htm">header file</a> <b>Forms.hpp</b>.</p>
<p>&nbsp;</p>
<p>For <a href="CppVclCodeSnippets.htm">code snippets</a> using TForm, <a href="CppVclGraphics.htm">go to the VCL graphics code snippets page</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Multiple TForms</h2>
<p>&nbsp;</p>
<p>There are multiple options when you want to develop an application with multiple
forms. You can use Auto-created Forms (default) or create them dynamically
yourself. Also you can choose between using normal Forms or use MDI Parents and
MDI Childs. MDI is an abbreviation for 'Multiple Document Interface'.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>An Auto-created Form showing another auto-created Form</h3>
<p>&nbsp;</p>
<p>To have multiple (non-parent) TForms in your program, do (using default names):</p>
<p>&nbsp;</p>
<ul>
  <li>Start a new <a href="CppVcl.htm">VCL</a> Application (called Project1 with Unit1 and Form1)</li>
  <li>Create a new Form (called Unit2 and Form2)</li>
  <li>Save all in the same directory under their default names</li>
  <li>Select Form1</li>
  <li>Select 'Project | Add to Project | Unit2.cpp'</li>
  <li>Select 'File | Include Unit Hdr | Unit2'</li>
</ul>
<p>&nbsp;</p>
<p>Now you can type, e.g. under an OnClick event:</p>
<p>&nbsp;</p>
 


<p>
 Form2-&gt;Show();</p>

</div>



<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>An Auto-created MDI Form showing another auto-created MDI Child</h3>
<p>&nbsp;</p>
<ul>
  <li>Start a new <a href="CppVcl.htm">VCL</a> Application</li>
  <li>Set the Form Name to FormParent</li>
  <li>Set FormParent's FormStyle to fsMDIForm</li>
  <li>Save this Form as UnitFormParent.cpp</li>
  <li>Create a new Form called FormChild</li>
  <li>Set FormChild's FormStyle to fsMDIChild</li>
  <li>Save this Form as UnitFormChild.cpp</li>
  <li>Select FormParent</li>
  <li>Select 'Project | Add to Project | UnitFormChild.cpp'</li>
  <li>Select 'File | Include Unit Hdr | UnitFormChild'</li>
</ul>
<p>&nbsp;</p>
<p>Now you can type, e.g. under an OnClick event:</p>
<p>&nbsp;</p>

 



<p>
 FormChild-&gt;Show();</p>

</div>



<p>&nbsp;</p>
<p>Note that this is not the standard use of an MDI application, as we only have one
single Child, which only has one <a href="CppInstance.htm">instance</a>. But
the Child does have different behaviour compared to standard Forms.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

<h3>An Auto-created MDI Form showing multiple dynamically-created MDI Childs</h3>
<p>&nbsp;</p>
<ul>
  <li>Start a new <a href="CppVcl.htm">VCL</a> Application</li>
  <li>Set the Form Name to FormParent</li>
  <li>Set FormParent's FormStyle to fsMDIForm</li>
  <li>Save this Form as UnitFormParent.cpp</li>
  <li>Create a new Form called FormChild</li>
  <li>Set FormChild's FormStyle to fsMDIChild</li>
  <li>Save this Form as UnitFormChild.cpp</li>
  <li>Select FormParent</li>
  <li>Select 'Project | Add to Project | UnitFormChild.cpp'</li>
  <li>Select 'File | Include Unit Hdr | UnitFormChild'</li>
  <li>Do 'Project | Options | (tab) Forms', then remove 'FormChild' from the Auto-create list</li>
</ul>
<p>&nbsp;</p>
<p>Creating an instance of a Child can be done like this:</p>
<p>&nbsp;</p>
 


<p>
 //Somewhere in code of FormParent, e.g. under an OnClick Event</p>

<p>
 TFormChild * child = new TFormChild(this);</p>

<p>
 //Code</p>

<p>
 <b><a href="CppDelete.htm">delete</a></b> child;</p>


</div>


<p>&nbsp;</p>
<p>Or using a <a href="CppAuto_ptr.htm">std::auto_ptr</a>:</p>
<p>&nbsp;</p>



<p>
 //Headers</p>

<p>
 #include &lt;memory&gt;</p>

<p>&nbsp;</p>

<p>
 //Somewhere in code of FormParent, e.g. under an OnClick Event</p>

<p>
 std::auto_ptr&lt;TFormChild&gt; child(new TFormChild(this));</p>

<p>
 //Code</p>

</div>





<p>&nbsp;</p>
<p>But this simple code is not enough, as you probably want to keep the Child Forms on
the Parent Form. So you could use a <a href="CppVector.htm">std::vector</a>
storing these child <a href="CppPointer.htm">pointers</a>. I use the <a
href="CppShared_ptr.htm">boost::shared_ptr</a> for this:</p>
<p>&nbsp;</p>


 


<p>//UnitFormParent.h</p>

<p>&nbsp;</p>

<p>//Add these headers</p>

<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppVectorH.htm">vector</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;boost/shared_ptr&gt;</p>

<p>&nbsp;</p>

<p>//Add to the <a href="CppPrivate.htm">private</a>
section of the class <a href="CppDeclaration.htm">declaration</a>:</p>

<p><a href="CppVector.htm">std::vector</a>&lt;<a
href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;TFormChild&gt; &gt; mChilds;</p>

</div>



<p>&nbsp;</p>
<p>Then add to FormParent's definitions:</p>
<p>&nbsp;</p>

 

<p>//A button for creating a new Child</p>

<p><b> <a href="CppVoid.htm">void</a> </b>  <b>
__fastcall</b> TFormMain::ButtonNewClick()</p>

<p>{</p>

<p>
 mChilds.push_back(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;TFormChild&gt;(<b><a
href="CppNew.htm">new</a></b> TFormChild(<b><a href="CppThis.htm">this</a></b>)));</p>

<p>
 //Optionally: (you'll need to add a Label to the Child)</p>

<p>
 mChilds.back()-&gt;Label1-&gt;Caption = &quot;Child #&quot; +
IntToStr(Tag);</p>

<p>
 ++Tag;</p>

<p>}</p>

<p>//---------------------------------------------------------------------------</p>

<p>//A button for removing a Child</p>

<p><b> <a href="CppVoid.htm">void</a> </b>  <b>
__fastcall</b> TFormMain::ButtonDeleteClick()</p>

<p>{</p>

<p>
 <b><a href="CppIf.htm">if</a></b> (!mChilds.empty()) mChilds.pop_back();</p>

<p>}</p>

<p>//---------------------------------------------------------------------------</p>


</div>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppTFormInTForm.htm">Get a TForm in a TForm</a></h2>
<p>&nbsp;</p>
<p>You can get a TForm in a TForm as if it were a TPanel. <a href="CppTFormInTForm.htm">Go to the page 'Get a TForm in a TForm'</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Transparency</h2>
<p>&nbsp;</p>
<p>Making a Form transparent is easy. First set the AlphaBlend property to true.
Then the AlphaBlendValue determines the transparency. An AlphaBlendValue
of 0 denotes total transparence (you won't see it anymore), an AlphaBlendValue
of 255 denotes the standard non-transparency.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>TForm troubles</h2>
<p>&nbsp;</p>
<p>Never change the TForm <a href="CppConstructor.htm">constructor</a> to the following:</p>
<p></p>

 

<p>&nbsp;</p>

<p><b> __fastcall </b>  TFormParent::TFormParent(TComponent* Owner, <b><a
href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) //Don't
do this!</p>

<p>
 : TForm(Owner)</p>

<p>
 //Rest of the code</p>

<p>{</p>

<p>
 //Rest of the code</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>This will (strangely) result in a <a href="CppStackOverflow.htm">stack overflow</a>.</p>
<p>&nbsp;</p>
<p>One workaround is to use <a href="CppAnsiString.htm">AnsiString</a> instead of an <a href="CppInt.htm">integer</a>:</p>
<p>&nbsp;</p>
 




<p><b> __fastcall </b>  TFormParent::TFormParent(TComponent* Owner, <b><a
href="CppConst.htm">const</a></b> <a href="CppAnsiString.htm">AnsiString</a> i)
</p>

<p>
 : TForm(Owner)</p>

<p>
 //Rest of the code</p>

<p>{</p>

<p>
 //Rest of the code</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
