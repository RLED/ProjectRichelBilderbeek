<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TwoDigitNewick</title>
  <meta name="description" content="C++ TwoDigitNewick"/>
  <meta name="keywords" content="C++ TwoDigitNewick "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTwoDigitNewick.htm">TwoDigitNewick</a></h1>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/CppTwoDigitNewick.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/CppTwoDigitNewick.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewick.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewickderivative.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewickindexer.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewickindextable.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewicks.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewick.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewickderivative.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewickindexer.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewickindextable.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/twodigitnewicks.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppTwoDigitNewick/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewick.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewick.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "twodigitnewick.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include "binarynewickvector.h"<br/>
#include "newick.h"<br/>
#include "twodigitnewickindexer.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
double ribi::TwoDigitNewick::sm_theta = -1.0;<br/>
<br/>
ribi::TwoDigitNewick::TwoDigitNewick()<br/>
&nbsp;&nbsp;: m_derivatives{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability(-1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_denominator(-1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sum_terms_above_zero(-1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sum_terms_above_one(-1)<br/>
{<br/>
&nbsp;&nbsp;assert(this-&gt;Empty());<br/>
}<br/>
<br/>
ribi::TwoDigitNewick::TwoDigitNewick(<br/>
&nbsp;&nbsp;const std::vector&lt;TwoDigitNewickDerivative&gt;&amp; derivatives,<br/>
&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;const int sum_above_one)<br/>
&nbsp;&nbsp;: m_derivatives(derivatives),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability(-1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_denominator(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CalculateDenominator(sum_above_zero,sum_above_one)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sum_terms_above_zero(sum_above_zero),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sum_terms_above_one(sum_above_one)<br/>
{<br/>
<br/>
}<br/>
<br/>
double ribi::TwoDigitNewick::CalculateDenominator(<br/>
&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;const int sum_above_one) const<br/>
{<br/>
&nbsp;&nbsp;assert(sm_theta &gt;= 0.0);<br/>
&nbsp;&nbsp;assert(sum_above_zero &gt;= 0);<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (sum_above_one &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cerr &lt;&lt; "Invalid sum_above_one: " &lt;&lt; sum_above_one &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(sum_above_one &gt;= 0);<br/>
&nbsp;&nbsp;const double d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= boost::numeric_cast&lt;double&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_above_zero * (sum_above_zero - 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ (boost::numeric_cast&lt;double&gt;(sum_above_one)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * sm_theta);<br/>
<br/>
&nbsp;&nbsp;return d;<br/>
}<br/>
<br/>
double ribi::TwoDigitNewick::CalculateProbability(<br/>
&nbsp;&nbsp;const std::string&amp; newick_str,<br/>
&nbsp;&nbsp;const double theta)<br/>
{<br/>
&nbsp;&nbsp;assert(Newick::IsUnaryNewick(Newick::StringToNewick(newick_str))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| Newick::IsBinaryNewick(Newick::StringToNewick(newick_str)));<br/>
&nbsp;&nbsp;ribi::TwoDigitNewick::SetTheta(theta);<br/>
&nbsp;&nbsp;const BinaryNewickVector n(newick_str);<br/>
&nbsp;&nbsp;const TwoDigitNewickIndexer i(n,theta);<br/>
<br/>
&nbsp;&nbsp;return i.GetProbability();<br/>
}<br/>
<br/>
bool ribi::TwoDigitNewick::Empty() const<br/>
{<br/>
&nbsp;&nbsp;return m_derivatives.empty();<br/>
}<br/>
<br/>
double ribi::TwoDigitNewick::GetDenominator() const<br/>
{<br/>
&nbsp;&nbsp;assert(IsComplete());<br/>
&nbsp;&nbsp;return m_denominator;<br/>
}<br/>
<br/>
const std::vector&lt;ribi::TwoDigitNewickDerivative&gt;&amp; ribi::TwoDigitNewick::GetDerivatives() const<br/>
{<br/>
&nbsp;&nbsp;return m_derivatives;<br/>
}<br/>
<br/>
double ribi::TwoDigitNewick::GetProbability() const<br/>
{<br/>
&nbsp;&nbsp;assert(IsProbabilityKnown());<br/>
&nbsp;&nbsp;return m_probability;<br/>
}<br/>
<br/>
int ribi::TwoDigitNewick::GetSumTermsAboveOne() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_sum_terms_above_one &gt;= 0);<br/>
&nbsp;&nbsp;return m_sum_terms_above_one;<br/>
}<br/>
<br/>
int ribi::TwoDigitNewick::GetSumTermsAboveZero() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_sum_terms_above_zero &gt;= 0);<br/>
&nbsp;&nbsp;return m_sum_terms_above_zero;<br/>
}<br/>
<br/>
const std::string ribi::TwoDigitNewick::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "1.1";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::TwoDigitNewick::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-08-22: version 1.0: initial version");<br/>
&nbsp;&nbsp;v.push_back("2011-02-20: version 1.1: added version history");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
bool ribi::TwoDigitNewick::IsComplete() const<br/>
{<br/>
&nbsp;&nbsp;return (!m_derivatives.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_sum_terms_above_zero &gt;= 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_sum_terms_above_one&nbsp;&nbsp;&gt;= 0);<br/>
}<br/>
<br/>
bool ribi::TwoDigitNewick::IsProbabilityKnown() const<br/>
{<br/>
&nbsp;&nbsp;return m_probability &gt;= 0.0;<br/>
}<br/>
<br/>
void ribi::TwoDigitNewick::SetProbability(const double p)<br/>
{<br/>
&nbsp;&nbsp;//if (p &lt; 0.0 || p &gt; 1.0)<br/>
&nbsp;&nbsp;//{<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;TRACE(p);<br/>
&nbsp;&nbsp;//}<br/>
&nbsp;&nbsp;assert(p &gt;= 0.0);<br/>
&nbsp;&nbsp;assert(p &lt;= 1.00001);<br/>
&nbsp;&nbsp;m_probability = p;<br/>
}<br/>
<br/>
void ribi::TwoDigitNewick::SetTheta(const double theta)<br/>
{<br/>
&nbsp;&nbsp;assert(theta &gt;= 0.0);<br/>
&nbsp;&nbsp;sm_theta = theta;<br/>
}<br/>
<br/>
void ribi::TwoDigitNewick::Test()<br/>
{<br/>
&nbsp;&nbsp;ribi::TwoDigitNewick::SetTheta(10.0);<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = Newick::CreateValidNewicks();<br/>
&nbsp;&nbsp;for(const std::string&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ( Newick::CalcComplexity(Newick::StringToNewick(s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;BigInteger(1000000) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (Newick::IsBinaryNewick(Newick::StringToNewick(s)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BinaryNewickVector n(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewickIndexer(n,10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewick.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewick.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef TWODIGITNEWICK_H<br/>
#define TWODIGITNEWICK_H<br/>
<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "twodigitnewickderivative.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
///TwoDigitNewick contains all<br/>
///TwoDigitNewickDerivative that can be<br/>
///constructed from a phylogeny. For example,<br/>
///if from a certain phylogeny three derived<br/>
///phylogenies can be constructed, TwoDigitNewickDerivativesData<br/>
///will hold three elements<br/>
struct TwoDigitNewick<br/>
{<br/>
&nbsp;&nbsp;//An empty TwoDigitNewick<br/>
&nbsp;&nbsp;TwoDigitNewick();<br/>
<br/>
&nbsp;&nbsp;///A TwoDogitNewick cannot be created without<br/>
&nbsp;&nbsp;///its derivatives: a TwoDigitNewick IS its<br/>
&nbsp;&nbsp;///derivatives in a way.<br/>
&nbsp;&nbsp;///sum_above_zero and sum_above_one are needed to<br/>
&nbsp;&nbsp;///calculate its denominator<br/>
&nbsp;&nbsp;TwoDigitNewick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;TwoDigitNewickDerivative&gt;&amp; derivatives,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_one);<br/>
<br/>
&nbsp;&nbsp;///Empty returns !IsComplete<br/>
&nbsp;&nbsp;bool Empty() const;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;TwoDigitNewickDerivative&gt;&amp; GetDerivatives() const;<br/>
&nbsp;&nbsp;///IsComplete determines if the TwoDigitNewick is<br/>
&nbsp;&nbsp;///initialized completely<br/>
&nbsp;&nbsp;bool IsComplete() const;<br/>
&nbsp;&nbsp;bool IsProbabilityKnown() const;<br/>
&nbsp;&nbsp;double GetDenominator() const;<br/>
&nbsp;&nbsp;double GetProbability() const;<br/>
&nbsp;&nbsp;int GetSumTermsAboveOne() const;<br/>
&nbsp;&nbsp;int GetSumTermsAboveZero() const;<br/>
&nbsp;&nbsp;void SetProbability(const double p);<br/>
&nbsp;&nbsp;static void SetTheta(const double theta);<br/>
<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///m_derivatives contains all the information<br/>
&nbsp;&nbsp;///needed to get to this Newick's derivatives<br/>
&nbsp;&nbsp;std::vector&lt;TwoDigitNewickDerivative&gt; m_derivatives;<br/>
<br/>
&nbsp;&nbsp;///m_probability denotes the probability<br/>
&nbsp;&nbsp;///a Newick exists.<br/>
&nbsp;&nbsp;///A negative value of m_probability denotes<br/>
&nbsp;&nbsp;///that it is not yet calculated.<br/>
&nbsp;&nbsp;double m_probability;<br/>
<br/>
&nbsp;&nbsp;///m_denominator constant for a Newick.<br/>
&nbsp;&nbsp;double m_denominator;<br/>
<br/>
&nbsp;&nbsp;int m_sum_terms_above_zero;<br/>
&nbsp;&nbsp;int m_sum_terms_above_one;<br/>
<br/>
&nbsp;&nbsp;static double sm_theta;<br/>
<br/>
&nbsp;&nbsp;double CalculateDenominator(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_one) const;<br/>
<br/>
&nbsp;&nbsp;public:<br/>
<br/>
&nbsp;&nbsp;static double CalculateProbability(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string&amp; newick,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double theta);<br/>
<br/>
&nbsp;&nbsp;static void Test();<br/>
<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // TWODIGITNEWICK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewickderivative.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewickderivative.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#include "twodigitnewickderivative.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
ribi::TwoDigitNewickDerivative::TwoDigitNewickDerivative(<br/>
&nbsp;&nbsp;const int derived_index,<br/>
&nbsp;&nbsp;const int value_changed,<br/>
&nbsp;&nbsp;const int other_value_changed)<br/>
&nbsp;&nbsp;: m_derived_index(derived_index),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_value_changed(value_changed),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_value_changed(other_value_changed)<br/>
{<br/>
&nbsp;&nbsp;assert(m_derived_index &gt; 0);<br/>
&nbsp;&nbsp;assert(m_value_changed &gt; 0);<br/>
&nbsp;&nbsp;assert( (m_value_changed == 1 &amp;&amp; m_other_value_changed&nbsp;&nbsp;&gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; || (m_value_changed&nbsp;&nbsp;&gt; 1 &amp;&amp; m_other_value_changed == 0) );<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewickderivative.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewickderivative.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef TWODIGITDERIVATIVE_H<br/>
#define TWODIGITDERIVATIVE_H<br/>
<br/>
namespace ribi {<br/>
<br/>
///TwoDigitNewickDerivative contains<br/>
///the index of the derived phylogeny<br/>
///and the value that must be changed<br/>
///to get there. For example, if for a<br/>
///complex phylogeny (of unknown index)<br/>
///a '3' must be changed to a '2' to get<br/>
///to the phylogeny with index 42,<br/>
///TwoDigitNewickDerivatives has an<br/>
///m_derived_index of 42 and an<br/>
///m_value_changed of 3.<br/>
///For calculations it is important to know which value<br/>
///has changed, sometimes with another.<br/>
///If no other value changes, set m_other_value_changed to zero.<br/>
///Some examples of using m_value_changed and m_other_value_changed:\n<br/>
///(1,1) -&gt;&nbsp;&nbsp; (2), then m_value_changed == 1 &amp;&amp; m_other_value_changed == 1\n<br/>
///(1,2) -&gt;&nbsp;&nbsp; (3), then m_value_changed == 1 &amp;&amp; m_other_value_changed == 2\n<br/>
///(1,2) -&gt; (1,1), then m_value_changed == 2 &amp;&amp; m_other_value_changed == 0\n<br/>
///(1,3) -&gt;&nbsp;&nbsp; (4), then m_value_changed == 1 &amp;&amp; m_other_value_changed == 3\n<br/>
///(1,3) -&gt; (1,2), then m_value_changed == 3 &amp;&amp; m_other_value_changed == 0\n<br/>
///(2,3) -&gt; (1,3), then m_value_changed == 2 &amp;&amp; m_other_value_changed == 0\n<br/>
///(2,3) -&gt; (2,2), then m_value_changed == 3 &amp;&amp; m_other_value_changed == 0\n<br/>
///A valid TwoDigitNewickDerivative has either:\n<br/>
///- m_value_changed == 1 &amp;&amp; m_other_value_changed&nbsp;&nbsp;&gt; 0\n<br/>
///- m_value_changed&nbsp;&nbsp;&gt; 1 &amp;&amp; m_other_value_changed == 0\n<br/>
///This is checked at the constructor<br/>
struct TwoDigitNewickDerivative<br/>
{<br/>
&nbsp;&nbsp;TwoDigitNewickDerivative(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int derived_index,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int other_value);<br/>
<br/>
&nbsp;&nbsp;int m_derived_index;<br/>
&nbsp;&nbsp;int m_value_changed;<br/>
&nbsp;&nbsp;int m_other_value_changed;<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // TWODIGITDERIVATIVE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewickindexer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewickindexer.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "twodigitnewickindexer.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;stack&gt;<br/>
<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include "newick.h"<br/>
#include "binarynewickvector.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
//TwoDigitNewickIndexer constructor does all the work<br/>
ribi::TwoDigitNewickIndexer::TwoDigitNewickIndexer(<br/>
&nbsp;&nbsp;const BinaryNewickVector&amp; n,<br/>
&nbsp;&nbsp;const double theta)<br/>
&nbsp;&nbsp;: m_calculated_to_index{CalculateReserved(n)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_index{CalculateReserved(n)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_index_table{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_newicks{CalculateReserved(n),theta},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability{-1.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_reserved{CalculateReserved(n)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_theta{theta}<br/>
{<br/>
&nbsp;&nbsp;assert(m_reserved == m_newicks.Size());<br/>
&nbsp;&nbsp;assert(m_current_index == m_newicks.Size());<br/>
<br/>
&nbsp;&nbsp;//If the Newick is simple<br/>
&nbsp;&nbsp;if (Newick::IsSimple(n.Peek()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Calculate the Ewens probability only<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability = Newick::CalcProbabilitySimpleNewick(n.Peek(),theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Assume all reserved Newicks from index 2 are complete<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sz = m_newicks.Size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=2; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(GetNewick(i).IsComplete());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Create all Newicks and derivatives, but do not calculate their<br/>
&nbsp;&nbsp;//probabilities yet<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v = n.Peek();<br/>
&nbsp;&nbsp;while(v.size()&gt;2) //Find a leaf and cut it until the string is empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find a leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find index i (starting opening bracket) and j (closing bracket)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t i = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::size_t j = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (i=0 ; i!=sz; ++i) //Index of opening bracket<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v[i]!=Newick::bracket_open) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=i+1; j!=sz; ++j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v[j]==Newick::bracket_open) { j = 0; break; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v[j]!=Newick::bracket_close) continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j ==&nbsp;&nbsp;0) continue; //j cannot be 0 after previous for loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Find simplest leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[i]==Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v[j]==Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; v_new(v.begin(),v.begin() + i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x = v[i+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int y = v[i+2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Feed it and obtain simpler index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Indices 0 and 1 cannot be complete, because<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//they don't have sensible derivates to point to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x &lt; 2 || this-&gt;GetNewick(x).IsComplete());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(y &lt; 2 || this-&gt;GetNewick(y).IsComplete());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int saz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= this-&gt;GetNewick(x).GetSumTermsAboveZero()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ this-&gt;GetNewick(y).GetSumTermsAboveZero();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sao<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= this-&gt;GetNewick(x).GetSumTermsAboveOne()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ this-&gt;GetNewick(y).GetSumTermsAboveOne();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(saz &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sao &gt;= 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(SummarizeNewick(x,y,saz,sao));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Replace leaf with simpler index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(v.begin() + j + 1, v.end(),std::back_inserter(v_new));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v = v_new;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Now all Newicks are created, but do not have their probabilities calculated<br/>
&nbsp;&nbsp;const int sz = m_newicks.Size();<br/>
&nbsp;&nbsp;//m_calculated_to_index == sz denotes that all Newicks'<br/>
&nbsp;&nbsp;//probabilities are calculated<br/>
&nbsp;&nbsp;while (m_calculated_to_index != sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Try to calculate if new Newicks can be solved<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;TryToCalculateNewNewicks();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//If all is well, there will be new Newicks known<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;UpdateCalculatedFromIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//When no new probabilities are calculated,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//all Newicks are solved<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
int ribi::TwoDigitNewickIndexer::CalculateReserved(const BinaryNewickVector&amp; n) const<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;int&gt;&amp; v = n.Peek();<br/>
&nbsp;&nbsp;//Count the number of elements<br/>
&nbsp;&nbsp;const int n_elements<br/>
&nbsp;&nbsp;&nbsp;&nbsp;= std::count_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::bind2nd(std::greater&lt;int&gt;(),0));<br/>
&nbsp;&nbsp;const int max_element = *std::max_element(v.begin(),v.end());<br/>
&nbsp;&nbsp;//\todo: +1 needed?<br/>
&nbsp;&nbsp;return n_elements + max_element + 1;<br/>
}<br/>
<br/>
///ConstructNewick constructs a full BinaryNewickVector from<br/>
///the TwoDigitNewick at index i.<br/>
///ConstructNewick is for debugging purposes only,<br/>
///as it's the idea to work with non-full determined<br/>
///(that is: two-digit) Newicks<br/>
const ribi::BinaryNewickVector ribi::TwoDigitNewickIndexer::ConstructNewick(const int i) const<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;int&gt; v;<br/>
<br/>
&nbsp;&nbsp;if (i &lt; m_reserved)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Newick '(0)' is not valid, so fake it as '(1)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(i == 0 ? 1 : i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BinaryNewickVector n(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return n;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Search for index i in Indextable to get two digits<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;int,int&gt; p = m_index_table.Find(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p.first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Newick::bracket_close);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(Newick::IsNewick(v));<br/>
<br/>
&nbsp;&nbsp;//As long as there are not only reserved (that is: simple)<br/>
&nbsp;&nbsp;//values in v, replace those by their simplers<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;int&gt;::iterator i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= std::find_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::bind2nd(std::greater_equal&lt;int&gt;(),m_reserved));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i== v.end()) break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*i &gt;= m_reserved);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Create a new std::vector from the v's begin to i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; v_new( v.begin(),i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::pair&lt;int,int&gt; p = m_index_table.Find(*i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(p.first);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Copy the remainder of v (from after i) to v_new<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::copy(i+1,v.end(),std::back_inserter(v_new));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::swap(v,v_new);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(Newick::IsNewick(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;BinaryNewickVector n(v);<br/>
&nbsp;&nbsp;return n;<br/>
}<br/>
<br/>
const ribi::TwoDigitNewick ribi::TwoDigitNewickIndexer::CreateTwoDigitNewickDerivatives(<br/>
&nbsp;&nbsp;const int x, const int y,<br/>
&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;const int sum_above_one)<br/>
{<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "Sum_above_one: " &lt;&lt; sum_above_one &lt;&lt; '\n';<br/>
&nbsp;&nbsp;assert(sum_above_zero &gt;= 0);<br/>
&nbsp;&nbsp;assert(sum_above_one &gt;= 0);<br/>
&nbsp;&nbsp;if (IsSimple(x))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (IsSimple(y))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateTwoDigitNewickDerivativesSimpleSimple(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateTwoDigitNewickDerivativesSimpleComplex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,y,sum_above_zero,sum_above_one);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (IsSimple(y))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateTwoDigitNewickDerivativesSimpleComplex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y,x,sum_above_zero,sum_above_one);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateTwoDigitNewickDerivativesComplexComplex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,y,sum_above_zero,sum_above_one);<br/>
}<br/>
<br/>
const ribi::TwoDigitNewick<br/>
&nbsp;&nbsp;ribi::TwoDigitNewickIndexer::CreateTwoDigitNewickDerivativesSimpleSimple(<br/>
&nbsp;&nbsp;const int x, const int y)<br/>
{<br/>
&nbsp;&nbsp;assert(x &lt;= y);<br/>
&nbsp;&nbsp;assert(x &lt;= m_reserved &amp;&amp; y &lt;= m_reserved);<br/>
&nbsp;&nbsp;assert(IsSimple(x) &amp;&amp; IsSimple(y));<br/>
<br/>
<br/>
&nbsp;&nbsp;if (x==1 &amp;&amp; y==1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//(1,1) -&gt; 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//'2' has reserved index 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;TwoDigitNewickDerivative&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int derived_index = 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Add this derivative twice, because there are two ways<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//to change (1,1) -&gt; 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewickDerivative(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;derived_index,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewickDerivative(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;derived_index,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int saz = 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sao = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewick n(v,saz,sao);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return n;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else if (x==1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//(1,y) -&gt; { (1,y-1), (y+1) }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//'1','y' and 'y-1' are reserved indices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(y &gt; 1 &amp;&amp; y &lt; m_reserved);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;TwoDigitNewickDerivative&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Create (1,y-1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int saz = x + y - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sao = (y - 1 == 1 ? 0 : y - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(saz &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(sao &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int d_i = SummarizeNewick(x,y-1,saz,sao);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = 0; //&lt;Only y changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TwoDigitNewickDerivative(d_i,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Create (y+1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///\todo: this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int d_i = y + 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note the reversal of 1 and y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = y; //Note the reversal of 1 and y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TwoDigitNewickDerivative(d_i,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewick n( v,x+y,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return n;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//(x,y) -&gt; { (x-1,y), (x,y-1) }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//'y','y-1','x' and 'x-1' are reserved indices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x &gt; 1 &amp;&amp; x &lt; m_reserved);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(y &gt; 1 &amp;&amp; y &lt; m_reserved);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;TwoDigitNewickDerivative&gt; v;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int saz = x + y - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sao_left&nbsp;&nbsp;= (x - 1 == 1 ? x + y - 2 : x + y - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sao_right = (y - 1 == 1 ? x + y - 2 : x + y - 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(saz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sao_left&nbsp;&nbsp;&gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sao_right &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Derive (x-1,y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int d_i_left&nbsp;&nbsp;= SummarizeNewick(x-1,y,saz,sao_left );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed_left = x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed_left = 0; //&lt;Only x changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewickDerivative(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d_i_left,value_changed_left,other_value_changed_left));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Derive (x,y-1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int d_i_right = SummarizeNewick(x,y-1,saz,sao_right);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed_right = y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed_right = 0; //&lt;Only y changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewickDerivative(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d_i_right,value_changed_right,other_value_changed_right));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewick n(v,x+y,x+y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
const ribi::TwoDigitNewick ribi::TwoDigitNewickIndexer::CreateTwoDigitNewickDerivativesSimpleComplex(<br/>
&nbsp;&nbsp;const int x, const int y,<br/>
&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;const int sum_above_one)<br/>
{<br/>
&nbsp;&nbsp;assert(IsSimple(x) &amp;&amp; !IsSimple(y));<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;TwoDigitNewickDerivative&gt; v;<br/>
&nbsp;&nbsp;assert(x&gt;=0);<br/>
&nbsp;&nbsp;if (x&gt;1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(y &gt;= m_reserved &amp;&amp; "So cannot work with y-1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int saz = sum_above_zero - 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(saz &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sao = (x - 1 == 1 ? sum_above_one - 2 : sum_above_one - 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(saz &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sao &gt;= 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int i = SummarizeNewick(x-1,y,saz,sao);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i &lt; m_newicks.Size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = 0; //&lt;Only x changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TwoDigitNewickDerivative(i,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(y &lt; m_newicks.Size());<br/>
&nbsp;&nbsp;assert(!m_newicks.Empty(y));<br/>
&nbsp;&nbsp;//\todo: Find out why 'const TwoDigitNewickDerivativesData&amp;' does not work<br/>
&nbsp;&nbsp;const TwoDigitNewick v_derived = m_newicks.GetNewick(y);<br/>
&nbsp;&nbsp;for(const TwoDigitNewickDerivative&amp; i: v_derived.GetDerivatives())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i.m_derived_index &lt; m_newicks.Size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "TwoDigitNewickDerivative index must be smaller than the number of derivatives");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//dsaz = delta sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dsaz = GetDeltaSumAboveZero(i.m_value_changed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//dsao = delta sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int dsao = GetDeltaSumAboveOne(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int saz = sum_above_zero + dsaz;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sao = sum_above_one + dsao;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(saz &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(sao &gt;= 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int d_i = SummarizeNewick( x,i.m_derived_index,saz,sao);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = i.m_value_changed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///\todo: check that guess is right, that using<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///i.m_other_value_changed is better than '0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = i.m_other_value_changed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TwoDigitNewickDerivative(d_i,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TwoDigitNewick n( v,sum_above_zero,sum_above_one);<br/>
&nbsp;&nbsp;return n;<br/>
}<br/>
<br/>
const ribi::TwoDigitNewick<br/>
&nbsp;&nbsp;ribi::TwoDigitNewickIndexer::CreateTwoDigitNewickDerivativesComplexComplex(<br/>
&nbsp;&nbsp;const int x, const int y,<br/>
&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;const int sum_above_one)<br/>
{<br/>
&nbsp;&nbsp;assert(!IsSimple(x) &amp;&amp; !IsSimple(y));<br/>
&nbsp;&nbsp;std::vector&lt;TwoDigitNewickDerivative&gt; v;<br/>
<br/>
&nbsp;&nbsp;//Get (X',Y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(x &lt; boost::numeric_cast&lt;int&gt;(m_newicks.Size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!m_newicks.Empty(x));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//\todo: Find out why 'const TwoDigitNewickDerivativesData&amp;' does not work<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const TwoDigitNewick v_derived = m_newicks.GetNewick(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const TwoDigitNewickDerivative&amp; i: v_derived.GetDerivatives())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//dsaz = delta sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int dsaz = GetDeltaSumAboveZero(i.m_value_changed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//dsao = delta sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int dsao = GetDeltaSumAboveOne(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int saz = sum_above_zero + dsaz;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sao = sum_above_one + dsao;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(saz &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(sao &gt;= 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int d_i = SummarizeNewick(y,i.m_derived_index,saz,sao);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = i.m_value_changed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///\todo: check that guess is right, that using<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///i.m_other_value_changed is better than '0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = i.m_other_value_changed;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TwoDigitNewickDerivative(d_i,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Get (X,Y')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(y &lt; boost::numeric_cast&lt;int&gt;(m_newicks.Size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!m_newicks.Empty(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//\todo: Find out why 'const TwoDigitNewickDerivativesData&amp;' does not work<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const TwoDigitNewick v_derived = m_newicks.GetNewick(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for(const TwoDigitNewickDerivative&amp; i: v_derived.GetDerivatives())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//dsaz = delta sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int dsaz = GetDeltaSumAboveZero(i.m_value_changed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//dsao = delta sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int dsao = GetDeltaSumAboveOne(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int saz = sum_above_zero + dsaz;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int sao = sum_above_one + dsao;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(saz &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(sao &gt;= 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int d_i = SummarizeNewick(x,i.m_derived_index,saz,sao);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = i.m_value_changed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///\todo: check that guess is right, that using<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///i.m_other_value_changed is better than '0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = i.m_other_value_changed;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TwoDigitNewickDerivative(d_i,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TwoDigitNewick n(v,sum_above_zero,sum_above_one);<br/>
&nbsp;&nbsp;return n;<br/>
}<br/>
<br/>
///GetDeltaSumAboveZero calculates the delta in the<br/>
///TwoDigitNewick::m_sum_above_zero of a new Newick<br/>
///when an old_value is changed.<br/>
int ribi::TwoDigitNewickIndexer::GetDeltaSumAboveZero(const int old_value) const<br/>
{<br/>
&nbsp;&nbsp;assert(old_value &gt; 0);<br/>
&nbsp;&nbsp;return (old_value == 1 ? 0 : -1);<br/>
}<br/>
<br/>
///GetDeltaSumAboveOne calculates the delta in the<br/>
///TwoDigitNewick::m_sum_above_one of a new Newick<br/>
///when an old_value is changed.<br/>
int ribi::TwoDigitNewickIndexer::GetDeltaSumAboveOne(const TwoDigitNewickDerivative&amp; d) const<br/>
{<br/>
&nbsp;&nbsp;const int x = d.m_value_changed;<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "GetDeltaSumAboveOne for x " &lt;&lt; x &lt;&lt; '\n';<br/>
&nbsp;&nbsp;assert(x &gt; 0);<br/>
&nbsp;&nbsp;if (x&nbsp;&nbsp;&gt; 2) return -1;<br/>
&nbsp;&nbsp;if (x == 2) return -2;<br/>
&nbsp;&nbsp;assert(x == 1);<br/>
&nbsp;&nbsp;return (d.m_other_value_changed == 1 ? 2 : 1);<br/>
}<br/>
<br/>
///GetProbability returns the probability of the BinaryNewickVector<br/>
///given at the constructor<br/>
double ribi::TwoDigitNewickIndexer::GetProbability() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_probability &gt;= 0.0);<br/>
&nbsp;&nbsp;assert(m_probability &lt;= 1.00001);<br/>
&nbsp;&nbsp;assert(m_calculated_to_index == m_newicks.Size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Assume calculation is completed");<br/>
<br/>
&nbsp;&nbsp;return m_probability;<br/>
}<br/>
<br/>
///IsSimple determines if an index is the index of<br/>
///a simple Newick<br/>
bool ribi::TwoDigitNewickIndexer::IsSimple(const int i) const<br/>
{<br/>
&nbsp;&nbsp;return i &lt; m_reserved;<br/>
}<br/>
<br/>
///Allow for recursion<br/>
int ribi::TwoDigitNewickIndexer::SummarizeNewick(<br/>
&nbsp;&nbsp;const int x, const int y,<br/>
&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;const int sum_above_one)<br/>
{<br/>
&nbsp;&nbsp;assert(sum_above_zero &gt;&nbsp;&nbsp;0);<br/>
&nbsp;&nbsp;assert(sum_above_one&nbsp;&nbsp;&gt;= 0);<br/>
<br/>
&nbsp;&nbsp;assert(x &gt; 0 &amp;&amp; y &gt; 0);<br/>
&nbsp;&nbsp;//Ensure proper ordering<br/>
&nbsp;&nbsp;if (x &gt; y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return SummarizeNewick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y,x,sum_above_zero,sum_above_one);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(x &lt;= y);<br/>
<br/>
&nbsp;&nbsp;//If index is known, return the index<br/>
&nbsp;&nbsp;if (m_index_table.CanGetIndex(x,y))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int i = m_index_table.GetIndex(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i) return i;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//A new (x,y) pair is fed<br/>
&nbsp;&nbsp;assert(x &lt;= y);<br/>
&nbsp;&nbsp;const int i = m_current_index;<br/>
&nbsp;&nbsp;m_index_table.SetIndex(x,y,i);<br/>
<br/>
&nbsp;&nbsp;++m_current_index;<br/>
<br/>
&nbsp;&nbsp;assert(sum_above_zero &gt;= 0);<br/>
&nbsp;&nbsp;assert(sum_above_one&nbsp;&nbsp;&gt;= 0);<br/>
<br/>
&nbsp;&nbsp;TwoDigitNewick n = CreateTwoDigitNewickDerivatives(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x,y,sum_above_zero,sum_above_one);<br/>
<br/>
&nbsp;&nbsp;//Check if the Newick is simple<br/>
&nbsp;&nbsp;//and its probability can be calculated with<br/>
&nbsp;&nbsp;//the Ewens formula<br/>
&nbsp;&nbsp;if (x &lt; m_reserved &amp;&amp; y &lt; m_reserved)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Newick::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Newick::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n.SetProbability(Newick::CalcProbabilitySimpleNewick(v,m_theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//If the user requests simple Newicks to be solved,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//perhaps the requested probability has just been calculated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_probability = n.GetProbability();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_newicks.SetNewick(i,n);<br/>
&nbsp;&nbsp;return i;<br/>
}<br/>
<br/>
///TryToCalculateNewNewick tries to calculate the probability<br/>
///of Newick with index i<br/>
void ribi::TwoDigitNewickIndexer::TryToCalculateNewNewick(const int i)<br/>
{<br/>
&nbsp;&nbsp;assert(i &gt;= m_calculated_to_index);<br/>
&nbsp;&nbsp;assert(i&nbsp;&nbsp;&lt; m_newicks.Size());<br/>
&nbsp;&nbsp;///\todo: why cannot use 'const TwoDigitNewick&amp;'?<br/>
&nbsp;&nbsp;///\bug: this seems to give memory problems (and funny output)<br/>
&nbsp;&nbsp;const TwoDigitNewick n = this-&gt;GetNewick(i);<br/>
&nbsp;&nbsp;//Remember: m_calculated_to_index is not increased<br/>
&nbsp;&nbsp;if (n.IsProbabilityKnown())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Already know the probability<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::vector&lt;TwoDigitNewickDerivative&gt; derivatives = n.GetDerivatives();<br/>
&nbsp;&nbsp;//Check if of all derivates the probability is known<br/>
&nbsp;&nbsp;for(const TwoDigitNewickDerivative&amp; derivative: derivatives)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!GetNewick(derivative.m_derived_index).IsProbabilityKnown())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Too bad, derived Newick's probability is unknown<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;///Calculate constants and probability<br/>
&nbsp;&nbsp;double p = 0.0;<br/>
&nbsp;&nbsp;//The denominator is that of the focal Newick,<br/>
&nbsp;&nbsp;//and not its derivative(s)<br/>
&nbsp;&nbsp;const double denominator = GetNewick(i).GetDenominator();<br/>
&nbsp;&nbsp;for(const TwoDigitNewickDerivative&amp; derivative: derivatives)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(GetNewick(derivative.m_derived_index).IsProbabilityKnown());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= (derivative.m_value_changed == 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? m_theta<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: boost::numeric_cast&lt;double&gt;(derivative.m_value_changed) * boost::numeric_cast&lt;double&gt;(derivative.m_value_changed - 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/ denominator;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const double p_this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= c * GetNewick(derivative.m_derived_index).GetProbability();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p+=p_this;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "Index " &lt;&lt; i<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; " has been calculated to have the probability of "<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; p &lt;&lt; '\n';<br/>
&nbsp;&nbsp;m_probability = p;<br/>
&nbsp;&nbsp;this-&gt;m_newicks.SetNewickProbability(i,p);<br/>
}<br/>
<br/>
///TryToCalculateNewNewicks tries to calculate new Newick probabilities<br/>
///\warning: m_calculated_to_index is not increased<br/>
void ribi::TwoDigitNewickIndexer::TryToCalculateNewNewicks()<br/>
{<br/>
&nbsp;&nbsp;const int sz = m_newicks.Size();<br/>
&nbsp;&nbsp;//m_calculated_to_index == sz denotes that all Newicks'<br/>
&nbsp;&nbsp;//probabilities are calculated<br/>
&nbsp;&nbsp;assert(m_calculated_to_index &lt;= sz);<br/>
&nbsp;&nbsp;for (int i = m_calculated_to_index; i!=sz; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TryToCalculateNewNewick(i);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::TwoDigitNewickIndexer::UpdateCalculatedFromIndex()<br/>
{<br/>
&nbsp;&nbsp;const int sz = m_newicks.Size();<br/>
&nbsp;&nbsp;while (m_calculated_to_index &lt; sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_calculated_to_index &lt; m_newicks.Size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///\todo: find out why 'const TwoDigitNewick&amp;' does not work<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const TwoDigitNewick n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= m_newicks.GetNewick(m_calculated_to_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (n.IsProbabilityKnown())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//std::clog &lt;&lt; "At index " &lt;&lt; m_calculated_to_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&lt;&lt; " the probability is known\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++m_calculated_to_index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewickindexer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewickindexer.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef TWODIGITNEWICKINDEXER_H<br/>
#define TWODIGITNEWICKINDEXER_H<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "twodigitnewickindextable.h"<br/>
#include "twodigitnewicks.h"<br/>
#include "twodigitnewick.h"<br/>
#include "binarynewickvector.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
///NewickIndex converts any newick to (X,Y)<br/>
struct TwoDigitNewickIndexer<br/>
{<br/>
&nbsp;&nbsp;//TwoDigitNewickIndexer constructor does all the work<br/>
&nbsp;&nbsp;TwoDigitNewickIndexer(const BinaryNewickVector&amp; n, const double theta);<br/>
<br/>
&nbsp;&nbsp;///ConstructNewick constructs a full BinaryNewickVector from<br/>
&nbsp;&nbsp;///the TwoDigitNewick at index i.<br/>
&nbsp;&nbsp;///ConstructNewick is for debugging purposes only,<br/>
&nbsp;&nbsp;///as it's the idea to work with non-full determined<br/>
&nbsp;&nbsp;///(that is: two-digit) Newicks<br/>
&nbsp;&nbsp;const BinaryNewickVector ConstructNewick(const int i) const;<br/>
<br/>
&nbsp;&nbsp;int GetCalculatedToIndex() const { return m_calculated_to_index; }<br/>
&nbsp;&nbsp;///GetData allows a peek at the x-y ordered data<br/>
&nbsp;&nbsp;const TwoDigitNewickIndexTable&amp; GetIndexTable() const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return m_index_table;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const TwoDigitNewick&amp; GetNewick(const int i) const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return m_newicks.GetNewick(i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const TwoDigitNewick&amp; GetNewick(const int x, const int y) const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_index_table.CanGetIndex(x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int i = m_index_table.GetIndex(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return GetNewick(i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const TwoDigitNewicks&amp; GetNewicks() const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return m_newicks;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;///GetProbability returns the probability of the BinaryNewickVector<br/>
&nbsp;&nbsp;///given at the constructor<br/>
&nbsp;&nbsp;double GetProbability() const;<br/>
<br/>
&nbsp;&nbsp;int GetReserved() const { return m_reserved; }<br/>
<br/>
<br/>
&nbsp;&nbsp;///After a leaf has been cut, then<br/>
&nbsp;&nbsp;void TryToCalculateNewNewicks();<br/>
&nbsp;&nbsp;void UpdateCalculatedFromIndex();<br/>
<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;int m_calculated_to_index;<br/>
&nbsp;&nbsp;int m_current_index;<br/>
&nbsp;&nbsp;TwoDigitNewickIndexTable m_index_table;<br/>
&nbsp;&nbsp;TwoDigitNewicks m_newicks;<br/>
<br/>
&nbsp;&nbsp;///m_probability is the probability of the given Newick.<br/>
&nbsp;&nbsp;///m_probability is calculated in the constructor of TwoDigitNewickIndexer<br/>
&nbsp;&nbsp;///and can be obtained by GetProbability.<br/>
&nbsp;&nbsp;double m_probability;<br/>
<br/>
&nbsp;&nbsp;const int m_reserved;<br/>
&nbsp;&nbsp;const double m_theta;<br/>
<br/>
&nbsp;&nbsp;///Calculate the Newick probability of Newick (a,b).<br/>
&nbsp;&nbsp;///Both a and b are simple, that is: no index<br/>
&nbsp;&nbsp;///for a complex Newick<br/>
&nbsp;&nbsp;//double CalculateEwensProbability(<br/>
&nbsp;&nbsp;//&nbsp;&nbsp;const int a,const int b) const;<br/>
<br/>
&nbsp;&nbsp;///CalculateReserved calculates the index<br/>
&nbsp;&nbsp;///that must be reserver<br/>
&nbsp;&nbsp;int CalculateReserved(const BinaryNewickVector&amp; n) const;<br/>
<br/>
&nbsp;&nbsp;const TwoDigitNewick CreateTwoDigitNewickDerivatives(const int x, const int y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_one);<br/>
<br/>
&nbsp;&nbsp;const TwoDigitNewick CreateTwoDigitNewickDerivativesSimpleSimple(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int y);<br/>
<br/>
&nbsp;&nbsp;const TwoDigitNewick CreateTwoDigitNewickDerivativesSimpleComplex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_one);<br/>
<br/>
&nbsp;&nbsp;const TwoDigitNewick CreateTwoDigitNewickDerivativesComplexComplex(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_one);<br/>
<br/>
&nbsp;&nbsp;///GetDeltaSumAboveZero calculates the delta in the<br/>
&nbsp;&nbsp;///TwoDigitNewick::m_sum_above_zero of a new Newick<br/>
&nbsp;&nbsp;///when an old_value is changed.<br/>
&nbsp;&nbsp;int GetDeltaSumAboveZero(const int old_value) const;<br/>
<br/>
&nbsp;&nbsp;///GetDeltaSumAboveOne calculates the delta in the<br/>
&nbsp;&nbsp;///TwoDigitNewick::m_sum_above_one of a new Newick<br/>
&nbsp;&nbsp;///when an old_value is changed.<br/>
&nbsp;&nbsp;int GetDeltaSumAboveOne(const TwoDigitNewickDerivative&amp; d) const;<br/>
&nbsp;&nbsp;//int GetDeltaSumAboveOne(const int old_value) const;<br/>
<br/>
<br/>
&nbsp;&nbsp;///IsSimple determines if a Newick at index i is simple.<br/>
&nbsp;&nbsp;///A Newick is simple if F=(X,Y) where X and Y are<br/>
&nbsp;&nbsp;///less than the reserved index<br/>
&nbsp;&nbsp;bool IsSimple(const int i) const;<br/>
<br/>
&nbsp;&nbsp;///Feed the (x,y) indices of a Newick and obtain the<br/>
&nbsp;&nbsp;///summarized index.<br/>
&nbsp;&nbsp;///Feed also obtains the derived Newicks.<br/>
&nbsp;&nbsp;///Note that Feed must be fed simple Newicks first<br/>
&nbsp;&nbsp;///int Feed(const int x, const int y)<br/>
&nbsp;&nbsp;int SummarizeNewick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int x, const int y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_zero,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sum_above_one);<br/>
<br/>
&nbsp;&nbsp;///TryToCalculateNewNewick tries to calculate the probability<br/>
&nbsp;&nbsp;///of Newick with index i<br/>
&nbsp;&nbsp;void TryToCalculateNewNewick(const int i);<br/>
<br/>
};<br/>
<br/>
///IsSimple determines if a binary Newick is simple,<br/>
//that is in the form '(X,Y)', where both X and Y are values<br/>
//bool IsSimple(const BinaryNewickVector&amp; n);<br/>
<br/>
} //namespace ribi<br/>
<br/>
#endif // TWODIGITNEWICKINDEXER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewickindextable.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewickindextable.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "twodigitnewickindextable.h"<br/>
<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;sstream&gt;<br/>
<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///CanGetData returns is GetData can be called with success<br/>
bool ribi::TwoDigitNewickIndexTable::CanGetIndex(const int x, const int y) const<br/>
{<br/>
&nbsp;&nbsp;return x &lt; boost::numeric_cast&lt;int&gt;(m_v.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; y &lt; boost::numeric_cast&lt;int&gt;(m_v[x].size());<br/>
}<br/>
<br/>
///Find returns the x-y-coordinats of the Newick with index i<br/>
const std::pair&lt;int,int&gt; ribi::TwoDigitNewickIndexTable::Find(const int i) const<br/>
{<br/>
&nbsp;&nbsp;const int maxx = boost::numeric_cast&lt;int&gt;(m_v.size());<br/>
&nbsp;&nbsp;for (int x=0; x!=maxx; ++x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int maxy = boost::numeric_cast&lt;int&gt;(m_v[x].size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int y=0; y!=maxy; ++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (m_v[x][y]==i) return std::make_pair(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;std::cerr &lt;&lt; "Index " &lt;&lt; i &lt;&lt; " not found in ribi::TwoDigitNewickIndexTable::Find\n";<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;s &lt;&lt; "Index " &lt;&lt; i &lt;&lt; " not found in ribi::TwoDigitNewickIndexTable::Find";<br/>
&nbsp;&nbsp;throw std::logic_error(s.str());<br/>
}<br/>
<br/>
///GetIndex returns m_index_table[x][y]<br/>
int ribi::TwoDigitNewickIndexTable::GetIndex(const int x, const int y) const<br/>
{<br/>
&nbsp;&nbsp;assert(CanGetIndex(x,y));<br/>
&nbsp;&nbsp;return m_v[x][y];<br/>
}<br/>
<br/>
///GetNumAllocated calculates the number of indices allocated<br/>
int ribi::TwoDigitNewickIndexTable::GetNumAllocated() const<br/>
{<br/>
&nbsp;&nbsp;int n_allocated = 0;<br/>
&nbsp;&nbsp;for(const std::vector&lt;int&gt;&amp; v: m_v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_allocated+=boost::numeric_cast&lt;int&gt;(v.size());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return n_allocated;<br/>
}<br/>
<br/>
///GetNumUsed calculates the number of indices used<br/>
int ribi::TwoDigitNewickIndexTable::GetNumUsed() const<br/>
{<br/>
&nbsp;&nbsp;int n_non_zero = 0;<br/>
&nbsp;&nbsp;for(const std::vector&lt;int&gt;&amp; v: m_v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_non_zero +=std::count_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::bind2nd(std::greater&lt;int&gt;(),0));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return n_non_zero;<br/>
}<br/>
<br/>
///SetIndex sets m_index_table[x][y] == z<br/>
///and resized the m_index_table is necessary<br/>
void ribi::TwoDigitNewickIndexTable::SetIndex(<br/>
&nbsp;&nbsp;const int x,<br/>
&nbsp;&nbsp;const int y,<br/>
&nbsp;&nbsp;const int z)<br/>
{<br/>
&nbsp;&nbsp;//Does x have a proper std::vector?<br/>
&nbsp;&nbsp;if (x &gt;= boost::numeric_cast&lt;int&gt;(m_v.size()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.resize(x + 1,std::vector&lt;int&gt;());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (y &gt;= boost::numeric_cast&lt;int&gt;(m_v[x].size()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v[x].resize(y + 1,0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(m_v[x][y] == 0);<br/>
&nbsp;&nbsp;assert(z &gt; 0);<br/>
&nbsp;&nbsp;m_v[x][y] = z;<br/>
&nbsp;&nbsp;assert(m_v[x][y] &gt; 0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewickindextable.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewickindextable.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef TWODIGITNEWICKINDEXERTABLE_H<br/>
#define TWODIGITNEWICKINDEXERTABLE_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
<br/>
///TwoDigitNewickIndexTable manages (X,Y) -&gt; index<br/>
struct TwoDigitNewickIndexTable<br/>
{<br/>
&nbsp;&nbsp;///CanGetIndex returns if GetIndex can be called with success<br/>
&nbsp;&nbsp;bool CanGetIndex(const int x, const int y) const;<br/>
&nbsp;&nbsp;///Find returns the x-y-coordinats of the Newick with index i<br/>
&nbsp;&nbsp;const std::pair&lt;int,int&gt; Find(const int i) const;<br/>
&nbsp;&nbsp;///Get returns the internals of TwoDigitNewickIndexTable<br/>
&nbsp;&nbsp;const std::vector&lt;std::vector&lt;int&gt; &gt;&amp; Get() const { return m_v; }<br/>
&nbsp;&nbsp;///GetIndex returns m_index_table[x][y]<br/>
&nbsp;&nbsp;int GetIndex(const int x, const int y) const;<br/>
&nbsp;&nbsp;///GetNumAllocated calculates the number of indices allocated<br/>
&nbsp;&nbsp;int GetNumAllocated() const;<br/>
&nbsp;&nbsp;///GetNumUsed calculates the number of indices used<br/>
&nbsp;&nbsp;int GetNumUsed() const;<br/>
&nbsp;&nbsp;///Set (x,y) to index z<br/>
&nbsp;&nbsp;void SetIndex(const int x, const int y, const int z);<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///m_index_table is the index table that maps (x,y) to a value,<br/>
&nbsp;&nbsp;///so that m_index_table[x][y] equals that value<br/>
&nbsp;&nbsp;std::vector&lt;std::vector&lt;int&gt; &gt; m_v;<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // TWODIGITNEWICKINDEXERTABLE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewicks.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewicks.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "twodigitnewicks.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include "newick.h"<br/>
#include "binarynewickvector.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::TwoDigitNewicks::TwoDigitNewicks(const int n_reserved, const double theta)<br/>
&nbsp;&nbsp;: m_v{}<br/>
{<br/>
&nbsp;&nbsp;//Create derivatives of simplest and reserved TwoDigitNewicks<br/>
<br/>
&nbsp;&nbsp;//Create the Newick at index 0<br/>
&nbsp;&nbsp;//this-&gt;SetNewick(0,TwoDigitNewick(std::vector&lt;TwoDigitNewickDerivative&gt;(TwoDigitNewickDerivative(),0,0));<br/>
<br/>
&nbsp;&nbsp;//Let i start at 1, because '(0)' is no valid Newick<br/>
&nbsp;&nbsp;for (int i=1; i!=n_reserved; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;TwoDigitNewickDerivative&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int value_changed = i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int other_value_changed = 0; //&lt;There is no other value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TwoDigitNewickDerivative(i-1,value_changed,other_value_changed));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//saz = sum above zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int saz = i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//sao = sum above one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int sao = (i &gt; 1 ? i : 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TwoDigitNewick n(v,saz,sao);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(i!=0 &amp;&amp; "'(0)' is no valid Newick");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n.SetProbability(Newick::CalcProbabilitySimpleNewick(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newick::CreateVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(Newick::bracket_open),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;int&gt;(Newick::bracket_close)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;SetNewick(i,n);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( (i &lt; 2 || this-&gt;GetNewick(i).IsComplete())<br/>
&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; "All newick with index &gt;= 2 must be complete");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
///Empty returns if an index is empty<br/>
bool ribi::TwoDigitNewicks::Empty(const int i) const<br/>
{<br/>
&nbsp;&nbsp;assert(i &gt;= 0);<br/>
&nbsp;&nbsp;assert(i &lt; this-&gt;Size());<br/>
&nbsp;&nbsp;return m_v[i].Empty();<br/>
}<br/>
<br/>
const ribi::TwoDigitNewick&amp; ribi::TwoDigitNewicks::GetNewick(<br/>
&nbsp;&nbsp;const int i) const<br/>
{<br/>
&nbsp;&nbsp;//Check if i is in range<br/>
&nbsp;&nbsp;assert(i&gt;=0);<br/>
&nbsp;&nbsp;assert(i &lt; this-&gt;Size());<br/>
&nbsp;&nbsp;//Check if returned indices are okay<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const TwoDigitNewick&amp; v = m_v[i];<br/>
&nbsp;&nbsp;for(const TwoDigitNewickDerivative&amp; j: v.GetDerivatives())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j.m_derived_index &gt;= 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j.m_derived_index &lt; this-&gt;Size() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;return m_v[i];<br/>
}<br/>
<br/>
void ribi::TwoDigitNewicks::SetNewick(const int i, const TwoDigitNewick&amp; v)<br/>
{<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; __LINE__ &lt;&lt; " - " &lt;&lt; i &lt;&lt; '\n';<br/>
&nbsp;&nbsp;//Allocate storage<br/>
&nbsp;&nbsp;//TODO: replace by push_back<br/>
&nbsp;&nbsp;if (i &gt;= boost::numeric_cast&lt;int&gt;(m_v.size()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.resize(i + 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m_v[m_v.size()-1].Empty());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//<br/>
&nbsp;&nbsp;//std::clog &lt;&lt; "Adding a Newick at index " &lt;&lt; i &lt;&lt; '\n';<br/>
&nbsp;&nbsp;assert(m_v[i].Empty());<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;for(const TwoDigitNewickDerivative&amp; j: v.GetDerivatives())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j.m_derived_index &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(j.m_derived_index &lt; boost::numeric_cast&lt;int&gt;(m_v.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Cannot set a derivative index "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "bigger than the number of derivatives");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;m_v[i] = v;<br/>
}<br/>
<br/>
void ribi::TwoDigitNewicks::SetNewickProbability(<br/>
&nbsp;&nbsp;const int i,const double p)<br/>
{<br/>
&nbsp;&nbsp;assert(i &gt;= 0);<br/>
&nbsp;&nbsp;assert(i&nbsp;&nbsp;&lt; Size());<br/>
&nbsp;&nbsp;assert(p &gt;= 0.0);<br/>
&nbsp;&nbsp;assert(p &lt;= 1.0);<br/>
&nbsp;&nbsp;m_v[i].SetProbability(p);<br/>
}<br/>
<br/>
int ribi::TwoDigitNewicks::Size() const<br/>
{<br/>
&nbsp;&nbsp;return boost::numeric_cast&lt;int&gt;(m_v.size());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTwoDigitNewick/twodigitnewicks.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTwoDigitNewick/twodigitnewicks.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
TestTwoDigitNewick, tool to test the two-digit-Newick architecture<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/ToolTestTwoDigitNewick.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef TWODIGITNEWICKS_H<br/>
#define TWODIGITNEWICKS_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "twodigitnewick.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
///TwoDigitNewicks manages TwoDigitTwoDigitNewicks.<br/>
///TwoDigitTwoDigitNewicks manage F'(index) -&gt; { indices }<br/>
struct TwoDigitNewicks<br/>
{<br/>
&nbsp;&nbsp;TwoDigitNewicks(const int n_reserved, const double theta);<br/>
&nbsp;&nbsp;///Empty returns if m_v is empty<br/>
&nbsp;&nbsp;///Set a Newick at index i<br/>
&nbsp;&nbsp;///\warning: do not use push_back, because of recursive calls<br/>
&nbsp;&nbsp;void SetNewick(const int i, const TwoDigitNewick&amp; v);<br/>
&nbsp;&nbsp;bool Empty() const { return m_v.empty(); }<br/>
&nbsp;&nbsp;///Empty returns if an index is empty<br/>
&nbsp;&nbsp;bool Empty(const int i) const;<br/>
&nbsp;&nbsp;///Get returns the internals of TwoDigitNewicks<br/>
&nbsp;&nbsp;const std::vector&lt;TwoDigitNewick&gt;&amp; Get() const { return m_v; }<br/>
&nbsp;&nbsp;///GetNewick returns the Newick at index i.<br/>
&nbsp;&nbsp;///i is checked for its range.<br/>
&nbsp;&nbsp;const TwoDigitNewick&amp; GetNewick(const int i) const;<br/>
&nbsp;&nbsp;///Sets the derivatives of F(i) to { v }<br/>
&nbsp;&nbsp;//void SetDerivatives(const int i,const TwoDigitNewick&amp; v);<br/>
&nbsp;&nbsp;///Obtain the number of Derivatives<br/>
<br/>
&nbsp;&nbsp;///SetNewickProbability sets the probability of the Newick<br/>
&nbsp;&nbsp;///at index i to p<br/>
&nbsp;&nbsp;void SetNewickProbability(const int i,const double p);<br/>
<br/>
&nbsp;&nbsp;int Size() const;<br/>
private:<br/>
&nbsp;&nbsp;///m_derivatives contains for every indexed Newick<br/>
&nbsp;&nbsp;///its derived indexed TwoDigitNewicks<br/>
&nbsp;&nbsp;std::vector&lt;TwoDigitNewick&gt; m_v;<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // TWODIGITNEWICKS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
