<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>IpAddress</title>
  <meta name="description" content="C++ IpAddress"/>
  <meta name="keywords" content="C++ IpAddress code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppIpAddress.htm">IpAddress</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="CppIpAddress.htm">IpAddress</a> is a <a href="CppClass.htm">class</a>
for containing an IP address.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>ipaddress.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ipaddress.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppIpAddress.html">IpAddress</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> containing an <a href="CppIpAddress.html">IP address</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppIpAddress.html">CppIpAddress</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> IPADDRESS_H<br/>
<a href="CppDefine.html">#define</a> IPADDRESS_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppIpAddress.html">IpAddress</a> guarantees to contain a valid <a href="CppIpAddress.html">IP address</a><br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppIpAddress.html">IpAddress</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppIpAddress.html">IpAddress</a> <a href="CppConstructor.html">constructor</a> <b><a href="CppThrow.html">throw</a></b>s an <a href="CppException.html">exception</a> when<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ip_address is not a valid <a href="CppIpAddress.html">IP address</a><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppIpAddress.html">IpAddress</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; ip_address);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppIpAddress.html">IpAddress</a> is a <a href="CppBaseClass.html">base class</a>, so its <a href="CppDestructor.html">destructor</a> must be <b><a href="CppVirtual.html">virtual</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~<a href="CppIpAddress.html">IpAddress</a>()&nbsp;&nbsp;{}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppIpAddress.html">IP address</a> as a <a href="CppString.html">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; Get() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_ip_address; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppIpAddress.html">IpAddress</a> <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppIpAddress.html">IpAddress</a> <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppString.html">std::string</a> guaranteed to hold a valid <a href="CppIpAddress.html">IP address</a><br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> m_ip_address;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Safe<a href="CppIpAddress.html">IpAddress</a> guarantees to contain a valid <a href="CppIpAddress.html">IP address</a><br/>
<a href="CppComment.htm">///</a>and only be of a complete type<br/>
<b><a href="CppStruct.html">struct</a></b> Safe<a href="CppIpAddress.html">IpAddress</a> <a href="CppComment.htm">//</a>: <b><a href="CppPublic.html">public</a></b> <a href="CppIpAddress.html">IpAddress</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Safe<a href="CppIpAddress.html">IpAddress</a> <a href="CppConstructor.html">constructor</a> <b><a href="CppThrow.html">throw</a></b>s an <a href="CppException.html">exception</a> when<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ip_address is not a valid <a href="CppIpAddress.html">IP address</a><br/>
&nbsp;&nbsp;Safe<a href="CppIpAddress.html">IpAddress</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; ip_address);<br/>
&nbsp;&nbsp;Safe<a href="CppIpAddress.html">IpAddress</a>(<b><a href="CppConst.html">const</a></b> Safe<a href="CppIpAddress.html">IpAddress</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;Safe<a href="CppIpAddress.html">IpAddress</a>&amp; <b><a href="CppOperator.html">operator</a></b>=(<b><a href="CppConst.html">const</a></b> Safe<a href="CppIpAddress.html">IpAddress</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the possibe <a href="CppIpAddress.html">IP address</a> as a <a href="CppString.html">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; Get() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_ip_address; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;~Safe<a href="CppIpAddress.html">IpAddress</a>()&nbsp;&nbsp;{}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(Safe<a href="CppIpAddress.html">IpAddress</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppString.html">std::string</a> that might hold a valid <a href="CppIpAddress.html">IP address</a><br/>
&nbsp;&nbsp;<a href="CppString.html">std::string</a> m_ip_address;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> <a href="CppIpAddress.html">IpAddress</a>&amp; lhs,<b><a href="CppConst.html">const</a></b> <a href="CppIpAddress.html">IpAddress</a>&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> Safe<a href="CppIpAddress.html">IpAddress</a>&amp; lhs,<b><a href="CppConst.html">const</a></b> Safe<a href="CppIpAddress.html">IpAddress</a>&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> IPADDRESS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>ipaddress.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ipaddress.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppIpAddress.html">IpAddress</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> containing an <a href="CppIpAddress.html">IP address</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppIpAddress.html">CppIpAddress</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppIpaddress.html">ipaddress</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStdexceptH.html">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppBoostXpressive.html">xpressive</a>/<a href="CppBoostXpressive.html">xpressive</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppIpAddress.html">IpAddress</a>::<a href="CppIpAddress.html">IpAddress</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; ip_address)<br/>
&nbsp;&nbsp;: m_ip_address{ip_address}<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppBoostXpressive.html">boost::xpressive</a>::s<a href="CppRegex.html">regex</a> <a href="CppRegex.html">regex</a>_ip_address<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.html">boost::xpressive</a>::s<a href="CppRegex.html">regex</a>::<a href="CppCompile.html">compile</a>("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!<a href="CppBoostXpressive.html">boost::xpressive</a>::<a href="CppRegex.html">regex</a>_match(ip_address,<a href="CppRegex.html">regex</a>_ip_address))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.html">throw</a></b> <a href="CppLogic_error.html">std::logic_error</a>("Invalid <a href="CppIpAddress.html">IP address</a>");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppIpAddress.html">IpAddress</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppIpAddress.html">IpAddress</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-08: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-02: <a href="CppVersion.html">version</a> 1.1: replaced <a href="CppBoostRegex.html">Boost.Regex</a> by <a href="CppBoostXpressive.html">Boost.Xpressive</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Safe<a href="CppIpAddress.html">IpAddress</a>::Safe<a href="CppIpAddress.html">IpAddress</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; ip_address)<br/>
&nbsp;&nbsp;: m_ip_address(ip_address)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> <a href="CppIpAddress.html">IpAddress</a>&amp; lhs,<b><a href="CppConst.html">const</a></b> <a href="CppIpAddress.html">IpAddress</a>&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> lhs.Get() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.html">operator==</a></b>(<b><a href="CppConst.html">const</a></b> Safe<a href="CppIpAddress.html">IpAddress</a>&amp; lhs,<b><a href="CppConst.html">const</a></b> Safe<a href="CppIpAddress.html">IpAddress</a>&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> lhs.Get() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> rhs.Get();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
