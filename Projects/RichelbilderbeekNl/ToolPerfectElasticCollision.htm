<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>PerfectElasticCollision</title>
  <meta name="description" content="C++ PerfectElasticCollision"/>
  <meta name="keywords" content="C++ PerfectElasticCollision code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolPerfectElasticCollision.htm">PerfectElasticCollision</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="ToolPerfectElasticCollision.htm">PerfectElasticCollision</a> is a <a href="Tools.htm">tool</a> to investigate the impulses of a perfect elastic collision.</p>
<p>&nbsp;</p>
<p><a href="ToolPerfectElasticCollision.htm">PerfectElasticCollision</a> is programmed using the <a href="CppQt.htm">Qt Creator</a> <a href="CppIde.htm">IDE</a>, using the <a href="CppBoost.htm">Boost</a>, <a href="CppQt.htm">QT</a> and <a href="CppStl.htm">STL</a> <a href="CppLibrary.htm">libraries</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolPerfectElasticCollision_1_0.png">View a 'PerfectElasticCollision' screenshot (v.1.0)(png)</a></li>
  <li><a href="ToolPerfectElasticCollisionSource_1_0.zip">Download the 'PerfectElasticCollision' source code (v.1.0)(zip)</a></li>
  <li><a href="ToolPerfectElasticCollisionSourceExeWindows_1_0.zip">Download the 'PerfectElasticCollision' Windows executable (v.1.0)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>The <a href="CppWindows.htm">Windows</a> executable of version 1.0 is created following 
<a href="CppQtCrosscompileToWindowsExample15.htm">how to cross-compile a Qt Creator project from Ubuntu to a windows executable: example 15: MinGW cross-compiling environment</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.1.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ToolPerfectElasticCollision.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ToolPerfectElasticCollision.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a><br/>
<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> +=\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a><a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a><a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">about</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a>&nbsp;&nbsp;&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a><a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="ToolPerfectElasticCollision.htm">perfectelasticcollision</a>menudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.ui<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="ToolPerfectElasticCollision.htm">ToolPerfectElasticCollision</a>.qrc<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/Licence.txt \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>perfectelasticcollisionmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="perfectelasticcollisionmenudialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
PerfectElasticCollision, <a href="Tools.htm">tool</a> to investigate a perfect elastic collision<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From hhtp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> PERFECTELASTICCOLLISIONMENUDIALOG_H<br/>
<a href="CppDefine.html">#define</a> PERFECTELASTICCOLLISIONMENUDIALOG_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "<a href="CppAbout.html">about</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>PerfectElasticCollisionMenuDialog contains the PerfectElasticCollision menu dialog<br/>
<b><a href="CppStruct.html">struct</a></b> PerfectElasticCollisionMenuDialog<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppAbout.html">About</a> GetAbout();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIntToStr.html">IntToStr</a>.html<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppIntToStr.html">IntToStr</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> PERFECTELASTICCOLLISIONMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>perfectelasticcollisionmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="perfectelasticcollisionmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
PerfectElasticCollision, <a href="Tools.htm">tool</a> to investigate a perfect elastic collision<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From hhtp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>menudialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCstdlibH.html">cstdlib</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppSstreamH.html">sstream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStdexceptH.html">stdexcept</a>&gt;<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppAbout.html">About</a> <a href="CppRibi.htm">ribi</a>::PerfectElasticCollisionMenuDialog::GetAbout()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.html">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"PerfectElasticCollision",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="Tools.htm">tool</a> to investigate a perfect elastic collision",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 7th of March 2012",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-2012",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.html">Version</a>History());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.html">Library</a>("<a href="CppQtDialWidget.html">QtDialWidget</a> <a href="CppVersion.html">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtDialWidget.html">QtDialWidget</a>::Get<a href="CppVersion.html">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> a;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::PerfectElasticCollisionMenuDialog::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::PerfectElasticCollisionMenuDialog::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2010-08-14: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>.");<br/>
&nbsp;&nbsp;v.push_back("2012-03-07: <a href="CppVersion.html">version</a> 1.1: added <a href="CppVersion.html">version</a>ing. <a href="CppAdd.htm">Add</a>ed menu screen.");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
PerfectElasticCollision, <a href="Tools.htm">tool</a> to investigate a perfect elastic collision<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From hhtp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQApplication.html">QApplication</a>&gt;<br/>
<a href="CppInclude.html">#include</a> "qt<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>menudialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.html">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtperfectelasticcollisionmaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtperfectelasticcollisionmaindialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
PerfectElasticCollision, <a href="Tools.htm">tool</a> to investigate a perfect elastic collision<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From hhtp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> QTPERFECTELASTICCOLLISIONMAINDIALOG_H<br/>
<a href="CppDefine.html">#define</a> QTPERFECTELASTICCOLLISIONMAINDIALOG_H<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDialog.html">QDialog</a>&gt;<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppQTimer.html">QTimer</a>;<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.html">class</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.html">class</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog : <b><a href="CppPublic.html">public</a></b> <a href="CppQDialog.html">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.html">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog(<a href="CppQWidget.html">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog(<b><a href="CppConst.html">const</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog&amp; <b><a href="CppOperator.html">operator</a></b>=(<b><a href="CppConst.html">const</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog();<br/>
<br/>
<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppQPaintEvent.html">QPaintEvent</a>*);<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppQTimer.html">QTimer</a> * <b><a href="CppConst.html">const</a></b> m_<a href="CppTime.htm">time</a>r;<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b> <b><a href="CppSlots.html">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onAnyChange();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onCheck();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on<a href="CppTime.htm">Time</a>r();<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDrawGlobe.html">DrawGlobe</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <a href="CppQPixmap.html">QPixmap</a> <a href="CppDrawGlobe.html">DrawGlobe</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.html">Paint</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.html">Paint</a>(<br/>
&nbsp;&nbsp;<a href="CppQPixmap.html">QPixmap</a>&amp; pixmap,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> a <a href="CppOperatorAssign.htm">=</a> 255);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDoPerfectElasticCollision.html">DoPerfectElasticCollision</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppDoPerfectElasticCollision.html">DoPerfectElasticCollision</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angleCollision,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; angle1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; speed1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; angle2,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; speed2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the angle in radians between two deltas<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/12 o'clock is 0.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 3 o'clock is 0.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 6 o'clock is 1.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 9 o'clock is 1.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetAngle.html">GetAngle</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppDouble.html">double</a></b> <a href="CppGetAngle.html">GetAngle</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
};<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> QTPERFECTELASTICCOLLISIONMAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtperfectelasticcollisionmaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtperfectelasticcollisionmaindialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
PerfectElasticCollision, <a href="Tools.htm">tool</a> to investigate a perfect elastic collision<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From hhtp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "qt<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>maindialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCstdlibH.html">cstdlib</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppLexical_cast.html">lexical_cast</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/math/constants/constants<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQBitmap.html">QBitmap</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;QMessageBox&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQPainter.html">QPainter</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQTimer.html">QTimer</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "ui_qt<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>maindialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog(<a href="CppQWidget.html">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r(<b><a href="CppNew.htm">new</a></b> <a href="CppQTimer.html">QTimer</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;dial_angle,<a href="CppSignalMacro.html">SIGNAL</a>(sliderMoved(<b><a href="CppInt.htm">int</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;dial_impulse_angle1,<a href="CppSignalMacro.html">SIGNAL</a>(sliderMoved(<b><a href="CppInt.htm">int</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;dial_impulse_angle2,<a href="CppSignalMacro.html">SIGNAL</a>(sliderMoved(<b><a href="CppInt.htm">int</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;slider_impulse_1,<a href="CppSignalMacro.html">SIGNAL</a>(sliderMoved(<b><a href="CppInt.htm">int</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;slider_impulse_2,<a href="CppSignalMacro.html">SIGNAL</a>(sliderMoved(<b><a href="CppInt.htm">int</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;check_demo,<a href="CppSignalMacro.html">SIGNAL</a>(toggled(<b><a href="CppBool.htm">bool</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onCheck()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(m_<a href="CppTime.htm">time</a>r,<a href="CppSignalMacro.html">SIGNAL</a>(<a href="CppTime.htm">time</a>out()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on<a href="CppTime.htm">Time</a>r()));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::~<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> ui;<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> m_<a href="CppTime.htm">time</a>r;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::paintEvent(<a href="CppQPaintEvent.html">QPaintEvent</a>*)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPainter.html">QPainter</a> painter(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;dial_angle-&gt;minimum() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;dial_impulse_angle1-&gt;minimum() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;dial_impulse_angle2-&gt;minimum() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;slider_impulse_1-&gt;minimum() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;slider_impulse_2-&gt;minimum() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.html">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.html">double</a></b>&gt;();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 2.0 * pi * <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;dial_angle-&gt;sliderPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;dial_angle-&gt;maximum());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle_impulse1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 2.0 * pi * <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;dial_impulse_angle1-&gt;sliderPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;dial_impulse_angle1-&gt;maximum());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle_impulse2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 2.0 * pi * <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;dial_impulse_angle2-&gt;sliderPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;dial_impulse_angle2-&gt;maximum());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> speed_impulse1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 100.0 * <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;slider_impulse_1-&gt;sliderPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;slider_impulse_1-&gt;maximum());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> speed_impulse2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 100.0 * <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;slider_impulse_2-&gt;sliderPosition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(ui-&gt;slider_impulse_2-&gt;maximum());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> ui-&gt;<a href="CppWidget.html">widget</a>_top-&gt;width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> ui-&gt;<a href="CppWidget.html">widget</a>_top-&gt;height();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.html">std::min</a>(width,height);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> globe_size <a href="CppOperatorAssign.htm">=</a> size <a href="CppOperatorDivide.htm">/</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(globe_size);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppSin.html">std::sin</a>(angle) * distance;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppCos.html">std::cos</a>(angle) * distance;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midx <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(size) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midy <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(size) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midx1 <a href="CppOperatorAssign.htm">=</a> midx <a href="CppOperatorMinus.htm">-</a> (dx <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midy1 <a href="CppOperatorAssign.htm">=</a> midy <a href="CppOperatorMinus.htm">-</a> (dy <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midx2 <a href="CppOperatorAssign.htm">=</a> midx <a href="CppOperatorPlus.htm">+</a> (dx <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midy2 <a href="CppOperatorAssign.htm">=</a> midy <a href="CppOperatorPlus.htm">+</a> (dy <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> midx1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(globe_size) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> midy1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(globe_size) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> midx2 <a href="CppOperatorMinus.htm">-</a> (<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(globe_size) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> midy2 <a href="CppOperatorMinus.htm">-</a> (<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(globe_size) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.html">std::clog</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "angle_impulse1: " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> angle_impulse1 <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.html">std::clog</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "angle_impulse2: " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> angle_impulse2 <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw black background<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPixmap.html">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPaint.html">Paint</a>(pixmap,1,1,1,255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(ui-&gt;<a href="CppWidget.html">widget</a>_top-&gt;<a href="CppGeometry.html">geometry</a>(),pixmap);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw globe 1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPixmap.html">QPixmap</a> pixmap <a href="CppOperatorAssign.htm">=</a> <a href="CppDrawGlobe.html">DrawGlobe</a>(globe_size,globe_size,255,0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(x1,y1,pixmap);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw globe 2<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPixmap.html">QPixmap</a> pixmap <a href="CppOperatorAssign.htm">=</a> <a href="CppDrawGlobe.html">DrawGlobe</a>(globe_size,globe_size,0,0,255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(x2,y2,pixmap);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change the pen to white<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QPen pen <a href="CppOperatorAssign.htm">=</a> painter.pen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppQt.htm">Qt</a>::white);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setWidth(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setPen(pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw impulses<br/>
&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midx1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midy1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midx1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(angle_impulse1) * speed_impulse1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midy1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(angle_impulse1) * speed_impulse1) );<br/>
&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midx2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midy2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midx2 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(angle_impulse2) * speed_impulse2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midy2 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(angle_impulse2) * speed_impulse2) );<br/>
&nbsp;&nbsp;painter.drawText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midx1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(angle_impulse1) * speed_impulse1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midy1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(angle_impulse1) * speed_impulse1),112,16,0,"before1");<br/>
&nbsp;&nbsp;painter.drawText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midx2 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(angle_impulse2) * speed_impulse2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;midy2 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(angle_impulse2) * speed_impulse2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;112,16,0,"before2");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> new_angle1 <a href="CppOperatorAssign.htm">=</a> angle_impulse1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> new_speed1 <a href="CppOperatorAssign.htm">=</a> speed_impulse1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> new_angle2 <a href="CppOperatorAssign.htm">=</a> angle_impulse2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> new_speed2 <a href="CppOperatorAssign.htm">=</a> speed_impulse2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.html">DoPerfectElasticCollision</a>(angle,new_angle1,new_speed1,new_angle2,new_speed2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> impulse_before <a href="CppOperatorAssign.htm">=</a> speed_impulse1 <a href="CppOperatorPlus.htm">+</a> speed_impulse2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> impulse_after&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> new_speed1 <a href="CppOperatorPlus.htm">+</a> new_speed2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> change <a href="CppOperatorAssign.htm">=</a> (impulse_after <a href="CppOperatorMinus.htm">-</a> impulse_before) <a href="CppOperatorDivide.htm">/</a> impulse_before;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_error-&gt;setText("Impulse change: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQString.html">QString</a>(<a href="CppLexical_cast.html">boost::lexical_cast</a>&lt;<a href="CppString.html">std::string</a>&gt;(change * 100.0).c_str())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "%");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw resulting impulses<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change the pen to white<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QPen pen <a href="CppOperatorAssign.htm">=</a> painter.pen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppQt.htm">Qt</a>::gray);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pen.setWidth(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.setPen(pen);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midx1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midy1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midx1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(new_angle1) * new_speed1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midy1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(new_angle1) * new_speed1) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midx2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midy2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midx2 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(new_angle2) * new_speed2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midy2 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(new_angle2) * new_speed2) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midx1 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(new_angle1) * new_speed1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midy1 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(new_angle1) * new_speed1),96,16,0,"after1");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midx2 <a href="CppOperatorPlus.htm">+</a> (<a href="CppSin.html">std::sin</a>(new_angle2) * new_speed2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midy2 <a href="CppOperatorMinus.htm">-</a> (<a href="CppCos.html">std::cos</a>(new_angle2) * new_speed2),96,16,0,"after2");<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::onAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::onCheck()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;check_demo-&gt;isChecked())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;start(10);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;stop();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::on<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;dial_angle-&gt;setSliderPosition(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; (ui-&gt;dial_angle-&gt;sliderPosition() <a href="CppOperatorPlus.htm">+</a> (<a href="CppRand.html">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a> ui-&gt;dial_angle-&gt;maximum() );<br/>
&nbsp;&nbsp;ui-&gt;dial_impulse_angle1-&gt;setSliderPosition(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; (ui-&gt;dial_impulse_angle1-&gt;sliderPosition() <a href="CppOperatorPlus.htm">+</a> (<a href="CppRand.html">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a> ui-&gt;dial_impulse_angle1-&gt;maximum() );<br/>
&nbsp;&nbsp;ui-&gt;dial_impulse_angle2-&gt;setSliderPosition(<br/>
&nbsp;&nbsp;&nbsp;&nbsp; (ui-&gt;dial_impulse_angle2-&gt;sliderPosition() <a href="CppOperatorPlus.htm">+</a> (<a href="CppRand.html">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a> ui-&gt;dial_impulse_angle2-&gt;maximum() );<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDrawGlobe.html">DrawGlobe</a>.html<br/>
<a href="CppQPixmap.html">QPixmap</a> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::<a href="CppDrawGlobe.html">DrawGlobe</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPixmap.html">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;<a href="CppQImage.html">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> r_max <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(r);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> g_max <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> b_max <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(b);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> max_dist <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.html">std::min</a>(midX,midY);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.html">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.html">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d <a href="CppOperatorMinus.htm">-</a> midX) * (x_d <a href="CppOperatorMinus.htm">-</a> midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((y_d <a href="CppOperatorMinus.htm">-</a> midY) * (y_d <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist <a href="CppOperatorLessEqual.html">&lt;=</a> max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> rel_dist <a href="CppOperatorAssign.htm">=</a> dist <a href="CppOperatorDivide.htm">/</a> max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> r_here <a href="CppOperatorAssign.htm">=</a> rel_dist * r_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> g_here <a href="CppOperatorAssign.htm">=</a> rel_dist * g_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_here <a href="CppOperatorAssign.htm">=</a> rel_dist * b_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( r_here <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( g_here <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( b_here <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> r_here; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> g_here; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> b_here; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> transparency<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppQBitmap.html">QBitmap</a> mask <a href="CppOperatorAssign.htm">=</a> pixmap.createMaskFromColor(<a href="CppQColor.html">QColor</a>(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> pixmap;<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.html">Paint</a>.html<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::<a href="CppPaint.html">Paint</a>(<br/>
&nbsp;&nbsp;<a href="CppQPixmap.html">QPixmap</a>&amp; pixmap,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> a)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> pixmap.width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> pixmap<a href="CppHeaderFile.htm">.h</a>eight();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQImage.html">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.html">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppUnsigned.html">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> a; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> r; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> g; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> b; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDoPerfectElasticCollision.html">DoPerfectElasticCollision</a>.html<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::<a href="CppDoPerfectElasticCollision.html">DoPerfectElasticCollision</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angleCollision,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; angle1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; speed1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; angle2,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; speed2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.html">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.html">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 (assumes both players have equal mass!)<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> A <a href="CppOperatorAssign.htm">=</a> speed1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 (assumes both players have equal mass!)<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> E <a href="CppOperatorAssign.htm">=</a> speed2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angles between the two globes<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> c <a href="CppOperatorAssign.htm">=</a> angleCollision;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle between c and the impulse direction of player 1<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> a <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> angle1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle between c and the impulse direction of player 2<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> b <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorMinus.htm">-</a> angle2;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seperate the impulses to their impulses paralel and othoganal the angle of collision<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 parallel to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> B <a href="CppOperatorAssign.htm">=</a> A * <a href="CppCos.html">std::cos</a>(a);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 orthogonal to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> C <a href="CppOperatorAssign.htm">=</a> A * <a href="CppSin.html">std::sin</a>(a);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 parallel to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> F <a href="CppOperatorAssign.htm">=</a> E * <a href="CppCos.html">std::cos</a>(b);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 orthogonal to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> G <a href="CppOperatorAssign.htm">=</a> E * <a href="CppSin.html">std::sin</a>(b);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seperate the impulses in X and Y directions<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> BdX <a href="CppOperatorAssign.htm">=</a> B *&nbsp;&nbsp;<a href="CppSin.html">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (0.0 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> BdY <a href="CppOperatorAssign.htm">=</a> B * <a href="CppOperatorMinus.htm">-</a><a href="CppCos.html">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (0.0 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> CdX <a href="CppOperatorAssign.htm">=</a> C *&nbsp;&nbsp;<a href="CppSin.html">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (1.5 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> CdY <a href="CppOperatorAssign.htm">=</a> C * <a href="CppOperatorMinus.htm">-</a><a href="CppCos.html">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (1.5 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> FdX <a href="CppOperatorAssign.htm">=</a> F *&nbsp;&nbsp;<a href="CppSin.html">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (1.0 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> FdY <a href="CppOperatorAssign.htm">=</a> F * <a href="CppOperatorMinus.htm">-</a><a href="CppCos.html">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (1.0 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GdX <a href="CppOperatorAssign.htm">=</a> G *&nbsp;&nbsp;<a href="CppSin.html">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (0.5 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GdY <a href="CppOperatorAssign.htm">=</a> G * <a href="CppOperatorMinus.htm">-</a><a href="CppCos.html">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (0.5 * pi));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulses<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 1 in the X direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> DdX <a href="CppOperatorAssign.htm">=</a> CdX <a href="CppOperatorPlus.htm">+</a> FdX;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 1 in the Y direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> DdY <a href="CppOperatorAssign.htm">=</a> CdY <a href="CppOperatorPlus.htm">+</a> FdY;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 2 in the X direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> HdX <a href="CppOperatorAssign.htm">=</a> BdX <a href="CppOperatorPlus.htm">+</a> GdX;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 2 in the Y direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> HdY <a href="CppOperatorAssign.htm">=</a> BdY <a href="CppOperatorPlus.htm">+</a> GdY;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write the <b><a href="CppFinal.html">final</a></b> results<br/>
&nbsp;&nbsp;angle1 <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.html">GetAngle</a>(DdX, DdY);<br/>
&nbsp;&nbsp;angle2 <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.html">GetAngle</a>(HdX, HdY);<br/>
&nbsp;&nbsp;speed1 <a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.html">std::sqrt</a>( (DdX * DdX) <a href="CppOperatorPlus.htm">+</a> (DdY * DdY) ); <a href="CppComment.htm">//</a>Pythagoras<br/>
&nbsp;&nbsp;speed2 <a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.html">std::sqrt</a>( (HdX * HdX) <a href="CppOperatorPlus.htm">+</a> (HdY * HdY) ); <a href="CppComment.htm">//</a>Pythagoras<br/>
}<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::<a href="CppGetAngle.html">GetAngle</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.html">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.html">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> pi <a href="CppOperatorMinus.htm">-</a> (<a href="CppAtan.html">std::atan</a>2(dx,dy));<br/>
}<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.html">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.html">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppGetAngle.html">GetAngle</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(0.0,-1.0); <a href="CppComment.htm">//</a>North<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.0 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(1.0,-1.0); <a href="CppComment.htm">//</a>North-East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.25 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(1.0,0.0); <a href="CppComment.htm">//</a>East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.5 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(1.0,1.0); <a href="CppComment.htm">//</a>South-East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.75 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(0.0,1.0); <a href="CppComment.htm">//</a>South<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.0 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(-1.0,1.0); <a href="CppComment.htm">//</a>South-West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.25 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(-1.0,0.0); <a href="CppComment.htm">//</a>West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.5 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.html">GetAngle</a>(-1.0,-1.0); <a href="CppComment.htm">//</a>North-West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.75 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(<a href="CppAbs.html">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtperfectelasticcollisionmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtperfectelasticcollisionmenudialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
PerfectElasticCollision, <a href="Tools.htm">tool</a> to investigate a perfect elastic collision<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From hhtp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> QTPERFECTELASTICCOLLISIONMENUDIALOG_H<br/>
<a href="CppDefine.html">#define</a> QTPERFECTELASTICCOLLISIONMENUDIALOG_H<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDialog.html">QDialog</a>&gt;<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.html">class</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.html">class</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog : <b><a href="CppPublic.html">public</a></b> <a href="CppQDialog.html">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.html">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog(<a href="CppQWidget.html">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog(<b><a href="CppConst.html">const</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog&amp; <b><a href="CppOperator.html">operator</a></b>=(<b><a href="CppConst.html">const</a></b> <a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog();<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b> <b><a href="CppSlots.html">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> QTPERFECTELASTICCOLLISIONMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtperfectelasticcollisionmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtperfectelasticcollisionmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
PerfectElasticCollision, <a href="Tools.htm">tool</a> to investigate a perfect elastic collision<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From hhtp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/<a href="ToolPerfectElasticCollision.html">ToolPerfectElasticCollision</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppInclude.html">#include</a> "qt<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>menudialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>menudialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppQtAboutDialog.html">qtaboutdialog</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "qt<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>maindialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "ui_qt<a href="ToolPerfectElasticCollision.html">perfectelasticcollision</a>menudialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog(<a href="CppQWidget.html">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.html">#ifndef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog::~<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog::on_button_start_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog d;<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;<a href="CppAbout.html">About</a> a <a href="CppOperatorAssign.htm">=</a> PerfectElasticCollisionMenuDialog::GetAbout();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.html">Library</a>("<a href="CppQtDialWidget.html">QtDialWidget</a> <a href="CppVersion.html">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtDialWidget.html">QtDialWidget</a>::Get<a href="CppVersion.html">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.html">QtAboutDialog</a> d(a);<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMenuDialog::Test()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>PerfectElasticCollisionMainDialog d;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
