<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>multiple inheritance</title>
  <meta name="description" content="C++ multiple inheritance"/>
  <meta name="keywords" content="C++ multiple inheritance code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMultipleInheritance.htm">multiple inheritance</a></h1>
<p>&nbsp;</p>
<p><a href="CppMultipleInheritance.htm">Multiple inheritance</a> is the the <a href="CppInheritance.htm">inheritance</a>
from at least two <a href="CppClass.htm">classes</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppAbstractBaseClass.htm">Abstract base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>LoggedIn : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "logged_in"; }<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppState.htm">State</a>NotLoggedIn : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> "not_logged_in"; }<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppAbstractBaseClass.htm">Abstract base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Administrator : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a> {};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorLoggedIn : <b><a href="CppPublic.htm">public</a></b> Administrator, <a href="CppState.htm">State</a>LoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>LoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> AdministratorNotLoggedIn : <b><a href="CppPublic.htm">public</a></b> Administrator, <a href="CppState.htm">State</a>NotLoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>NotLoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppAbstractBaseClass.htm">Abstract base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Participant : <b><a href="CppPublic.htm">public</a></b> <a href="CppState.htm">State</a> {};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantLoggedIn : <b><a href="CppPublic.htm">public</a></b> Participant, <a href="CppState.htm">State</a>LoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>LoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ParticipantNotLoggedIn : <b><a href="CppPublic.htm">public</a></b> Participant, <a href="CppState.htm">State</a>NotLoggedIn<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppState.htm">State</a>NotLoggedIn::ToStr(); }<br/>
};<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Administrator&gt; a1(<b><a href="CppNew.htm">new</a></b> AdministratorLoggedIn);<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Administrator&gt; a2(<b><a href="CppNew.htm">new</a></b> AdministratorNotLoggedIn);<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; p1(<b><a href="CppNew.htm">new</a></b> ParticipantLoggedIn);<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Participant&gt; p2(<b><a href="CppNew.htm">new</a></b> ParticipantNotLoggedIn);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a1-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> p1-&gt;ToStr());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a2-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> p2-&gt;ToStr());<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a1-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a2-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

