&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
&lt;head&gt;
&nbsp;&nbsp;&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"/&gt;
&nbsp;&nbsp;&lt;title&gt;OpenFoam&lt;/title&gt;
&nbsp;&nbsp;&lt;meta name="description" content="C++ OpenFoam"/&gt;
&nbsp;&nbsp;&lt;meta name="keywords" content="C++ OpenFoam "/&gt;
&nbsp;&nbsp;&lt;link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/&gt;
&lt;/head&gt;
&lt;!-- End of head, start of body --&gt;
&lt;body&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- Page header --&gt;
&lt;h1&gt;(&lt;a href="Cpp.htm"&gt;C++&lt;/a&gt;) &lt;a href="CppOpenFoam.htm"&gt;OpenFoam&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/blockMeshDict_1x1x1&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/blockMeshDict_1x1x1" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dictionary;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blockMeshDict;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//The unit of the vertices is 1.0 meter&lt;br/&gt;
convertToMeters 1.0;&lt;br/&gt;
&lt;br/&gt;
//A cube with the following vertex indices:&lt;br/&gt;
//&lt;br/&gt;
//&amp;nbsp;&amp;nbsp; 7-----6&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;/|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/|&lt;br/&gt;
// 4-----5 |&lt;br/&gt;
// | |&amp;nbsp;&amp;nbsp; | |&lt;br/&gt;
// | 3---|-2&lt;br/&gt;
// |/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|/&lt;br/&gt;
// 0-----1&lt;br/&gt;
//&lt;br/&gt;
//Each vertex is of the form (x y z)&lt;br/&gt;
//&lt;br/&gt;
//The local coordinate system is defined by the order in which the vertices are presented in the block definition according to:&lt;br/&gt;
//- the axis origin is the first entry in the block definition, vertex 0 in our example;&lt;br/&gt;
//- the x direction is described by moving from vertex 0 to vertex 1;&lt;br/&gt;
//- the y direction is described by moving from vertex 1 to vertex 2;&lt;br/&gt;
//- vertices 0, 1, 2, 3 define the plane z&lt;br/&gt;
//- vertex 4 is found by moving from vertex 0 in the z direction;&lt;br/&gt;
//- vertices 5,6 and 7 are similarly found by moving in the z direction from vertices 1,2 and 3&lt;br/&gt;
vertices&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 1)&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Ordered list of vertex labels and mesh size&lt;br/&gt;
blocks&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;hex&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //The shape is always hex, as blocks are always hexahedra&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(0 1 2 3 4 5 6 7)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // vertex numbers &lt;br/&gt;
&amp;nbsp;&amp;nbsp;(1 1 1)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// numbers of cells in each direction &lt;br/&gt;
&amp;nbsp;&amp;nbsp;simpleGrading (1 1 1) // cell expansion ratios &lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Used to describe arc or spline edges &lt;br/&gt;
//Keyword selection | Description&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Additional entries &lt;br/&gt;
//- arc&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Circular arc&amp;nbsp;&amp;nbsp; | Single interpolation point&lt;br/&gt;
//- simpleSpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Spline curve&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polyLine&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of lines&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polySpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of splines | List of interpolation points&lt;br/&gt;
//- line&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Straight line&amp;nbsp;&amp;nbsp;| &lt;br/&gt;
edges&lt;br/&gt;
(&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//List of patches &lt;br/&gt;
//Do not uncomment this 'patches' part:&lt;br/&gt;
//it will result in a 'undefined faces' warning&lt;br/&gt;
//patches&lt;br/&gt;
//(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Possible values are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- symmetryPlane&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- patch&lt;br/&gt;
//);&lt;br/&gt;
&lt;br/&gt;
boundary&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 3 2 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 4 7 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 5 4 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2 6 5 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(3 7 6 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(4 5 6 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
);&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/blockMeshDict_1x1x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/blockMeshDict_1x1x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dictionary;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blockMeshDict;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//The unit of the vertices is 1.0 meter&lt;br/&gt;
convertToMeters 1.0;&lt;br/&gt;
&lt;br/&gt;
//A cube with the following vertex indices:&lt;br/&gt;
//&lt;br/&gt;
//&amp;nbsp;&amp;nbsp; 7-----6&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;/|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/|&lt;br/&gt;
// 4-----5 |&lt;br/&gt;
// | |&amp;nbsp;&amp;nbsp; | |&lt;br/&gt;
// | 3---|-2&lt;br/&gt;
// |/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|/&lt;br/&gt;
// 0-----1&lt;br/&gt;
//&lt;br/&gt;
//Each vertex is of the form (x y z)&lt;br/&gt;
//&lt;br/&gt;
//The local coordinate system is defined by the order in which the vertices are presented in the block definition according to:&lt;br/&gt;
//- the axis origin is the first entry in the block definition, vertex 0 in our example;&lt;br/&gt;
//- the x direction is described by moving from vertex 0 to vertex 1;&lt;br/&gt;
//- the y direction is described by moving from vertex 1 to vertex 2;&lt;br/&gt;
//- vertices 0, 1, 2, 3 define the plane z&lt;br/&gt;
//- vertex 4 is found by moving from vertex 0 in the z direction;&lt;br/&gt;
//- vertices 5,6 and 7 are similarly found by moving in the z direction from vertices 1,2 and 3&lt;br/&gt;
vertices&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 1)&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Ordered list of vertex labels and mesh size&lt;br/&gt;
blocks&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;hex&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //The shape is always hex, as blocks are always hexahedra&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(0 1 2 3 4 5 6 7)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // vertex numbers &lt;br/&gt;
&amp;nbsp;&amp;nbsp;(1 1 2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// numbers of cells in each direction &lt;br/&gt;
&amp;nbsp;&amp;nbsp;simpleGrading (1 1 1) // cell expansion ratios &lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Used to describe arc or spline edges &lt;br/&gt;
//Keyword selection | Description&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Additional entries &lt;br/&gt;
//- arc&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Circular arc&amp;nbsp;&amp;nbsp; | Single interpolation point&lt;br/&gt;
//- simpleSpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Spline curve&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polyLine&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of lines&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polySpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of splines | List of interpolation points&lt;br/&gt;
//- line&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Straight line&amp;nbsp;&amp;nbsp;| &lt;br/&gt;
edges&lt;br/&gt;
(&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//List of patches &lt;br/&gt;
//Do not uncomment this 'patches' part:&lt;br/&gt;
//it will result in a 'undefined faces' warning&lt;br/&gt;
//patches&lt;br/&gt;
//(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Possible values are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- symmetryPlane&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- patch&lt;br/&gt;
//);&lt;br/&gt;
&lt;br/&gt;
boundary&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 3 2 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 4 7 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 5 4 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2 6 5 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(3 7 6 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(4 5 6 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
);&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/blockMeshDict_1x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/blockMeshDict_1x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dictionary;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blockMeshDict;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//The unit of the vertices is 1.0 meter&lt;br/&gt;
convertToMeters 1.0;&lt;br/&gt;
&lt;br/&gt;
//A cube with the following vertex indices:&lt;br/&gt;
//&lt;br/&gt;
//&amp;nbsp;&amp;nbsp; 7-----6&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;/|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/|&lt;br/&gt;
// 4-----5 |&lt;br/&gt;
// | |&amp;nbsp;&amp;nbsp; | |&lt;br/&gt;
// | 3---|-2&lt;br/&gt;
// |/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|/&lt;br/&gt;
// 0-----1&lt;br/&gt;
//&lt;br/&gt;
//Each vertex is of the form (x y z)&lt;br/&gt;
//&lt;br/&gt;
//The local coordinate system is defined by the order in which the vertices are presented in the block definition according to:&lt;br/&gt;
//- the axis origin is the first entry in the block definition, vertex 0 in our example;&lt;br/&gt;
//- the x direction is described by moving from vertex 0 to vertex 1;&lt;br/&gt;
//- the y direction is described by moving from vertex 1 to vertex 2;&lt;br/&gt;
//- vertices 0, 1, 2, 3 define the plane z&lt;br/&gt;
//- vertex 4 is found by moving from vertex 0 in the z direction;&lt;br/&gt;
//- vertices 5,6 and 7 are similarly found by moving in the z direction from vertices 1,2 and 3&lt;br/&gt;
vertices&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 1)&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Ordered list of vertex labels and mesh size&lt;br/&gt;
blocks&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;hex&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //The shape is always hex, as blocks are always hexahedra&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(0 1 2 3 4 5 6 7)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // vertex numbers &lt;br/&gt;
&amp;nbsp;&amp;nbsp;(1 2 2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// numbers of cells in each direction&lt;br/&gt;
&amp;nbsp;&amp;nbsp;simpleGrading (1 1 1) // cell expansion ratios&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Used to describe arc or spline edges &lt;br/&gt;
//Keyword selection | Description&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Additional entries &lt;br/&gt;
//- arc&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Circular arc&amp;nbsp;&amp;nbsp; | Single interpolation point&lt;br/&gt;
//- simpleSpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Spline curve&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polyLine&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of lines&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polySpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of splines | List of interpolation points&lt;br/&gt;
//- line&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Straight line&amp;nbsp;&amp;nbsp;| &lt;br/&gt;
edges&lt;br/&gt;
(&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//List of patches &lt;br/&gt;
//Do not uncomment this 'patches' part:&lt;br/&gt;
//it will result in a 'undefined faces' warning&lt;br/&gt;
//patches&lt;br/&gt;
//(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Possible values are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- symmetryPlane&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- patch&lt;br/&gt;
//);&lt;br/&gt;
&lt;br/&gt;
boundary&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 3 2 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 4 7 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 5 4 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2 6 5 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(3 7 6 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(4 5 6 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
);&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/blockMeshDict_2x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/blockMeshDict_2x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dictionary;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blockMeshDict;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//The unit of the vertices is 1.0 meter&lt;br/&gt;
convertToMeters 1.0;&lt;br/&gt;
&lt;br/&gt;
//A cube with the following vertex indices:&lt;br/&gt;
//&lt;br/&gt;
//&amp;nbsp;&amp;nbsp; 7-----6&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;/|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/|&lt;br/&gt;
// 4-----5 |&lt;br/&gt;
// | |&amp;nbsp;&amp;nbsp; | |&lt;br/&gt;
// | 3---|-2&lt;br/&gt;
// |/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|/&lt;br/&gt;
// 0-----1&lt;br/&gt;
//&lt;br/&gt;
//Each vertex is of the form (x y z)&lt;br/&gt;
//&lt;br/&gt;
//The local coordinate system is defined by the order in which the vertices are presented in the block definition according to:&lt;br/&gt;
//- the axis origin is the first entry in the block definition, vertex 0 in our example;&lt;br/&gt;
//- the x direction is described by moving from vertex 0 to vertex 1;&lt;br/&gt;
//- the y direction is described by moving from vertex 1 to vertex 2;&lt;br/&gt;
//- vertices 0, 1, 2, 3 define the plane z&lt;br/&gt;
//- vertex 4 is found by moving from vertex 0 in the z direction;&lt;br/&gt;
//- vertices 5,6 and 7 are similarly found by moving in the z direction from vertices 1,2 and 3&lt;br/&gt;
vertices&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 1)&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Ordered list of vertex labels and mesh size&lt;br/&gt;
blocks&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;hex&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //The shape is always hex, as blocks are always hexahedra&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(0 1 2 3 4 5 6 7)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // vertex numbers &lt;br/&gt;
&amp;nbsp;&amp;nbsp;(2 2 2)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// numbers of cells in each direction &lt;br/&gt;
&amp;nbsp;&amp;nbsp;simpleGrading (1 1 1) // cell expansion ratios &lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Used to describe arc or spline edges &lt;br/&gt;
//Keyword selection | Description&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Additional entries &lt;br/&gt;
//- arc&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Circular arc&amp;nbsp;&amp;nbsp; | Single interpolation point&lt;br/&gt;
//- simpleSpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Spline curve&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polyLine&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of lines&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polySpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of splines | List of interpolation points&lt;br/&gt;
//- line&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Straight line&amp;nbsp;&amp;nbsp;| &lt;br/&gt;
edges&lt;br/&gt;
(&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//List of patches &lt;br/&gt;
//Do not uncomment this 'patches' part:&lt;br/&gt;
//it will result in a 'undefined faces' warning&lt;br/&gt;
//patches&lt;br/&gt;
//(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Possible values are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- symmetryPlane&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- patch&lt;br/&gt;
//);&lt;br/&gt;
&lt;br/&gt;
boundary&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 3 2 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 4 7 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 5 4 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2 6 5 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(3 7 6 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(4 5 6 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
);&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/blockMeshDict_3x4x5&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/blockMeshDict_3x4x5" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dictionary;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blockMeshDict;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
//The unit of the vertices is 1.0 meter&lt;br/&gt;
convertToMeters 1.0;&lt;br/&gt;
&lt;br/&gt;
//A cube with the following vertex indices:&lt;br/&gt;
//&lt;br/&gt;
//&amp;nbsp;&amp;nbsp; 7-----6&lt;br/&gt;
//&amp;nbsp;&amp;nbsp;/|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/|&lt;br/&gt;
// 4-----5 |&lt;br/&gt;
// | |&amp;nbsp;&amp;nbsp; | |&lt;br/&gt;
// | 3---|-2&lt;br/&gt;
// |/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|/&lt;br/&gt;
// 0-----1&lt;br/&gt;
//&lt;br/&gt;
//Each vertex is of the form (x y z)&lt;br/&gt;
//&lt;br/&gt;
//The local coordinate system is defined by the order in which the vertices are presented in the block definition according to:&lt;br/&gt;
//- the axis origin is the first entry in the block definition, vertex 0 in our example;&lt;br/&gt;
//- the x direction is described by moving from vertex 0 to vertex 1;&lt;br/&gt;
//- the y direction is described by moving from vertex 1 to vertex 2;&lt;br/&gt;
//- vertices 0, 1, 2, 3 define the plane z&lt;br/&gt;
//- vertex 4 is found by moving from vertex 0 in the z direction;&lt;br/&gt;
//- vertices 5,6 and 7 are similarly found by moving in the z direction from vertices 1,2 and 3&lt;br/&gt;
vertices&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 0 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 1 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 1 1)&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Ordered list of vertex labels and mesh size&lt;br/&gt;
blocks&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;hex&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //The shape is always hex, as blocks are always hexahedra&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(0 1 2 3 4 5 6 7)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // vertex numbers &lt;br/&gt;
&amp;nbsp;&amp;nbsp;(3 4 5)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// numbers of cells in each direction &lt;br/&gt;
&amp;nbsp;&amp;nbsp;simpleGrading (1 1 1) // cell expansion ratios &lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//Used to describe arc or spline edges &lt;br/&gt;
//Keyword selection | Description&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Additional entries &lt;br/&gt;
//- arc&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Circular arc&amp;nbsp;&amp;nbsp; | Single interpolation point&lt;br/&gt;
//- simpleSpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Spline curve&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polyLine&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of lines&amp;nbsp;&amp;nbsp; | List of interpolation points&lt;br/&gt;
//- polySpline&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Set of splines | List of interpolation points&lt;br/&gt;
//- line&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| Straight line&amp;nbsp;&amp;nbsp;| &lt;br/&gt;
edges&lt;br/&gt;
(&lt;br/&gt;
);&lt;br/&gt;
&lt;br/&gt;
//List of patches &lt;br/&gt;
//Do not uncomment this 'patches' part:&lt;br/&gt;
//it will result in a 'undefined faces' warning&lt;br/&gt;
//patches&lt;br/&gt;
//(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Possible values are:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- symmetryPlane&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//- patch&lt;br/&gt;
//);&lt;br/&gt;
&lt;br/&gt;
boundary&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 3 2 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(0 4 7 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1 5 4 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(2 6 5 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(3 7 6 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(4 5 6 7)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
);&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/boundary_1x1x1&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/boundary_1x1x1" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; polyBoundaryMesh;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
6&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/boundary_1x1x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/boundary_1x1x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; polyBoundaryMesh;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
6&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 6;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 8;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/boundary_1x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/boundary_1x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; polyBoundaryMesh;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
6&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 6;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 12;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 16;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 18;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/boundary_2x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/boundary_2x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; polyBoundaryMesh;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
6&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 12;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 16;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 20;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 24;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 28;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 32;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/boundary_3x4x5&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/boundary_3x4x5" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; polyBoundaryMesh;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
6&lt;br/&gt;
(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;12;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 133;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 145;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_front&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;15;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 165;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 180;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_back&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;15;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 200;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my_cube_top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;12;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 215;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/CppOpenFoam.qrc&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/CppOpenFoam.qrc" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&amp;lt;RCC&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;qresource prefix="/CppOpenFoam/files"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;blockMeshDict_1x1x1&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;blockMeshDict_1x1x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;blockMeshDict_1x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;blockMeshDict_2x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;boundary_1x1x1&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;boundary_1x1x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;boundary_1x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;boundary_2x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;faces_1x1x1&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;faces_1x1x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;faces_1x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;faces_2x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;neighbour_1x1x1&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;neighbour_1x1x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;neighbour_1x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;neighbour_2x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;owner_1x1x1&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;owner_1x1x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;owner_1x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;owner_2x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;points_1x1x1&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;points_1x1x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;points_1x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;points_2x2x2&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;blockMeshDict_3x4x5&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;boundary_3x4x5&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;faces_3x4x5&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;neighbour_3x4x5&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;owner_3x4x5&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;file&amp;gt;points_3x4x5&amp;lt;/file&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/qresource&amp;gt;&lt;br/&gt;
&amp;lt;/RCC&amp;gt;&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/faces_1x1x1&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/faces_1x1x1" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; faceList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
6&lt;br/&gt;
(&lt;br/&gt;
4(0 2 3 1)&lt;br/&gt;
4(0 4 6 2)&lt;br/&gt;
4(0 1 5 4)&lt;br/&gt;
4(1 3 7 5)&lt;br/&gt;
4(2 6 7 3)&lt;br/&gt;
4(4 5 7 6)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/faces_1x1x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/faces_1x1x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; faceList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
11&lt;br/&gt;
(&lt;br/&gt;
4(4 5 7 6)&lt;br/&gt;
4(0 2 3 1)&lt;br/&gt;
4(0 4 6 2)&lt;br/&gt;
4(4 8 10 6)&lt;br/&gt;
4(0 1 5 4)&lt;br/&gt;
4(4 5 9 8)&lt;br/&gt;
4(1 3 7 5)&lt;br/&gt;
4(5 7 11 9)&lt;br/&gt;
4(2 6 7 3)&lt;br/&gt;
4(6 10 11 7)&lt;br/&gt;
4(8 9 11 10)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/faces_1x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/faces_1x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; faceList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
20&lt;br/&gt;
(&lt;br/&gt;
4(2 8 9 3)&lt;br/&gt;
4(6 7 9 8)&lt;br/&gt;
4(8 9 11 10)&lt;br/&gt;
4(8 14 15 9)&lt;br/&gt;
4(0 2 3 1)&lt;br/&gt;
4(2 4 5 3)&lt;br/&gt;
4(0 6 8 2)&lt;br/&gt;
4(2 8 10 4)&lt;br/&gt;
4(6 12 14 8)&lt;br/&gt;
4(8 14 16 10)&lt;br/&gt;
4(0 1 7 6)&lt;br/&gt;
4(6 7 13 12)&lt;br/&gt;
4(1 3 9 7)&lt;br/&gt;
4(3 5 11 9)&lt;br/&gt;
4(7 9 15 13)&lt;br/&gt;
4(9 11 17 15)&lt;br/&gt;
4(4 10 11 5)&lt;br/&gt;
4(10 16 17 11)&lt;br/&gt;
4(12 13 15 14)&lt;br/&gt;
4(14 15 17 16)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/faces_2x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/faces_2x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; faceList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
36&lt;br/&gt;
(&lt;br/&gt;
4(1 4 13 10)&lt;br/&gt;
4(3 12 13 4)&lt;br/&gt;
4(9 10 13 12)&lt;br/&gt;
4(4 13 14 5)&lt;br/&gt;
4(10 11 14 13)&lt;br/&gt;
4(4 7 16 13)&lt;br/&gt;
4(12 13 16 15)&lt;br/&gt;
4(13 14 17 16)&lt;br/&gt;
4(10 13 22 19)&lt;br/&gt;
4(12 21 22 13)&lt;br/&gt;
4(13 22 23 14)&lt;br/&gt;
4(13 16 25 22)&lt;br/&gt;
4(0 3 4 1)&lt;br/&gt;
4(3 6 7 4)&lt;br/&gt;
4(1 4 5 2)&lt;br/&gt;
4(4 7 8 5)&lt;br/&gt;
4(0 9 12 3)&lt;br/&gt;
4(3 12 15 6)&lt;br/&gt;
4(9 18 21 12)&lt;br/&gt;
4(12 21 24 15)&lt;br/&gt;
4(0 1 10 9)&lt;br/&gt;
4(9 10 19 18)&lt;br/&gt;
4(1 2 11 10)&lt;br/&gt;
4(10 11 20 19)&lt;br/&gt;
4(2 5 14 11)&lt;br/&gt;
4(5 8 17 14)&lt;br/&gt;
4(11 14 23 20)&lt;br/&gt;
4(14 17 26 23)&lt;br/&gt;
4(6 15 16 7)&lt;br/&gt;
4(15 24 25 16)&lt;br/&gt;
4(7 16 17 8)&lt;br/&gt;
4(16 25 26 17)&lt;br/&gt;
4(18 19 22 21)&lt;br/&gt;
4(21 22 25 24)&lt;br/&gt;
4(19 20 23 22)&lt;br/&gt;
4(22 23 26 25)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/faces_3x4x5&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/faces_3x4x5" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; faceList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
227&lt;br/&gt;
(&lt;br/&gt;
4(1 5 25 21)&lt;br/&gt;
4(4 24 25 5)&lt;br/&gt;
4(20 21 25 24)&lt;br/&gt;
4(2 6 26 22)&lt;br/&gt;
4(5 25 26 6)&lt;br/&gt;
4(21 22 26 25)&lt;br/&gt;
4(6 26 27 7)&lt;br/&gt;
4(22 23 27 26)&lt;br/&gt;
4(5 9 29 25)&lt;br/&gt;
4(8 28 29 9)&lt;br/&gt;
4(24 25 29 28)&lt;br/&gt;
4(6 10 30 26)&lt;br/&gt;
4(9 29 30 10)&lt;br/&gt;
4(25 26 30 29)&lt;br/&gt;
4(10 30 31 11)&lt;br/&gt;
4(26 27 31 30)&lt;br/&gt;
4(9 13 33 29)&lt;br/&gt;
4(12 32 33 13)&lt;br/&gt;
4(28 29 33 32)&lt;br/&gt;
4(10 14 34 30)&lt;br/&gt;
4(13 33 34 14)&lt;br/&gt;
4(29 30 34 33)&lt;br/&gt;
4(14 34 35 15)&lt;br/&gt;
4(30 31 35 34)&lt;br/&gt;
4(13 17 37 33)&lt;br/&gt;
4(32 33 37 36)&lt;br/&gt;
4(14 18 38 34)&lt;br/&gt;
4(33 34 38 37)&lt;br/&gt;
4(34 35 39 38)&lt;br/&gt;
4(21 25 45 41)&lt;br/&gt;
4(24 44 45 25)&lt;br/&gt;
4(40 41 45 44)&lt;br/&gt;
4(22 26 46 42)&lt;br/&gt;
4(25 45 46 26)&lt;br/&gt;
4(41 42 46 45)&lt;br/&gt;
4(26 46 47 27)&lt;br/&gt;
4(42 43 47 46)&lt;br/&gt;
4(25 29 49 45)&lt;br/&gt;
4(28 48 49 29)&lt;br/&gt;
4(44 45 49 48)&lt;br/&gt;
4(26 30 50 46)&lt;br/&gt;
4(29 49 50 30)&lt;br/&gt;
4(45 46 50 49)&lt;br/&gt;
4(30 50 51 31)&lt;br/&gt;
4(46 47 51 50)&lt;br/&gt;
4(29 33 53 49)&lt;br/&gt;
4(32 52 53 33)&lt;br/&gt;
4(48 49 53 52)&lt;br/&gt;
4(30 34 54 50)&lt;br/&gt;
4(33 53 54 34)&lt;br/&gt;
4(49 50 54 53)&lt;br/&gt;
4(34 54 55 35)&lt;br/&gt;
4(50 51 55 54)&lt;br/&gt;
4(33 37 57 53)&lt;br/&gt;
4(52 53 57 56)&lt;br/&gt;
4(34 38 58 54)&lt;br/&gt;
4(53 54 58 57)&lt;br/&gt;
4(54 55 59 58)&lt;br/&gt;
4(41 45 65 61)&lt;br/&gt;
4(44 64 65 45)&lt;br/&gt;
4(60 61 65 64)&lt;br/&gt;
4(42 46 66 62)&lt;br/&gt;
4(45 65 66 46)&lt;br/&gt;
4(61 62 66 65)&lt;br/&gt;
4(46 66 67 47)&lt;br/&gt;
4(62 63 67 66)&lt;br/&gt;
4(45 49 69 65)&lt;br/&gt;
4(48 68 69 49)&lt;br/&gt;
4(64 65 69 68)&lt;br/&gt;
4(46 50 70 66)&lt;br/&gt;
4(49 69 70 50)&lt;br/&gt;
4(65 66 70 69)&lt;br/&gt;
4(50 70 71 51)&lt;br/&gt;
4(66 67 71 70)&lt;br/&gt;
4(49 53 73 69)&lt;br/&gt;
4(52 72 73 53)&lt;br/&gt;
4(68 69 73 72)&lt;br/&gt;
4(50 54 74 70)&lt;br/&gt;
4(53 73 74 54)&lt;br/&gt;
4(69 70 74 73)&lt;br/&gt;
4(54 74 75 55)&lt;br/&gt;
4(70 71 75 74)&lt;br/&gt;
4(53 57 77 73)&lt;br/&gt;
4(72 73 77 76)&lt;br/&gt;
4(54 58 78 74)&lt;br/&gt;
4(73 74 78 77)&lt;br/&gt;
4(74 75 79 78)&lt;br/&gt;
4(61 65 85 81)&lt;br/&gt;
4(64 84 85 65)&lt;br/&gt;
4(80 81 85 84)&lt;br/&gt;
4(62 66 86 82)&lt;br/&gt;
4(65 85 86 66)&lt;br/&gt;
4(81 82 86 85)&lt;br/&gt;
4(66 86 87 67)&lt;br/&gt;
4(82 83 87 86)&lt;br/&gt;
4(65 69 89 85)&lt;br/&gt;
4(68 88 89 69)&lt;br/&gt;
4(84 85 89 88)&lt;br/&gt;
4(66 70 90 86)&lt;br/&gt;
4(69 89 90 70)&lt;br/&gt;
4(85 86 90 89)&lt;br/&gt;
4(70 90 91 71)&lt;br/&gt;
4(86 87 91 90)&lt;br/&gt;
4(69 73 93 89)&lt;br/&gt;
4(72 92 93 73)&lt;br/&gt;
4(88 89 93 92)&lt;br/&gt;
4(70 74 94 90)&lt;br/&gt;
4(73 93 94 74)&lt;br/&gt;
4(89 90 94 93)&lt;br/&gt;
4(74 94 95 75)&lt;br/&gt;
4(90 91 95 94)&lt;br/&gt;
4(73 77 97 93)&lt;br/&gt;
4(92 93 97 96)&lt;br/&gt;
4(74 78 98 94)&lt;br/&gt;
4(93 94 98 97)&lt;br/&gt;
4(94 95 99 98)&lt;br/&gt;
4(81 85 105 101)&lt;br/&gt;
4(84 104 105 85)&lt;br/&gt;
4(82 86 106 102)&lt;br/&gt;
4(85 105 106 86)&lt;br/&gt;
4(86 106 107 87)&lt;br/&gt;
4(85 89 109 105)&lt;br/&gt;
4(88 108 109 89)&lt;br/&gt;
4(86 90 110 106)&lt;br/&gt;
4(89 109 110 90)&lt;br/&gt;
4(90 110 111 91)&lt;br/&gt;
4(89 93 113 109)&lt;br/&gt;
4(92 112 113 93)&lt;br/&gt;
4(90 94 114 110)&lt;br/&gt;
4(93 113 114 94)&lt;br/&gt;
4(94 114 115 95)&lt;br/&gt;
4(93 97 117 113)&lt;br/&gt;
4(94 98 118 114)&lt;br/&gt;
4(0 4 5 1)&lt;br/&gt;
4(4 8 9 5)&lt;br/&gt;
4(8 12 13 9)&lt;br/&gt;
4(12 16 17 13)&lt;br/&gt;
4(1 5 6 2)&lt;br/&gt;
4(5 9 10 6)&lt;br/&gt;
4(9 13 14 10)&lt;br/&gt;
4(13 17 18 14)&lt;br/&gt;
4(2 6 7 3)&lt;br/&gt;
4(6 10 11 7)&lt;br/&gt;
4(10 14 15 11)&lt;br/&gt;
4(14 18 19 15)&lt;br/&gt;
4(0 20 24 4)&lt;br/&gt;
4(4 24 28 8)&lt;br/&gt;
4(8 28 32 12)&lt;br/&gt;
4(12 32 36 16)&lt;br/&gt;
4(20 40 44 24)&lt;br/&gt;
4(24 44 48 28)&lt;br/&gt;
4(28 48 52 32)&lt;br/&gt;
4(32 52 56 36)&lt;br/&gt;
4(40 60 64 44)&lt;br/&gt;
4(44 64 68 48)&lt;br/&gt;
4(48 68 72 52)&lt;br/&gt;
4(52 72 76 56)&lt;br/&gt;
4(60 80 84 64)&lt;br/&gt;
4(64 84 88 68)&lt;br/&gt;
4(68 88 92 72)&lt;br/&gt;
4(72 92 96 76)&lt;br/&gt;
4(80 100 104 84)&lt;br/&gt;
4(84 104 108 88)&lt;br/&gt;
4(88 108 112 92)&lt;br/&gt;
4(92 112 116 96)&lt;br/&gt;
4(0 1 21 20)&lt;br/&gt;
4(20 21 41 40)&lt;br/&gt;
4(40 41 61 60)&lt;br/&gt;
4(60 61 81 80)&lt;br/&gt;
4(80 81 101 100)&lt;br/&gt;
4(1 2 22 21)&lt;br/&gt;
4(21 22 42 41)&lt;br/&gt;
4(41 42 62 61)&lt;br/&gt;
4(61 62 82 81)&lt;br/&gt;
4(81 82 102 101)&lt;br/&gt;
4(2 3 23 22)&lt;br/&gt;
4(22 23 43 42)&lt;br/&gt;
4(42 43 63 62)&lt;br/&gt;
4(62 63 83 82)&lt;br/&gt;
4(82 83 103 102)&lt;br/&gt;
4(3 7 27 23)&lt;br/&gt;
4(7 11 31 27)&lt;br/&gt;
4(11 15 35 31)&lt;br/&gt;
4(15 19 39 35)&lt;br/&gt;
4(23 27 47 43)&lt;br/&gt;
4(27 31 51 47)&lt;br/&gt;
4(31 35 55 51)&lt;br/&gt;
4(35 39 59 55)&lt;br/&gt;
4(43 47 67 63)&lt;br/&gt;
4(47 51 71 67)&lt;br/&gt;
4(51 55 75 71)&lt;br/&gt;
4(55 59 79 75)&lt;br/&gt;
4(63 67 87 83)&lt;br/&gt;
4(67 71 91 87)&lt;br/&gt;
4(71 75 95 91)&lt;br/&gt;
4(75 79 99 95)&lt;br/&gt;
4(83 87 107 103)&lt;br/&gt;
4(87 91 111 107)&lt;br/&gt;
4(91 95 115 111)&lt;br/&gt;
4(95 99 119 115)&lt;br/&gt;
4(16 36 37 17)&lt;br/&gt;
4(36 56 57 37)&lt;br/&gt;
4(56 76 77 57)&lt;br/&gt;
4(76 96 97 77)&lt;br/&gt;
4(96 116 117 97)&lt;br/&gt;
4(17 37 38 18)&lt;br/&gt;
4(37 57 58 38)&lt;br/&gt;
4(57 77 78 58)&lt;br/&gt;
4(77 97 98 78)&lt;br/&gt;
4(97 117 118 98)&lt;br/&gt;
4(18 38 39 19)&lt;br/&gt;
4(38 58 59 39)&lt;br/&gt;
4(58 78 79 59)&lt;br/&gt;
4(78 98 99 79)&lt;br/&gt;
4(98 118 119 99)&lt;br/&gt;
4(100 101 105 104)&lt;br/&gt;
4(104 105 109 108)&lt;br/&gt;
4(108 109 113 112)&lt;br/&gt;
4(112 113 117 116)&lt;br/&gt;
4(101 102 106 105)&lt;br/&gt;
4(105 106 110 109)&lt;br/&gt;
4(109 110 114 113)&lt;br/&gt;
4(113 114 118 117)&lt;br/&gt;
4(102 103 107 106)&lt;br/&gt;
4(106 107 111 110)&lt;br/&gt;
4(110 111 115 114)&lt;br/&gt;
4(114 115 119 118)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/neighbour_1x1x1&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/neighbour_1x1x1" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 8 nCells: 1 nFaces: 6 nInternalFaces: 0";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;neighbour;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
0()&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/neighbour_1x1x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/neighbour_1x1x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 12 nCells: 2 nFaces: 11 nInternalFaces: 1";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;neighbour;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
1(1)&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/neighbour_1x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/neighbour_1x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 18 nCells: 4 nFaces: 20 nInternalFaces: 4";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;neighbour;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
4(1 2 3 3)&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/neighbour_2x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/neighbour_2x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 27 nCells: 8 nFaces: 36 nInternalFaces: 12";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;neighbour;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
12&lt;br/&gt;
(&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
4&lt;br/&gt;
3&lt;br/&gt;
5&lt;br/&gt;
3&lt;br/&gt;
6&lt;br/&gt;
7&lt;br/&gt;
5&lt;br/&gt;
6&lt;br/&gt;
7&lt;br/&gt;
7&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/neighbour_3x4x5&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/neighbour_3x4x5" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 120 nCells: 60 nFaces: 227 nInternalFaces: 133";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;neighbour;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
133&lt;br/&gt;
(&lt;br/&gt;
1&lt;br/&gt;
3&lt;br/&gt;
12&lt;br/&gt;
2&lt;br/&gt;
4&lt;br/&gt;
13&lt;br/&gt;
5&lt;br/&gt;
14&lt;br/&gt;
4&lt;br/&gt;
6&lt;br/&gt;
15&lt;br/&gt;
5&lt;br/&gt;
7&lt;br/&gt;
16&lt;br/&gt;
8&lt;br/&gt;
17&lt;br/&gt;
7&lt;br/&gt;
9&lt;br/&gt;
18&lt;br/&gt;
8&lt;br/&gt;
10&lt;br/&gt;
19&lt;br/&gt;
11&lt;br/&gt;
20&lt;br/&gt;
10&lt;br/&gt;
21&lt;br/&gt;
11&lt;br/&gt;
22&lt;br/&gt;
23&lt;br/&gt;
13&lt;br/&gt;
15&lt;br/&gt;
24&lt;br/&gt;
14&lt;br/&gt;
16&lt;br/&gt;
25&lt;br/&gt;
17&lt;br/&gt;
26&lt;br/&gt;
16&lt;br/&gt;
18&lt;br/&gt;
27&lt;br/&gt;
17&lt;br/&gt;
19&lt;br/&gt;
28&lt;br/&gt;
20&lt;br/&gt;
29&lt;br/&gt;
19&lt;br/&gt;
21&lt;br/&gt;
30&lt;br/&gt;
20&lt;br/&gt;
22&lt;br/&gt;
31&lt;br/&gt;
23&lt;br/&gt;
32&lt;br/&gt;
22&lt;br/&gt;
33&lt;br/&gt;
23&lt;br/&gt;
34&lt;br/&gt;
35&lt;br/&gt;
25&lt;br/&gt;
27&lt;br/&gt;
36&lt;br/&gt;
26&lt;br/&gt;
28&lt;br/&gt;
37&lt;br/&gt;
29&lt;br/&gt;
38&lt;br/&gt;
28&lt;br/&gt;
30&lt;br/&gt;
39&lt;br/&gt;
29&lt;br/&gt;
31&lt;br/&gt;
40&lt;br/&gt;
32&lt;br/&gt;
41&lt;br/&gt;
31&lt;br/&gt;
33&lt;br/&gt;
42&lt;br/&gt;
32&lt;br/&gt;
34&lt;br/&gt;
43&lt;br/&gt;
35&lt;br/&gt;
44&lt;br/&gt;
34&lt;br/&gt;
45&lt;br/&gt;
35&lt;br/&gt;
46&lt;br/&gt;
47&lt;br/&gt;
37&lt;br/&gt;
39&lt;br/&gt;
48&lt;br/&gt;
38&lt;br/&gt;
40&lt;br/&gt;
49&lt;br/&gt;
41&lt;br/&gt;
50&lt;br/&gt;
40&lt;br/&gt;
42&lt;br/&gt;
51&lt;br/&gt;
41&lt;br/&gt;
43&lt;br/&gt;
52&lt;br/&gt;
44&lt;br/&gt;
53&lt;br/&gt;
43&lt;br/&gt;
45&lt;br/&gt;
54&lt;br/&gt;
44&lt;br/&gt;
46&lt;br/&gt;
55&lt;br/&gt;
47&lt;br/&gt;
56&lt;br/&gt;
46&lt;br/&gt;
57&lt;br/&gt;
47&lt;br/&gt;
58&lt;br/&gt;
59&lt;br/&gt;
49&lt;br/&gt;
51&lt;br/&gt;
50&lt;br/&gt;
52&lt;br/&gt;
53&lt;br/&gt;
52&lt;br/&gt;
54&lt;br/&gt;
53&lt;br/&gt;
55&lt;br/&gt;
56&lt;br/&gt;
55&lt;br/&gt;
57&lt;br/&gt;
56&lt;br/&gt;
58&lt;br/&gt;
59&lt;br/&gt;
58&lt;br/&gt;
59&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundary.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundary.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamboundary.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;ostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#include "openfoamface.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Boundary::Boundary(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt; &amp;gt;&amp;amp; faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_faces(faces),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_name(name),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_type(type)&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; &amp;gt; ribi::foam::Boundary::GetFaces() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt;&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(v),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;Face&amp;gt; face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; const_face {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face == const_face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return const_face;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == m_faces.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Only check first and last&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.empty() || v[0] == m_faces[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.empty() || v[ v.size() - 1 ] == m_faces[ v.size() - 1 ]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const ribi::foam::Boundary&amp;amp; boundary)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; boundary.m_name &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; boundary.m_type &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Face&amp;gt; face: boundary.m_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; *face &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundary.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundary.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMBOUNDARY_H&lt;br/&gt;
#define OPENFOAMBOUNDARY_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///A Boundary contains Faces that form a surface boundary&lt;br/&gt;
struct Boundary&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Boundary(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt; &amp;gt;&amp;amp; faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Face&amp;gt; &amp;gt;&amp;amp; GetFaces() noexcept { return m_faces; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Face&amp;gt; &amp;gt;&amp;nbsp;&amp;nbsp;GetFaces() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetName() const noexcept { return m_name; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetType() const noexcept { return m_type; }&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt; &amp;gt; m_faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string m_name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string m_type;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Boundary&amp;amp; boundary);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Boundary&amp;amp; boundary);&lt;br/&gt;
&lt;br/&gt;
} //namespace foam&lt;br/&gt;
} //namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMBOUNDARY_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundaryfile.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundaryfile.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamboundaryfile.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;fstream&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/split.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;QFile&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "filename.h"&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamboundaryindex.h"&lt;br/&gt;
#include "openfoamboundaryfileitem.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::foam::BoundaryFile::BoundaryFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;BoundaryFileItem&amp;gt;&amp;amp; items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_header{header},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items(items)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::BoundaryFile::CanGet(const FaceIndex&amp;amp; face_index) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const BoundaryFileItem&amp;amp; item: m_items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int i = face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int min = item.GetStartFace().Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int max = min + item.GetNfaces();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i &amp;gt;= min &amp;amp;&amp;amp; i &amp;lt; max) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::BoundaryFileItem&amp;amp; ribi::foam::BoundaryFile::Find(const FaceIndex&amp;amp; face_index) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanGet(face_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = static_cast&amp;lt;int&amp;gt;(m_items.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int j = face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int min = m_items[i].GetStartFace().Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int max = min + m_items[i].GetNfaces();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (j &amp;gt;= min &amp;amp;&amp;amp; j &amp;lt; max) return m_items[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("ribi::foam::BoundaryFile::Find");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::Header ribi::foam::BoundaryFile::GetDefaultHeader() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string class_name = "polyBoundaryMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string location&amp;nbsp;&amp;nbsp; = "constant" + fileio::GetPathSeperator() + "polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = "";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = "boundary";&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Header(class_name,location,note,object);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::BoundaryFileItem ribi::foam::BoundaryFile::GetItem(const ribi::foam::BoundaryIndex&amp;amp; boundary_index) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boundary_index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boundary_index &amp;lt; GetMaxBoundaryIndex());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_items[ boundary_index.Get() ];&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::BoundaryIndex ribi::foam::BoundaryFile::GetMaxBoundaryIndex() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return BoundaryIndex(static_cast&amp;lt;int&amp;gt;(m_items.size()));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::BoundaryFile ribi::foam::BoundaryFile::Parse(std::istream&amp;amp; is)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoundaryFile b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::BoundaryFile ribi::foam::BoundaryFile::Parse(const std::string&amp;amp; filename)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string tmp_filename { fileio::GetTempFileName() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::CopyFile(filename,tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header::CleanFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::ifstream f(tmp_filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::foam::BoundaryFile file { Parse(f) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;f.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::DeleteFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return file;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::BoundaryFile::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::BoundaryFile::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Some initial data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header("some_name","some_location","some_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;BoundaryFileItem&amp;gt; items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=4; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string name = "some_name" + boost::lexical_cast&amp;lt;std::string&amp;gt;(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string type = "some_type" + boost::lexical_cast&amp;lt;std::string&amp;gt;(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_faces = i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex start_face(i * i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFileItem item(name,type,n_faces,start_face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFile c(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header == header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header other_header("some_other_name","some_other_location","some_other_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header != other_header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFile c(other_header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;BoundaryFileItem&amp;gt; other_items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=3; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string name = "some_other_name" + boost::lexical_cast&amp;lt;std::string&amp;gt;(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string type = "some_other_type" + boost::lexical_cast&amp;lt;std::string&amp;gt;(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_faces = i + 123;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex start_face((i * i) + 456);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFileItem item(name,type,n_faces,start_face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;other_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFile c(header,other_items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Stream conversion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFile c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b != c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read from testing file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int test_index = 0; test_index!=5; ++test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: filename_appendix = "_1x1x1"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: filename_appendix = "_1x1x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: filename_appendix = "_1x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: filename_appendix = "_2x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 4: filename_appendix = "_3x4x5"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should never get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("foam::Files::CreateTestFiles: unknown test index");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!filename_appendix.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename_base { GetDefaultHeader().GetObject() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename = filename_base + filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string resources_path { ":/CppOpenFoam/files/" + filename };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QFile f( resources_path.c_str() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.copy(filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!fileio::IsRegularFile(filename))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFile b(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b.GetItems().empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (!b.GetItems().empty() || b.GetItems().empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "If a mesh has no non-boundary cells, neighbour can be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Header::BoundaryFile successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const BoundaryFile&amp;amp; lhs,const BoundaryFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetHeader() != rhs.GetHeader())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Headers differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(lhs.GetHeader());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(rhs.GetHeader());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;BoundaryFileItem&amp;gt;&amp;amp; lhs_items = lhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;BoundaryFileItem&amp;gt;&amp;amp; rhs_items = rhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs_items.size() != rhs_items.size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Number of items differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(lhs_items.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(rhs_items.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool all_items_equal {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::equal(lhs_items.begin(),lhs_items.end(),rhs_items.begin())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//if (!all_items_equal)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;TRACE("Items differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;TRACE(all_items_equal);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return all_items_equal;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const BoundaryFile&amp;amp; lhs,const BoundaryFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.m_items.empty()); //Make empty otherwise&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n_items = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char opening_bracket = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Eat comment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char c = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (c != '(' &amp;amp;&amp;amp; c != '{')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Start eating n_items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items *= 10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n = c - '0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n &amp;gt;= 0 &amp;amp;&amp;amp; n &amp;lt;= 9);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items += n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;opening_bracket = c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(opening_bracket == '(' || opening_bracket == '{'))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(opening_bracket);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (opening_bracket == '(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Read once, push n_items times&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Eat comments until bracket close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_close = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (bracket_close != ')' &amp;amp;&amp;amp; bracket_close != '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == ')' || bracket_close == '}');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (opening_bracket == '(' &amp;amp;&amp;amp; bracket_close == ')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (opening_bracket == '{' &amp;amp;&amp;amp; bracket_close == '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BoundaryFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.GetHeader() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.m_items.size() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "(" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const BoundaryFileItem item: f.m_items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; item &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundaryfile.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundaryfile.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMBOUNDARYFILE_H&lt;br/&gt;
#define OPENFOAMBOUNDARYFILE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include "fileiofwd.h"&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamboundaryfileitem.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Reads and writes an OpenFOAM boundary file&lt;br/&gt;
struct BoundaryFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Read an OpenFOAM 'boundary' file.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::runtime_error if file is incorrectly formed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit BoundaryFile(const std::string&amp;amp; filename) : BoundaryFile(Parse(filename)) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit BoundaryFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header header = GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;BoundaryFileItem&amp;gt;&amp;amp; items = {});&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Header GetDefaultHeader() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header&amp;amp; GetHeader() const noexcept { return m_header; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;BoundaryFileItem&amp;gt; GetItems() const noexcept { return m_items; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BoundaryFileItem GetItem(const BoundaryIndex&amp;amp; boundary_index) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the number of boundaries, the size of m_items, or the first boundary index not available&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BoundaryIndex GetMaxBoundaryIndex() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is the Face belonging to a Boundary?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(if not, it belongs to a Cell)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsBoundary(const FaceIndex&amp;amp; face_index) const noexcept { return CanGet(face_index); }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Swap the face indices between&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//void Swap(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Read an OpenFOAM 'boundary' file.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::runtime_error if file is incorrectly formed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit BoundaryFile(std::istream&amp;amp; is) : BoundaryFile(Parse(is)) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The OpenFOAM header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The items boundary contains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;BoundaryFileItem&amp;gt; m_items;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is the FaceIndex present among the current items?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanGet(const FaceIndex&amp;amp; face_index) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Find out which BoundaryFileItem the face belongs to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Assumes CanGet(face_index) == true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoundaryFileItem&amp;amp; Find(const FaceIndex&amp;amp; face_index) noexcept;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Read an OpenFOAM 'boundary' file.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::runtime_error if file is incorrectly formed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const BoundaryFile Parse(std::istream&amp;amp; is);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const BoundaryFile Parse(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BoundaryFile&amp;amp; f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryFile&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const BoundaryFile&amp;amp; lhs,const BoundaryFile&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const BoundaryFile&amp;amp; lhs,const BoundaryFile&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BoundaryFile&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
///Read an OpenFOAM 'boundary' file.&lt;br/&gt;
///Throws std::runtime_error if file is incorrectly formed&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryFile&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMBOUNDARYFILE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundaryfileitem.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundaryfileitem.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamboundaryfileitem.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::BoundaryFileItem::BoundaryFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; type,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex n_start_face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_n_faces{n_faces},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_name{name},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_start_face{n_start_face},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_type{type}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_n_faces &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_start_face.Get() &amp;gt;= 0);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::FaceIndex ribi::foam::BoundaryFileItem::GetEndFace() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_start_face + FaceIndex(m_n_faces);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::BoundaryFileItem::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::BoundaryFileItem::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BoundaryFileItem i("some_name","some_type",123,FaceIndex(456));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoundaryFileItem j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (i != j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(i == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::BoundaryFileItem::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const BoundaryFileItem&amp;amp; lhs, const BoundaryFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lhs.GetName() == rhs.GetName()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetNfaces() == rhs.GetNfaces()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetStartFace() == rhs.GetStartFace()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetType() == rhs.GetType()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const BoundaryFileItem&amp;amp; lhs, const BoundaryFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BoundaryFileItem&amp;amp; item)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;" &amp;lt;&amp;lt; item.GetName() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;{" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type " &amp;lt;&amp;lt; item.GetType() &amp;lt;&amp;lt; ";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces " &amp;lt;&amp;lt; item.GetNfaces() &amp;lt;&amp;lt; ";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace " &amp;lt;&amp;lt; item.GetStartFace() &amp;lt;&amp;lt; ";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;}" &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryFileItem&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_open == std::string("{"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string type_text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; type_text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(type_text == std::string("type"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_type;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.m_type.back() == ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_type.pop_back();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f.m_type.back() != ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string n_faces_text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; n_faces_text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_faces_text == std::string("nFaces"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_n_faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string semicolon;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; semicolon;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (semicolon != std::string(";"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(semicolon);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(semicolon == std::string(";"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string start_face_text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; start_face_text;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (start_face_text != std::string("startFace"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(start_face_text);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(start_face_text == std::string("startFace"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_start_face;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string semicolon;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; semicolon;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(semicolon == std::string(";"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == std::string("}"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundaryfileitem.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundaryfileitem.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMBOUNDARYFILEITEM_H&lt;br/&gt;
#define OPENFOAMBOUNDARYFILEITEM_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "openfoamfaceindex.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///An item in an OpenFOAM boundary file&lt;br/&gt;
struct BoundaryFileItem&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit BoundaryFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; name = "",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; type = "",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_faces = 0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex n_start_face = FaceIndex(0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetName() const noexcept { return m_name; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetNfaces() const noexcept { return m_n_faces; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the first Face its index&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex GetStartFace() const noexcept { return m_start_face; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the last+1 Face index&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex GetEndFace() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string GetType() const noexcept { return m_type; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_n_faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FaceIndex m_start_face;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_type;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class OpenFoamBoundaryFile;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryFileItem&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const BoundaryFileItem&amp;amp; lhs, const BoundaryFileItem&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const BoundaryFileItem&amp;amp; lhs, const BoundaryFileItem&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BoundaryFileItem&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryFileItem&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMBOUNDARYFILEITEM_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundaryindex.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundaryindex.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamboundaryindex.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::BoundaryIndex::BoundaryIndex(const int index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_index(index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_index &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(m_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_index &amp;gt;= 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A BoundaryIndex must be zero or a positive value");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_index &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument("A BoundaryIndex must be zero or a positive value");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::BoundaryIndex&amp;amp; ribi::foam::BoundaryIndex::operator-=(const BoundaryIndex&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_index -= rhs.Get();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_index &amp;gt;= 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A BoundaryIndex must be zero or a positive value");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_index &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"BoundaryIndex::operator-=: BoundaryIndex cannot be negative");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::BoundaryIndex&amp;amp; ribi::foam::BoundaryIndex::operator++() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;++m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::BoundaryIndex ribi::foam::BoundaryIndex::operator++(int) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoundaryIndex old(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;++(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return old;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BoundaryIndex&amp;amp; face_index) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryIndex&amp;amp; face_index) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; face_index.m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::BoundaryIndex ribi::foam::operator+(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return BoundaryIndex(lhs.Get() + rhs.Get());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::BoundaryIndex ribi::foam::operator-(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return BoundaryIndex(lhs.Get() - rhs.Get());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() == rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;lt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;gt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;=(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;lt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;=(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;gt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamboundaryindex.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamboundaryindex.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMBOUNDARYINDEX_H&lt;br/&gt;
#define OPENFOAMBOUNDARYINDEX_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
struct BoundaryIndex&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::invalid_argument if the index is invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit BoundaryIndex(const int index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int Get() const noexcept { return m_index; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::invalid_argument if the new index is invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoundaryIndex&amp;amp; operator-=(const BoundaryIndex&amp;amp; rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoundaryIndex&amp;amp; operator++() noexcept;&amp;nbsp;&amp;nbsp; //Prefix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoundaryIndex operator++(int) noexcept; //Postfix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryIndex&amp;amp; face_index) noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const BoundaryIndex&amp;amp; face_index) noexcept;&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, BoundaryIndex&amp;amp; face_index) noexcept;&lt;br/&gt;
&lt;br/&gt;
const BoundaryIndex operator+(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
const BoundaryIndex operator-(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator!=(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;=(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;=(const BoundaryIndex&amp;amp; lhs, const BoundaryIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMBOUNDARYINDEX_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamcell.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamcell.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamcell.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;ostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "openfoamface.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Cell::Cell(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; owned_faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; all_faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_all_faces{all_faces},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owned_faces{owned_faces}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Face&amp;gt; face: m_owned_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(m_all_faces.begin(),m_all_faces.end(),face) == 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "m_owned_faces must be a subset of m_all_faces");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Cell::AssignOwnedFaces(const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;&amp;amp; owned_faces)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_owned_faces.empty() &amp;amp;&amp;amp; "owned faces can only be assigned once");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!owned_faces.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_owned_faces = owned_faces;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; &amp;gt; ribi::foam::Cell::GetOwnedFaces() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt;&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owned_faces.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owned_faces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(v),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;Face&amp;gt; face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; const_face {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face == const_face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return const_face;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == m_owned_faces.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Only check first and last&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.empty() || v[0] == m_owned_faces[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.empty() || v[ v.size() - 1 ] == m_owned_faces[ v.size() - 1 ]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::Cell::HasFace(const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; face) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_all_faces.size() &amp;gt;= m_owned_faces.size()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "m_owned_faces must be a subset of m_all_faces: there should be more m_all_faces"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Face&amp;gt; face: m_owned_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::count(m_all_faces.begin(),m_all_faces.end(),face) == 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "m_owned_faces must be a subset of m_all_faces: every owned Face must be in m_all_faces"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::count(m_all_faces.begin(),m_all_faces.end(),face);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::Cell::OwnsFace(const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; face) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::count(m_owned_faces.begin(),m_owned_faces.end(),face);&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const ribi::foam::Cell&amp;amp; cell)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;Face&amp;gt; face: cell.m_owned_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; *face &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamcell.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamcell.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMCELL_H&lt;br/&gt;
#define OPENFOAMCELL_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///A Cell contains Faces that enclose a volume&lt;br/&gt;
///These Faces are&lt;br/&gt;
///- owned/managed by this Cell: m_owned_faces&lt;br/&gt;
///- owned/managed by a neighbouring Cell: m_faces&lt;br/&gt;
///Faces know&lt;br/&gt;
///- the Cell that owns them&lt;br/&gt;
///- optionally, the Cell they are also a member of, called 'neighbour'.&lt;br/&gt;
///&amp;nbsp;&amp;nbsp;If this is nullptr, the Face is a boundary face&lt;br/&gt;
///If a Cell contains a boundary Face, it is a boundary cell&lt;br/&gt;
struct Cell&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///owned_faces is a subset of all_faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Cell(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; owned_faces = {},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; all_faces = {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Can only assign once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void AssignOwnedFaces(const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;&amp;amp; owned_faces);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;const Cell&amp;gt; GetNeighbour() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Face&amp;gt; &amp;gt; GetOwnedFaces() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Face&amp;gt; &amp;gt; GetOwnedFaces()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; noexcept { return m_owned_faces; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool HasFace(const boost::shared_ptr&amp;lt;const Face&amp;gt; face) const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool OwnsFace(const boost::shared_ptr&amp;lt;const Face&amp;gt; face) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_owned_faces is a subset of m_all_faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; m_all_faces;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_owned_faces is a subset of m_all_faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; m_owned_faces;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Cell&amp;amp; cell);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Cell&amp;amp; cell);&lt;br/&gt;
&lt;br/&gt;
} //namespace foam&lt;br/&gt;
} //namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMCELL_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamcellindex.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamcellindex.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamcellindex.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::CellIndex::CellIndex(const int index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_index(index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_index &amp;gt;= -1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A CellIndex must be minus one or higher");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::CellIndex&amp;amp; ribi::foam::CellIndex::operator++() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;++m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::CellIndex ribi::foam::CellIndex::operator++(int) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex old(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;++(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return old;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::CellIndex::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::CellIndex::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex a(2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex b(2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex c(3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a == a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(a == b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(b == a);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(b == b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c == c);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::CellIndex::Test successfully");&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const CellIndex&amp;amp; cell_index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; cell_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, CellIndex&amp;amp; cell_index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; cell_index.m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!is)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() == rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;lt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;gt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;=(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;lt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;=(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;gt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamcellindex.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamcellindex.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMCELLINDEX_H&lt;br/&gt;
#define OPENFOAMCELLINDEX_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
struct CellIndex&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit CellIndex(const int index = -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int Get() const noexcept { return m_index; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex&amp;amp; operator++() noexcept;&amp;nbsp;&amp;nbsp; //Prefix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex operator++(int) noexcept; //Postfix&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, CellIndex&amp;amp; cell_index);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const CellIndex&amp;amp; cell_index);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, CellIndex&amp;amp; cell_index);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator!=(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;=(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;=(const CellIndex&amp;amp; lhs, const CellIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMCELLINDEX_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamface.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamface.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamface.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;ostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "openfoamcell.h"&lt;br/&gt;
#include "coordinat3d.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Face::Face(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; neighbour,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; owner,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; &amp;gt;&amp;amp; points&lt;br/&gt;
)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_neighbour(neighbour),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner(owner),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points(points)&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Face::AssignNeighbour(const boost::shared_ptr&amp;lt;ribi::foam::Cell&amp;gt; neighbour) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_neighbour &amp;amp;&amp;amp; "neighbour can only be assigned once");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(neighbour);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_neighbour = neighbour;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Face::AssignOwner(const boost::shared_ptr&amp;lt;ribi::foam::Cell&amp;gt; owner) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_owner &amp;amp;&amp;amp; "Can only assign owner once");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(owner);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_owner = owner;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::Cell&amp;gt; ribi::foam::Face::GetOwner() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (m_owner || !m_owner) &amp;amp;&amp;amp; "Allow Face to have no owner");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_owner;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt; ribi::foam::Face::GetPoints() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt;&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(v),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; point)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(point);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; const_point {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;point&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(point == const_point);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return const_point;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == m_points.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Only check first and last&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.empty() || v[0] == m_points[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.empty() || v[ v.size() - 1 ] == m_points[ v.size() - 1 ]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Coordinat3D ribi::foam::CalcCenter(const Face&amp;amp; face) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Coordinat3D d;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; c: face.GetPoints())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d += *c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;d /= static_cast&amp;lt;double&amp;gt;(face.GetPoints().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return d;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const ribi::foam::Face&amp;amp; face)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (face.m_neighbour)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only display the address of a neighbour to prevent recursion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face.m_neighbour);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; face.m_neighbour;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(face.m_owner &amp;amp;&amp;amp; "Every Face has an owner");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//if (face.m_owner)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Only display the address of a owner to prevent recursion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face.m_owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; face.m_owner;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; coordinat: face.m_points)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(coordinat);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; *coordinat &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamface.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamface.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMFACE_H&lt;br/&gt;
#define OPENFOAMFACE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
//#include "openfoamcellindex.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///An OpenFOAM face:&lt;br/&gt;
///- has a collection of points/vertices/coordinats&lt;br/&gt;
///- has a/no neighbouring cell&lt;br/&gt;
///- has a/no cell owning this face&lt;br/&gt;
struct Face&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Face(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; neighbour,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; owner,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; &amp;gt;&amp;amp; points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Face(const Face&amp;amp;) = delete;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Face&amp;amp; operator=(const Face&amp;amp;) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Can only assign once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void AssignNeighbour(const boost::shared_ptr&amp;lt;Cell&amp;gt; neighbour) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Can only assign once&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void AssignOwner(const boost::shared_ptr&amp;lt;Cell&amp;gt; owner) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Cell&amp;gt; GetNeighbour() const noexcept { return m_neighbour; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Cell&amp;gt; GetOwner() const noexcept { return m_owner; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cell&amp;gt; GetOwner()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt; GetPoints() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Coordinat3D&amp;gt; &amp;gt;&amp;amp;GetPoints()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; noexcept { return m_points; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If this Face has no Neighbour, this is nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Cell&amp;gt; m_neighbour;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If this Face has no Owner, this is nullptr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Cell&amp;gt; m_owner;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The points/vertices/coordinats this face consists of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; &amp;gt; m_points;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Face&amp;amp; face);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
///Calculate the center of the Face&lt;br/&gt;
ribi::Coordinat3D CalcCenter(const Face&amp;amp; face) noexcept;&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Face&amp;amp; face);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMFACE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfaceindex.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfaceindex.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamfaceindex.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::FaceIndex::FaceIndex(const int index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_index(index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_index &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(m_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_index &amp;gt;= 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A FaceIndex must be zero or a positive value");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_index &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument("A FaceIndex must be zero or a positive value");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::FaceIndex&amp;amp; ribi::foam::FaceIndex::operator+=(const FaceIndex&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_index += rhs.Get();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_index &amp;gt;= 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A FaceIndex must be zero or a positive value, must have overflowed");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_index &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"FaceIndex::operator+=: FaceIndex cannot be negative, must have overflowed");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::FaceIndex&amp;amp; ribi::foam::FaceIndex::operator-=(const FaceIndex&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_index -= rhs.Get();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_index &amp;gt;= 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A FaceIndex must be zero or a positive value");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_index &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::invalid_argument(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"FaceIndex::operator-=: FaceIndex cannot be negative");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::FaceIndex&amp;amp; ribi::foam::FaceIndex::operator++() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;++m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *this;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::FaceIndex ribi::foam::FaceIndex::operator++(int) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FaceIndex old(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;++(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return old;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const FaceIndex&amp;amp; face_index) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FaceIndex&amp;amp; face_index) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; face_index.m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::FaceIndex ribi::foam::operator+(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return FaceIndex(lhs.Get() + rhs.Get());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::FaceIndex ribi::foam::operator-(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return FaceIndex(lhs.Get() - rhs.Get());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() == rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;lt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;gt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;=(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;lt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;=(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;gt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfaceindex.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfaceindex.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMFACEINDEX_H&lt;br/&gt;
#define OPENFOAMFACEINDEX_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
struct FaceIndex&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::invalid_argument if the index is invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit FaceIndex(const int index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int Get() const noexcept { return m_index; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::invalid_argument if the new index is invalid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FaceIndex&amp;amp; operator+=(const FaceIndex&amp;amp; rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FaceIndex&amp;amp; operator-=(const FaceIndex&amp;amp; rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FaceIndex&amp;amp; operator++() noexcept;&amp;nbsp;&amp;nbsp; //Prefix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FaceIndex operator++(int) noexcept; //Postfix&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FaceIndex&amp;amp; face_index) noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const FaceIndex&amp;amp; face_index) noexcept;&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FaceIndex&amp;amp; face_index) noexcept;&lt;br/&gt;
&lt;br/&gt;
const FaceIndex operator+(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
const FaceIndex operator-(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator!=(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;=(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;=(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMFACEINDEX_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfacesfile.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfacesfile.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamfacesfile.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;fstream&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/split.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;QFile&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "filename.h"&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamfacesfileitem.h"&lt;br/&gt;
#include "openfoamfaceindex.h"&lt;br/&gt;
#include "openfoamparseerror.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::foam::FacesFile::FacesFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;FacesFileItem&amp;gt;&amp;amp; items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_header{header},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items(items)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::FacesFile::CanGetItem(const ribi::foam::FaceIndex&amp;amp; face_index) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(face_index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return face_index.Get() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_items.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::Header ribi::foam::FacesFile::GetDefaultHeader() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Header("faceList","constant/polyMesh","","faces");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::FacesFileItem&amp;amp; ribi::foam::FacesFile::GetItem(const ribi::foam::FaceIndex&amp;amp; face_index) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanGetItem(face_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_items[ face_index.Get() ];&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::FaceIndex ribi::foam::FacesFile::GetMaxFaceIndex() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return FaceIndex(static_cast&amp;lt;int&amp;gt;(m_items.size()));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::FacesFile ribi::foam::FacesFile::Parse(std::istream&amp;amp; is)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FacesFile b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::FacesFile ribi::foam::FacesFile::Parse(const std::string&amp;amp; filename)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string tmp_filename { fileio::GetTempFileName() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::CopyFile(filename,tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header::CleanFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::ifstream f(tmp_filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FacesFile file { Parse(f) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;f.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::DeleteFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return file;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::FacesFile::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::FacesFile::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Some initial data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header("some_name","some_location","some_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;FacesFileItem&amp;gt; items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=4; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFileItem item( std::vector&amp;lt;PointIndex&amp;gt;(i,PointIndex(i)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FacesFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FacesFile c(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header == header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FacesFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header other_header("some_other_name","some_other_location","some_other_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header != other_header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FacesFile c(other_header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FacesFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;FacesFileItem&amp;gt; other_items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=3; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFileItem item( std::vector&amp;lt;PointIndex&amp;gt;(i+1,PointIndex(i*i)) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;other_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FacesFile c(header,other_items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Stream conversion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FacesFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFile c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b != c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read from testing file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int test_index = 0; test_index!=5; ++test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: filename_appendix = "_1x1x1"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: filename_appendix = "_1x1x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: filename_appendix = "_1x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: filename_appendix = "_2x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 4: filename_appendix = "_3x4x5"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should never get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("foam::Files::CreateTestFiles: unknown test index");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!filename_appendix.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename_base { GetDefaultHeader().GetObject() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename = filename_base + filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string resources_path { ":/CppOpenFoam/files/" + filename };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QFile f( resources_path.c_str() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.copy(filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!fileio::IsRegularFile(filename))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFile b(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b.GetItems().empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (!b.GetItems().empty() || b.GetItems().empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "If a mesh has no non-bhoundary cells, neighbour can be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Header::FacesFile successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const FacesFile&amp;amp; lhs,const FacesFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetHeader() != rhs.GetHeader())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;FacesFileItem&amp;gt;&amp;amp; lhs_items = lhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;FacesFileItem&amp;gt;&amp;amp; rhs_items = rhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs_items.size() != rhs_items.size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(lhs_items.begin(),lhs_items.end(),rhs_items.begin());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const FacesFile&amp;amp; lhs,const FacesFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FacesFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.m_items.empty()); //Make empty otherwise&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n_items = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char opening_bracket = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Eat comment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char c = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (c != '(' &amp;amp;&amp;amp; c != '{')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Start eating n_items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items *= 10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n = c - '0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n &amp;gt;= 0 &amp;amp;&amp;amp; n &amp;lt;= 9);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items += n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;opening_bracket = c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(opening_bracket == '(' || opening_bracket == '{'))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(opening_bracket);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (opening_bracket == '(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Read once, push n_items times&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Eat comments until bracket close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_close = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (bracket_close != ')' &amp;amp;&amp;amp; bracket_close != '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == ')' || bracket_close == '}');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (opening_bracket == '(' &amp;amp;&amp;amp; bracket_close == ')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (opening_bracket == '{' &amp;amp;&amp;amp; bracket_close == '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const FacesFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.GetHeader() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.m_items.size() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "(" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const FacesFileItem item: f.m_items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; item &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfacesfile.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfacesfile.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMFACESFILE_H&lt;br/&gt;
#define OPENFOAMFACESFILE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include "fileiofwd.h"&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamfacesfileitem.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Reads and writes an OpenFOAM boundary file&lt;br/&gt;
struct FacesFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit FacesFile(const std::string&amp;amp; filename) : FacesFile(Parse(filename)) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit FacesFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header header = GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;FacesFileItem&amp;gt;&amp;amp; items = {});&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanGetItem(const FaceIndex&amp;amp; face_index) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Header GetDefaultHeader() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header&amp;amp; GetHeader() const noexcept { return m_header; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;FacesFileItem&amp;gt; GetItems() const noexcept { return m_items; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Assumes CanGetItem is true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FacesFileItem&amp;amp; GetItem(const FaceIndex&amp;amp; face_index) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the number of faces, the size of m_items, or the first face index not available&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex GetMaxFaceIndex() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit FacesFile(std::istream&amp;amp; is) : FacesFile(Parse(is)) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The OpenFOAM header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The items faces contains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;FacesFileItem&amp;gt; m_items;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const FacesFile Parse(std::istream&amp;amp; is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const FacesFile Parse(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const FacesFile&amp;amp; f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FacesFile&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const FacesFile&amp;amp; lhs,const FacesFile&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const FacesFile&amp;amp; lhs,const FacesFile&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const FacesFile&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FacesFile&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMFACESFILE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfacesfileitem.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfacesfileitem.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamfacesfileitem.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "openfoamparseerror.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::FacesFileItem::FacesFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointIndex&amp;gt;&amp;amp; point_indices&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_point_indices{point_indices}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (PointIndex index: m_point_indices)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index.Get() &amp;gt;= 0 &amp;amp;&amp;amp; "Sure, there is a point with index 0");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::FacesFileItem::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::FacesFileItem::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FacesFileItem i( { PointIndex(1),PointIndex(2),PointIndex(3),PointIndex(4) } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;FacesFileItem j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (i != j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(i == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::FacesFileItem::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const FacesFileItem&amp;amp; lhs, const FacesFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lhs.GetPointIndices() == rhs.GetPointIndices()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const FacesFileItem&amp;amp; lhs, const FacesFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const FacesFileItem&amp;amp; item)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item.GetPointIndices().size()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "("&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const PointIndex i: item.GetPointIndices()) { s &amp;lt;&amp;lt; i &amp;lt;&amp;lt; " "; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string t { s.str() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(t.back() == ' ');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;t.pop_back();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(t.back() != ' ');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; t&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FacesFileItem&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.GetPointIndices().empty()); //Or empty it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n_nodes = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; n_nodes;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n_nodes &amp;lt;= 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw ParseError();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_nodes &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_open == '(');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_nodes; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointIndex node;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; node;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_point_indices.push_back(node);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == ')');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfacesfileitem.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfacesfileitem.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMFACESFILEITEM_H&lt;br/&gt;
#define OPENFOAMFACESFILEITEM_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include "openfoampointindex.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///An item in an OpenFOAM 'faces' file&lt;br/&gt;
struct FacesFileItem&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit FacesFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointIndex&amp;gt;&amp;amp; point_indices = {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointIndex&amp;gt;&amp;amp; GetPointIndices() const noexcept { return m_point_indices; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointIndex&amp;gt; m_point_indices;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class OpenFoamFacesFile;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FacesFileItem&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const FacesFileItem&amp;amp; lhs, const FacesFileItem&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const FacesFileItem&amp;amp; lhs, const FacesFileItem&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const FacesFileItem&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, FacesFileItem&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMFACESFILEITEM_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfilenames.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfilenames.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamfilenames.h"&lt;br/&gt;
&lt;br/&gt;
#include "parameterfilenamesopenfoam.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "xml.h"&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::fileio::Filename&amp;gt; ribi::foam::Filenames::GetAll() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;GetBoundary(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;GetFaces(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;GetNeighbour(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;GetOpenFoamCase(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;GetOwner(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;GetPoints()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetBoundary() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "polyMesh"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "boundary"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetFaces() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "polyMesh"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "faces"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetNeighbour() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "polyMesh"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "neighbour"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOpenFoamCase() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename("case.foam");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOpenFoamControlDict() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"system"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "controlDict"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOpenFoamFvSchemes() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"system"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "fvSchemes"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOpenFoamFvSolution() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"system"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "fvSolution"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOpenFoamPressureField() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "p"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOpenFoamTransportProperties() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "transportProperties"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOpenFoamVelocityField() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "U"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetOwner() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "polyMesh"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "owner"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::fileio::Filename ribi::foam::Filenames::GetPoints() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ribi::fileio::Filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "polyMesh"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "points"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const ribi::foam::Filenames&amp;amp; filenames)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ribi::xml::ToXml("filename_boundary",filenames.GetBoundary())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ribi::xml::ToXml("filename_faces",filenames.GetFaces())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ribi::xml::ToXml("filename_neightbour",filenames.GetNeighbour())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ribi::xml::ToXml("filename_openfoam",filenames.GetOpenFoamCase())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ribi::xml::ToXml("filename_owner",filenames.GetOwner())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ribi::xml::ToXml("filename_points",filenames.GetPoints())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; ribi::xml::ToXml("parameter_filenames_openfoam",s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfilenames.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfilenames.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMFILENAMES_H&lt;br/&gt;
#define OPENFOAMFILENAMES_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "filename.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Filenames used for OpenFOAM&lt;br/&gt;
struct Filenames&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::fileio::Filename&amp;gt; GetAll() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename the resulting boundary (needed by OpenFoam) will be written to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Must use Win32 backslashes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetBoundary() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename the resulting faces will be written to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Must use Win32 backslashes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetFaces() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename the resulting neighbour (needed by OpenFOAM) will be written to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Must use Win32 backslashes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetNeighbour() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename that indicates that this is an OpenFOAM case&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOpenFoamCase() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename for the OpenFOAM its controlDict&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOpenFoamControlDict() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename of the OpenFOAM solver schemes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Must use Win32 backslashes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOpenFoamFvSchemes() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename of the OpenFOAM solver solution&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Must use Win32 backslashes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOpenFoamFvSolution() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename for the OpenFOAM its case its pressure field&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOpenFoamPressureField() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename for the OpenFOAM its case its TransportProperties&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOpenFoamTransportProperties() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename for the OpenFOAM its case its velocity field&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOpenFoamVelocityField() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename the resulting owner (needed by OpenFOAM) will be written to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Must use Win32 backslashes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetOwner() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The filename the resulting nodes will be written to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Must use Win32 backslashes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename GetPoints() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Filenames&amp;amp; filenames);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMFILENAMES_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfiles.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfiles.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamfiles.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;fstream&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;map&amp;gt;&lt;br/&gt;
#include &amp;lt;set&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;QFile&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "filename.h"&lt;br/&gt;
#include "openfoamboundaryfile.h"&lt;br/&gt;
#include "openfoamfacesfile.h"&lt;br/&gt;
#include "coordinat3d.h"&lt;br/&gt;
#include "openfoamneighbourfile.h"&lt;br/&gt;
#include "openfoamownerfile.h"&lt;br/&gt;
#include "openfoamfilenames.h"&lt;br/&gt;
#include "openfoampointsfile.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
ribi::foam::Files::Files(const std::string&amp;amp; folder_name)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_boundary(CreateBoundary(folder_name)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces(CreateFaces(folder_name)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_neighbour(CreateNeighbour(folder_name)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner(CreateOwner(folder_name)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points(CreatePoints(folder_name))&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ribi::fileio::IsFolder(folder_name));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_boundary);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_faces);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_neighbour);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_points);&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Files::Files(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; boundary,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;FacesFile&amp;gt; faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; neighbour,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; owner,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;PointsFile&amp;gt; points&lt;br/&gt;
) : m_boundary(boundary),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces(faces),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_neighbour(neighbour),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner(owner),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points(points)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_boundary);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_faces);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_neighbour);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_points);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CheckMe();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Files::Files(const Files&amp;amp; other)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_boundary(boost::shared_ptr&amp;lt;BoundaryFile&amp;gt;(new BoundaryFile(*other.m_boundary))),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces(boost::shared_ptr&amp;lt;FacesFile&amp;gt;(new FacesFile(*other.m_faces))),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_neighbour(boost::shared_ptr&amp;lt;NeighbourFile&amp;gt;(new NeighbourFile(*other.m_neighbour))),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner(boost::shared_ptr&amp;lt;OwnerFile&amp;gt;(new OwnerFile(*other.m_owner))),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points(boost::shared_ptr&amp;lt;PointsFile&amp;gt;(new PointsFile(*other.m_points)))&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_boundary);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_faces);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_neighbour);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_points);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*m_boundary == *other.m_boundary &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( m_boundary !=&amp;nbsp;&amp;nbsp;other.m_boundary &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*m_faces == *other.m_faces &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( m_faces !=&amp;nbsp;&amp;nbsp;other.m_faces &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*m_neighbour == *other.m_neighbour &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( m_neighbour !=&amp;nbsp;&amp;nbsp;other.m_neighbour &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*m_owner == *other.m_owner &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( m_owner !=&amp;nbsp;&amp;nbsp;other.m_owner &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*m_points == *other.m_points &amp;amp;&amp;amp; "Must be a copy");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( m_points !=&amp;nbsp;&amp;nbsp;other.m_points &amp;amp;&amp;amp; "Must be a deep copy");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CheckMe();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Files::CheckMe() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE_FUNC();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex n_faces { FaceIndex(static_cast&amp;lt;int&amp;gt;(this-&amp;gt;m_faces-&amp;gt;GetItems().size())) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const PointIndex n_points { PointIndex(static_cast&amp;lt;int&amp;gt;(this-&amp;gt;m_points-&amp;gt;GetItems().size())) };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("CheckMe: 'boundary' file individuals items");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const BoundaryFileItem&amp;amp; item: m_boundary-&amp;gt;GetItems())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Error in 'boundary' file in this item:\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (item.GetNfaces() &amp;lt;= 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "nFaces (" &amp;lt;&amp;lt; item.GetNfaces() &amp;lt;&amp;lt; ") must be a positive non-zero value";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (item.GetStartFace() &amp;gt; n_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "startFace (" &amp;lt;&amp;lt; item.GetStartFace() &amp;lt;&amp;lt; ") beyond number of faces (" &amp;lt;&amp;lt; n_faces &amp;lt;&amp;lt; ")";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (item.GetStartFace() + FaceIndex(item.GetNfaces()) &amp;gt; n_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "startFace (" &amp;lt;&amp;lt; item.GetStartFace() &amp;lt;&amp;lt; ")"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " + nFaces (" &amp;lt;&amp;lt; n_faces &amp;lt;&amp;lt; ")"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " = " &amp;lt;&amp;lt; (item.GetStartFace() + FaceIndex(item.GetNfaces()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " is beyond number of faces (" &amp;lt;&amp;lt; n_faces &amp;lt;&amp;lt; ")"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("CheckMe: 'boundary' file: no ranges should overlap");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int n_boundary_items { static_cast&amp;lt;int&amp;gt;(m_boundary-&amp;gt;GetItems().size()) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_boundary_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFileItem item_i = m_boundary-&amp;gt;GetItems()[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex first_i = item_i.GetStartFace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(first_i.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(item_i.GetNfaces() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex last_i = first_i + FaceIndex(item_i.GetNfaces());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j=0; j!=n_boundary_items; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == j) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFileItem item_j = m_boundary-&amp;gt;GetItems()[j];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex first_j = item_j.GetStartFace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(item_j.GetNfaces() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex last_j = first_j + FaceIndex(item_j.GetNfaces());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( (first_i &amp;gt;= first_j &amp;amp;&amp;amp; first_i &amp;lt; last_j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (last_i&amp;nbsp;&amp;nbsp;&amp;gt;&amp;nbsp;&amp;nbsp;first_j &amp;amp;&amp;amp; last_i&amp;nbsp;&amp;nbsp;&amp;lt; last_j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (first_j &amp;gt;= first_i &amp;amp;&amp;amp; first_j &amp;lt; last_i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (last_j&amp;nbsp;&amp;nbsp;&amp;gt;&amp;nbsp;&amp;nbsp;first_i &amp;amp;&amp;amp; last_j&amp;nbsp;&amp;nbsp;&amp;lt; last_i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*m_boundary);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Error in 'boundary' file in these items:\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item_i &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item_j &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "Face index ranges overlap: "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "[" &amp;lt;&amp;lt; first_i &amp;lt;&amp;lt; "," &amp;lt;&amp;lt; last_i &amp;lt;&amp;lt; "&amp;gt; and "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "[" &amp;lt;&amp;lt; first_j &amp;lt;&amp;lt; "," &amp;lt;&amp;lt; last_j &amp;lt;&amp;lt; "&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("CheckMe: 'faces' files: point indices must be valid");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const FacesFileItem&amp;amp; item: m_faces-&amp;gt;GetItems())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const PointIndex&amp;amp; index: item.GetPointIndices())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (index &amp;gt;= n_points)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Error in 'faces' file in this item:\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "point index (" &amp;lt;&amp;lt; index &amp;lt;&amp;lt; ") beyond number of points (" &amp;lt;&amp;lt; n_points &amp;lt;&amp;lt; ")"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(s.str());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const bool do_check_doubles = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (do_check_doubles)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("CheckMe: 'faces' files: detect doublures: START");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (FaceIndex i = FaceIndex(0); i!=n_faces; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointIndex&amp;gt; v_i { m_faces-&amp;gt;GetItem(i).GetPointIndices() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::sort(v_i.begin(),v_i.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (FaceIndex j = FaceIndex(0); j!=n_faces; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == j) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointIndex&amp;gt; v_j { m_faces-&amp;gt;GetItem(j).GetPointIndices() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::sort(v_j.begin(),v_j.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (v_i == v_j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Error in 'faces' file in these items:\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "Item " &amp;lt;&amp;lt; i &amp;lt;&amp;lt; ": " &amp;lt;&amp;lt; m_faces-&amp;gt;GetItem(i) &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "Item " &amp;lt;&amp;lt; j &amp;lt;&amp;lt; ": " &amp;lt;&amp;lt; m_faces-&amp;gt;GetItem(j) &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "Faces at index " &amp;lt;&amp;lt; i &amp;lt;&amp;lt; " and " &amp;lt;&amp;lt; j &amp;lt;&amp;lt; " consist of the same Point indices";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(s.str());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("CheckMe: 'faces' files: detect doublures: SKIP");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("CheckMe: 'owner' files");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_owner-&amp;gt;GetItems().size() != m_faces-&amp;gt;GetItems().size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "The file 'owner' has a different amount of faces than 'faces':\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "'faces' has " &amp;lt;&amp;lt; m_faces-&amp;gt;GetItems().size()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ", where 'owner' has " &amp;lt;&amp;lt; m_owner-&amp;gt;GetItems().size()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef SURE_THIS_CODE_CANNOT_BE_REUSED_20131212&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Faces that have the same owner (which is a cell index) are member of the same cell&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Each point index of all faces must be present at least one times: at least three faces are&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//needed at each vertex to form an enclosing/non-leaking cell surface, yet not all faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//are owned by each cell&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Because each point index must be present once, it has no use collecting these&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::map&amp;lt;CellIndex,std::multiset&amp;lt;PointIndex&amp;gt;&amp;gt; m;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (FaceIndex face_index = FaceIndex(0); face_index!=n_faces; ++face_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find the point indices of this face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointIndex&amp;gt; p { m_faces-&amp;gt;GetItem(face_index).GetPointIndices() };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find the owner of this face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex c { m_owner-&amp;gt;GetItem(face_index).GetCellIndex() };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Add the combination to m&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m.find(c) == m.end()) { m.insert(std::make_pair(c,std::multiset&amp;lt;PointIndex&amp;gt;())); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.find(c) != m.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::copy(p.begin(),p.end(),std::inserter(m.find(c)-&amp;gt;second,m.find(c)-&amp;gt;second.begin()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check that each point index is present at least twice&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const std::pair&amp;lt;CellIndex,std::multiset&amp;lt;PointIndex&amp;gt;&amp;gt;&amp;amp; s: m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const PointIndex&amp;amp; i: s.second)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int count = s.second.count(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (count &amp;lt; 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*m_owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*m_faces);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream str;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;str&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "Error in 'owner' and 'faces' file combination:\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "The file 'owner' has faces owned by the same cell,"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "of which these faces do not cover each vertex with at least two times\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "In this case, cell index " &amp;lt;&amp;lt; s.first&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; " its faces have a point index " &amp;lt;&amp;lt; i &amp;lt;&amp;lt; " that is only a member of "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; count &amp;lt;&amp;lt; " faces"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error(str.str());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("CheckMe finished successfully");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::BoundaryFile&amp;gt; ribi::foam::Files::CreateBoundary(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; folder_name)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; (__func__) &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ribi::fileio::IsFolder(folder_name));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(folder_name.empty() ? folder_name : folder_name + fileio::GetPathSeperator())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ CreateFilenames()-&amp;gt;GetBoundary().Get()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!fileio::IsRegularFile(filename))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("BREAK");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::ifstream is(filename.Get().c_str());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::foam::BoundaryFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::foam::BoundaryFile(filename.Get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch(std::runtime_error&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "File '" &amp;lt;&amp;lt; filename &amp;lt;&amp;lt; "' is not an OpenFOAM 'boundary' file: "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; e.what();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::runtime_error(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Files::CreateCopy(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::foam::Files&amp;amp; files,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string copy_folder_name) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (fileio::IsFolder(copy_folder_name))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(copy_folder_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!fileio::IsFolder(copy_folder_name)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Cannot make a copy in an existing folder");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CreateFolders(copy_folder_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//boundary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string destination_path {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy_folder_name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ BoundaryFile::GetDefaultHeader().GetLocation()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ BoundaryFile::GetDefaultHeader().GetObject()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::ofstream f(destination_path.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f &amp;lt;&amp;lt; *files.GetBoundary();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string destination_path {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy_folder_name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ FacesFile::GetDefaultHeader().GetLocation()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ FacesFile::GetDefaultHeader().GetObject()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::ofstream f(destination_path.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f &amp;lt;&amp;lt; *files.GetFaces();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//neighbour&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string destination_path {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy_folder_name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ NeighbourFile::GetDefaultHeader().GetLocation()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ NeighbourFile::GetDefaultHeader().GetObject()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::ofstream f(destination_path.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f &amp;lt;&amp;lt; *files.GetNeighbour();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//owner&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string destination_path {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy_folder_name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ OwnerFile::GetDefaultHeader().GetLocation()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ OwnerFile::GetDefaultHeader().GetObject()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::ofstream f(destination_path.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f &amp;lt;&amp;lt; *files.GetOwner();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string destination_path {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy_folder_name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ PointsFile::GetDefaultHeader().GetLocation()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ PointsFile::GetDefaultHeader().GetObject()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::ofstream f(destination_path.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f &amp;lt;&amp;lt; *files.GetPoints();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Files(copy_folder_name) == files&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Resulting Files must be same");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (std::runtime_error&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(e.what());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Resulting Files must be same");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::BoundaryFile&amp;gt; ribi::foam::Files::CreateDefaultBoundary() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new BoundaryFile&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::FacesFile&amp;gt; ribi::foam::Files::CreateDefaultFaces() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;FacesFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new FacesFile&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::NeighbourFile&amp;gt; ribi::foam::Files::CreateDefaultNeighbour() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new NeighbourFile&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::OwnerFile&amp;gt; ribi::foam::Files::CreateDefaultOwner() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new OwnerFile&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::PointsFile&amp;gt; ribi::foam::Files::CreateDefaultPoints() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;PointsFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new PointsFile&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::FacesFile&amp;gt; ribi::foam::Files::CreateFaces(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; folder_name)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; (__func__) &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ribi::fileio::IsFolder(folder_name));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(folder_name.empty() ? folder_name : folder_name + fileio::GetPathSeperator())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ CreateFilenames()-&amp;gt;GetFaces().Get()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::ifstream is(filename.Get().c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::foam::FacesFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::foam::FacesFile(filename.Get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::Filenames&amp;gt; ribi::foam::Files::CreateFilenames() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::foam::Filenames&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Filenames&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Files::CreateFolders(const std::string&amp;amp; folder_name)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s { fileio::GetPathSeperator() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string f { folder_name + s + std::string("constant") };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!fileio::IsFolder(f)) { fileio::CreateFolder(f); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsFolder(f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string s { fileio::GetPathSeperator() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string f { folder_name + s + std::string("constant") + s + std::string("polyMesh") };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!fileio::IsFolder(f)) { fileio::CreateFolder(f); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsFolder(f));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::NeighbourFile&amp;gt; ribi::foam::Files::CreateNeighbour(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; folder_name)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; (__func__) &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ribi::fileio::IsFolder(folder_name));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(folder_name.empty() ? folder_name : folder_name + fileio::GetPathSeperator())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ CreateFilenames()-&amp;gt;GetNeighbour().Get()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::ifstream is(filename.Get().c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::foam::NeighbourFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::foam::NeighbourFile(filename.Get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::OwnerFile&amp;gt; ribi::foam::Files::CreateOwner(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; folder_name)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; (__func__) &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ribi::fileio::IsFolder(folder_name));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(folder_name.empty() ? folder_name : folder_name + fileio::GetPathSeperator())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ CreateFilenames()-&amp;gt;GetOwner().Get()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::foam::OwnerFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::foam::OwnerFile(filename.Get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::ifstream is(filename.Get().c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const boost::shared_ptr&amp;lt;ribi::foam::OwnerFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;new ribi::foam::OwnerFile(is)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::PointsFile&amp;gt; ribi::foam::Files::CreatePoints(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; folder_name)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; (__func__) &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ribi::fileio::IsFolder(folder_name));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::fileio::Filename filename(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(folder_name.empty() ? folder_name : folder_name + fileio::GetPathSeperator())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ CreateFilenames()-&amp;gt;GetPoints().Get()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::ifstream is(filename.Get().c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;ribi::foam::PointsFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::foam::PointsFile(filename.Get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Files&amp;gt;&amp;gt; ribi::foam::Files::CreateTestFiles() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Files&amp;gt;&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Files&amp;gt; files {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Files&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(files);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(files);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Complex from resources&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=5; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string folder_name = ribi::fileio::GetTempFolderName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateTestFiles(folder_name,i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Files&amp;gt; files {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Files(folder_name)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(files);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(files);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::fileio::DeleteFolder(folder_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Files::CreateTestFiles(const std::string&amp;amp; folder_name, const int test_index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(test_index &amp;gt;= 0 &amp;amp;&amp;amp; test_index &amp;lt; 5);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CreateFolders(folder_name);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read from testing file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const std::string filename_base:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFile::GetDefaultHeader().GetObject(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFile::GetDefaultHeader().GetObject(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFile::GetDefaultHeader().GetObject(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFile::GetDefaultHeader().GetObject(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFile::GetDefaultHeader().GetObject()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: filename_appendix = "_1x1x1"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: filename_appendix = "_1x1x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: filename_appendix = "_1x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: filename_appendix = "_2x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 4: filename_appendix = "_3x4x5"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should never get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("foam::Files::CreateTestFiles: unknown test index");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!filename_appendix.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename = filename_base + filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string resources_path { ":/CppOpenFoam/files/" + filename };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string destination_path {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;folder_name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "constant"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ "polyMesh"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ fileio::GetPathSeperator()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ filename_base&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QFile f(resources_path.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.copy(destination_path.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(destination_path));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Files::Swap(const ribi::foam::FaceIndex&amp;amp; lhs, const ribi::foam::FaceIndex&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(lhs != rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Boundary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Cleanest interface I could think of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//m_boundary-&amp;gt;Swap(lhs,rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;int&amp;gt; lhs_n_faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m_boundary-&amp;gt;CanGetItem(lhs))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lhs_n_faces.reset(new int(m_boundary-&amp;gt;Find(lhs).GetNfaces()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;int&amp;gt; rhs_n_faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryIndex lhs_boundary_index = m_boundary-&amp;gt;GetItem(lhs).GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryIndex rhs_boundary_index = m_owner-&amp;gt;GetItem(rhs).GetCellIndex();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Set swapped&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner-&amp;gt;SetItem(lhs,OwnerFileItem(rhs_cell_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner-&amp;gt;SetItem(rhs,OwnerFileItem(lhs_cell_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp; */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Neighbour&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Can only swap two cellIndices when either both of them are absent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//(both cells are boundary cells)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//or both of them are present&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//(both cells are non-boundary cells)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool lhs_is_boundary = m_neighbour-&amp;gt;CanGetItem(lhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const bool rhs_is_boundary = m_neighbour-&amp;gt;CanGetItem(rhs);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(lhs_is_boundary == rhs_is_boundary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Can only swap two boundary or two non-boundary faces");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lhs_is_boundary != rhs_is_boundary)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("Can only swap two boundary or two non-boundary faces");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lhs_is_boundary)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(rhs_is_boundary);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Done! Boundary cells have no neighbours&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex lhs_cell_index = m_neighbour-&amp;gt;GetItem(lhs).GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex rhs_cell_index = m_neighbour-&amp;gt;GetItem(rhs).GetCellIndex();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Set swapped&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_neighbour-&amp;gt;SetItem(lhs,NeighbourFileItem(rhs_cell_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_neighbour-&amp;gt;SetItem(rhs,NeighbourFileItem(lhs_cell_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Owner&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex lhs_cell_index = m_owner-&amp;gt;GetItem(lhs).GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex rhs_cell_index = m_owner-&amp;gt;GetItem(rhs).GetCellIndex();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Set swapped&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner-&amp;gt;SetItem(lhs,OwnerFileItem(rhs_cell_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_owner-&amp;gt;SetItem(rhs,OwnerFileItem(lhs_cell_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::Files::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::Files::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files f;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f == f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files g;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f == g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(g == f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(g == g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files f;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f == f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files g;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f == g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(g == f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(g == g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Files&amp;gt;&amp;gt; v { Files::CreateTestFiles() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t j=0; j!=sz; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i == j) { assert(v[i] == v[j]); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i != j) { assert(v[i] != v[j]); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//CreateCopy&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int test_index=0; test_index!=5; ++test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string temp_folder_source = ribi::fileio::GetTempFolderName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::fileio::IsFolder(temp_folder_source));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateTestFiles(temp_folder_source,test_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files source(temp_folder_source);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string temp_folder_target = ribi::fileio::GetTempFolderName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Files::CreateCopy(source,temp_folder_target);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files target(temp_folder_target);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(source == target);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::fileio::DeleteFolder(temp_folder_source);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::fileio::DeleteFolder(temp_folder_target);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Swap faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string temp_folder = ribi::fileio::GetTempFolderName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::fileio::IsFolder(temp_folder));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateTestFiles(temp_folder,3); //3 = 2x2x2 cubes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files f(temp_folder);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f == f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Files g(temp_folder);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f == g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(g == f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(g == g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex i(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex j(11);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;g.Swap(i,j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(g != f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f != g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;g.Swap(i,j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(f == g);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::fileio::DeleteFolder(temp_folder);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!ribi::fileio::IsFolder(temp_folder));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Files::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const ribi::foam::Files&amp;amp; lhs, const ribi::foam::Files&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Split function for ease in debugging&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetBoundary()!= *rhs.GetBoundary())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Boundaries differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*lhs.GetBoundary());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*rhs.GetBoundary());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetFaces() != *rhs.GetFaces())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Faces differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*lhs.GetFaces());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*rhs.GetFaces());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetNeighbour() != *rhs.GetNeighbour())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Neighbours differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*lhs.GetNeighbour());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*rhs.GetNeighbour());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetOwner() != *rhs.GetOwner())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Owners differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*lhs.GetOwner());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*rhs.GetOwner());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (*lhs.GetPoints() != *rhs.GetPoints())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Points differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*lhs.GetPoints());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(*rhs.GetPoints());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const ribi::foam::Files&amp;amp; lhs, const ribi::foam::Files&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Files&amp;amp; files)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; (*files.GetBoundary()) &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; (*files.GetFaces())&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; (*files.GetNeighbour()) &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; (*files.GetOwner())&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; (*files.GetPoints())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfiles.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfiles.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMFILES_H&lt;br/&gt;
#define OPENFOAMFILES_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Files contains the info of all files in an OpenFOAM folder&lt;br/&gt;
///This info can be used to create a Mesh&lt;br/&gt;
///After creating a Files, these files can be deleted&lt;br/&gt;
///Use CreateCopy to let these files be recreated again&lt;br/&gt;
struct Files&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Builds up Files from the current or any folder&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Use an empty string to build up from current folder&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Files(const std::string&amp;amp; folder_name)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: Files(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateBoundary(folder_name),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateFaces(folder_name),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateNeighbour(folder_name),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateOwner(folder_name),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreatePoints(folder_name)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) { }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Builds up a Files from its information or from nothing&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Files(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; boundary = CreateDefaultBoundary(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;FacesFile&amp;gt; faces = CreateDefaultFaces(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; neighbour = CreateDefaultNeighbour(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; owner = CreateDefaultOwner(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;PointsFile&amp;gt; points = CreateDefaultPoints()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Files(const Files&amp;amp; other);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Files&amp;amp; operator=(const Files&amp;amp; rhs) = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a copy of the complete file structure of Files in the copy folder name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void CreateCopy(const Files&amp;amp; files, const std::string copy_folder_name) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create test files in the correct OpenFOAM folder structure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///These files are obtained from the /Classes/CppOpenFoam/CppOpenFoam.qrc resources file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void CreateTestFiles(const std::string&amp;amp; folder_name, const int test_index);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create valid test Files&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///0: empty Files&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///1: Cube&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///2: 1x2 cubes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///3: 2x2 cubes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Files&amp;gt;&amp;gt; CreateTestFiles() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const BoundaryFile&amp;gt; GetBoundary() const noexcept { return m_boundary; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const FacesFile&amp;gt; GetFaces() const noexcept { return m_faces; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const NeighbourFile&amp;gt; GetNeighbour() const noexcept { return m_neighbour; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const OwnerFile&amp;gt; GetOwner() const noexcept { return m_owner; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const PointsFile&amp;gt; GetPoints() const noexcept { return m_points; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Swap(const FaceIndex&amp;amp; lhs, const FaceIndex&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; m_boundary;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;FacesFile&amp;gt; m_faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; m_neighbour;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; m_owner;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;PointsFile&amp;gt; m_points;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Checks this class for correctless&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Throws std::logic_error if there are incorrectnesses&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void CheckMe() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; CreateBoundary(const std::string&amp;amp; folder_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; CreateDefaultBoundary() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;FacesFile&amp;gt; CreateDefaultFaces() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; CreateDefaultNeighbour() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; CreateDefaultOwner() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;PointsFile&amp;gt; CreateDefaultPoints() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;FacesFile&amp;gt; CreateFaces(const std::string&amp;amp; folder_name);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Creates the folder structure needed by OpenFOAM&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void CreateFolders(const std::string&amp;amp; folder_name);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Filenames&amp;gt; CreateFilenames() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; CreateNeighbour(const std::string&amp;amp; folder_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; CreateOwner(const std::string&amp;amp; folder_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;PointsFile&amp;gt; CreatePoints(const std::string&amp;amp; folder_name);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
///Write all info to a single stream. Use CreateCopy to write all info&lt;br/&gt;
///to an OpenFOAM folder structure with multiple files&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Files&amp;amp; files);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Files&amp;amp; lhs, const Files&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Files&amp;amp; lhs, const Files&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMFILES_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamfwd.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamfwd.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMFWD_H&lt;br/&gt;
#define OPENFOAMFWD_H&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
struct Coordinat3D;&lt;br/&gt;
&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
struct Boundary;&lt;br/&gt;
struct BoundaryFile;&lt;br/&gt;
struct BoundaryFileItem;&lt;br/&gt;
struct BoundaryIndex;&lt;br/&gt;
struct Cell;&lt;br/&gt;
struct CellIndex;&lt;br/&gt;
struct Face;&lt;br/&gt;
struct FaceIndex;&lt;br/&gt;
struct FacesFile;&lt;br/&gt;
struct FacesFileItem;&lt;br/&gt;
struct Filenames;&lt;br/&gt;
struct Files;&lt;br/&gt;
struct Header;&lt;br/&gt;
struct Mesh;&lt;br/&gt;
struct NeighbourFile;&lt;br/&gt;
struct NeighbourFileItem;&lt;br/&gt;
struct OwnerFile;&lt;br/&gt;
struct OwnerFileItem;&lt;br/&gt;
struct PointIndex;&lt;br/&gt;
struct PointsFile;&lt;br/&gt;
struct PointsFileItem;&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMFWD_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamheader.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamheader.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamheader.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;ostream&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Header::Header(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; class_name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; location,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; note,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; object&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_class_name(class_name),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_location(location),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_note(note),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_object(object)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (location.empty() || location[0] != '\"' )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A location may not start with a quotation mark"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (location.empty() || location[ location.size() - 1 ] != '\"' )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A location may not end with a quotation mark"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Header::CleanFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; filename) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if(!fileio::IsRegularFile(filename))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//v is dirty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v { fileio::FileToVector(filename) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//w will be clean&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(v.begin(),v.end(),std::back_inserter(w),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](std::string s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::replace(s.begin(),s.end(),'\t',' ');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::algorithm::trim(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s.size() &amp;gt;= 2 &amp;amp;&amp;amp; s.substr(0,2) == "//") s = std::string();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//w is clean&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::VectorToFile(w,filename,fileio::CopyMode::allow_overwrite);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::Header::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::Header::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header h("some_name","some_location","some_note","some_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; h;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (h != i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(h);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(h == i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Header::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const ribi::foam::Header&amp;amp; lhs, const ribi::foam::Header&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetClass() != rhs.GetClass())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Classes differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(lhs.GetClass());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(rhs.GetClass());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Compare location independent of OS path seperator&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string lhs_location = lhs.GetLocation();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string rhs_location = rhs.GetLocation();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::replace(lhs_location.begin(),lhs_location.end(),'\\','/');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::replace(rhs_location.begin(),rhs_location.end(),'\\','/');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lhs_location != rhs_location)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Locations differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(lhs.GetLocation());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(rhs.GetLocation());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetObject() != rhs.GetObject())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE("Object differ:");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(lhs.GetObject());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(rhs.GetObject());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const ribi::foam::Header&amp;amp; lhs, const ribi::foam::Header&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Header&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "FoamFile" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "{" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;" &amp;lt;&amp;lt; "2.0"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;&amp;lt; ";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp; " &amp;lt;&amp;lt; "ascii"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;&amp;lt; ";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" &amp;lt;&amp;lt; f.GetClass()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;location \"" &amp;lt;&amp;lt; f.GetLocation() &amp;lt;&amp;lt; "\";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp; " &amp;lt;&amp;lt; f.GetObject()&amp;nbsp;&amp;nbsp; &amp;lt;&amp;lt; ";\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "}" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, Header&amp;amp; h)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string title;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; title;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (title != "FoamFile")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(title.size() &amp;gt;= 2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Eat comment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (title.substr(0,2) == std::string("/*"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (s.size() &amp;lt; 2 || s.substr(s.size()-2,2) != std::string("*/"))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Try reading title after comment again&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; title;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (title != "FoamFile")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "Stream incorrectly assumed to be an OpenFOAM header. "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "OpenFOAM header start with 'FoamFile'. "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "This file starts with&amp;nbsp;&amp;nbsp;'"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; title &amp;lt;&amp;lt; "' instead";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::runtime_error(s.str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_open == "{");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s == "version")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(t == "2.0;"&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (s == "format" )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(t == "ascii;");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (s == "class"&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string class_name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; class_name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(class_name.back() == ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class_name.pop_back();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(class_name.back() != ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h.m_class_name = class_name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (s == "location")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string location;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; location;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(location.size() &amp;gt; 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(location[0] == '\"');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(location[ location.size() - 2] == '\"');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(location[ location.size() - 1] == ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location = location.substr(1,location.size() - 3);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (location.empty() || location[0] != '\"' )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A location may not start with a quotation mark"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (location.empty() || location[ location.size() - 1 ] != '\"' )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A location may not end with a quotation mark"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (location.empty() || location[ location.size() - 1 ] != ';' )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A location may not end with a semicolon"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h.m_location = location;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (s == "note")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Read until ;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!s.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (s.back() != ';')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s += t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.back() == ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.pop_back();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.back() != ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h.m_note = s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (s == "object")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string object;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; object;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(object.back() == ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object.pop_back();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(object.back() != ';');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h.m_object = object;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (s == "}")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamheader.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamheader.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMHEADER_H&lt;br/&gt;
#define OPENFOAMHEADER_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///The header that is above all OpenFoam files&lt;br/&gt;
struct Header&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///In order of appearance in the text&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit Header(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; class_name = "",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; location&amp;nbsp;&amp;nbsp; = "",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = "",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = ""&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Remove comments from a file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void CleanFile(const std::string&amp;amp; filename) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetClass() const noexcept { return m_class_name; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetLocation() const noexcept { return m_location; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetNote() const noexcept { return m_note; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; GetObject() const noexcept { return m_object; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///A header consists out of multiple lines&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(1) header name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(2) bracket open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(3) version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(4) format&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(5) class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(6) location&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(7) object&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(8) bracket close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetNumberOfLines() const noexcept { return 8; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_class_name;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_location;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_note;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string m_object;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, Header&amp;amp; h);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Header&amp;amp; lhs, const Header&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Header&amp;amp; lhs, const Header&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Header&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
///Read the header of an OpenFOAM file.&lt;br/&gt;
///Throws std::runtime_error if file is incorrectly formed&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, Header&amp;amp; h);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMHEADER_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoammesh.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoammesh.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoammesh.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;ostream&amp;gt;&lt;br/&gt;
#include &amp;lt;map&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "openfoamboundary.h"&lt;br/&gt;
#include "openfoamboundaryfile.h"&lt;br/&gt;
#include "openfoamboundaryfileitem.h"&lt;br/&gt;
#include "openfoamboundaryindex.h"&lt;br/&gt;
#include "openfoamcell.h"&lt;br/&gt;
#include "openfoamface.h"&lt;br/&gt;
#include "openfoamfacesfile.h"&lt;br/&gt;
#include "openfoamfiles.h"&lt;br/&gt;
#include "helper.h"&lt;br/&gt;
#include "openfoamneighbourfile.h"&lt;br/&gt;
#include "openfoamownerfile.h"&lt;br/&gt;
#include "openfoampoint.h"&lt;br/&gt;
#include "openfoampointsfile.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Mesh::Mesh(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Boundary&amp;gt;&amp;gt;&amp;amp; boundaries,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Cell&amp;gt;&amp;gt;&amp;amp; cells,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;&amp;amp; faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;&amp;amp; points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_boundaries(boundaries),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cells(cells),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces(faces),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points(points)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Face&amp;gt; face: m_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face-&amp;gt;GetOwner());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (face-&amp;gt;GetNeighbour() || !face-&amp;gt;GetNeighbour() )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "internalMesh faces have a neighbour, defaultWall faces don't"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!AreFacesOrdered())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::cout &amp;lt;&amp;lt; "Reordering faces" &amp;lt;&amp;lt; std::endl;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ReorderFaces();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(AreFacesOrdered());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Files f(this-&amp;gt;CreateFiles());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.GetFaces()-&amp;gt;GetItems().size() == faces.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.GetBoundary()-&amp;gt;GetItems().size() == boundaries.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.GetPoints()-&amp;gt;GetItems().size() == points.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Mesh::Mesh(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Files&amp;amp; files,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;&amp;amp; points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_boundaries{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cells{CreateEmptyCells(files)},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces{CreateFacesWithPoints(files,points)},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points(points)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add Cell owner to Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m_cells.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex n_faces = files.GetFaces()-&amp;gt;GetMaxFaceIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (FaceIndex i = FaceIndex(0); i!=n_faces; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex owner_cell_index { files.GetOwner()-&amp;gt;GetItem(i).GetCellIndex() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (owner_cell_index.Get() &amp;gt;= static_cast&amp;lt;int&amp;gt;(m_cells.size()))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(owner_cell_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(m_cells.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(owner_cell_index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(owner_cell_index.Get() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_cells.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_cells[ owner_cell_index.Get() ]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; owner { m_cells[ owner_cell_index.Get() ] };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m_faces[i.Get()]-&amp;gt;GetOwner() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces[i.Get()]-&amp;gt;AssignOwner(owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( m_faces[i.Get()]-&amp;gt;GetOwner() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Face&amp;gt; face: m_faces) { assert(face); assert(face-&amp;gt;GetOwner()); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add owned Faces to Cells&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::map&amp;lt;boost::shared_ptr&amp;lt;Cell&amp;gt;,std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;&amp;gt; m;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Face&amp;gt; face: m_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; owner { face-&amp;gt;GetOwner() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//if (!owner) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m.find(owner) == m.end()) { m.insert(std::make_pair(owner, std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;() ) ); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.find(owner) != m.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(*m.find(owner)).second.push_back(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (auto p: m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.first-&amp;gt;AssignOwnedFaces(p.second);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Add neighbours to Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_faces = static_cast&amp;lt;int&amp;gt;(m_faces.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_faces; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex index(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(files.GetNeighbour());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Not all Faces have a neighbour&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!files.GetNeighbour()-&amp;gt;CanGetItem(index)) continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(files.GetNeighbour()-&amp;gt;CanGetItem(index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex neighbour_index {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;files.GetNeighbour()-&amp;gt;GetItem(index).GetCellIndex()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;lt; static_cast&amp;lt;int&amp;gt;(m_faces.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(neighbour_index.Get() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_cells.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m_faces[i]-&amp;gt;GetNeighbour());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces[i]-&amp;gt;AssignNeighbour( m_cells[ neighbour_index.Get() ] );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_faces[i]-&amp;gt;GetNeighbour());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Assign boundaries&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_boundaries = CreateBoundaries(files,m_faces);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;Cell&amp;gt; cell: m_cells)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(cell);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//assert( (cell-&amp;gt;GetNeighbour() || !cell-&amp;gt;GetNeighbour())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Not all cells have a neighbour, for example in a 1x1x1 mesh");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (GetNumberOfBoundaries() != files.GetBoundary()-&amp;gt;GetMaxBoundaryIndex().Get())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(GetNumberOfBoundaries());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(files.GetBoundary()-&amp;gt;GetMaxBoundaryIndex());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetNumberOfBoundaries() == files.GetBoundary()-&amp;gt;GetMaxBoundaryIndex().Get());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetNumberOfFaces() == files.GetFaces()-&amp;gt;GetMaxFaceIndex().Get());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::Mesh::AreFacesOrdered() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Boundary&amp;gt; boundary: m_boundaries)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!boundary-&amp;gt;GetFaces().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_faces {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(boundary-&amp;gt;GetFaces().size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_faces &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Determine the start face: at which indices are the Faces in m_faces?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; indices;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(boundary-&amp;gt;GetFaces().begin(),boundary-&amp;gt;GetFaces().end(),std::back_inserter(indices),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const boost::shared_ptr&amp;lt;Face&amp;gt; face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;::const_iterator iter {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::find(m_faces.begin(),m_faces.end(),face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(iter != m_faces.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index = std::distance(m_faces.begin(),iter);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;lt; static_cast&amp;lt;int&amp;gt;(m_faces.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!indices.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(indices.size() == boundary-&amp;gt;GetFaces().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::sort(indices.begin(),indices.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_indices = indices.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n_indices &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=1; i!=n_indices; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(indices[i-1] != indices[i]&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "All face indices must be unique");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (indices[i-1] + 1 != indices[i])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
double ribi::foam::Mesh::CalcSimilarityFaster(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; w) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() != w.size()) return std::numeric_limits&amp;lt;double&amp;gt;::max();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Sum all coordinats, distance equals the distance between the center points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat3D a = std::accumulate(v.begin(),v.end(),Coordinat3D(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const Coordinat3D&amp;amp; init, const boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return init + (*c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//for (const boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; c: v) { a += (*c); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat3D b = std::accumulate(w.begin(),w.end(),Coordinat3D());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Distance(a,b);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
double ribi::foam::Mesh::CalcSimilaritySlow(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; w) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() != w.size()) return std::numeric_limits&amp;lt;double&amp;gt;::max();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double distance {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::accumulate(v.begin(),v.end(),0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[w](const double init,const ribi::Coordinat3D&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find the closest coordinat in w to c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;::const_iterator closest {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::min_element(w.begin(),w.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[c](const ribi::Coordinat3D&amp;amp; lhs, const ribi::Coordinat3D&amp;amp; rhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Distance(lhs,c) &amp;lt; Distance(rhs,c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return init + Distance(c,*closest);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return distance;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
double ribi::foam::Mesh::CalcSimilaritySlow(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; w) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() != w.size()) return std::numeric_limits&amp;lt;double&amp;gt;::max();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double distance {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::accumulate(v.begin(),v.end(),0.0,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[w](const double init,const boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt;&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Find the closest coordinat in w to c&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;::const_iterator closest {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::min_element(w.begin(),w.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[c](const ribi::Coordinat3D&amp;amp; lhs, const ribi::Coordinat3D&amp;amp; rhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Distance(lhs,*c) &amp;lt; Distance(rhs,*c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return init + Distance(*c,*closest);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return distance;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Boundary&amp;gt; &amp;gt; ribi::foam::Mesh::CreateBoundaries(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Files&amp;amp; files,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;&amp;amp; all_faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(files.GetFaces()-&amp;gt;GetMaxFaceIndex().Get() == static_cast&amp;lt;int&amp;gt;(all_faces.size()));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Boundary&amp;gt;&amp;gt; boundaries;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const BoundaryIndex n_boundaries = files.GetBoundary()-&amp;gt;GetMaxBoundaryIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (BoundaryIndex i = BoundaryIndex(0); i!=n_boundaries; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFileItem&amp;amp; item { files.GetBoundary()-&amp;gt;GetItem(i) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string name = item.GetName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string type = item.GetType();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt; &amp;gt; faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex end_face { item.GetEndFace() } ;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (FaceIndex face_index = item.GetStartFace(); face_index!=end_face; ++face_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int fi = face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fi &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fi &amp;lt; static_cast&amp;lt;int&amp;gt;(all_faces.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces.push_back(all_faces[fi]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Face belongs to Boundary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Boundary&amp;gt; boundary {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Boundary(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundaries.push_back(boundary);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boundaries;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::BoundaryFile&amp;gt; ribi::foam::Mesh::CreateBoundary() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;BoundaryFileItem&amp;gt; items;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Boundary&amp;gt; boundary: m_boundaries)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!boundary-&amp;gt;GetFaces().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_faces {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;int&amp;gt;(boundary-&amp;gt;GetFaces().size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_faces &amp;gt; 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Determine the start face: at which indices are the Faces in m_faces?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;int&amp;gt; indices;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(boundary-&amp;gt;GetFaces().begin(),boundary-&amp;gt;GetFaces().end(),std::back_inserter(indices),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const boost::shared_ptr&amp;lt;Face&amp;gt; face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;::const_iterator iter {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::find(m_faces.begin(),m_faces.end(),face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(iter != m_faces.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index = std::distance(m_faces.begin(),iter);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;lt; static_cast&amp;lt;int&amp;gt;(m_faces.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!indices.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(indices.size() == boundary-&amp;gt;GetFaces().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::sort(indices.begin(),indices.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_indices = indices.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n_indices &amp;gt; 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i=1; i!=n_indices; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(indices[i-1] != indices[i]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "All face indices must be unique");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (indices[i-1] + 1 != indices[i])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(indices[i-1] + 1 == indices[i]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "All face indices must be adjacent");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex n_start_face = FaceIndex(indices[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(n_start_face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const BoundaryFileItem item(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary-&amp;gt;GetName(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary-&amp;gt;GetType(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_start_face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; f {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new BoundaryFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoundaryFile::GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return f;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Cell&amp;gt; &amp;gt; ribi::foam::Mesh::CreateEmptyCells(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Files&amp;amp; files)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Cell&amp;gt; &amp;gt; cells;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const CellIndex n_cells = files.GetOwner()-&amp;gt;CountNumberOfCells();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n_cells == files.GetOwner()-&amp;gt;CountNumberOfCells());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(n_cells &amp;gt; CellIndex(0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (CellIndex i=CellIndex(0); i!=n_cells; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; cell(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Cell&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cells.push_back(cell);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!cells.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return cells;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::FacesFile&amp;gt; ribi::foam::Mesh::CreateFaces() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;FacesFileItem&amp;gt; items;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt;&amp;gt; faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(items),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const boost::shared_ptr&amp;lt;const Face&amp;gt; face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt; points {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face-&amp;gt;GetPoints()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointIndex&amp;gt; point_indices;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(points.begin(),points.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(point_indices),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; coordinat)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;::const_iterator iter {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::find(m_points.begin(),m_points.end(),coordinat)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(iter != m_points.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::distance(m_points.begin(),iter)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;lt; static_cast&amp;lt;int&amp;gt;(m_points.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return PointIndex(index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return FacesFileItem(point_indices);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;FacesFile&amp;gt; f {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new FacesFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FacesFile::GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return f;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Face&amp;gt;&amp;gt; ribi::foam::Mesh::CreateFacesWithPoints(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Files&amp;amp; files,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;&amp;amp; all_points)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex n_faces { files.GetFaces()-&amp;gt;GetMaxFaceIndex() };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; faces;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (FaceIndex i = FaceIndex(0); i!=n_faces; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointIndex&amp;gt; point_indices {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;files.GetFaces()-&amp;gt;GetItem(i).GetPointIndices()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt; points;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const PointIndex&amp;amp; point_index: point_indices)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(point_index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(point_index.Get() &amp;lt; static_cast&amp;lt;int&amp;gt;(all_points.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points.push_back(all_points[point_index.Get() ]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Face&amp;gt; face(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Face(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nullptr,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nullptr,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces.push_back(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(faces.size() == files.GetFaces()-&amp;gt;GetItems().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return faces;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::foam::Files ribi::foam::Mesh::CreateFiles() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; boundary {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateBoundary()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(boundary);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;FacesFile&amp;gt; faces {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateFaces()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(faces);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; neighbour {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateNeighbour()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(neighbour);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;OwnerFile&amp;gt; owner {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreateOwner()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;PointsFile&amp;gt; points {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CreatePoints()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(points);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Files f(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundary,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;neighbour,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owner,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return f;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::NeighbourFile&amp;gt; ribi::foam::Mesh::CreateNeighbour() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;NeighbourFileItem&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;Face&amp;gt; face: m_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::foam::Cell&amp;gt; neighbour { face-&amp;gt;GetNeighbour() };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (neighbour || !neighbour)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Not all cells have a neighbour, for example in a 1x1x1 mesh");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!neighbour) continue;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(m_cells.begin(),m_cells.end(),neighbour) != m_cells.end());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= std::distance(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_cells.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::find(m_cells.begin(),m_cells.end(),neighbour)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;lt; static_cast&amp;lt;int&amp;gt;(m_cells.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex cell_index(index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFileItem item(cell_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::foam::NeighbourFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new NeighbourFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFile::GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::OwnerFile&amp;gt; ribi::foam::Mesh::CreateOwner() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;OwnerFileItem&amp;gt; items;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(items),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const boost::shared_ptr&amp;lt;Face&amp;gt; face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; owner = face-&amp;gt;GetOwner();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const auto iter = std::find(m_cells.begin(),m_cells.end(),owner);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(iter != m_cells.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int index = static_cast&amp;lt;int&amp;gt;(std::distance(m_cells.begin(),iter));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(index &amp;lt; static_cast&amp;lt;int&amp;gt;(m_cells.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex cell_index(index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return OwnerFileItem(cell_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new OwnerFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFile::GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::foam::PointsFile&amp;gt; ribi::foam::Mesh::CreatePoints() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointsFileItem&amp;gt; items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_points.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(items),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; point)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(point);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return PointsFileItem(*point);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;PointsFile&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new PointsFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFile::GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; &amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::foam::Mesh::CreatePoints(const Files&amp;amp; files)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const PointsFileItem&amp;amp; item: files.GetPoints()-&amp;gt;GetItems())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_assert(std::is_same&amp;lt;PointsFileItem,Point&amp;gt;(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Point is a typedef for PointsFileItem"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::Coordinat3D(item.GetCoordinat())&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; ribi::foam::Mesh::FindMostSimilarFace(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; coordinats&lt;br/&gt;
&amp;nbsp;&amp;nbsp;) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the distance from focal coordinats to each face its coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;double&amp;gt; distances;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t sz = m_faces.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i &amp;lt; m_faces.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_faces[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const double distance = CalcSimilarityFaster(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AddConst(m_faces[i]-&amp;gt;GetPoints()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;coordinats&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(distance);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;distances.push_back(distance);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Find the most similar&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int index {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::distance(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;distances.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::min_element(distances.begin(),distances.end())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Return the face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; p {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces[index]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return p;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; &amp;gt; ribi::foam::Mesh::GetFaces() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::transform(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_faces.begin(),m_faces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(v),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](boost::shared_ptr&amp;lt;ribi::foam::Face&amp;gt; old_face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; new_face(old_face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(old_face == new_face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return new_face;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::foam::Mesh::GetNumberOfBoundaries() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return static_cast&amp;lt;int&amp;gt;(this-&amp;gt;m_boundaries.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::foam::Mesh::GetNumberOfCells() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return static_cast&amp;lt;int&amp;gt;(m_cells.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::foam::Mesh::GetNumberOfFaces() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return static_cast&amp;lt;int&amp;gt;(m_faces.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::foam::Mesh::GetNumberOfPoints() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return static_cast&amp;lt;int&amp;gt;(m_points.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::Mesh::ReorderFaces()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!this-&amp;gt;AreFacesOrdered());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::size_t n_boundaries = m_boundaries.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::size_t new_face_index = 0; //The index to put the next Face at&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (std::size_t i=0; i!=n_boundaries; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Boundary&amp;gt; boundary = m_boundaries[i];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t n_faces = boundary-&amp;gt;GetFaces().size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t j=0; j!=n_faces; ++j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j &amp;lt; boundary-&amp;gt;GetFaces().size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt; &amp;gt;::iterator here {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::find(m_faces.begin(),m_faces.end(),boundary-&amp;gt;GetFaces()[j])&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(here != m_faces.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t old_face_index = std::distance(m_faces.begin(),here);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(old_face_index &amp;gt;= new_face_index);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::swap(m_faces[old_face_index],m_faces[new_face_index]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++new_face_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;AreFacesOrdered());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::Mesh::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::Mesh::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if the number of boundary faces is correct&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::foam::Files&amp;gt;&amp;gt; v { Files::CreateTestFiles() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 6);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;int&amp;gt; n_internal_mesh_faces_expected { 0,0,1,4,12,133 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == n_internal_mesh_faces_expected.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_meshes = static_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int mesh_index = 0; mesh_index != n_meshes; ++mesh_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Mesh mesh(*v[mesh_index]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Face&amp;gt; &amp;gt; mesh_faces {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mesh.GetFaces()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n_internal {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::count_if(mesh_faces.begin(),mesh_faces.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const Face&amp;gt; face)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face-&amp;gt;GetOwner());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return face-&amp;gt;GetNeighbour(); //internal faces have a neighbour&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n_internal == n_internal_mesh_faces_expected[mesh_index]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Must have as much internal faces as expected"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//CalcSimilarity: empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;ribi::Coordinat3D&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CalcSimilarityFaster(v,w) &amp;lt; 0.001);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//CalcSimilarity: one point&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;ribi::Coordinat3D&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Coordinat3D c(1.1,2.2,3.3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; d {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::Coordinat3D(c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c == *d); //Exact comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Distance(c,*d) &amp;lt; 0.0000001); //Fuzzier comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CalcSimilarityFaster(v,w) &amp;lt; 0.001);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//CalcSimilarity: two points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;ribi::Coordinat3D&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Coordinat3D c(1.1,2.2,3.3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; d {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::Coordinat3D(c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c == *d); //Exact comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Distance(c,*d) &amp;lt; 0.0000001); //Fuzzier comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Coordinat3D c(2.2,3.3,4.4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; d {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::Coordinat3D(c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c == *d); //Exact comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Distance(c,*d) &amp;lt; 0.0000001); //Fuzzier comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CalcSimilarityFaster(v,w) &amp;lt; 0.001);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//CalcSimilarity: one versus two points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;ribi::Coordinat3D&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Coordinat3D c(1.1,2.2,3.3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; d {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ribi::Coordinat3D(c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c == *d); //Exact comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(Distance(c,*d) &amp;lt; 0.0000001); //Fuzzier comparison&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const ribi::Coordinat3D c(2.2,3.3,4.4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(CalcSimilarityFaster(v,w) &amp;gt; 1000000000.0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Find most similar Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Handcraft Faces, put these in mesh&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//For the Points, I used the same setup as in Classes/CppOpenFoam/points_1x1x1:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 8((0 0 0) (1 0 0) (0 1 0) (1 1 0) (0 0 1) (1 0 1) (0 1 1) (1 1 1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The order of points is determined by blockMesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p0 { new ribi::Coordinat3D(0.0,0.0,0.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p1 { new ribi::Coordinat3D(1.0,0.0,0.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p2 { new ribi::Coordinat3D(0.0,1.0,0.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p3 { new ribi::Coordinat3D(1.0,1.0,0.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p4 { new ribi::Coordinat3D(0.0,0.0,1.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p5 { new ribi::Coordinat3D(1.0,0.0,1.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p6 { new ribi::Coordinat3D(0.0,1.0,1.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; p7 { new ribi::Coordinat3D(1.0,1.0,1.0) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p0); assert(p1); assert(p2); assert(p3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(p4); assert(p5); assert(p6); assert(p7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; cell { new Cell };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Cell&amp;gt;&amp;gt; cells { cell };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; n0; //No neighbours in a 1x1 mesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; n1; //No neighbours in a 1x1 mesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; n2; //No neighbours in a 1x1 mesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; n3; //No neighbours in a 1x1 mesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; n4; //No neighbours in a 1x1 mesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; n5; //No neighbours in a 1x1 mesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; own0 { cell }; //The only Cell owns all Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; own1 { cell }; //The only Cell owns all Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; own2 { cell }; //The only Cell owns all Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; own3 { cell }; //The only Cell owns all Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; own4 { cell }; //The only Cell owns all Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Cell&amp;gt; own5 { cell }; //The only Cell owns all Faces&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt; points { p0,p1,p2,p3,p4,p5,p6,p7 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//For the Faces, I used the same setup as in Classes/CppOpenFoam/faces_1x1x1:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;6&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;4(0 2 3 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;4(0 4 6 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;4(0 1 5 4)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;4(1 3 7 5)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;4(2 6 7 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;4(4 5 7 6)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The order of faces is determined by blockMesh&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Face&amp;gt; f0 { new Face(n0,own0, { p0, p2, p3, p1 } ) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Face&amp;gt; f1 { new Face(n1,own1, { p0, p4, p6, p2 } ) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Face&amp;gt; f2 { new Face(n2,own2, { p0, p1, p5, p4 } ) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Face&amp;gt; f3 { new Face(n3,own3, { p1, p3, p7, p5 } ) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Face&amp;gt; f4 { new Face(n4,own4, { p2, p6, p7, p3 } ) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Face&amp;gt; f5 { new Face(n5,own5, { p4, p5, p7, p6 } ) };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; faces { f0,f1,f2,f3,f4,f5 };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cell-&amp;gt;AssignOwnedFaces( { f0,f1,f2,f3,f4,f5 } );&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Boundary&amp;gt; boundary { new Boundary(&amp;nbsp;&amp;nbsp;{f0,f1,f2,f3,f4,f5 },"defaultFaces","patch" ) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Boundary&amp;gt;&amp;gt; boundaries { boundary };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Mesh m(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boundaries,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cells,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Face&amp;gt; face: faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt;&amp;gt; points { AddConst(face-&amp;gt;GetPoints()) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;ribi::Coordinat3D&amp;gt; coordinats;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::transform(points.begin(),points.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::back_inserter(coordinats),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; shared_coordinat)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return ribi::Coordinat3D(*shared_coordinat);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//For every Face, extract the coordinats&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//FindMostSimilar should find back the original Face&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; result {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m.FindMostSimilarFace(coordinats)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(result);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (face != result)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*result);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(result == face);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Mesh::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const ribi::foam::Mesh&amp;amp; mesh)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Smallest: points");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "Points: ";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; point: mesh.m_points)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(point);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "* " &amp;lt;&amp;lt; *point &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Small: faces");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "Faces:\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;Face&amp;gt; face: mesh.m_faces)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "* Neighbour: " &amp;lt;&amp;lt; face-&amp;gt;GetNeighbour() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "* Owner: " &amp;lt;&amp;lt; face-&amp;gt;GetOwner() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "* Coordinats: ";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; coordinat: face-&amp;gt;GetPoints())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; coordinat &amp;lt;&amp;lt; ' ';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Bigger: boundaries");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "Boundary:\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;Boundary&amp;gt; boundary: mesh.m_boundaries)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "* Name: " &amp;lt;&amp;lt; boundary-&amp;gt;GetName() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "* Type: " &amp;lt;&amp;lt; boundary-&amp;gt;GetType() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "* Faces: ";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;const Face&amp;gt; face: boundary-&amp;gt;GetFaces())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; face &amp;lt;&amp;lt; ' ';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Biggest: cells");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; "Cells:\n";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (const boost::shared_ptr&amp;lt;Cell&amp;gt; cell: mesh.m_cells)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;lt;&amp;lt; "* Neighbour: " &amp;lt;&amp;lt; cell-&amp;gt;GetNeighbour() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;&amp;lt; "* Faces: ";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (boost::shared_ptr&amp;lt;const ribi::foam::Face&amp;gt; face: cell-&amp;gt;GetOwnedFaces())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; face &amp;lt;&amp;lt; ' ';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoammesh.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoammesh.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMMESH_H&lt;br/&gt;
#define OPENFOAMMESH_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Mesh contains the mesh of an OpenFOAM mesh in an indexless way&lt;br/&gt;
///A Mesh can be converted to a Files and vice versa&lt;br/&gt;
struct Mesh&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Step #0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create Points so these can be shared over the Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create Cells so these can be shared over the Faces&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Mesh(const Files&amp;amp; files) : Mesh(files,CreatePoints(files)) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Mesh(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Boundary&amp;gt;&amp;gt;&amp;amp; boundaries,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Cell&amp;gt;&amp;gt;&amp;amp; cells,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;&amp;amp; faces,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;&amp;amp; points&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Write the Mesh to a Files&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Files CreateFiles() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;const Face&amp;gt; FindMostSimilarFace(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; coordinats&lt;br/&gt;
&amp;nbsp;&amp;nbsp;) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetNumberOfBoundaries() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetNumberOfCells() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetNumberOfFaces() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetNumberOfPoints() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Boundary&amp;gt; &amp;gt;&amp;amp; GetBoundaries() noexcept { return m_boundaries; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;Cell&amp;gt; &amp;gt;&amp;amp; GetCells() noexcept { return&amp;nbsp;&amp;nbsp;m_cells; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Face&amp;gt; &amp;gt;&amp;amp; GetFaces()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; noexcept { return m_faces; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const Face&amp;gt; &amp;gt;&amp;nbsp;&amp;nbsp;GetFaces() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;&amp;amp; GetPoints() noexcept { return m_points; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Order is not important&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Boundary&amp;gt;&amp;gt; m_boundaries;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Order is not important&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Cell&amp;gt;&amp;gt; m_cells;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Order is important for ReorderFaces only&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt; m_faces;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Order is not important&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt; m_points;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Step #1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create Faces so these can be shared over Boundary and Cell&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Mesh(const Files&amp;amp; files,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;&amp;amp; points);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Checks if the Faces their indices are adjacent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///when they belong to the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///same Boundary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool AreFacesOrdered() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static double CalcSimilaritySlow(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; w) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static double CalcSimilarityFaster(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; w) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static double CalcSimilaritySlow(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;const ribi::Coordinat3D&amp;gt; &amp;gt;&amp;amp; v,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;ribi::Coordinat3D&amp;gt;&amp;amp; w) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Boundary&amp;gt; &amp;gt; CreateBoundaries(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files&amp;amp; files, const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt;&amp;gt;&amp;amp; faces);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;BoundaryFile&amp;gt; CreateBoundary() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create empty Cells, as much as needed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Cell&amp;gt; &amp;gt; CreateEmptyCells(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files&amp;amp; files);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;FacesFile&amp;gt; CreateFaces() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create the Faces from the points, but cannot initialize Owner and Neighbour&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;Face&amp;gt; &amp;gt; CreateFacesWithPoints(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Files&amp;amp; files,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt;&amp;gt;&amp;amp; points);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;NeighbourFile&amp;gt; CreateNeighbour() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;OwnerFile&amp;gt; CreateOwner() const noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;PointsFile&amp;gt; CreatePoints() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;boost::shared_ptr&amp;lt;ribi::Coordinat3D&amp;gt; &amp;gt; CreatePoints(const Files&amp;amp; files);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///This member function is called to reorder the faces in such a way&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///that indices in m_faces are adjacent when they belong to the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///same Boundary&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example, consider the following boundary file:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;boundary_left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;boundary_right&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;patch;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nFaces&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;startFace&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///ReorderFaces will put the faces belonging to 'boundary_left'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///at indices 0 and 1, and the faces belonging to 'boundary_right'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///at indices 2 and 3.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Because this is an indexless structure, the ordering of Faces in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_faces is unimportant, except for this: when writing to file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void ReorderFaces();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Mesh&amp;amp; mesh);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Mesh&amp;amp; mesh);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMMESH_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamneighbourfile.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamneighbourfile.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamneighbourfile.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;fstream&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/split.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;QFile&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "filename.h"&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamneighbourfileitem.h"&lt;br/&gt;
#include "openfoamfaceindex.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::foam::NeighbourFile::NeighbourFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;NeighbourFileItem&amp;gt;&amp;amp; items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_header{header},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items(items)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::NeighbourFile::CanGetItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex&amp;amp; face_index) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(face_index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return face_index.Get() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_items.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
/*&lt;br/&gt;
const ribi::foam::CellIndex ribi::foam::NeighbourFile::CountNumberOfCells() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//NOT CONFIDENT ABOUT THIS&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_items.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return CellIndex(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//throw std::logic_error(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;"NeighbourFile::FindMaxCellIndex: there is no valid cell index");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (!m_items.empty() || m_items.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "If a mesh has no non-boundary cells, neighbour can be empty");&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex i = (*std::max_element(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const NeighbourFileItem&amp;amp; lhs, const NeighbourFileItem&amp;amp; rhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return lhs.GetCellIndex() &amp;lt; rhs.GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)).GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE(m_items.size());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;++i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return i;&lt;br/&gt;
}&lt;br/&gt;
*/&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::Header ribi::foam::NeighbourFile::GetDefaultHeader() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Header("labelList","constant/polyMesh","","neighbour");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::NeighbourFileItem&amp;amp; ribi::foam::NeighbourFile::GetItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const FaceIndex&amp;amp; face_index) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if(!CanGetItem(face_index))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("BREAK");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanGetItem(face_index));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_items[ static_cast&amp;lt;int&amp;gt;(face_index.Get()) ];&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::NeighbourFile ribi::foam::NeighbourFile::Parse(std::istream&amp;amp; is)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;NeighbourFile b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::NeighbourFile ribi::foam::NeighbourFile::Parse(const std::string&amp;amp; filename)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string tmp_filename { fileio::GetTempFileName() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::CopyFile(filename,tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header::CleanFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::ifstream f(tmp_filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const NeighbourFile file { Parse(f) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;f.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::DeleteFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return file;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::NeighbourFile::SetItem(const FaceIndex&amp;amp; face_index, const NeighbourFileItem&amp;amp; item) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(face_index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(face_index.Get() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_items.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_items[ face_index.Get() ] = item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetItem(face_index) == item);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::NeighbourFile::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::NeighbourFile::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Some initial data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header("some_name","some_location","some_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;NeighbourFileItem&amp;gt; items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=4; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFileItem item(CellIndex(i * i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFile c(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header == header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header other_header("some_other_name","some_other_location","some_other_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header != other_header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFile c(other_header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;NeighbourFileItem&amp;gt; other_items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=3; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFileItem item(CellIndex(2 * i * i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;other_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFile c(header,other_items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Stream conversion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const NeighbourFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFile c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b != c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read from testing file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int test_index = 0; test_index!=5; ++test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: filename_appendix = "_1x1x1"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: filename_appendix = "_1x1x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: filename_appendix = "_1x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: filename_appendix = "_2x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 4: filename_appendix = "_3x4x5"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should never get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("foam::Files::CreateTestFiles: unknown test index");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!filename_appendix.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename_base { GetDefaultHeader().GetObject() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename = filename_base + filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string resources_path { ":/CppOpenFoam/files/" + filename };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QFile f( resources_path.c_str() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.copy(filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!fileio::IsRegularFile(filename))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFile b(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( (!b.GetItems().empty() || b.GetItems().empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "If a mesh has no non-bhoundary cells, neighbour can be empty");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Header::NeighbourFile successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const NeighbourFile&amp;amp; lhs,const NeighbourFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetHeader() != rhs.GetHeader())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;NeighbourFileItem&amp;gt;&amp;amp; lhs_items = lhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;NeighbourFileItem&amp;gt;&amp;amp; rhs_items = rhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs_items.size() != rhs_items.size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(lhs_items.begin(),lhs_items.end(),rhs_items.begin());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const NeighbourFile&amp;amp; lhs,const NeighbourFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, NeighbourFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.m_items.empty()); //Make empty otherwise&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n_items = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char opening_bracket = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Eat comment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char c = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (c != '(' &amp;amp;&amp;amp; c != '{')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Start eating n_items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items *= 10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n = c - '0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n &amp;gt;= 0 &amp;amp;&amp;amp; n &amp;lt;= 9);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items += n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;opening_bracket = c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(opening_bracket == '(' || opening_bracket == '{'))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(opening_bracket);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (opening_bracket == '(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Read once, push n_items times&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NeighbourFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Eat comments until bracket close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_close = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (bracket_close != ')' &amp;amp;&amp;amp; bracket_close != '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == ')' || bracket_close == '}');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (opening_bracket == '(' &amp;amp;&amp;amp; bracket_close == ')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (opening_bracket == '{' &amp;amp;&amp;amp; bracket_close == '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const NeighbourFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.GetHeader() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.m_items.size() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "(" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const NeighbourFileItem item: f.m_items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; item &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamneighbourfile.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamneighbourfile.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMNEIGHBOURFILE_H&lt;br/&gt;
#define OPENFOAMNEIGHBOURFILE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include "fileiofwd.h"&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamneighbourfileitem.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Reads and writes an OpenFOAM boundary file&lt;br/&gt;
struct NeighbourFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit NeighbourFile(const std::string&amp;amp; filename) : NeighbourFile(Parse(filename)) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit NeighbourFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header header = GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;NeighbourFileItem&amp;gt;&amp;amp; items = {});&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///If the FaceIndex is present&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanGetItem(const FaceIndex&amp;amp; face_index) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//DON'T: Use OwnerFile::CountNumberOfCells instead&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//WHY: because all cell indices are detected in owner&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Find the first CellIndex beyond the cell indices present&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Or: find the first CellIndex that does not exist anymore&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const CellIndex CountNumberOfCells() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Header GetDefaultHeader() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header&amp;amp; GetHeader() const noexcept { return m_header; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;NeighbourFileItem&amp;gt; GetItems() const noexcept { return m_items; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Assumes CanGetItem == true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const NeighbourFileItem&amp;amp; GetItem(const FaceIndex&amp;amp; face_index) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetNumberOfItems() const noexcept { return static_cast&amp;lt;int&amp;gt;(m_items.size()); }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetItem(const FaceIndex&amp;amp; face_index, const NeighbourFileItem&amp;amp; item) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit NeighbourFile(std::istream&amp;amp; is) : NeighbourFile(Parse(is)) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The OpenFOAM header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The items 'neighbour' contains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;NeighbourFileItem&amp;gt; m_items;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const NeighbourFile Parse(std::istream&amp;amp; is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const NeighbourFile Parse(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const NeighbourFile&amp;amp; f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, NeighbourFile&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const NeighbourFile&amp;amp; lhs,const NeighbourFile&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const NeighbourFile&amp;amp; lhs,const NeighbourFile&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const NeighbourFile&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, NeighbourFile&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMNEIGHBOURFILE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamneighbourfileitem.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamneighbourfileitem.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamneighbourfileitem.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::NeighbourFileItem::NeighbourFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const CellIndex cell_index&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_cell_index{cell_index}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cell_index.Get() &amp;gt;= -1 &amp;amp;&amp;amp; "Also allow -1"); //?NONSENSE or not?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::NeighbourFileItem::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::NeighbourFileItem::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const NeighbourFileItem i(CellIndex(123));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;NeighbourFileItem j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (i != j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(i == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::NeighbourFileItem::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const NeighbourFileItem&amp;amp; lhs, const NeighbourFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lhs.GetCellIndex() == rhs.GetCellIndex()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const NeighbourFileItem&amp;amp; lhs, const NeighbourFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const NeighbourFileItem&amp;amp; item)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; item.GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, NeighbourFileItem&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_cell_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.GetCellIndex().Get() &amp;gt;= -1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamneighbourfileitem.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamneighbourfileitem.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMNEIGHBOURFILEITEM_H&lt;br/&gt;
#define OPENFOAMNEIGHBOURFILEITEM_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include "openfoamcellindex.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///An item in an OpenFOAM 'neighbour' file&lt;br/&gt;
///A neighbour files contains, for every face, the cell index of which the face is a neighbour of&lt;br/&gt;
///&lt;br/&gt;
///For example, from /Classes/CppOpenFoam/neighbour_1x2x2:&lt;br/&gt;
///&lt;br/&gt;
///4(1 2 3 3)&lt;br/&gt;
///&lt;br/&gt;
///Equivalent to, as faces_1x2x2 contains twenty faces:&lt;br/&gt;
///&lt;br/&gt;
///20(1 2 3 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1)&lt;br/&gt;
///&lt;br/&gt;
///This means that:&lt;br/&gt;
/// - Face 0 has Cell 1 as its neighbour, and is thus an internal face&lt;br/&gt;
/// - Face 1 has Cell 2 as its neighbour, and is thus an internal face&lt;br/&gt;
/// - Face 2 has Cell 3 as its neighbour, and is thus an internal face&lt;br/&gt;
/// - Face 3 has Cell 3 as its neighbour, and is thus an internal face&lt;br/&gt;
/// - All other Faces have no neighbours, and are thus boundary faces&lt;br/&gt;
///&lt;br/&gt;
///The file 'neighbour' has path '[case_folder]/constant/polyMesh/neighbour'&lt;br/&gt;
struct NeighbourFileItem&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///A CellIndex of -1 denotes that a Face has no Neighbour&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit NeighbourFileItem(const CellIndex cell_index = CellIndex(-1));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///A CellIndex of -1 denotes that a Face has no Neighbour&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const CellIndex GetCellIndex() const noexcept { return m_cell_index; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex m_cell_index;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class OpenFoamNeighbourFile;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, NeighbourFileItem&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const NeighbourFileItem&amp;amp; lhs, const NeighbourFileItem&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const NeighbourFileItem&amp;amp; lhs, const NeighbourFileItem&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const NeighbourFileItem&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, NeighbourFileItem&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMNEIGHBOURFILEITEM_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamownerfile.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamownerfile.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamownerfile.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;fstream&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/split.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;QFile&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "filename.h"&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamfaceindex.h"&lt;br/&gt;
#include "openfoamownerfileitem.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::foam::OwnerFile::OwnerFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;OwnerFileItem&amp;gt;&amp;amp; items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_header{header},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items(items)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::CellIndex ribi::foam::OwnerFile::CountNumberOfCells() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert( (!m_items.empty() || m_items.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "If an OwnerFile is empty, there is 1 cell, otherwise 1+max_value_found");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_items.empty()) return CellIndex(1);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex i = (*std::max_element(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items.begin(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const OwnerFileItem&amp;amp; lhs, const OwnerFileItem&amp;amp; rhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return lhs.GetCellIndex() &amp;lt; rhs.GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)).GetCellIndex();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// +1, because if the highest cell index found is x, there are x+1 cells&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ++i;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::Header ribi::foam::OwnerFile::GetDefaultHeader() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Header("labelList","constant/polyMesh","","owner");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::OwnerFileItem&amp;amp; ribi::foam::OwnerFile::GetItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const ribi::foam::FaceIndex&amp;amp; face_index) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int i = face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(i &amp;lt; static_cast&amp;lt;int&amp;gt;(m_items.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_items[i];&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::OwnerFile ribi::foam::OwnerFile::Parse(std::istream&amp;amp; is)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;OwnerFile b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::OwnerFile ribi::foam::OwnerFile::Parse(const std::string&amp;amp; filename)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string tmp_filename { fileio::GetTempFileName() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::CopyFile(filename,tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header::CleanFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::ifstream f(tmp_filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const OwnerFile file { Parse(f) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;f.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::DeleteFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return file;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::foam::OwnerFile::SetItem(const FaceIndex&amp;amp; face_index, const OwnerFileItem&amp;amp; item) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int i = face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(i &amp;lt; static_cast&amp;lt;int&amp;gt;(m_items.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_items[i] = item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_items[i] == item);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::OwnerFile::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::OwnerFile::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Some initial data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header("some_name","some_location","some_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;OwnerFileItem&amp;gt; items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=4; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFileItem item(CellIndex(i * i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile c(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header == header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header other_header("some_other_name","some_other_location","some_other_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header != other_header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile c(other_header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;OwnerFileItem&amp;gt; other_items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=3; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFileItem item(CellIndex(2 * i * i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;other_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile c(header,other_items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFile c(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const FaceIndex i(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const CellIndex j { c.GetItem(i).GetCellIndex() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFileItem new_item(CellIndex(j.Get() + 1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.GetItem(i) != new_item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c.SetItem(i,new_item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.GetItem(i) == new_item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Stream conversion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFile c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b != c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read from testing file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int test_index = 0; test_index!=5; ++test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: filename_appendix = "_1x1x1"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: filename_appendix = "_1x1x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: filename_appendix = "_1x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: filename_appendix = "_2x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 4: filename_appendix = "_3x4x5"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should never get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("foam::Files::CreateTestFiles: unknown test index");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!filename_appendix.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename_base { GetDefaultHeader().GetObject() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename = filename_base + filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string resources_path { ":/CppOpenFoam/files/" + filename };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QFile f( resources_path.c_str() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.copy(filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!fileio::IsRegularFile(filename))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFile b(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b.GetItems().empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b.GetItems().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Header::OwnerFile successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const OwnerFile&amp;amp; lhs,const OwnerFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetHeader() != rhs.GetHeader())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;OwnerFileItem&amp;gt;&amp;amp; lhs_items = lhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;OwnerFileItem&amp;gt;&amp;amp; rhs_items = rhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs_items.size() != rhs_items.size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(lhs_items.begin(),lhs_items.end(),rhs_items.begin());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const OwnerFile&amp;amp; lhs,const OwnerFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, OwnerFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.m_items.empty()); //Make empty otherwise&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n_items = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char opening_bracket = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Eat comment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char c = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (c != '(' &amp;amp;&amp;amp; c != '{')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Start eating n_items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items *= 10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n = c - '0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n &amp;gt;= 0 &amp;amp;&amp;amp; n &amp;lt;= 9);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items += n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;opening_bracket = c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(opening_bracket == '(' || opening_bracket == '{'))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(opening_bracket);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (opening_bracket == '(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Read once, push n_items times&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Eat comments until bracket close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_close = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (bracket_close != ')' &amp;amp;&amp;amp; bracket_close != '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == ')' || bracket_close == '}');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (opening_bracket == '(' &amp;amp;&amp;amp; bracket_close == ')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (opening_bracket == '{' &amp;amp;&amp;amp; bracket_close == '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const OwnerFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.GetHeader() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.m_items.size() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "(" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const OwnerFileItem item: f.m_items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; item &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamownerfile.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamownerfile.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMOWNERFILE_H&lt;br/&gt;
#define OPENFOAMOWNERFILE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include "fileiofwd.h"&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoamownerfileitem.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Reads and writes an OpenFOAM boundary file&lt;br/&gt;
struct OwnerFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit OwnerFile(const std::string&amp;amp; filename) : OwnerFile(Parse(filename)) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit OwnerFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header header = GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;OwnerFileItem&amp;gt;&amp;amp; items = {});&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Find the first CellIndex beyond the cell indices present&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Or: find the first CellIndex that does not exist anymore&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const CellIndex CountNumberOfCells() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Header GetDefaultHeader() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header&amp;amp; GetHeader() const noexcept { return m_header; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;OwnerFileItem&amp;gt; GetItems() const noexcept { return m_items; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const OwnerFileItem&amp;amp; GetItem(const FaceIndex&amp;amp; face_index) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetItem(const FaceIndex&amp;amp; face_index, const OwnerFileItem&amp;amp; item) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The OpenFOAM header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The items 'neighbour' contains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;OwnerFileItem&amp;gt; m_items;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit OwnerFile(std::istream&amp;amp; is) : OwnerFile(Parse(is)) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const OwnerFile Parse(std::istream&amp;amp; is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const OwnerFile Parse(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const OwnerFile&amp;amp; f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, OwnerFile&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const OwnerFile&amp;amp; lhs,const OwnerFile&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const OwnerFile&amp;amp; lhs,const OwnerFile&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const OwnerFile&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, OwnerFile&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMOWNERFILE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamownerfileitem.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamownerfileitem.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamownerfileitem.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::OwnerFileItem::OwnerFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const CellIndex&amp;amp; cell_index&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_cell_index{cell_index}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_cell_index.Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::OwnerFileItem::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::OwnerFileItem::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFileItem i(CellIndex(123));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i == i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFileItem j(CellIndex(123));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j == i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFileItem i(CellIndex(123));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFileItem j(CellIndex(234));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i != j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j != i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator&amp;lt;&amp;lt; and operator&amp;gt;&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const OwnerFileItem i(CellIndex(123));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OwnerFileItem j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i != j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::OwnerFileItem::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const OwnerFileItem&amp;amp; lhs, const OwnerFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lhs.GetCellIndex() == rhs.GetCellIndex()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const OwnerFileItem&amp;amp; lhs, const OwnerFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const OwnerFileItem&amp;amp; item)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; item.GetCellIndex();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, OwnerFileItem&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_cell_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (f.GetCellIndex().Get() &amp;lt; 0) TRACE(f.GetCellIndex());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.GetCellIndex().Get() &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamownerfileitem.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamownerfileitem.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMOWNERFILEITEM_H&lt;br/&gt;
#define OPENFOAMOWNERFILEITEM_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include "openfoamcellindex.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///An item in an OpenFOAM boundary file&lt;br/&gt;
struct OwnerFileItem&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit OwnerFileItem(const CellIndex&amp;amp; cell_index = CellIndex(0));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex GetCellIndex() const noexcept { return m_cell_index; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CellIndex m_cell_index;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class OpenFoamOwnerFile;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, OwnerFileItem&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const OwnerFileItem&amp;amp; lhs, const OwnerFileItem&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const OwnerFileItem&amp;amp; lhs, const OwnerFileItem&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const OwnerFileItem&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, OwnerFileItem&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMOWNERFILEITEM_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamparseerror.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamparseerror.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoamparseerror.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
ribi::foam::ParseError::ParseError(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; filename,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int line)&lt;br/&gt;
: std::runtime_error(CreateErrorMsg(filename,line).c_str()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_filename(filename),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_line(line)&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::foam::ParseError::CreateErrorMsg(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string&amp;amp; filename,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int line) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "OpenFOAM file parsing error in ";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (filename.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "unknown file";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "file '" &amp;lt;&amp;lt; filename &amp;lt;&amp;lt; "'";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; " in ";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (line &amp;lt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "unknown line";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; "line " &amp;lt;&amp;lt; line;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s.str();&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoamparseerror.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoamparseerror.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMPARSEERROR_H&lt;br/&gt;
#define OPENFOAMPARSEERROR_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
struct ParseError : public std::runtime_error&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit ParseError(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; filename = "",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int line = -1);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string m_filename;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int m_line;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string CreateErrorMsg(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string&amp;amp; filename,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int line) noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMPARSEERROR_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampoint.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampoint.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoampoint.h"&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampoint.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampoint.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMPOINT_H&lt;br/&gt;
#define OPENFOAMPOINT_H&lt;br/&gt;
&lt;br/&gt;
#include "openfoampointsfileitem.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
typedef PointsFileItem Point;&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMPOINT_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampointindex.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampointindex.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoampointindex.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
ribi::foam::PointIndex::PointIndex(const int index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_index(index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_index &amp;gt;= 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "A PointIndex must be zero or a positive value");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const PointIndex&amp;amp; face_index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; face_index.Get();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointIndex&amp;amp; face_index)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; face_index.m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() == rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;lt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.Get() &amp;gt; rhs.Get();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;lt;=(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;gt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator&amp;gt;=(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs &amp;lt; rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampointindex.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampointindex.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMPOINTINDEX_H&lt;br/&gt;
#define OPENFOAMPOINTINDEX_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///The index in the 'points' file&lt;br/&gt;
struct PointIndex&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit PointIndex(const int index = 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int Get() const noexcept { return m_index; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_index;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointIndex&amp;amp; face_index);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const PointIndex&amp;amp; face_index);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointIndex&amp;amp; face_index);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator!=(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;lt;=(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator&amp;gt;=(const PointIndex&amp;amp; lhs, const PointIndex&amp;amp; rhs) noexcept;&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMPOINTINDEX_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampointsfile.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampointsfile.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoampointsfile.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;fstream&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/algorithm/string/split.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;QFile&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "fileio.h"&lt;br/&gt;
#include "filename.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoampointsfileitem.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::foam::PointsFile::PointsFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointsFileItem&amp;gt;&amp;amp; items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_header{header},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_items(items)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::Header ribi::foam::PointsFile::GetDefaultHeader() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Header("vectorField","constant/polyMesh","","points");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::PointsFile ribi::foam::PointsFile::Parse(std::istream&amp;amp; is)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PointsFile b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::foam::PointsFile ribi::foam::PointsFile::Parse(const std::string&amp;amp; filename)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string tmp_filename { fileio::GetTempFileName() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::CopyFile(filename,tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header::CleanFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::ifstream f(tmp_filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ribi::foam::PointsFile file { Parse(f) };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;f.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileio::DeleteFile(tmp_filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return file;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::PointsFile::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::PointsFile::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Some initial data&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header header("some_name","some_location","some_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointsFileItem&amp;gt; items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=1; i!=4; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFileItem item(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat3D(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;double&amp;gt;(i) * 1.1,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;double&amp;gt;(i) * 2.2,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;double&amp;gt;(i) * 3.3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFile c(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header == header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header other_header("some_other_name","some_other_location","some_other_object");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(header != other_header);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFile c(other_header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointsFileItem&amp;gt; other_items;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=1; i!=3; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFileItem item(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat3D(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;double&amp;gt;(i) * 4.4,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;double&amp;gt;(i) * 5.5,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static_cast&amp;lt;double&amp;gt;(i) * 6.6&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;other_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFile c(header,other_items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b != c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Stream conversion&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFile b(header,items);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFile c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b != c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read from testing file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int test_index = 0; test_index!=5; ++test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::string filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (test_index)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: filename_appendix = "_1x1x1"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 1: filename_appendix = "_1x1x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 2: filename_appendix = "_1x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 3: filename_appendix = "_2x2x2"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 4: filename_appendix = "_3x4x5"; break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should never get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw std::logic_error("foam::Files::CreateTestFiles: unknown test index");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!filename_appendix.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename_base { GetDefaultHeader().GetObject() };&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string filename = filename_base + filename_appendix;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::string resources_path { ":/CppOpenFoam/files/" + filename };&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QFile f( resources_path.c_str() );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.copy(filename.c_str());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!fileio::IsRegularFile(filename))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(fileio::IsRegularFile(filename));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFile b(filename);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b.GetItems().empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b.GetItems().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::Header::PointsFile successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const PointsFile&amp;amp; lhs,const PointsFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs.GetHeader() != rhs.GetHeader())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointsFileItem&amp;gt;&amp;amp; lhs_items = lhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointsFileItem&amp;gt;&amp;amp; rhs_items = rhs.GetItems();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (lhs_items.size() != rhs_items.size())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::equal(lhs_items.begin(),lhs_items.end(),rhs_items.begin());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const PointsFile&amp;amp; lhs,const PointsFile&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointsFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(f.m_items.empty()); //Make empty otherwise&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; f.m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int n_items = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;char opening_bracket = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Eat comment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char c = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (c != '(' &amp;amp;&amp;amp; c != '{')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Start eating n_items&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items *= 10;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int n = c - '0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(n &amp;gt;= 0 &amp;amp;&amp;amp; n &amp;lt;= 9);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n_items += n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;opening_bracket = c;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!(opening_bracket == '(' || opening_bracket == '{'))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(opening_bracket);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE("ERROR");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(opening_bracket == '(' || opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (opening_bracket == '(')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(opening_bracket == '{');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Read once, push n_items times&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFileItem item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; item;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=n_items; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_items.push_back(item);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Eat comments until bracket close&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_close = '\0';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (bracket_close != ')' &amp;amp;&amp;amp; bracket_close != '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == ')' || bracket_close == '}');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (opening_bracket == '(' &amp;amp;&amp;amp; bracket_close == ')')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| (opening_bracket == '{' &amp;amp;&amp;amp; bracket_close == '}')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const PointsFile&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.GetHeader() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; f.m_items.size() &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "(" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for(const PointsFileItem item: f.m_items)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; item &amp;lt;&amp;lt; '\n';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")" &amp;lt;&amp;lt; '\n'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampointsfile.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampointsfile.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMPOINTSFILE_H&lt;br/&gt;
#define OPENFOAMPOINTSFILE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include "fileiofwd.h"&lt;br/&gt;
#include "openfoamfwd.h"&lt;br/&gt;
#include "openfoamheader.h"&lt;br/&gt;
#include "openfoampointsfileitem.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///Reads and writes an OpenFOAM boundary file&lt;br/&gt;
struct PointsFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit PointsFile(const std::string&amp;amp; filename) : PointsFile(Parse(filename)) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit PointsFile(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Header header = GetDefaultHeader(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointsFileItem&amp;gt;&amp;amp; items = {});&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const Header GetDefaultHeader() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Header&amp;amp; GetHeader() const noexcept { return m_header; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;PointsFileItem&amp;gt;&amp;amp; GetItems() const noexcept { return m_items; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit PointsFile(std::istream&amp;amp; is) : PointsFile(Parse(is)) {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The OpenFOAM header&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Header m_header;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///The items faces contains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;PointsFileItem&amp;gt; m_items;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const PointsFile Parse(std::istream&amp;amp; is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const PointsFile Parse(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const PointsFile&amp;amp; f);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointsFile&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const PointsFile&amp;amp; lhs,const PointsFile&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const PointsFile&amp;amp; lhs,const PointsFile&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const PointsFile&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointsFile&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMPOINTSFILE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampointsfileitem.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampointsfileitem.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#include "openfoampointsfileitem.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
#include &amp;lt;sstream&amp;gt;&lt;br/&gt;
#include "fuzzy_equal_to.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
ribi::foam::PointsFileItem::PointsFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat3D&amp;amp; coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_coordinat(coordinat)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::foam::PointsFileItem::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static bool is_tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (is_tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is_tested = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Starting ribi::foam::PointsFileItem::Test");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator== and operator!=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFileItem i( Coordinat3D(1.1,2.2,3.3) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFileItem j( Coordinat3D(2.2,3.3,4.4) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i == i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i != j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j != i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(j == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//operator&amp;lt;&amp;lt; and operator&amp;gt;&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const PointsFileItem i( Coordinat3D(1.1,2.2,3.3) );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::stringstream s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;lt;&amp;lt; i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PointsFileItem j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s &amp;gt;&amp;gt; j;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i != j)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(i == j);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Finished ribi::foam::PointsFileItem::Test successfully");&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator==(const PointsFileItem&amp;amp; lhs, const PointsFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const double abs_tolerance = 0.001;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fuzzy_equal_to_abs(abs_tolerance)(lhs.GetCoordinat().GetX(),rhs.GetCoordinat().GetX())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; fuzzy_equal_to_abs(abs_tolerance)(lhs.GetCoordinat().GetY(),rhs.GetCoordinat().GetY())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; fuzzy_equal_to_abs(abs_tolerance)(lhs.GetCoordinat().GetZ(),rhs.GetCoordinat().GetZ())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::foam::operator!=(const PointsFileItem&amp;amp; lhs, const PointsFileItem&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::foam::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const PointsFileItem&amp;amp; item)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; "("&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item.GetCoordinat().GetX() &amp;lt;&amp;lt; " "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item.GetCoordinat().GetY() &amp;lt;&amp;lt; " "&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; item.GetCoordinat().GetZ()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&amp;lt; ")"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::istream&amp;amp; ribi::foam::operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointsFileItem&amp;amp; f)&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_open;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_open == '(');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double d = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; d;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_coordinat.SetX(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double d = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; d;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_coordinat.SetY(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double d = 0.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; d;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f.m_coordinat.SetZ(d);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is &amp;gt;&amp;gt; bracket_close;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(is);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(bracket_close == ')');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return is;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/openfoampointsfileitem.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/openfoampointsfileitem.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
#ifndef OPENFOAMPOINTSFILEITEM_H&lt;br/&gt;
#define OPENFOAMPOINTSFILEITEM_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;array&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "coordinat3d.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace foam {&lt;br/&gt;
&lt;br/&gt;
///An item in an OpenFOAM 'points' file&lt;br/&gt;
struct PointsFileItem&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;explicit PointsFileItem(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat3D&amp;amp; coordinat = Coordinat3D(0.0, 0.0, 0.0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat3D&amp;amp; GetCoordinat() const noexcept { return m_coordinat; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat3D&amp;amp; GetCoordinat()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; noexcept { return m_coordinat; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Coordinat3D m_coordinat;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend class OpenFoamPointsFile;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointsFileItem&amp;amp; f);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const PointsFileItem&amp;amp; lhs, const PointsFileItem&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const PointsFileItem&amp;amp; lhs, const PointsFileItem&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const PointsFileItem&amp;amp; f);&lt;br/&gt;
std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream&amp;amp; is, PointsFileItem&amp;amp; f);&lt;br/&gt;
&lt;br/&gt;
} //~namespace foam&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#endif // OPENFOAMPOINTSFILEITEM_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/owner_1x1x1&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/owner_1x1x1" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 8 nCells: 1 nFaces: 6 nInternalFaces: 0";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owner;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
6{0}&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/owner_1x1x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/owner_1x1x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 12 nCells: 2 nFaces: 11 nInternalFaces: 1";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owner;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
11&lt;br/&gt;
(&lt;br/&gt;
0&lt;br/&gt;
0&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/owner_1x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/owner_1x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 18 nCells: 4 nFaces: 20 nInternalFaces: 4";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owner;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
20&lt;br/&gt;
(&lt;br/&gt;
0&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
0&lt;br/&gt;
2&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
1&lt;br/&gt;
3&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/owner_2x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/owner_2x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 27 nCells: 8 nFaces: 36 nInternalFaces: 12";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owner;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
36&lt;br/&gt;
(&lt;br/&gt;
0&lt;br/&gt;
0&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
4&lt;br/&gt;
4&lt;br/&gt;
5&lt;br/&gt;
6&lt;br/&gt;
0&lt;br/&gt;
2&lt;br/&gt;
1&lt;br/&gt;
3&lt;br/&gt;
0&lt;br/&gt;
2&lt;br/&gt;
4&lt;br/&gt;
6&lt;br/&gt;
0&lt;br/&gt;
4&lt;br/&gt;
1&lt;br/&gt;
5&lt;br/&gt;
1&lt;br/&gt;
3&lt;br/&gt;
5&lt;br/&gt;
7&lt;br/&gt;
2&lt;br/&gt;
6&lt;br/&gt;
3&lt;br/&gt;
7&lt;br/&gt;
4&lt;br/&gt;
6&lt;br/&gt;
5&lt;br/&gt;
7&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/owner_3x4x5&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/owner_3x4x5" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelList;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"nPoints: 120 nCells: 60 nFaces: 227 nInternalFaces: 133";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owner;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
227&lt;br/&gt;
(&lt;br/&gt;
0&lt;br/&gt;
0&lt;br/&gt;
0&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
3&lt;br/&gt;
4&lt;br/&gt;
4&lt;br/&gt;
4&lt;br/&gt;
5&lt;br/&gt;
5&lt;br/&gt;
6&lt;br/&gt;
6&lt;br/&gt;
6&lt;br/&gt;
7&lt;br/&gt;
7&lt;br/&gt;
7&lt;br/&gt;
8&lt;br/&gt;
8&lt;br/&gt;
9&lt;br/&gt;
9&lt;br/&gt;
10&lt;br/&gt;
10&lt;br/&gt;
11&lt;br/&gt;
12&lt;br/&gt;
12&lt;br/&gt;
12&lt;br/&gt;
13&lt;br/&gt;
13&lt;br/&gt;
13&lt;br/&gt;
14&lt;br/&gt;
14&lt;br/&gt;
15&lt;br/&gt;
15&lt;br/&gt;
15&lt;br/&gt;
16&lt;br/&gt;
16&lt;br/&gt;
16&lt;br/&gt;
17&lt;br/&gt;
17&lt;br/&gt;
18&lt;br/&gt;
18&lt;br/&gt;
18&lt;br/&gt;
19&lt;br/&gt;
19&lt;br/&gt;
19&lt;br/&gt;
20&lt;br/&gt;
20&lt;br/&gt;
21&lt;br/&gt;
21&lt;br/&gt;
22&lt;br/&gt;
22&lt;br/&gt;
23&lt;br/&gt;
24&lt;br/&gt;
24&lt;br/&gt;
24&lt;br/&gt;
25&lt;br/&gt;
25&lt;br/&gt;
25&lt;br/&gt;
26&lt;br/&gt;
26&lt;br/&gt;
27&lt;br/&gt;
27&lt;br/&gt;
27&lt;br/&gt;
28&lt;br/&gt;
28&lt;br/&gt;
28&lt;br/&gt;
29&lt;br/&gt;
29&lt;br/&gt;
30&lt;br/&gt;
30&lt;br/&gt;
30&lt;br/&gt;
31&lt;br/&gt;
31&lt;br/&gt;
31&lt;br/&gt;
32&lt;br/&gt;
32&lt;br/&gt;
33&lt;br/&gt;
33&lt;br/&gt;
34&lt;br/&gt;
34&lt;br/&gt;
35&lt;br/&gt;
36&lt;br/&gt;
36&lt;br/&gt;
36&lt;br/&gt;
37&lt;br/&gt;
37&lt;br/&gt;
37&lt;br/&gt;
38&lt;br/&gt;
38&lt;br/&gt;
39&lt;br/&gt;
39&lt;br/&gt;
39&lt;br/&gt;
40&lt;br/&gt;
40&lt;br/&gt;
40&lt;br/&gt;
41&lt;br/&gt;
41&lt;br/&gt;
42&lt;br/&gt;
42&lt;br/&gt;
42&lt;br/&gt;
43&lt;br/&gt;
43&lt;br/&gt;
43&lt;br/&gt;
44&lt;br/&gt;
44&lt;br/&gt;
45&lt;br/&gt;
45&lt;br/&gt;
46&lt;br/&gt;
46&lt;br/&gt;
47&lt;br/&gt;
48&lt;br/&gt;
48&lt;br/&gt;
49&lt;br/&gt;
49&lt;br/&gt;
50&lt;br/&gt;
51&lt;br/&gt;
51&lt;br/&gt;
52&lt;br/&gt;
52&lt;br/&gt;
53&lt;br/&gt;
54&lt;br/&gt;
54&lt;br/&gt;
55&lt;br/&gt;
55&lt;br/&gt;
56&lt;br/&gt;
57&lt;br/&gt;
58&lt;br/&gt;
0&lt;br/&gt;
3&lt;br/&gt;
6&lt;br/&gt;
9&lt;br/&gt;
1&lt;br/&gt;
4&lt;br/&gt;
7&lt;br/&gt;
10&lt;br/&gt;
2&lt;br/&gt;
5&lt;br/&gt;
8&lt;br/&gt;
11&lt;br/&gt;
0&lt;br/&gt;
3&lt;br/&gt;
6&lt;br/&gt;
9&lt;br/&gt;
12&lt;br/&gt;
15&lt;br/&gt;
18&lt;br/&gt;
21&lt;br/&gt;
24&lt;br/&gt;
27&lt;br/&gt;
30&lt;br/&gt;
33&lt;br/&gt;
36&lt;br/&gt;
39&lt;br/&gt;
42&lt;br/&gt;
45&lt;br/&gt;
48&lt;br/&gt;
51&lt;br/&gt;
54&lt;br/&gt;
57&lt;br/&gt;
0&lt;br/&gt;
12&lt;br/&gt;
24&lt;br/&gt;
36&lt;br/&gt;
48&lt;br/&gt;
1&lt;br/&gt;
13&lt;br/&gt;
25&lt;br/&gt;
37&lt;br/&gt;
49&lt;br/&gt;
2&lt;br/&gt;
14&lt;br/&gt;
26&lt;br/&gt;
38&lt;br/&gt;
50&lt;br/&gt;
2&lt;br/&gt;
5&lt;br/&gt;
8&lt;br/&gt;
11&lt;br/&gt;
14&lt;br/&gt;
17&lt;br/&gt;
20&lt;br/&gt;
23&lt;br/&gt;
26&lt;br/&gt;
29&lt;br/&gt;
32&lt;br/&gt;
35&lt;br/&gt;
38&lt;br/&gt;
41&lt;br/&gt;
44&lt;br/&gt;
47&lt;br/&gt;
50&lt;br/&gt;
53&lt;br/&gt;
56&lt;br/&gt;
59&lt;br/&gt;
9&lt;br/&gt;
21&lt;br/&gt;
33&lt;br/&gt;
45&lt;br/&gt;
57&lt;br/&gt;
10&lt;br/&gt;
22&lt;br/&gt;
34&lt;br/&gt;
46&lt;br/&gt;
58&lt;br/&gt;
11&lt;br/&gt;
23&lt;br/&gt;
35&lt;br/&gt;
47&lt;br/&gt;
59&lt;br/&gt;
48&lt;br/&gt;
51&lt;br/&gt;
54&lt;br/&gt;
57&lt;br/&gt;
49&lt;br/&gt;
52&lt;br/&gt;
55&lt;br/&gt;
58&lt;br/&gt;
50&lt;br/&gt;
53&lt;br/&gt;
56&lt;br/&gt;
59&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/points_1x1x1&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/points_1x1x1" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vectorField;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
8((0 0 0) (1 0 0) (0 1 0) (1 1 0) (0 0 1) (1 0 1) (0 1 1) (1 1 1))&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/points_1x1x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/points_1x1x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vectorField;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
12&lt;br/&gt;
(&lt;br/&gt;
(0 0 0)&lt;br/&gt;
(1 0 0)&lt;br/&gt;
(0 1 0)&lt;br/&gt;
(1 1 0)&lt;br/&gt;
(0 0 0.5)&lt;br/&gt;
(1 0 0.5)&lt;br/&gt;
(0 1 0.5)&lt;br/&gt;
(1 1 0.5)&lt;br/&gt;
(0 0 1)&lt;br/&gt;
(1 0 1)&lt;br/&gt;
(0 1 1)&lt;br/&gt;
(1 1 1)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/points_1x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/points_1x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vectorField;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
18&lt;br/&gt;
(&lt;br/&gt;
(0 0 0)&lt;br/&gt;
(1 0 0)&lt;br/&gt;
(0 0.5 0)&lt;br/&gt;
(1 0.5 0)&lt;br/&gt;
(0 1 0)&lt;br/&gt;
(1 1 0)&lt;br/&gt;
(0 0 0.5)&lt;br/&gt;
(1 0 0.5)&lt;br/&gt;
(0 0.5 0.5)&lt;br/&gt;
(1 0.5 0.5)&lt;br/&gt;
(0 1 0.5)&lt;br/&gt;
(1 1 0.5)&lt;br/&gt;
(0 0 1)&lt;br/&gt;
(1 0 1)&lt;br/&gt;
(0 0.5 1)&lt;br/&gt;
(1 0.5 1)&lt;br/&gt;
(0 1 1)&lt;br/&gt;
(1 1 1)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/points_2x2x2&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/points_2x2x2" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vectorField;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
27&lt;br/&gt;
(&lt;br/&gt;
(0 0 0)&lt;br/&gt;
(0.5 0 0)&lt;br/&gt;
(1 0 0)&lt;br/&gt;
(0 0.5 0)&lt;br/&gt;
(0.5 0.5 0)&lt;br/&gt;
(1 0.5 0)&lt;br/&gt;
(0 1 0)&lt;br/&gt;
(0.5 1 0)&lt;br/&gt;
(1 1 0)&lt;br/&gt;
(0 0 0.5)&lt;br/&gt;
(0.5 0 0.5)&lt;br/&gt;
(1 0 0.5)&lt;br/&gt;
(0 0.5 0.5)&lt;br/&gt;
(0.5 0.5 0.5)&lt;br/&gt;
(1 0.5 0.5)&lt;br/&gt;
(0 1 0.5)&lt;br/&gt;
(0.5 1 0.5)&lt;br/&gt;
(1 1 0.5)&lt;br/&gt;
(0 0 1)&lt;br/&gt;
(0.5 0 1)&lt;br/&gt;
(1 0 1)&lt;br/&gt;
(0 0.5 1)&lt;br/&gt;
(0.5 0.5 1)&lt;br/&gt;
(1 0.5 1)&lt;br/&gt;
(0 1 1)&lt;br/&gt;
(0.5 1 1)&lt;br/&gt;
(1 1 1)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppOpenFoam/points_3x4x5&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppOpenFoam/points_3x4x5" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
/*--------------------------------*- C++ -*----------------------------------*\&lt;br/&gt;
| =========&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
| \\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;F ield&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | OpenFOAM: The Open Source CFD Toolbox&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;\\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp; O peration&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Version:&amp;nbsp;&amp;nbsp;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
|&amp;nbsp;&amp;nbsp; \\&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A nd&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | Web:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;www.OpenFOAM.org&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; M anipulation&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
/*&amp;nbsp;&amp;nbsp; Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt&amp;nbsp;&amp;nbsp; *\&lt;br/&gt;
|&amp;nbsp;&amp;nbsp;Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com&amp;nbsp;&amp;nbsp; |&lt;br/&gt;
\*---------------------------------------------------------------------------*/&lt;br/&gt;
FoamFile&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;format&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ascii;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vectorField;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;location&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"constant/polyMesh";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;points;&lt;br/&gt;
}&lt;br/&gt;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
120&lt;br/&gt;
(&lt;br/&gt;
(0 0 0)&lt;br/&gt;
(0.3333333333 0 0)&lt;br/&gt;
(0.6666666667 0 0)&lt;br/&gt;
(1 0 0)&lt;br/&gt;
(0 0.25 0)&lt;br/&gt;
(0.3333333333 0.25 0)&lt;br/&gt;
(0.6666666667 0.25 0)&lt;br/&gt;
(1 0.25 0)&lt;br/&gt;
(0 0.5 0)&lt;br/&gt;
(0.3333333333 0.5 0)&lt;br/&gt;
(0.6666666667 0.5 0)&lt;br/&gt;
(1 0.5 0)&lt;br/&gt;
(0 0.75 0)&lt;br/&gt;
(0.3333333333 0.75 0)&lt;br/&gt;
(0.6666666667 0.75 0)&lt;br/&gt;
(1 0.75 0)&lt;br/&gt;
(0 1 0)&lt;br/&gt;
(0.3333333333 1 0)&lt;br/&gt;
(0.6666666667 1 0)&lt;br/&gt;
(1 1 0)&lt;br/&gt;
(0 0 0.2)&lt;br/&gt;
(0.3333333333 0 0.2)&lt;br/&gt;
(0.6666666667 0 0.2)&lt;br/&gt;
(1 0 0.2)&lt;br/&gt;
(0 0.25 0.2)&lt;br/&gt;
(0.3333333333 0.25 0.2)&lt;br/&gt;
(0.6666666667 0.25 0.2)&lt;br/&gt;
(1 0.25 0.2)&lt;br/&gt;
(0 0.5 0.2)&lt;br/&gt;
(0.3333333333 0.5 0.2)&lt;br/&gt;
(0.6666666667 0.5 0.2)&lt;br/&gt;
(1 0.5 0.2)&lt;br/&gt;
(0 0.75 0.2)&lt;br/&gt;
(0.3333333333 0.75 0.2)&lt;br/&gt;
(0.6666666667 0.75 0.2)&lt;br/&gt;
(1 0.75 0.2)&lt;br/&gt;
(0 1 0.2)&lt;br/&gt;
(0.3333333333 1 0.2)&lt;br/&gt;
(0.6666666667 1 0.2)&lt;br/&gt;
(1 1 0.2)&lt;br/&gt;
(0 0 0.4)&lt;br/&gt;
(0.3333333333 0 0.4)&lt;br/&gt;
(0.6666666667 0 0.4)&lt;br/&gt;
(1 0 0.4)&lt;br/&gt;
(0 0.25 0.4)&lt;br/&gt;
(0.3333333333 0.25 0.4)&lt;br/&gt;
(0.6666666667 0.25 0.4)&lt;br/&gt;
(1 0.25 0.4)&lt;br/&gt;
(0 0.5 0.4)&lt;br/&gt;
(0.3333333333 0.5 0.4)&lt;br/&gt;
(0.6666666667 0.5 0.4)&lt;br/&gt;
(1 0.5 0.4)&lt;br/&gt;
(0 0.75 0.4)&lt;br/&gt;
(0.3333333333 0.75 0.4)&lt;br/&gt;
(0.6666666667 0.75 0.4)&lt;br/&gt;
(1 0.75 0.4)&lt;br/&gt;
(0 1 0.4)&lt;br/&gt;
(0.3333333333 1 0.4)&lt;br/&gt;
(0.6666666667 1 0.4)&lt;br/&gt;
(1 1 0.4)&lt;br/&gt;
(0 0 0.6)&lt;br/&gt;
(0.3333333333 0 0.6)&lt;br/&gt;
(0.6666666667 0 0.6)&lt;br/&gt;
(1 0 0.6)&lt;br/&gt;
(0 0.25 0.6)&lt;br/&gt;
(0.3333333333 0.25 0.6)&lt;br/&gt;
(0.6666666667 0.25 0.6)&lt;br/&gt;
(1 0.25 0.6)&lt;br/&gt;
(0 0.5 0.6)&lt;br/&gt;
(0.3333333333 0.5 0.6)&lt;br/&gt;
(0.6666666667 0.5 0.6)&lt;br/&gt;
(1 0.5 0.6)&lt;br/&gt;
(0 0.75 0.6)&lt;br/&gt;
(0.3333333333 0.75 0.6)&lt;br/&gt;
(0.6666666667 0.75 0.6)&lt;br/&gt;
(1 0.75 0.6)&lt;br/&gt;
(0 1 0.6)&lt;br/&gt;
(0.3333333333 1 0.6)&lt;br/&gt;
(0.6666666667 1 0.6)&lt;br/&gt;
(1 1 0.6)&lt;br/&gt;
(0 0 0.8)&lt;br/&gt;
(0.3333333333 0 0.8)&lt;br/&gt;
(0.6666666667 0 0.8)&lt;br/&gt;
(1 0 0.8)&lt;br/&gt;
(0 0.25 0.8)&lt;br/&gt;
(0.3333333333 0.25 0.8)&lt;br/&gt;
(0.6666666667 0.25 0.8)&lt;br/&gt;
(1 0.25 0.8)&lt;br/&gt;
(0 0.5 0.8)&lt;br/&gt;
(0.3333333333 0.5 0.8)&lt;br/&gt;
(0.6666666667 0.5 0.8)&lt;br/&gt;
(1 0.5 0.8)&lt;br/&gt;
(0 0.75 0.8)&lt;br/&gt;
(0.3333333333 0.75 0.8)&lt;br/&gt;
(0.6666666667 0.75 0.8)&lt;br/&gt;
(1 0.75 0.8)&lt;br/&gt;
(0 1 0.8)&lt;br/&gt;
(0.3333333333 1 0.8)&lt;br/&gt;
(0.6666666667 1 0.8)&lt;br/&gt;
(1 1 0.8)&lt;br/&gt;
(0 0 1)&lt;br/&gt;
(0.3333333333 0 1)&lt;br/&gt;
(0.6666666667 0 1)&lt;br/&gt;
(1 0 1)&lt;br/&gt;
(0 0.25 1)&lt;br/&gt;
(0.3333333333 0.25 1)&lt;br/&gt;
(0.6666666667 0.25 1)&lt;br/&gt;
(1 0.25 1)&lt;br/&gt;
(0 0.5 1)&lt;br/&gt;
(0.3333333333 0.5 1)&lt;br/&gt;
(0.6666666667 0.5 1)&lt;br/&gt;
(1 0.5 1)&lt;br/&gt;
(0 0.75 1)&lt;br/&gt;
(0.3333333333 0.75 1)&lt;br/&gt;
(0.6666666667 0.75 1)&lt;br/&gt;
(1 0.75 1)&lt;br/&gt;
(0 1 1)&lt;br/&gt;
(0.3333333333 1 1)&lt;br/&gt;
(0.6666666667 1 1)&lt;br/&gt;
(1 1 1)&lt;br/&gt;
)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
// ************************************************************************* //&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://validator.w3.org/check?uri=referer"&gt;&lt;img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This page has been created by the &lt;a href="Tools.htm"&gt;tool&lt;/a&gt; &lt;a href="ToolCodeToHtml.htm"&gt;CodeToHtml&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
