<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TicTacToeLearner</title>
  <meta name="description" content="C++ TicTacToeLearner"/>
  <meta name="keywords" content="C++ TicTacToeLearner code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolTicTacToeLearner.htm">TicTacToeLearner</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="ToolTicTacToeLearner.htm">TicTacToeLearner</a> is a <a href="Tools.htm">tool</a> to demonstrate machine learning.</p>
<p>&nbsp;</p>
<p>The current (version 0.3) problem is, that the learners do not get smarter at playing tic-tac-toe...</p>
<p>&nbsp;</p>
<p><a href="ToolTicTacToeLearner.htm">TicTacToeLearner</a> uses the following <a href="CppLibrary.htm">libraries</a>:</p>
<ul>
  <li><a href="CppBoost.htm">Boost</a>: version 1.40</li>
  <li><a href="CppQt.htm">Qt</a>: version 4.7.0 (32 bit)</li>
  <li><a href="CppQtSvg.htm">QtSvg</a>: version 4:4.6.2-0ubuntu5</li>
  <li><a href="CppQwt.htm">Qwt</a>: version 5.2.0-1build1</li>
  <li><a href="CppStl.htm">STL</a>: from <a href="CppGcc.htm">GCC</a>, shipped with <a href="CppQt.htm">Qt Creator</a> 2.0.0</li>
  <li><a href="CppShark.htm">Shark</a>: version 2.3.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolTicTacToeLearner_0_3.png">View a screenshot of 'TicTacToeLearner' (version 0.3)(png)</a></li>
  <li><a href="ToolTicTacToeLearnerSource_0_4.zip">Download the 'TicTacToeLearner' source code (version 0.4)(zip)</a></li>
  <li><a href="ToolTicTacToeLearnerSource_0_4.htm">View the 'TicTacToeLearner' source code as web page (version 0.4)(htm)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolTicTacToeLearnerSource_0_3.zip">Download the 'TicTacToeLearner' source code (version 0.3)(zip)</a></li>
  <li><a href="ToolTicTacToeLearnerSource_0_3.htm">View the 'TicTacToeLearner' source code as web page (version 0.3)(htm)</a></li>
  <li><a href="ToolTicTacToeLearnerSource_0_2.zip">Download the 'TicTacToeLearner' source code (version 0.2)(zip)</a></li>
  <li><a href="ToolTicTacToeLearnerSource_0_2.htm">View the 'TicTacToeLearner' source code as web page (version 0.2)(htm)</a></li>
  <li><a href="ToolTicTacToeLearnerSource_0_1.zip">Download the 'TicTacToeLearner' source code (version 0.1)(zip)</a></li>
  <li><a href="ToolTicTacToeLearnerSource_0_1.htm">View the 'TicTacToeLearner' source code as web page (version 0.1)(htm)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Version history</h2>
<p>&nbsp;</p>
<ul>
  <li>V X.Y: YYYY-MM-DD: description</li>
  <li>V 0.1: 2010-08-16: initial neural network class passed the tests</li>
  <li>V 0.2: 2010-08-16: neural networks are rated on playing tic-tac-toe, added minimal GUI, improved the neural network class</li>
  <li>V 0.3: 2010-08-16: small GUI improvements, added conditional NDEBUG</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.1.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ToolTicTacToeLearner.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ToolTicTacToeLearner.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(debug, debug|release) {<br/>
&nbsp;&nbsp;message(Building debug version)<br/>
<br/>
} else {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG<br/>
&nbsp;&nbsp;message(Building release version)<br/>
}<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += -L/usr/local/lib -lshark<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += -L/usr/local/lib <a href="CppQwt.htm">-lqwt-qt4</a><br/>
<a href="CppQmakeLibs.htm">LIBS</a> += -L/usr/local/lib -lQtSvg<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>/neuralnet.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppAbout.htm">about</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../<a href="ToolTestTicTacToe.htm">ToolTestTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogwhatsnew.cpp<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>/neuralnet.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppAbout.htm">about</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../<a href="ToolTestTicTacToe.htm">ToolTestTicTacToe</a>/<a href="CppTicTacToe.htm">tictactoe</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogwhatsnew.h<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppAbout.htm">about</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialogwhatsnew.ui<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Tool<a href="CppTicTacToe.htm">TicTacToe</a>Learner.qrc<br/>
<br/>
 release {<br/>
&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NDEBUG \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_DEBUG<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTicTacToeLearner.html">TicTacToeLearner</a>, evolving neural network playing tic-tac-toe<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> DIALOG_H<br/>
<a href="CppDefine.html">#define</a> DIALOG_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDialog.html">QDialog</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "../<a href="ToolTestNeuralNet.html">ToolTestNeuralNet</a>/neuralnet<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "../<a href="ToolTestTicTacToe.html">ToolTestTicTacToe</a>/<a href="CppTicTacToe.html">tictactoe</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> QwtPlot;<br/>
<b><a href="CppStruct.html">struct</a></b> QwtPlotCurve;<br/>
<b><a href="CppNamespace.html">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.html">class</a></b> Dialog;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.html">class</a></b> Dialog : <b><a href="CppPublic.html">public</a></b> <a href="CppQDialog.html">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.html">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> Dialog(<a href="CppQWidget.html">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~Dialog();<br/>
<br/>
<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> changeEvent(<a href="CppQEvent.html">QEvent</a> *e);<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::Dialog *ui;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;QwtPlot&gt; m_plot;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;QwtPlotCurve&gt; m_curve_worst;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;QwtPlotCurve&gt; m_curve_best;<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; m_xs;<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; m_ys_best;<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; m_ys_worst;<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b> <b><a href="CppSlots.html">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onStartClick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on<a href="CppAbout.html">About</a>Click();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; <a href="CppConvert.html">Convert</a>ToInput(<b><a href="CppConst.html">const</a></b> <a href="CppTicTacToe.html">TicTacToe</a>&amp; t, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> player);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppConvert.html">Convert</a>ToMove(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; outputs);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt; Rate_match(<b><a href="CppConst.html">const</a></b> <a href="CppNeuralNet.html">NeuralNet</a>&amp; n1, <b><a href="CppConst.html">const</a></b> <a href="CppNeuralNet.html">NeuralNet</a>&amp; n2);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> DIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTicTacToeLearner.html">TicTacToeLearner</a>, evolving neural network playing tic-tac-toe<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppBOOST_FOREACH.html">foreach</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;qwt-qt4/qwt_plot<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;qwt-qt4/qwt_plot_curve<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "dialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "dialog<a href="CppAbout.html">about</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "ui_dialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Dialog::Dialog(<a href="CppQWidget.html">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::Dialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plot(<b><a href="CppNew.htm">new</a></b> QwtPlot),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_worst(<b><a href="CppNew.htm">new</a></b> QwtPlotCurve),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_best(<b><a href="CppNew.htm">new</a></b> QwtPlotCurve)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(ui-&gt;button_start,<a href="CppSignalMacro.html">SIGNAL</a>(clicked()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onStartClick()));<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(ui-&gt;button_about,<a href="CppSignalMacro.html">SIGNAL</a>(clicked()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on<a href="CppAbout.html">About</a>Click()));<br/>
<br/>
&nbsp;&nbsp;ui-&gt;verticalLayout-&gt;addWidget(m_plot.get());<br/>
&nbsp;&nbsp;m_plot-&gt;setAutoReplot(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;m_curve_worst-&gt;attach( m_plot.get() );<br/>
&nbsp;&nbsp;m_curve_best-&gt;attach( m_plot.get() );<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Dialog::~Dialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> ui;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dialog::changeEvent(<a href="CppQEvent.html">QEvent</a> *e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>::changeEvent(e);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (e-&gt;type()) {<br/>
&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQEvent.html">QEvent</a>::LanguageChange:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;retranslateUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDefault.html">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dialog::onStartClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 10000;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_nets <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;m_xs.resize(0);<br/>
&nbsp;&nbsp;m_ys_worst.resize(0);<br/>
&nbsp;&nbsp;m_ys_best.resize(0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set up the plot<br/>
&nbsp;&nbsp;m_plot-&gt;setAxisScale(QwtPlot::xBottom,0.0,<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(n_<a href="CppTime.htm">time</a>steps));<br/>
&nbsp;&nbsp;m_plot-&gt;setAxisScale(QwtPlot::yLeft,0.0,<a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(n_nets*2*10));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the neural networks<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppNeuralNet.html">NeuralNet</a>&gt; v;<br/>
&nbsp;&nbsp;v.reserve(n_nets);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_nets; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppNeuralNet.html">NeuralNet</a>(9,9,9));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mutate all nets<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.html">BOOST_FOREACH</a>(<a href="CppNeuralNet.html">NeuralNet</a>&amp; n,v) n.Mutate(10.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> t=0; t<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorPlus.htm">+</a>+t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Start t <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> t <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; ratings(n_nets,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_nets; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_nets; <a href="CppOperatorPlus.htm">+</a>+j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt; rating <a href="CppOperatorAssign.htm">=</a> Rate_match(v[i],v[j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratings[i]<a href="CppOperatorPlusAssign.htm">+=</a>rating.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratings[j]<a href="CppOperatorPlusAssign.htm">+=</a>rating.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCopy.html">std::copy</a>(ratings.begin(),ratings.end(),<a href="CppOstream_iterator.html">std::ostream_iterator</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(<a href="CppCout.html">std::cout</a>," "));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> worst_rating_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppDistance.html">std::distance</a>(ratings.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMin_element.html">std::min_element</a>(ratings.begin(),ratings.end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(worst_rating_index <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> worst_rating_index &lt; n_nets);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> worst_rating <a href="CppOperatorAssign.htm">=</a> ratings[worst_rating_index];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> best_rating_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppDistance.html">std::distance</a>(ratings.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMax_element.html">std::max_element</a>(ratings.begin(),ratings.end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(best_rating_index <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> best_rating_index &lt; n_nets);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> best_rating <a href="CppOperatorAssign.htm">=</a> ratings[best_rating_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "Best rating " <a href="CppOperatorStreamOut.html">&lt;&lt;</a> best_rating <a href="CppOperatorStreamOut.html">&lt;&lt;</a> <a href="CppEndl.html">std::endl</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Plot<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_xs.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ys_worst.push_back(worst_rating);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ys_best.push_back(best_rating);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_worst-&gt;setData( &amp;m_xs[0], &amp;m_ys_worst[0],m_xs.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_curve_best-&gt;setData( &amp;m_xs[0], &amp;m_ys_best[0],m_xs.size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the next generation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[worst_rating_index]&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> v[best_rating_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBOOST_FOREACH.html">BOOST_FOREACH</a>(<a href="CppNeuralNet.html">NeuralNet</a>&amp; n,v) n.Mutate(0.001);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.html">#ifdef</a> USE_TOO_GREEDY_APPROACH_468235464<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppNeuralNet.html">NeuralNet</a>&gt; next_gen(n_nets <a href="CppOperatorMinus.htm">-</a> 1,v[best_rating_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(next_gen[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v[best_rating_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBOOST_FOREACH.html">BOOST_FOREACH</a>(<a href="CppNeuralNet.html">NeuralNet</a>&amp; n,next_gen) n.Mutate(0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;next_gen.push_back(v[best_rating_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(next_gen.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.html">std::swap</a>(v,next_gen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_curve_worst-&gt;setData( &amp;m_xs[0], &amp;m_ys_worst[0],m_xs.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_curve_best-&gt;setData( &amp;m_xs[0], &amp;m_ys_best[0],m_xs.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_curve_worst-&gt;attach( m_plot.get() );<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_curve_best-&gt;attach( m_plot.get() );<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dialog::on<a href="CppAbout.html">About</a>Click()<br/>
{<br/>
&nbsp;&nbsp;Dialog<a href="CppAbout.html">About</a> d;<br/>
&nbsp;&nbsp;d.exec();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>'player' is the index of the player<br/>
<a href="CppComment.htm">///</a>player1 has index 1<br/>
<a href="CppComment.htm">///</a>player2 has index 2<br/>
<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; <a href="CppConvert.html">Convert</a>ToInput(<b><a href="CppConst.html">const</a></b> <a href="CppTicTacToe.html">TicTacToe</a>&amp; t, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> player)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(player <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorLogicalOr.htm">||</a> player <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.reserve(9);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppMulti_array.html">boost::multi_array</a>&lt;<b><a href="CppInt.htm">int</a></b>,2&gt;&amp; b <a href="CppOperatorAssign.htm">=</a> t.GetBoard();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> z <a href="CppOperatorAssign.htm">=</a> b[x][y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (z <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0) { v.push_back(0.0); <b><a href="CppContinue.html">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(z <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> player ? 1.0 : <a href="CppOperatorMinus.htm">-</a>1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(v.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 9);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppConvert.html">Convert</a>ToMove(<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;&amp; outputs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppDistance.html">std::distance</a>(outputs.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMax_element.html">std::max_element</a>(outputs.begin(),outputs.end()));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(index <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(index &lt;&nbsp;&nbsp;9);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppMake_pair.html">std::make_pair</a>(index <a href="CppOperatorModulus.htm">%</a> 3, index <a href="CppOperatorDivide.htm">/</a> 3);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt; Rate_match(<b><a href="CppConst.html">const</a></b> <a href="CppNeuralNet.html">NeuralNet</a>&amp; n1, <b><a href="CppConst.html">const</a></b> <a href="CppNeuralNet.html">NeuralNet</a>&amp; n2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTicTacToe.html">TicTacToe</a> t;<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppPair.html">std::pair</a>&lt;<b><a href="CppDouble.html">double</a></b>,<b><a href="CppDouble.html">double</a></b>&gt; ratings(0.0,0.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n1.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.first<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 2<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n2.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.second<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 3<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n1.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.first<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 4<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n2.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.second<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 5<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n1.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalOr.htm">||</a> t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratings.first <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.first<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 6<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n2.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalOr.htm">||</a> t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratings.second <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.second<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 7<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n1.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalOr.htm">||</a> t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratings.first <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.first<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 8<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n2.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalOr.htm">||</a> t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratings.second <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.second<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Turn 9<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentTurn()<a href="CppOperatorEqual.htm">==</a>8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetCurrentPlayer()<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToInput(t,t.GetCurrentPlayer());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; outputs <a href="CppOperatorAssign.htm">=</a> n1.Propagate(inputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppPair.html">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.html">Convert</a>ToMove(outputs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.CanDoMove(move.first,move.second)) <b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.DoMove(move.first,move.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(t.GetWinner()<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalOr.htm">||</a> t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorLogicalOr.htm">||</a> t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t.GetWinner() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratings.first <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> ratings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ratings.first<a href="CppOperatorPlusAssign.htm">+=</a>1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> ratings;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialogabout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialogabout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTicTacToeLearner.html">TicTacToeLearner</a>, evolving neural network playing tic-tac-toe<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> DIALOGABOUT_H<br/>
<a href="CppDefine.html">#define</a> DIALOGABOUT_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDialog.html">QDialog</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.html">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.html">class</a></b> Dialog<a href="CppAbout.html">About</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.html">class</a></b> Dialog<a href="CppAbout.html">About</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppQDialog.html">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.html">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> Dialog<a href="CppAbout.html">About</a>(<a href="CppQWidget.html">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~Dialog<a href="CppAbout.html">About</a>();<br/>
<br/>
<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> changeEvent(<a href="CppQEvent.html">QEvent</a> *e);<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::Dialog<a href="CppAbout.html">About</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b> <b><a href="CppSlots.html">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onWhatsNew();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> DIALOGABOUT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialogabout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialogabout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTicTacToeLearner.html">TicTacToeLearner</a>, evolving neural network playing tic-tac-toe<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "dialog<a href="CppAbout.html">about</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "dialogwhatsnew<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "ui_dialog<a href="CppAbout.html">about</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Dialog<a href="CppAbout.html">About</a>::Dialog<a href="CppAbout.html">About</a>(<a href="CppQWidget.html">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::Dialog<a href="CppAbout.html">About</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(ui-&gt;button_whats_new,<a href="CppSignalMacro.html">SIGNAL</a>(clicked()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(onWhatsNew()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.html">QObject</a>::connect(ui-&gt;button_about_qt,<a href="CppSignalMacro.html">SIGNAL</a>(clicked()),qApp,<a href="CppSLOT.htm">SLOT</a>(<a href="CppAbout.html">about</a><a href="CppQt.htm">Qt</a>()));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Dialog<a href="CppAbout.html">About</a>::~Dialog<a href="CppAbout.html">About</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> ui;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dialog<a href="CppAbout.html">About</a>::changeEvent(<a href="CppQEvent.html">QEvent</a> *e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>::changeEvent(e);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (e-&gt;type()) {<br/>
&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQEvent.html">QEvent</a>::LanguageChange:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;retranslateUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDefault.html">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dialog<a href="CppAbout.html">About</a>::onWhatsNew()<br/>
{<br/>
&nbsp;&nbsp;DialogWhatsNew d;<br/>
&nbsp;&nbsp;d.exec();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialogwhatsnew.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialogwhatsnew.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> DIALOGWHATSNEW_H<br/>
<a href="CppDefine.html">#define</a> DIALOGWHATSNEW_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDialog.html">QDialog</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.html">class</a></b> DialogWhatsNew;<br/>
}<br/>
<br/>
<b><a href="CppClass.html">class</a></b> DialogWhatsNew : <b><a href="CppPublic.html">public</a></b> <a href="CppQDialog.html">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQ_OBJECT.html">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> DialogWhatsNew(<a href="CppQWidget.html">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;~DialogWhatsNew();<br/>
<br/>
<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> changeEvent(<a href="CppQEvent.html">QEvent</a> *e);<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::DialogWhatsNew *ui;<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> DIALOGWHATSNEW_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>dialogwhatsnew.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="dialogwhatsnew.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "dialogwhatsnew<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "ui_dialogwhatsnew<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
DialogWhatsNew::DialogWhatsNew(<a href="CppQWidget.html">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::DialogWhatsNew)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
DialogWhatsNew::~DialogWhatsNew()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DialogWhatsNew::changeEvent(<a href="CppQEvent.html">QEvent</a> *e)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>::changeEvent(e);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.html">switch</a></b> (e-&gt;type()) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQEvent.html">QEvent</a>::LanguageChange:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;retranslateUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.html">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.html">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTicTacToeLearner.html">TicTacToeLearner</a>, evolving neural network playing tic-tac-toe<br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQApplication.html">QApplication</a>&gt;<br/>
<a href="CppInclude.html">#include</a> "dialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfdef.html">#ifdef</a> <a href="CppNDEBUG.html">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.html">std::clog</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> "<a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>() <a href="CppDebug.html">debugging</a> disabled\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(1<a href="CppOperatorEqual.htm">==</a>2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> !"Nonsense can now be written");<br/>
&nbsp;&nbsp;<a href="CppEndif.html">#endif</a><br/>
&nbsp;&nbsp;<a href="CppQApplication.html">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;Dialog d;<br/>
&nbsp;&nbsp;d.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> a.exec();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
