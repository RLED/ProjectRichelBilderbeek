 
<title>const member</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ const member</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek const member variable</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>13</o:Revision>
  <o:TotalTime>136</o:TotalTime>
  <o:Created>2008-05-10T11:33:00Z</o:Created>
  <o:LastSaved>2008-07-14T12:50:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>497</o:Words>
  <o:Characters>2833</o:Characters>
  <o:Category>C++ Richel Bilderbeek const member</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>23</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>3479</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
 </head>

 

 

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>(<a href="Cpp.htm">C++</a>)
<a href="CppConstMember.htm">const member</a></h1>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>The
value of a member variable that is declared <a href="CppConst.htm">const</a>
cannot be changed after <a href="CppConstructor.htm">construction</a>.</p>

<p>&nbsp;</p>

<p>In <a
href="CppClassDesign.htm">class design</a>, a <a href="CppConstMember.htm">const
member</a> reflects an attribute that can be different between objects, but
stay constant after <a href="CppConstructor.htm">construction</a>. When
modeling humans (or persons) attributes as name, gender and birth date are
candidates for a <a href="CppConstMember.htm">const member</a>.</p>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p><b> <a href="CppStruct.htm">struct</a> </b>  Person</p>

<p>{</p>

<p>
 Person(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>
isMale) : mIsMale(isMale) {}</p>

<p>
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>
mIsMale;</p>

<p>};</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>As
a <a href="CppConstMember.htm">const member</a> cannot be changed after <a
href="CppConstructor.htm">construction</a>, you might choose to make it <a
href="CppPublic.htm">public</a>, instead of writing a getter.</p>

<p>&nbsp;</p>

<p>Use
<a href="CppConst.htm">const</a> whenever possible <span style='mso-field-code:
"REF _Ref203610550 \\r \\h"'>[0]<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003200300033003600310030003500350030000000</w:data>
</xml><![endif]--> <span style='mso-field-code:"REF _Ref203610371 \\r \\h"'>[1]<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003200300033003600310030003300370031000000</w:data>
</xml><![endif]--> <span style='mso-field-code:"REF _Ref203610382 \\r \\h"'>[2]<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003200300033003600310030003300380032000000</w:data>
</xml><![endif]--> <span style='mso-field-code:"REF _Ref203610385 \\r \\h"'>[3]<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003200300033003600310030003300380035000000</w:data>
</xml><![endif]--> <span style='mso-field-code:"REF _Ref202766402 \\r \\h"'>[5]<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003200300032003700360036003400300032000000</w:data>
</xml><![endif]--> .</p>

<p>&nbsp;</p>

<p><a
href="CppExerciseTheManyTypesOfConst.htm">Exercise 5: the many types of const</a>
is an exercise about the many types of <a href="CppConst.htm">const</a>.</p>

<p>&nbsp;</p>

<p><a
href="CppConstMember.htm">Const members</a> often make <a href="CppClass.htm">classes</a>
noncopyable. A solution to this feature is to store the objects in a <a
href="CppShared_ptr.htm">boost::shared_ptr</a> and/or using the <a
href="CppPimpl.htm">Pimpl</a> idiom.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a href="CppReferences.htm">References</a></h2>

  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN:
0-201-88954-4 7.9.3: 'Use const extensively and consistently'</p>

<p>   [1] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</a><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN: 0-321-33487-6. Item 3: 'Use
const whenever possible'</p>

<p>   [2] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</a><a href="CppJarrodHollingworth.htm">Jarrod Hollingworth</a>, <a href="CppBobSwart.htm">Bob Swart</a>, <a href="CppMarkCashman.htm">Mark Cashman</a>, <a href="CppPaulGustavson.htm">Paul Gustavson</a>. Sams C++ Builder 6 Developer's Guide. ISBN: 0-672-32480-6.
Chapter 3: 'Understand and use const in your code'</p>

<p>   [3] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</a><a href="CppJesseLiberty.htm">Jesse Liberty</a>. Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour
8, chapter 'Const member functions': 'Use const whenever possible.'</p>

<p>   [4] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</a><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 2:
'Prefer consts, enums and inlines to #defines'</p>

<p>   [5] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</a><a href="CppHerbSutter.htm">  Herb
Sutter    , <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best
practices. ISBN: 0-32-111358-6. Item 15: 'Use const proactively'.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
