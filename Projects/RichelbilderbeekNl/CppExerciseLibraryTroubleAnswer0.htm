 
<title>Answer of exercise #8: Library trouble #0</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ Answer of exercise #8: Library trouble #0</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek Answer of exercise #8: Library trouble #0</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>16</o:Revision>
  <o:TotalTime>356</o:TotalTime>
  <o:Created>2009-05-31T12:51:00Z</o:Created>
  <o:LastSaved>2009-05-31T13:02:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>350</o:Words>
  <o:Characters>2000</o:Characters>
  <o:Category>C++ Richel Bilderbeek Answer of exercise #8: Library trouble #0</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>16</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2456</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
  
 
 
 
 
 
   
-->
</style>
</head>

 

 

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>(<a href="Cpp.htm">C++</a>)
<a href="CppExerciseLibraryTroubleAnswer0.htm">Answer of exercise #8: Library
trouble #0</a></h1>

<p>&nbsp;</p>

<p>This
is the answer of <a href="CppExerciseLibraryTrouble.htm">Exercise #8: library
trouble</a>.</p>

<p>&nbsp;</p>

<p>The
compiler takes you to the following code:</p>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>// search_n.    Search for __count consecutive copies of
__val.</p>

<p>&nbsp;</p>

<p>template &lt;class _ForwardIter,
class _Integer, class _Tp&gt;</p>

<p>_ForwardIter search_n(_ForwardIter
__first, _ForwardIter __last,</p>

<p>                     _Integer __count, const _Tp&amp; __val) {</p>

<p>
 _STLP_DEBUG_CHECK(__check_range(__first, __last))</p>

<p>
 if (__count &lt;= 0)</p>

<p> 
 return __first;</p>

<p>
 else {</p>

<p> 
 __first = find(__first, __last, __val);</p>

<p> 
 while (__first != __last) {</p>

<p>     _Integer __n = __count - 1;</p>

<p>     _ForwardIter __i = __first;</p>

<p>     ++__i;</p>

<p>     while (__i != __last &amp;&amp; __n != 0 &amp;&amp; *__i ==
__val) {</p>

<p>       ++__i;</p>

<p>       --__n;                         <b><span style='color:red'>// &lt;---- THIS
LINE </b></p>

<p>     }</p>

<p>     if (__n == 0)</p>

<p>       return __first;</p>

<p>     else</p>

<p>       __first = find(__i, __last, __val);</p>

<p> 
 }</p>

<p> 
 return __last;</p>

<p>
 }</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>This
must means that __n is also a const data type. This is true, as shown below:</p>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>// search_n.    Search for __count consecutive copies of
__val.</p>

<p>&nbsp;</p>

<p>template &lt;class _ForwardIter,
class <b><span style='color:red'>_Integer </b>, class _Tp&gt;</p>

<p>_ForwardIter search_n(_ForwardIter
__first, _ForwardIter __last,</p>

<p>                     <b><span style='color:red'>_Integer </b>
__count, const _Tp&amp; __val) {</p>

<p>
 _STLP_DEBUG_CHECK(__check_range(__first, __last))</p>

<p>
 if (__count &lt;= 0)</p>

<p> 
 return __first;</p>

<p>
 else {</p>

<p> 
 __first = find(__first, __last, __val);</p>

<p> 
 while (__first != __last) {</p>

<p>     <b><span style='color:red'>_Integer </b> __n = __count
- 1;</p>

<p>     _ForwardIter __i = __first;</p>

<p>     ++__i;</p>

<p>     while (__i != __last &amp;&amp; __n != 0 &amp;&amp; *__i ==
__val) {</p>

<p>       ++__i;</p>

<p>       --__n;</p>

<p>     }</p>

<p>     if (__n == 0)</p>

<p>       return __first;</p>

<p>     else</p>

<p>       __first = find(__i, __last, __val);</p>

<p> 
 }</p>

<p> 
 return __last;</p>

<p>
 }</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>So,
due to the template use, __n will be of type const int, when we pass a __count
of type const int! This conflict with the use of __n as a changing index. The
type of __n should be the non-const type of __count.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
