<title>Answer of exercise #8: Library trouble #0</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ Answer of exercise #8: Library trouble #0</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek Answer of exercise #8: Library trouble #0</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
 </o:DocumentProperties>
</xml><![endif]-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #8: Library trouble #0</title>
  <meta name="description" content="C++ Answer of exercise #8: Library trouble #0"/>
  <meta name="keywords" content="C++ Answer of exercise #8: Library trouble #0"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseLibraryTroubleAnswer0.htm">Answer of exercise #8: Library trouble #0</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseLibraryTrouble.htm">Exercise #8: library trouble</a>.</p>
<p>&nbsp;</p>
<p>The compiler takes you to the following code:</p>
<p>&nbsp;</p>


<p>// search_n.    Search for __count consecutive copies of
__val.</p>

<p>&nbsp;</p>

<p>template &lt;class _ForwardIter,
class _Integer, class _Tp&gt;</p>

<p>_ForwardIter search_n(_ForwardIter
__first, _ForwardIter __last,</p>

<p>                     _Integer __count, const _Tp&amp; __val) {</p>

<p>
 _STLP_DEBUG_CHECK(__check_range(__first, __last))</p>

<p>
 if (__count &lt;= 0)</p>

<p> 
 return __first;</p>

<p>
 else {</p>

<p> 
 __first = find(__first, __last, __val);</p>

<p> 
 while (__first != __last) {</p>

<p>     _Integer __n = __count - 1;</p>

<p>     _ForwardIter __i = __first;</p>

<p>     ++__i;</p>

<p>     while (__i != __last &amp;&amp; __n != 0 &amp;&amp; *__i ==
__val) {</p>

<p>       ++__i;</p>

<p>       --__n;                         <b><span style='color:red'>// &lt;---- THIS
LINE </b></p>

<p>     }</p>

<p>     if (__n == 0)</p>

<p>       return __first;</p>

<p>     else</p>

<p>       __first = find(__i, __last, __val);</p>

<p> 
 }</p>

<p> 
 return __last;</p>

<p>
 }</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<p>This
must means that __n is also a const data type. This is true, as shown below:</p>

<p>&nbsp;</p>

 

<p>&nbsp;</p>

<p>// search_n.    Search for __count consecutive copies of
__val.</p>

<p>&nbsp;</p>

<p>template &lt;class _ForwardIter,
class <b><span style='color:red'>_Integer </b>, class _Tp&gt;</p>

<p>_ForwardIter search_n(_ForwardIter
__first, _ForwardIter __last,</p>

<p>                     <b><span style='color:red'>_Integer </b>
__count, const _Tp&amp; __val) {</p>

<p>
 _STLP_DEBUG_CHECK(__check_range(__first, __last))</p>

<p>
 if (__count &lt;= 0)</p>

<p> 
 return __first;</p>

<p>
 else {</p>

<p> 
 __first = find(__first, __last, __val);</p>

<p> 
 while (__first != __last) {</p>

<p>     <b><span style='color:red'>_Integer </b> __n = __count
- 1;</p>

<p>     _ForwardIter __i = __first;</p>

<p>     ++__i;</p>

<p>     while (__i != __last &amp;&amp; __n != 0 &amp;&amp; *__i ==
__val) {</p>

<p>       ++__i;</p>

<p>       --__n;</p>

<p>     }</p>

<p>     if (__n == 0)</p>

<p>       return __first;</p>

<p>     else</p>

<p>       __first = find(__i, __last, __val);</p>

<p> 
 }</p>

<p> 
 return __last;</p>

<p>
 }</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>
<p>So, due to the template use, __n will be of type const int, when we pass a __count
of type const int! This conflict with the use of __n as a changing index. The
type of __n should be the non-const type of __count.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

