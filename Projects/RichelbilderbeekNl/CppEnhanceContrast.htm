 
<title>EnhanceContrast</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ EnhanceContrast</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek EnhanceContrast Enhance Contrast improve VCL Builder Turbo</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
 </o:DocumentProperties>
</xml><![endif]-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>EnhanceContrast</title>
  <meta name="description" content="C++ EnhanceContrast"/>
  <meta name="keywords" content="C++ EnhanceContrast"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppEnhanceContrast.htm">EnhanceContrast</a></h1>
<p>&nbsp;</p>
<p><a href="CppGraphics.htm">Graphics</a> <a href="CppCodeSnippets.htm">code snippet</a> 
to enhance the contrast of a <a href="CppVcl.htm">VCL</a> <a href="CppTImage.htm">TImage</a>.</p>
<p>&nbsp;</p>
<p><a href="CppEnhanceContrast.htm">EnhanceContrast</a> is similar to <a href="CppDoHistogramEqualization.htm">DoHistogramEqualization</a>, 
except that <a href="CppEnhanceContrast.htm">EnhanceContrast</a> is milder: it tries to
minimally change the average greyness (using <a href="CppGetAverageGreyness.htm">GetAverageGreyness</a>
to first measure it).</p>
<p>&nbsp;</p>
<p><a href="CppEnhanceContrast.htm">EnhanceContrast</a> assumes that you've already defined <a href="CppGetAverageGreyness.htm">GetAverageGreyness</a>.</p>
<p>&nbsp;</p>
<ul>
  <li>
    <a href="CppEnhanceContrast.PNG">View an example of a composition image demonstrating EnhanceContrast and DoHistogramEqualization</a>: first, on the
    original (top-left), a <a href="CppDoFilterOperation.htm">DoFilterOperation</a>
    was performed, resulting in the bottom-left image. On this result, both a <a
    href="CppDoHistogramEqualization.htm">DoHistogramEqualization</a> (top-right)
    and <a href="CppEnhanceContrast.htm">EnhanceContrast</a> (bottom-right) were
    performed on
  </li>
  <li><a href="CppEnhanceContrast.txt">View the code of 'EnhanceContrast' in plain text</a></li>
</ul>
<p>&nbsp;</p>


<p><a href="CppInclude.htm">#include</a>
&lt;<a href="CppCassertH.htm">cassert</a>&gt;</p>

<p><a href="CppInclude.htm">#include</a>
&lt;vcl.h&gt;</p>

<p>&nbsp;</p>

<p>//From http://www.richelbilderbeek.nl/CppEnhanceContrast.htm</p>

<p><b> <a href="CppVoid.htm">void</a> </b>  <a
href="CppEnhanceContrast.htm">EnhanceContrast</a>(<b><a href="CppConst.htm">const</a></b>
TImage * <b><a href="CppConst.htm">const</a></b> image)</p>

<p>{</p>

<p> 
 //Find lowest and highest value</p>

<p> 
 <a href="CppAssert.htm">assert</a>(image!=0 &amp;&amp; &quot;image must
not be NULL&quot;);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap!=0
&amp;&amp; &quot;image bitmap must not be NULL&quot;);</p>

<p> 
 <a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat
== pf24bit &amp;&amp; &quot;image bitmap must be 24 bit&quot;);</p>

<p>&nbsp;</p>

<p> 
 //Get the width and height from the source</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>
width    =
image-&gt;Picture-&gt;Bitmap-&gt;Width;</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>
height = image-&gt;Picture-&gt;Bitmap-&gt;Height;</p>

<p> 
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>
averageGreyness = <a href="CppGetAverageGreyness.htm">GetAverageGreyness</a>(image);</p>

<p>&nbsp;</p>

<p> 
 <b><a href="CppDouble.htm">double</a></b> stretch = 1000.0; //Way too
much for nearly all images</p>

<p>&nbsp;</p>

<p> 
 <b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b>
y=0; y!=height; ++y)</p>

<p> 
 {</p>

<p>   
 <b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b>
<b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a> </b>line</p>

<p>       = <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b>
<b><a href="CppChar.htm">char</a></b> *&gt;(</p>

<p>           image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);</p>

<p>   
 <b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b>
x=0; x!=width; ++x)</p>

<p>   
 {</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> grey</p>

<p>         = <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(line[x*3+0] + line[x*3+1] +
line[x*3+2])</p>

<p>         / 3.0;</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> diff = grey - averageGreyness;</p>

<p>       <b><a href="CppIf.htm">if</a></b> (diff &lt; 0.0)</p>

<p>       {</p>

<p>         //pixel was darker then average</p>

<p>         <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> newStretch = -averageGreyness / diff;</p>

<p>         <a href="CppAssert.htm">assert</a>(newStretch &gt;= 0.0);</p>

<p>         <b><a href="CppIf.htm">if</a></b> (newStretch &lt; stretch)
stretch = newStretch;</p>

<p>       }</p>

<p>       <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b>
(diff &gt; 0.0)</p>

<p>       {</p>

<p>         //pixel was lighter then average</p>

<p>         <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> newStretch = (255.9 - averageGreyness)    / diff;</p>

<p>         <b><a href="CppIf.htm">if</a></b> (newStretch &lt; stretch)
stretch = newStretch;</p>

<p>       }</p>

<p>   
 }</p>

<p> 
 }</p>

<p>&nbsp;</p>

<p> 
 //Enhance the contrast</p>

<p> 
 <b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b>
y=0; y!=height; ++y)</p>

<p> 
 {</p>

<p>   
 <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>
* <b><a href="CppConst.htm">const</a> </b>line</p>

<p>       = <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b>
*&gt;(</p>

<p>         image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);</p>

<p>   
 <b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b>
x=0; x!=width; ++x)</p>

<p>   
 {</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> grey</p>

<p>         = <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppDouble.htm">double</a></b>&gt;(line[x*3+0] + line[x*3+1] +
line[x*3+2])</p>

<p>         / 3.0;</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> diff = grey - averageGreyness;</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppDouble.htm">double</a></b> diffGreyNew = averageGreyness + (<b><a
href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(diff)
* stretch);</p>

<p>       <b><a href="CppConst.htm">const</a></b> <b><a
href="CppInt.htm">int</a></b> newGrey = <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a
href="CppInt.htm">int</a></b>&gt;(diffGreyNew);</p>

<p>       <a href="CppAssert.htm">assert</a>(newGrey &gt;=     0);</p>

<p>       <a href="CppAssert.htm">assert</a>(newGrey &lt;    256);</p>

<p>       line[x*3+2] = newGrey; //Red</p>

<p>       line[x*3+1] = newGrey; //Green</p>

<p>       line[x*3+0] = newGrey; //Blue</p>

<p>   
 }</p>

<p> 
 }</p>

<p>}</p>

<p>&nbsp;</p>

</div>


<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
