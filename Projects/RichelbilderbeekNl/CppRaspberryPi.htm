<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>RaspberryPi</title>
  <meta name="description" content="C++ RaspberryPi"/>
  <meta name="keywords" content="C++ RaspberryPi "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppRaspberryPi.htm">RaspberryPi</a></h1>
<p>&nbsp;</p>
<h2>./CppRaspberryPi/CppRaspberryPi.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRaspberryPi/CppRaspberryPi.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppDial<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppDial/dial.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppDial/dial.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppDial/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRaspberryPi/raspberrypifwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRaspberryPi/raspberrypifwd.h" border = "1"><tr><td><code>
#ifndef RASPBERRYPIFWD_H<br/>
#define RASPBERRYPIFWD_H<br/>
<br/>
namespace rpi {<br/>
&nbsp;&nbsp;namespace gpio {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;struct Pin;<br/>
&nbsp;&nbsp;} //~namespace gpio<br/>
} //namespace rpi<br/>
<br/>
#endif // RASPBERRYPIFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRaspberryPi/raspberrypigpiopin.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRaspberryPi/raspberrypigpiopin.cpp" border = "1"><tr><td><code>
#include "raspberrypigpiopin.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;string&gt;<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
namespace rpi {<br/>
<br/>
namespace gpio {<br/>
<br/>
<br/>
Pin::Pin(const int pin)<br/>
&nbsp;&nbsp;: m_is_high(true),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pin_number(pin)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;const std::set&lt;int&gt; pins = CreatePinNumbers();<br/>
&nbsp;&nbsp;assert(pins.count(pin));<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;this-&gt;SetOutputHigh();<br/>
}<br/>
<br/>
const std::set&lt;int&gt; Pin::CreatePinNumbers()<br/>
{<br/>
&nbsp;&nbsp;//Note that I commented out pin number 27<br/>
&nbsp;&nbsp;//I do not know why I have so often included it, but I must have read it somewhere<br/>
&nbsp;&nbsp;const std::set&lt;int&gt; pins { 3,5,7,8,10,11,12,13,15,16,18,19,21,22,23,24,26 };<br/>
&nbsp;&nbsp;return pins;<br/>
}<br/>
<br/>
void Pin::SetOutputHigh()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string cmd = "echo \"" + boost::lexical_cast&lt;std::string&gt;(GetPinNumber()) + "\" &gt; /sys/class/gpio/export";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; cmd &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (error) std::cerr &lt;&lt; "Error: " &lt;&lt; error &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string cmd = "echo \"out\" &gt; /sys/class/gpio/gpio" + boost::lexical_cast&lt;std::string&gt;(GetPinNumber())+ "/direction";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; cmd &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (error) std::cerr &lt;&lt; "Error: " &lt;&lt; error &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string cmd = "echo \"1\" &gt; /sys/class/gpio/gpio" + boost::lexical_cast&lt;std::string&gt;(GetPinNumber())+ "/value";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; cmd &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (error) std::cerr &lt;&lt; "Error: " &lt;&lt; error &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_is_high = true;<br/>
}<br/>
<br/>
void Pin::SetOutputLow()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string cmd = "echo \"0\" &gt; /sys/class/gpio/gpio" + boost::lexical_cast&lt;std::string&gt;(GetPinNumber())+ "/value";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; cmd &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (error) std::cerr &lt;&lt; "Error: " &lt;&lt; error &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::string cmd = "echo \"" + boost::lexical_cast&lt;std::string&gt;(GetPinNumber()) + "\" &gt; /sys/class/gpio/unexport";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; cmd &lt;&lt; '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int error = std::system(cmd.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (error) std::cerr &lt;&lt; "Error: " &lt;&lt; error &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_is_high = false;<br/>
}<br/>
<br/>
void Pin::Toggle()<br/>
{<br/>
&nbsp;&nbsp;m_is_high ? SetOutputLow() : SetOutputHigh();<br/>
}<br/>
<br/>
bool operator&lt;(const Pin&amp; lhs, const Pin&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;assert(lhs.GetPinNumber() != rhs.GetPinNumber());<br/>
&nbsp;&nbsp;return lhs.GetPinNumber() &lt; rhs.GetPinNumber();<br/>
}<br/>
<br/>
} //namespace gpio<br/>
<br/>
<br/>
} //namespace rpi<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppRaspberryPi/raspberrypigpiopin.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppRaspberryPi/raspberrypigpiopin.h" border = "1"><tr><td><code>
#ifndef RASPBERRYPIGPIOPIN_H<br/>
#define RASPBERRYPIGPIOPIN_H<br/>
<br/>
#include &lt;set&gt;<br/>
<br/>
namespace rpi {<br/>
<br/>
namespace gpio {<br/>
<br/>
constexpr int GetMaxPinNumber() { return 26; }<br/>
<br/>
struct Pin<br/>
{<br/>
&nbsp;&nbsp;///Create a pin and set its output to high<br/>
&nbsp;&nbsp;Pin(const int pin_number);<br/>
<br/>
&nbsp;&nbsp;///Create all valid Pin indices<br/>
&nbsp;&nbsp;static const std::set&lt;int&gt; CreatePinNumbers();<br/>
<br/>
&nbsp;&nbsp;///Get the pin number<br/>
&nbsp;&nbsp;int GetPinNumber() const { return m_pin_number; }<br/>
<br/>
&nbsp;&nbsp;///Set the output to high<br/>
&nbsp;&nbsp;void SetOutputHigh();<br/>
<br/>
&nbsp;&nbsp;///Set the output to low<br/>
&nbsp;&nbsp;void SetOutputLow();<br/>
<br/>
&nbsp;&nbsp;//Toggle the output value<br/>
&nbsp;&nbsp;void Toggle();<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///Is the output high? Or is it low?<br/>
&nbsp;&nbsp;bool m_is_high;<br/>
<br/>
&nbsp;&nbsp;///The pin number<br/>
&nbsp;&nbsp;const int m_pin_number;<br/>
};<br/>
<br/>
bool operator&lt;(const Pin&amp; lhs, const Pin&amp; rhs);<br/>
<br/>
} //namespace gpio<br/>
<br/>
} //namespace rpi<br/>
<br/>
#endif // RASPBERRYPIGPIOPIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
