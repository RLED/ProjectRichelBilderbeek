<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Copy_if</title>
  <meta name="description" content="C++ Copy_if"/>
  <meta name="keywords" content="C++ Copy_if code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCopy_if.htm">Copy_if</a></h1>
<p>&nbsp;</p>
<p><a href="CppCopy_if.htm">copy_if</a> is an <a href="CppAlgorithm.htm">algorithm</a> that was dropped 
from the <a href="Cpp98.htm">C++98</a> <a href="CppStl.htm">STL</a> by accident, but added to the
<a href="Cpp11.htm">C++11</a> <a href="CppStl.htm">STL</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp98.png" alt="C++98"/> <a href="CppCopy_if.htm">std::copy_if</a></h2>
<p>&nbsp;</p>
<p><a href="CppCopy_if.htm">std::copy_if</a> is an <a href="CppAlgorithm.htm">algorithm</a> that was dropped 
from the <a href="Cpp98.htm">C++98</a> <a href="CppStl.htm">STL</a> by accident.</p>
<p>&nbsp;</p>
<p>Prefer <a href="CppAlgorithm.htm">algorithm</a> calls over hand-written loops [1][2].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><img src="PicCpp98.png" alt="C++98"/> Example <a href="CppDefinition.htm">definition</a> of <a href="CppCopy_if.htm">copy_if</a></h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a><a href="CppCopy_if.htm">Copy_if</a> was dropped from the standard library by accident.<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppTypename.htm">typename</a></b> In, <b><a href="CppTypename.htm">typename</a></b> Out, <b><a href="CppTypename.htm">typename</a></b> Pred&gt;<br/>
Out <a href="CppCopy_if.htm">Copy_if</a>(In first, In last, Out res, Pred Pr)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (first <a href="CppOperatorNotEqual.htm">!=</a> last)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Pr(*first))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*res<a href="CppOperatorIncrement.htm">++</a> = *first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>first;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> res;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp11.png" alt="C++11"/> <a href="CppCopy_if.htm">std::copy_if</a></h2>
<p>&nbsp;</p>
<p><a href="CppCopy_if.htm">std::copy_if</a> is an <a href="CppAlgorithm.htm">algorithm</a> similar to
<a href="CppCopy.htm">std::copy</a>, except that a <a href="CppPredicate.htm">predicate</a> can also
be supplied. <a href="CppCopy_if.htm">std::copy_if</a> resides in the <a href="Cpp11.htm">C++11</a> 
<a href="CppStl.htm">STL</a> <a href="CppHeaderFile.htm">header file</a> <a href="CppAlgorithmH.htm">algorithm</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppCopy_if.htm">Download the Qt Creator project 'CppCopy_if' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="Cpp11.htm">C++11</a> <a href="CppInitializerList.htm">initializer list</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> { 0,1,2,3,4,5,6 };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only copy the even values to w<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUsing.htm">using</a></b> <a href="Cpp11.htm">C++11</a> <a href="CppLambdaExpression.htm">lambda expression</a><br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppCopy_if.htm">std::copy_if</a>(v.begin(), v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) { <b><a href="CppReturn.htm">return</a></b> i <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 0; } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check all even values are indeed copied<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUsing.htm">using</a></b> another <a href="Cpp11.htm">C++11</a> <a href="CppInitializerList.htm">initializer list</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w <a href="CppOperatorEqual.htm">==</a> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( { 0,2,4,6 } ) );<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Prefer <a href="CppAlgorithm.htm">algorithm</a> calls over hand-written loops [1][2].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Chapter 18.12.1: 'Prefer algorithms to loops.</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective STL. ISBN: 0-201-74962-9. Item 43: 'Prefer algorithm calls over hand-written loops'</li>
</ol>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>copy_if.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppCopy_if.htm">Copy_if</a>, what should have been <a href="CppCopy_if.htm">std::copy_if</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppCopy_if.htm">CppCopy_if</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> COPY_IF_H<br/>
<a href="CppDefine.htm">#define</a> COPY_IF_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppCopy_if.htm">Copy_if</a> was dropped from the standard <a href="CppLibrary.htm">library</a> by accident.<br/>
<a href="CppComment.htm">//</a>From http://richelbilderbeek.nl/<a href="CppCopy_if.htm">CppCopy_if</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppTypename.htm">typename</a></b> In, <b><a href="CppTypename.htm">typename</a></b> Out, <b><a href="CppTypename.htm">typename</a></b> Pred&gt;<br/>
Out <a href="CppCopy_if.htm">Copy_if</a>(In first, In last, Out res, Pred Pr)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (first <a href="CppOperatorNotEqual.htm">!=</a> last)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Pr(*first))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*res+<a href="CppOperatorPlus.htm">+</a> <a href="CppOperatorAssign.htm">=</a> *first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+first;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> res;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppCopy_if.htm">Copy_if</a>_<a href="CppVersion.htm">version</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "2.0";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("2011-xx-xx: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("2011-06-22: <a href="CppVersion.htm">Version</a> 2.0: added <a href="CppVersion.htm">version</a>ing");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> COPY_IF_H<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
