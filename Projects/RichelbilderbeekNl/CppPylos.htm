&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
&lt;head&gt;
&nbsp;&nbsp;&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"/&gt;
&nbsp;&nbsp;&lt;title&gt;Pylos&lt;/title&gt;
&nbsp;&nbsp;&lt;meta name="description" content="C++ Pylos"/&gt;
&nbsp;&nbsp;&lt;meta name="keywords" content="C++ Pylos "/&gt;
&nbsp;&nbsp;&lt;link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/&gt;
&lt;/head&gt;
&lt;!-- End of head, start of body --&gt;
&lt;body&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- Page header --&gt;
&lt;h1&gt;(&lt;a href="Cpp.htm"&gt;C++&lt;/a&gt;) &lt;a href="CppPylos.htm"&gt;Pylos&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/CppPylos.pri&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/CppPylos.pri" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
INCLUDEPATH += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos&lt;br/&gt;
&lt;br/&gt;
SOURCES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosboard.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pyloscoordinat.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pyloscurrentmovestate.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosgame.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosmove.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosmustremovestate.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosplayer.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylospositionstate.cpp \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pyloswinner.cpp&lt;br/&gt;
&lt;br/&gt;
HEADERS&amp;nbsp;&amp;nbsp;+= \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosboard.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pyloscoordinat.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pyloscurrentmovestate.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosfwd.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosgame.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosmove.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosmustremovestate.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylosplayer.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pylospositionstate.h \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/pyloswinner.h&lt;br/&gt;
&lt;br/&gt;
OTHER_FILES += \&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;../../Classes/CppPylos/Licence.txt&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/Licence.txt&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/Licence.txt" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU GENERAL PUBLIC LICENSE&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Version 3, 29 June 2007&lt;br/&gt;
&lt;br/&gt;
 Copyright (C) 2007 Free Software Foundation, Inc. &amp;lt;http://fsf.org/&amp;gt;&lt;br/&gt;
 Everyone is permitted to copy and distribute verbatim copies&lt;br/&gt;
 of this license document, but changing it is not allowed.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Preamble&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License is a free, copyleft license for&lt;br/&gt;
software and other kinds of works.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The licenses for most software and other practical works are designed&lt;br/&gt;
to take away your freedom to share and change the works.&amp;nbsp;&amp;nbsp;By contrast,&lt;br/&gt;
the GNU General Public License is intended to guarantee your freedom to&lt;br/&gt;
share and change all versions of a program--to make sure it remains free&lt;br/&gt;
software for all its users.&amp;nbsp;&amp;nbsp;We, the Free Software Foundation, use the&lt;br/&gt;
GNU General Public License for most of our software; it applies also to&lt;br/&gt;
any other work released this way by its authors.&amp;nbsp;&amp;nbsp;You can apply it to&lt;br/&gt;
your programs, too.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When we speak of free software, we are referring to freedom, not&lt;br/&gt;
price.&amp;nbsp;&amp;nbsp;Our General Public Licenses are designed to make sure that you&lt;br/&gt;
have the freedom to distribute copies of free software (and charge for&lt;br/&gt;
them if you wish), that you receive source code or can get it if you&lt;br/&gt;
want it, that you can change the software or use pieces of it in new&lt;br/&gt;
free programs, and that you know you can do these things.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To protect your rights, we need to prevent others from denying you&lt;br/&gt;
these rights or asking you to surrender the rights.&amp;nbsp;&amp;nbsp;Therefore, you have&lt;br/&gt;
certain responsibilities if you distribute copies of the software, or if&lt;br/&gt;
you modify it: responsibilities to respect the freedom of others.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For example, if you distribute copies of such a program, whether&lt;br/&gt;
gratis or for a fee, you must pass on to the recipients the same&lt;br/&gt;
freedoms that you received.&amp;nbsp;&amp;nbsp;You must make sure that they, too, receive&lt;br/&gt;
or can get the source code.&amp;nbsp;&amp;nbsp;And you must show them these terms so they&lt;br/&gt;
know their rights.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Developers that use the GNU GPL protect your rights with two steps:&lt;br/&gt;
(1) assert copyright on the software, and (2) offer you this License&lt;br/&gt;
giving you legal permission to copy, distribute and/or modify it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;For the developers' and authors' protection, the GPL clearly explains&lt;br/&gt;
that there is no warranty for this free software.&amp;nbsp;&amp;nbsp;For both users' and&lt;br/&gt;
authors' sake, the GPL requires that modified versions be marked as&lt;br/&gt;
changed, so that their problems will not be attributed erroneously to&lt;br/&gt;
authors of previous versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Some devices are designed to deny users access to install or run&lt;br/&gt;
modified versions of the software inside them, although the manufacturer&lt;br/&gt;
can do so.&amp;nbsp;&amp;nbsp;This is fundamentally incompatible with the aim of&lt;br/&gt;
protecting users' freedom to change the software.&amp;nbsp;&amp;nbsp;The systematic&lt;br/&gt;
pattern of such abuse occurs in the area of products for individuals to&lt;br/&gt;
use, which is precisely where it is most unacceptable.&amp;nbsp;&amp;nbsp;Therefore, we&lt;br/&gt;
have designed this version of the GPL to prohibit the practice for those&lt;br/&gt;
products.&amp;nbsp;&amp;nbsp;If such problems arise substantially in other domains, we&lt;br/&gt;
stand ready to extend this provision to those domains in future versions&lt;br/&gt;
of the GPL, as needed to protect the freedom of users.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Finally, every program is threatened constantly by software patents.&lt;br/&gt;
States should not allow patents to restrict development and use of&lt;br/&gt;
software on general-purpose computers, but in those that do, we wish to&lt;br/&gt;
avoid the special danger that patents applied to a free program could&lt;br/&gt;
make it effectively proprietary.&amp;nbsp;&amp;nbsp;To prevent this, the GPL assures that&lt;br/&gt;
patents cannot be used to render the program non-free.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The precise terms and conditions for copying, distribution and&lt;br/&gt;
modification follow.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0. Definitions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"This License" refers to version 3 of the GNU General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Copyright" also means copyright-like laws that apply to other kinds of&lt;br/&gt;
works, such as semiconductor masks.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"The Program" refers to any copyrightable work licensed under this&lt;br/&gt;
License.&amp;nbsp;&amp;nbsp;Each licensee is addressed as "you".&amp;nbsp;&amp;nbsp;"Licensees" and&lt;br/&gt;
"recipients" may be individuals or organizations.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "modify" a work means to copy from or adapt all or part of the work&lt;br/&gt;
in a fashion requiring copyright permission, other than the making of an&lt;br/&gt;
exact copy.&amp;nbsp;&amp;nbsp;The resulting work is called a "modified version" of the&lt;br/&gt;
earlier work or a work "based on" the earlier work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "covered work" means either the unmodified Program or a work based&lt;br/&gt;
on the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "propagate" a work means to do anything with it that, without&lt;br/&gt;
permission, would make you directly or secondarily liable for&lt;br/&gt;
infringement under applicable copyright law, except executing it on a&lt;br/&gt;
computer or modifying a private copy.&amp;nbsp;&amp;nbsp;Propagation includes copying,&lt;br/&gt;
distribution (with or without modification), making available to the&lt;br/&gt;
public, and in some countries other activities as well.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To "convey" a work means any kind of propagation that enables other&lt;br/&gt;
parties to make or receive copies.&amp;nbsp;&amp;nbsp;Mere interaction with a user through&lt;br/&gt;
a computer network, with no transfer of a copy, is not conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An interactive user interface displays "Appropriate Legal Notices"&lt;br/&gt;
to the extent that it includes a convenient and prominently visible&lt;br/&gt;
feature that (1) displays an appropriate copyright notice, and (2)&lt;br/&gt;
tells the user that there is no warranty for the work (except to the&lt;br/&gt;
extent that warranties are provided), that licensees may convey the&lt;br/&gt;
work under this License, and how to view a copy of this License.&amp;nbsp;&amp;nbsp;If&lt;br/&gt;
the interface presents a list of user commands or options, such as a&lt;br/&gt;
menu, a prominent item in the list meets this criterion.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;1. Source Code.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "source code" for a work means the preferred form of the work&lt;br/&gt;
for making modifications to it.&amp;nbsp;&amp;nbsp;"Object code" means any non-source&lt;br/&gt;
form of a work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "Standard Interface" means an interface that either is an official&lt;br/&gt;
standard defined by a recognized standards body, or, in the case of&lt;br/&gt;
interfaces specified for a particular programming language, one that&lt;br/&gt;
is widely used among developers working in that language.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "System Libraries" of an executable work include anything, other&lt;br/&gt;
than the work as a whole, that (a) is included in the normal form of&lt;br/&gt;
packaging a Major Component, but which is not part of that Major&lt;br/&gt;
Component, and (b) serves only to enable use of the work with that&lt;br/&gt;
Major Component, or to implement a Standard Interface for which an&lt;br/&gt;
implementation is available to the public in source code form.&amp;nbsp;&amp;nbsp;A&lt;br/&gt;
"Major Component", in this context, means a major essential component&lt;br/&gt;
(kernel, window system, and so on) of the specific operating system&lt;br/&gt;
(if any) on which the executable work runs, or a compiler used to&lt;br/&gt;
produce the work, or an object code interpreter used to run it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The "Corresponding Source" for a work in object code form means all&lt;br/&gt;
the source code needed to generate, install, and (for an executable&lt;br/&gt;
work) run the object code and to modify the work, including scripts to&lt;br/&gt;
control those activities.&amp;nbsp;&amp;nbsp;However, it does not include the work's&lt;br/&gt;
System Libraries, or general-purpose tools or generally available free&lt;br/&gt;
programs which are used unmodified in performing those activities but&lt;br/&gt;
which are not part of the work.&amp;nbsp;&amp;nbsp;For example, Corresponding Source&lt;br/&gt;
includes interface definition files associated with source files for&lt;br/&gt;
the work, and the source code for shared libraries and dynamically&lt;br/&gt;
linked subprograms that the work is specifically designed to require,&lt;br/&gt;
such as by intimate data communication or control flow between those&lt;br/&gt;
subprograms and other parts of the work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source need not include anything that users&lt;br/&gt;
can regenerate automatically from other parts of the Corresponding&lt;br/&gt;
Source.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Corresponding Source for a work in source code form is that&lt;br/&gt;
same work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;2. Basic Permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All rights granted under this License are granted for the term of&lt;br/&gt;
copyright on the Program, and are irrevocable provided the stated&lt;br/&gt;
conditions are met.&amp;nbsp;&amp;nbsp;This License explicitly affirms your unlimited&lt;br/&gt;
permission to run the unmodified Program.&amp;nbsp;&amp;nbsp;The output from running a&lt;br/&gt;
covered work is covered by this License only if the output, given its&lt;br/&gt;
content, constitutes a covered work.&amp;nbsp;&amp;nbsp;This License acknowledges your&lt;br/&gt;
rights of fair use or other equivalent, as provided by copyright law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may make, run and propagate covered works that you do not&lt;br/&gt;
convey, without conditions so long as your license otherwise remains&lt;br/&gt;
in force.&amp;nbsp;&amp;nbsp;You may convey covered works to others for the sole purpose&lt;br/&gt;
of having them make modifications exclusively for you, or provide you&lt;br/&gt;
with facilities for running those works, provided that you comply with&lt;br/&gt;
the terms of this License in conveying all material for which you do&lt;br/&gt;
not control copyright.&amp;nbsp;&amp;nbsp;Those thus making or running the covered works&lt;br/&gt;
for you must do so exclusively on your behalf, under your direction&lt;br/&gt;
and control, on terms that prohibit them from making any copies of&lt;br/&gt;
your copyrighted material outside their relationship with you.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Conveying under any other circumstances is permitted solely under&lt;br/&gt;
the conditions stated below.&amp;nbsp;&amp;nbsp;Sublicensing is not allowed; section 10&lt;br/&gt;
makes it unnecessary.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;No covered work shall be deemed part of an effective technological&lt;br/&gt;
measure under any applicable law fulfilling obligations under article&lt;br/&gt;
11 of the WIPO copyright treaty adopted on 20 December 1996, or&lt;br/&gt;
similar laws prohibiting or restricting circumvention of such&lt;br/&gt;
measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a covered work, you waive any legal power to forbid&lt;br/&gt;
circumvention of technological measures to the extent such circumvention&lt;br/&gt;
is effected by exercising rights under this License with respect to&lt;br/&gt;
the covered work, and you disclaim any intention to limit operation or&lt;br/&gt;
modification of the work as a means of enforcing, against the work's&lt;br/&gt;
users, your or third parties' legal rights to forbid circumvention of&lt;br/&gt;
technological measures.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;4. Conveying Verbatim Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey verbatim copies of the Program's source code as you&lt;br/&gt;
receive it, in any medium, provided that you conspicuously and&lt;br/&gt;
appropriately publish on each copy an appropriate copyright notice;&lt;br/&gt;
keep intact all notices stating that this License and any&lt;br/&gt;
non-permissive terms added in accord with section 7 apply to the code;&lt;br/&gt;
keep intact all notices of the absence of any warranty; and give all&lt;br/&gt;
recipients a copy of this License along with the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may charge any price or no price for each copy that you convey,&lt;br/&gt;
and you may offer support or warranty protection for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;5. Conveying Modified Source Versions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a work based on the Program, or the modifications to&lt;br/&gt;
produce it from the Program, in the form of source code under the&lt;br/&gt;
terms of section 4, provided that you also meet all of these conditions:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) The work must carry prominent notices stating that you modified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it, and giving a relevant date.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) The work must carry prominent notices stating that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;released under this License and any conditions added under section&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.&amp;nbsp;&amp;nbsp;This requirement modifies the requirement in section 4 to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"keep intact all notices".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) You must license the entire work, as a whole, under this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License to anyone who comes into possession of a copy.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;License will therefore apply, along with any applicable section 7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;additional terms, to the whole of the work, and all its parts,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;regardless of how they are packaged.&amp;nbsp;&amp;nbsp;This License gives no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;permission to license the work in any other way, but it does not&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;invalidate such permission if you have separately received it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) If the work has interactive user interfaces, each must display&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Appropriate Legal Notices; however, if the Program has interactive&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interfaces that do not display Appropriate Legal Notices, your&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;work need not make them do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A compilation of a covered work with other separate and independent&lt;br/&gt;
works, which are not by their nature extensions of the covered work,&lt;br/&gt;
and which are not combined with it such as to form a larger program,&lt;br/&gt;
in or on a volume of a storage or distribution medium, is called an&lt;br/&gt;
"aggregate" if the compilation and its resulting copyright are not&lt;br/&gt;
used to limit the access or legal rights of the compilation's users&lt;br/&gt;
beyond what the individual works permit.&amp;nbsp;&amp;nbsp;Inclusion of a covered work&lt;br/&gt;
in an aggregate does not cause this License to apply to the other&lt;br/&gt;
parts of the aggregate.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;6. Conveying Non-Source Forms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may convey a covered work in object code form under the terms&lt;br/&gt;
of sections 4 and 5, provided that you also convey the&lt;br/&gt;
machine-readable Corresponding Source under the terms of this License,&lt;br/&gt;
in one of these ways:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source fixed on a durable physical medium&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;customarily used for software interchange.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Convey the object code in, or embodied in, a physical product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(including a physical distribution medium), accompanied by a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer, valid for at least three years and valid for as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long as you offer spare parts or customer support for that product&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;model, to give anyone who possesses the object code either (1) a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy of the Corresponding Source for all the software in the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;product that is covered by this License, on a durable physical&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;medium customarily used for software interchange, for a price no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;more than your reasonable cost of physically performing this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;conveying of source, or (2) access to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source from a network server at no charge.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Convey individual copies of the object code with a copy of the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;written offer to provide the Corresponding Source.&amp;nbsp;&amp;nbsp;This&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alternative is allowed only occasionally and noncommercially, and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;only if you received the object code with such an offer, in accord&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with subsection 6b.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Convey the object code by offering access from a designated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;place (gratis or for a charge), and offer equivalent access to the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source in the same way through the same place at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;further charge.&amp;nbsp;&amp;nbsp;You need not require recipients to copy the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source along with the object code.&amp;nbsp;&amp;nbsp;If the place to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy the object code is a network server, the Corresponding Source&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;may be on a different server (operated by you or a third party)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that supports equivalent copying facilities, provided you maintain&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clear directions next to the object code saying where to find the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source.&amp;nbsp;&amp;nbsp;Regardless of what server hosts the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Corresponding Source, you remain obligated to ensure that it is&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;available for as long as needed to satisfy these requirements.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Convey the object code using peer-to-peer transmission, provided&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you inform other peers where the object code and Corresponding&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Source of the work are being offered to the general public at no&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;charge under subsection 6d.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A separable portion of the object code, whose source code is excluded&lt;br/&gt;
from the Corresponding Source as a System Library, need not be&lt;br/&gt;
included in conveying the object code work.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "User Product" is either (1) a "consumer product", which means any&lt;br/&gt;
tangible personal property which is normally used for personal, family,&lt;br/&gt;
or household purposes, or (2) anything designed or sold for incorporation&lt;br/&gt;
into a dwelling.&amp;nbsp;&amp;nbsp;In determining whether a product is a consumer product,&lt;br/&gt;
doubtful cases shall be resolved in favor of coverage.&amp;nbsp;&amp;nbsp;For a particular&lt;br/&gt;
product received by a particular user, "normally used" refers to a&lt;br/&gt;
typical or common use of that class of product, regardless of the status&lt;br/&gt;
of the particular user or of the way in which the particular user&lt;br/&gt;
actually uses, or expects or is expected to use, the product.&amp;nbsp;&amp;nbsp;A product&lt;br/&gt;
is a consumer product regardless of whether the product has substantial&lt;br/&gt;
commercial, industrial or non-consumer uses, unless such uses represent&lt;br/&gt;
the only significant mode of use of the product.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Installation Information" for a User Product means any methods,&lt;br/&gt;
procedures, authorization keys, or other information required to install&lt;br/&gt;
and execute modified versions of a covered work in that User Product from&lt;br/&gt;
a modified version of its Corresponding Source.&amp;nbsp;&amp;nbsp;The information must&lt;br/&gt;
suffice to ensure that the continued functioning of the modified object&lt;br/&gt;
code is in no case prevented or interfered with solely because&lt;br/&gt;
modification has been made.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey an object code work under this section in, or with, or&lt;br/&gt;
specifically for use in, a User Product, and the conveying occurs as&lt;br/&gt;
part of a transaction in which the right of possession and use of the&lt;br/&gt;
User Product is transferred to the recipient in perpetuity or for a&lt;br/&gt;
fixed term (regardless of how the transaction is characterized), the&lt;br/&gt;
Corresponding Source conveyed under this section must be accompanied&lt;br/&gt;
by the Installation Information.&amp;nbsp;&amp;nbsp;But this requirement does not apply&lt;br/&gt;
if neither you nor any third party retains the ability to install&lt;br/&gt;
modified object code on the User Product (for example, the work has&lt;br/&gt;
been installed in ROM).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The requirement to provide Installation Information does not include a&lt;br/&gt;
requirement to continue to provide support service, warranty, or updates&lt;br/&gt;
for a work that has been modified or installed by the recipient, or for&lt;br/&gt;
the User Product in which it has been modified or installed.&amp;nbsp;&amp;nbsp;Access to a&lt;br/&gt;
network may be denied when the modification itself materially and&lt;br/&gt;
adversely affects the operation of the network or violates the rules and&lt;br/&gt;
protocols for communication across the network.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Corresponding Source conveyed, and Installation Information provided,&lt;br/&gt;
in accord with this section must be in a format that is publicly&lt;br/&gt;
documented (and with an implementation available to the public in&lt;br/&gt;
source code form), and must require no special password or key for&lt;br/&gt;
unpacking, reading or copying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;7. Additional Terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;"Additional permissions" are terms that supplement the terms of this&lt;br/&gt;
License by making exceptions from one or more of its conditions.&lt;br/&gt;
Additional permissions that are applicable to the entire Program shall&lt;br/&gt;
be treated as though they were included in this License, to the extent&lt;br/&gt;
that they are valid under applicable law.&amp;nbsp;&amp;nbsp;If additional permissions&lt;br/&gt;
apply only to part of the Program, that part may be used separately&lt;br/&gt;
under those permissions, but the entire Program remains governed by&lt;br/&gt;
this License without regard to the additional permissions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;When you convey a copy of a covered work, you may at your option&lt;br/&gt;
remove any additional permissions from that copy, or from any part of&lt;br/&gt;
it.&amp;nbsp;&amp;nbsp;(Additional permissions may be written to require their own&lt;br/&gt;
removal in certain cases when you modify the work.)&amp;nbsp;&amp;nbsp;You may place&lt;br/&gt;
additional permissions on material, added by you to a covered work,&lt;br/&gt;
for which you have or can give appropriate copyright permission.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, for material you&lt;br/&gt;
add to a covered work, you may (if authorized by the copyright holders of&lt;br/&gt;
that material) supplement the terms of this License with terms:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a) Disclaiming warranty or limiting liability differently from the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;terms of sections 15 and 16 of this License; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b) Requiring preservation of specified reasonable legal notices or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;author attributions in that material or in the Appropriate Legal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Notices displayed by works containing it; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c) Prohibiting misrepresentation of the origin of that material, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requiring that modified versions of such material be marked in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reasonable ways as different from the original version; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d) Limiting the use for publicity purposes of names of licensors or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authors of the material; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e) Declining to grant rights under trademark law for use of some&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;trade names, trademarks, or service marks; or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f) Requiring indemnification of licensors and authors of that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;material by anyone who conveys the material (or modified versions of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it) with contractual assumptions of liability to the recipient, for&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;any liability that these contractual assumptions directly impose on&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;those licensors and authors.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;All other non-permissive additional terms are considered "further&lt;br/&gt;
restrictions" within the meaning of section 10.&amp;nbsp;&amp;nbsp;If the Program as you&lt;br/&gt;
received it, or any part of it, contains a notice stating that it is&lt;br/&gt;
governed by this License along with a term that is a further&lt;br/&gt;
restriction, you may remove that term.&amp;nbsp;&amp;nbsp;If a license document contains&lt;br/&gt;
a further restriction but permits relicensing or conveying under this&lt;br/&gt;
License, you may add to a covered work material governed by the terms&lt;br/&gt;
of that license document, provided that the further restriction does&lt;br/&gt;
not survive such relicensing or conveying.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you add terms to a covered work in accord with this section, you&lt;br/&gt;
must place, in the relevant source files, a statement of the&lt;br/&gt;
additional terms that apply to those files, or a notice indicating&lt;br/&gt;
where to find the applicable terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Additional terms, permissive or non-permissive, may be stated in the&lt;br/&gt;
form of a separately written license, or stated as exceptions;&lt;br/&gt;
the above requirements apply either way.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;8. Termination.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not propagate or modify a covered work except as expressly&lt;br/&gt;
provided under this License.&amp;nbsp;&amp;nbsp;Any attempt otherwise to propagate or&lt;br/&gt;
modify it is void, and will automatically terminate your rights under&lt;br/&gt;
this License (including any patent licenses granted under the third&lt;br/&gt;
paragraph of section 11).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;However, if you cease all violation of this License, then your&lt;br/&gt;
license from a particular copyright holder is reinstated (a)&lt;br/&gt;
provisionally, unless and until the copyright holder explicitly and&lt;br/&gt;
finally terminates your license, and (b) permanently, if the copyright&lt;br/&gt;
holder fails to notify you of the violation by some reasonable means&lt;br/&gt;
prior to 60 days after the cessation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Moreover, your license from a particular copyright holder is&lt;br/&gt;
reinstated permanently if the copyright holder notifies you of the&lt;br/&gt;
violation by some reasonable means, this is the first time you have&lt;br/&gt;
received notice of violation of this License (for any work) from that&lt;br/&gt;
copyright holder, and you cure the violation prior to 30 days after&lt;br/&gt;
your receipt of the notice.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Termination of your rights under this section does not terminate the&lt;br/&gt;
licenses of parties who have received copies or rights from you under&lt;br/&gt;
this License.&amp;nbsp;&amp;nbsp;If your rights have been terminated and not permanently&lt;br/&gt;
reinstated, you do not qualify to receive new licenses for the same&lt;br/&gt;
material under section 10.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;9. Acceptance Not Required for Having Copies.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You are not required to accept this License in order to receive or&lt;br/&gt;
run a copy of the Program.&amp;nbsp;&amp;nbsp;Ancillary propagation of a covered work&lt;br/&gt;
occurring solely as a consequence of using peer-to-peer transmission&lt;br/&gt;
to receive a copy likewise does not require acceptance.&amp;nbsp;&amp;nbsp;However,&lt;br/&gt;
nothing other than this License grants you permission to propagate or&lt;br/&gt;
modify any covered work.&amp;nbsp;&amp;nbsp;These actions infringe copyright if you do&lt;br/&gt;
not accept this License.&amp;nbsp;&amp;nbsp;Therefore, by modifying or propagating a&lt;br/&gt;
covered work, you indicate your acceptance of this License to do so.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;10. Automatic Licensing of Downstream Recipients.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each time you convey a covered work, the recipient automatically&lt;br/&gt;
receives a license from the original licensors, to run, modify and&lt;br/&gt;
propagate that work, subject to this License.&amp;nbsp;&amp;nbsp;You are not responsible&lt;br/&gt;
for enforcing compliance by third parties with this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;An "entity transaction" is a transaction transferring control of an&lt;br/&gt;
organization, or substantially all assets of one, or subdividing an&lt;br/&gt;
organization, or merging organizations.&amp;nbsp;&amp;nbsp;If propagation of a covered&lt;br/&gt;
work results from an entity transaction, each party to that&lt;br/&gt;
transaction who receives a copy of the work also receives whatever&lt;br/&gt;
licenses to the work the party's predecessor in interest had or could&lt;br/&gt;
give under the previous paragraph, plus a right to possession of the&lt;br/&gt;
Corresponding Source of the work from the predecessor in interest, if&lt;br/&gt;
the predecessor has it or can get it with reasonable efforts.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You may not impose any further restrictions on the exercise of the&lt;br/&gt;
rights granted or affirmed under this License.&amp;nbsp;&amp;nbsp;For example, you may&lt;br/&gt;
not impose a license fee, royalty, or other charge for exercise of&lt;br/&gt;
rights granted under this License, and you may not initiate litigation&lt;br/&gt;
(including a cross-claim or counterclaim in a lawsuit) alleging that&lt;br/&gt;
any patent claim is infringed by making, using, selling, offering for&lt;br/&gt;
sale, or importing the Program or any portion of it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;11. Patents.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A "contributor" is a copyright holder who authorizes use under this&lt;br/&gt;
License of the Program or a work on which the Program is based.&amp;nbsp;&amp;nbsp;The&lt;br/&gt;
work thus licensed is called the contributor's "contributor version".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A contributor's "essential patent claims" are all patent claims&lt;br/&gt;
owned or controlled by the contributor, whether already acquired or&lt;br/&gt;
hereafter acquired, that would be infringed by some manner, permitted&lt;br/&gt;
by this License, of making, using, or selling its contributor version,&lt;br/&gt;
but do not include claims that would be infringed only as a&lt;br/&gt;
consequence of further modification of the contributor version.&amp;nbsp;&amp;nbsp;For&lt;br/&gt;
purposes of this definition, "control" includes the right to grant&lt;br/&gt;
patent sublicenses in a manner consistent with the requirements of&lt;br/&gt;
this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free&lt;br/&gt;
patent license under the contributor's essential patent claims, to&lt;br/&gt;
make, use, sell, offer for sale, import and otherwise run, modify and&lt;br/&gt;
propagate the contents of its contributor version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;In the following three paragraphs, a "patent license" is any express&lt;br/&gt;
agreement or commitment, however denominated, not to enforce a patent&lt;br/&gt;
(such as an express permission to practice a patent or covenant not to&lt;br/&gt;
sue for patent infringement).&amp;nbsp;&amp;nbsp;To "grant" such a patent license to a&lt;br/&gt;
party means to make such an agreement or commitment not to enforce a&lt;br/&gt;
patent against the party.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you convey a covered work, knowingly relying on a patent license,&lt;br/&gt;
and the Corresponding Source of the work is not available for anyone&lt;br/&gt;
to copy, free of charge and under the terms of this License, through a&lt;br/&gt;
publicly available network server or other readily accessible means,&lt;br/&gt;
then you must either (1) cause the Corresponding Source to be so&lt;br/&gt;
available, or (2) arrange to deprive yourself of the benefit of the&lt;br/&gt;
patent license for this particular work, or (3) arrange, in a manner&lt;br/&gt;
consistent with the requirements of this License, to extend the patent&lt;br/&gt;
license to downstream recipients.&amp;nbsp;&amp;nbsp;"Knowingly relying" means you have&lt;br/&gt;
actual knowledge that, but for the patent license, your conveying the&lt;br/&gt;
covered work in a country, or your recipient's use of the covered work&lt;br/&gt;
in a country, would infringe one or more identifiable patents in that&lt;br/&gt;
country that you have reason to believe are valid.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If, pursuant to or in connection with a single transaction or&lt;br/&gt;
arrangement, you convey, or propagate by procuring conveyance of, a&lt;br/&gt;
covered work, and grant a patent license to some of the parties&lt;br/&gt;
receiving the covered work authorizing them to use, propagate, modify&lt;br/&gt;
or convey a specific copy of the covered work, then the patent license&lt;br/&gt;
you grant is automatically extended to all recipients of the covered&lt;br/&gt;
work and works based on it.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;A patent license is "discriminatory" if it does not include within&lt;br/&gt;
the scope of its coverage, prohibits the exercise of, or is&lt;br/&gt;
conditioned on the non-exercise of one or more of the rights that are&lt;br/&gt;
specifically granted under this License.&amp;nbsp;&amp;nbsp;You may not convey a covered&lt;br/&gt;
work if you are a party to an arrangement with a third party that is&lt;br/&gt;
in the business of distributing software, under which you make payment&lt;br/&gt;
to the third party based on the extent of your activity of conveying&lt;br/&gt;
the work, and under which the third party grants, to any of the&lt;br/&gt;
parties who would receive the covered work from you, a discriminatory&lt;br/&gt;
patent license (a) in connection with copies of the covered work&lt;br/&gt;
conveyed by you (or copies made from those copies), or (b) primarily&lt;br/&gt;
for and in connection with specific products or compilations that&lt;br/&gt;
contain the covered work, unless you entered into that arrangement,&lt;br/&gt;
or that patent license was granted, prior to 28 March 2007.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Nothing in this License shall be construed as excluding or limiting&lt;br/&gt;
any implied license or other defenses to infringement that may&lt;br/&gt;
otherwise be available to you under applicable patent law.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;12. No Surrender of Others' Freedom.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If conditions are imposed on you (whether by court order, agreement or&lt;br/&gt;
otherwise) that contradict the conditions of this License, they do not&lt;br/&gt;
excuse you from the conditions of this License.&amp;nbsp;&amp;nbsp;If you cannot convey a&lt;br/&gt;
covered work so as to satisfy simultaneously your obligations under this&lt;br/&gt;
License and any other pertinent obligations, then as a consequence you may&lt;br/&gt;
not convey it at all.&amp;nbsp;&amp;nbsp;For example, if you agree to terms that obligate you&lt;br/&gt;
to collect a royalty for further conveying from those to whom you convey&lt;br/&gt;
the Program, the only way you could satisfy both those terms and this&lt;br/&gt;
License would be to refrain entirely from conveying the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;13. Use with the GNU Affero General Public License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Notwithstanding any other provision of this License, you have&lt;br/&gt;
permission to link or combine any covered work with a work licensed&lt;br/&gt;
under version 3 of the GNU Affero General Public License into a single&lt;br/&gt;
combined work, and to convey the resulting work.&amp;nbsp;&amp;nbsp;The terms of this&lt;br/&gt;
License will continue to apply to the part which is the covered work,&lt;br/&gt;
but the special requirements of the GNU Affero General Public License,&lt;br/&gt;
section 13, concerning interaction through a network will apply to the&lt;br/&gt;
combination as such.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;14. Revised Versions of this License.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The Free Software Foundation may publish revised and/or new versions of&lt;br/&gt;
the GNU General Public License from time to time.&amp;nbsp;&amp;nbsp;Such new versions will&lt;br/&gt;
be similar in spirit to the present version, but may differ in detail to&lt;br/&gt;
address new problems or concerns.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Each version is given a distinguishing version number.&amp;nbsp;&amp;nbsp;If the&lt;br/&gt;
Program specifies that a certain numbered version of the GNU General&lt;br/&gt;
Public License "or any later version" applies to it, you have the&lt;br/&gt;
option of following the terms and conditions either of that numbered&lt;br/&gt;
version or of any later version published by the Free Software&lt;br/&gt;
Foundation.&amp;nbsp;&amp;nbsp;If the Program does not specify a version number of the&lt;br/&gt;
GNU General Public License, you may choose any version ever published&lt;br/&gt;
by the Free Software Foundation.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the Program specifies that a proxy can decide which future&lt;br/&gt;
versions of the GNU General Public License can be used, that proxy's&lt;br/&gt;
public statement of acceptance of a version permanently authorizes you&lt;br/&gt;
to choose that version for the Program.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Later license versions may give you additional or different&lt;br/&gt;
permissions.&amp;nbsp;&amp;nbsp;However, no additional obligations are imposed on any&lt;br/&gt;
author or copyright holder as a result of your choosing to follow a&lt;br/&gt;
later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;15. Disclaimer of Warranty.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY&lt;br/&gt;
APPLICABLE LAW.&amp;nbsp;&amp;nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT&lt;br/&gt;
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY&lt;br/&gt;
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,&lt;br/&gt;
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR&lt;br/&gt;
PURPOSE.&amp;nbsp;&amp;nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM&lt;br/&gt;
IS WITH YOU.&amp;nbsp;&amp;nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF&lt;br/&gt;
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;16. Limitation of Liability.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING&lt;br/&gt;
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS&lt;br/&gt;
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY&lt;br/&gt;
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE&lt;br/&gt;
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF&lt;br/&gt;
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD&lt;br/&gt;
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),&lt;br/&gt;
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF&lt;br/&gt;
SUCH DAMAGES.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;17. Interpretation of Sections 15 and 16.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the disclaimer of warranty and limitation of liability provided&lt;br/&gt;
above cannot be given local legal effect according to their terms,&lt;br/&gt;
reviewing courts shall apply local law that most closely approximates&lt;br/&gt;
an absolute waiver of all civil liability in connection with the&lt;br/&gt;
Program, unless a warranty or assumption of liability accompanies a&lt;br/&gt;
copy of the Program in return for a fee.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; END OF TERMS AND CONDITIONS&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How to Apply These Terms to Your New Programs&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If you develop a new program, and you want it to be of the greatest&lt;br/&gt;
possible use to the public, the best way to achieve this is to make it&lt;br/&gt;
free software which everyone can redistribute and change under these terms.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;To do so, attach the following notices to the program.&amp;nbsp;&amp;nbsp;It is safest&lt;br/&gt;
to attach them to the start of each source file to most effectively&lt;br/&gt;
state the exclusion of warranty; and each file should have at least&lt;br/&gt;
the "copyright" line and a pointer to where the full notice is found.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;one line to give the program's name and a brief idea of what it does.&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is free software: you can redistribute it and/or modify&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;it under the terms of the GNU General Public License as published by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program is distributed in the hope that it will be useful,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&amp;nbsp;&amp;nbsp;See the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GNU General Public License for more details.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You should have received a copy of the GNU General Public License&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;along with this program.&amp;nbsp;&amp;nbsp;If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
Also add information on how to contact you by electronic and paper mail.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;If the program does terminal interaction, make it output a short&lt;br/&gt;
notice like this when it starts in an interactive mode:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;program&amp;gt;&amp;nbsp;&amp;nbsp;Copyright (C) &amp;lt;year&amp;gt;&amp;nbsp;&amp;nbsp;&amp;lt;name of author&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is free software, and you are welcome to redistribute it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;under certain conditions; type `show c' for details.&lt;br/&gt;
&lt;br/&gt;
The hypothetical commands `show w' and `show c' should show the appropriate&lt;br/&gt;
parts of the General Public License.&amp;nbsp;&amp;nbsp;Of course, your program's commands&lt;br/&gt;
might be different; for a GUI interface, you would use an "about box".&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;You should also get your employer (if you work as a programmer) or school,&lt;br/&gt;
if any, to sign a "copyright disclaimer" for the program, if necessary.&lt;br/&gt;
For more information on this, and how to apply and follow the GNU GPL, see&lt;br/&gt;
&amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The GNU General Public License does not permit incorporating your program&lt;br/&gt;
into proprietary programs.&amp;nbsp;&amp;nbsp;If your program is a subroutine library, you&lt;br/&gt;
may consider it more useful to permit linking proprietary applications with&lt;br/&gt;
the library.&amp;nbsp;&amp;nbsp;If this is what you want to do, use the GNU Lesser General&lt;br/&gt;
Public License instead of this License.&amp;nbsp;&amp;nbsp;But first, please read&lt;br/&gt;
&amp;lt;http://www.gnu.org/philosophy/why-not-lgpl.html&amp;gt;.&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosboard.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosboard.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Board, class for a Pylos/Phyraos board&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "pylosboard.h"&lt;br/&gt;
&lt;br/&gt;
#include "pyloscoordinat.h"&lt;br/&gt;
#include "pylosmove.h"&lt;br/&gt;
#include "pylosmustremovestate.h"&lt;br/&gt;
#include "pylosplayer.h"&lt;br/&gt;
#include "pylospositionstate.h"&lt;br/&gt;
#include "pyloswinner.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/numeric/conversion/cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#ifdef PYLOSGAME_H&lt;br/&gt;
#error Pylos::Game must not be defined for a Pylos::Board&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Board::Board() noexcept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_board(CreateEmptyBoard())&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Assume correct board sizes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[0].size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[0][0].size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[0][1].size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[0][2].size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[0][3].size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[1].size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[1][0].size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[1][1].size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[1][2].size() == 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[2].size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[2][0].size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[2][1].size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[3].size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[3][0].size() == 1);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Board::CanDo(const Pylos::Move&amp;amp; m, const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m.IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m.m_move.size()==1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Placement&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!CanSet(m.m_move[0],player)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.m_move.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!CanTransfer(m.m_move[0],m.m_move[1],player)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Make a copy Pylos&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; p = Clone();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p &amp;amp;&amp;amp; "Assume cloning succeeded");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(p.get() != this &amp;amp;&amp;amp; "Assume clone is in different memory location");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#define DEBUG_TEMP_CHECK_27364864984376597625482762367528&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifdef DEBUG_TEMP_CHECK_27364864984376597625482762367528&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if(*p != *this)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(*this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*p == *this &amp;amp;&amp;amp; "Assumes clone is identical");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Do the move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m.m_move.size()==1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p-&amp;gt;Set(m.m_move[0],player,must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p-&amp;gt;Transfer(m.m_move[0],m.m_move[1],must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check if marbles need to be removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (must_remove != MustRemoveState::no)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Move must not lack one/two marbles to be removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (m.m_remove.empty()) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Must remove marbles&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p-&amp;gt;CanRemove(m.m_remove,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Must not remove marbles, so the move is valid if&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//m_remove is empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return m.m_remove.empty();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Board::CanDo(const std::string&amp;amp; s, const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return CanDo(Pylos::Move(s),player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Board::CanDoSomething(const Player&amp;amp; player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !GetAllPossibleMoves(player).empty();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Board::CanRemove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v, const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 1 || v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() == 1) return CanRemove(v[0],player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Disallow selecting the same marble twice&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v[0] == v[1]) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Disallow selecting empty spots&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if ( Get(v[0]) == PositionState::empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| Get(v[1]) == PositionState::empty) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Disallow selecting marbles of different colors&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(v[0]) != Get(v[1])) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Keep one ordering, c2 must be above c1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v[0].GetLayer() == v[1].GetLayer())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return CanRemove(v[0],player) &amp;amp;&amp;amp; CanRemove(v[1],player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v[0].GetLayer() &amp;gt; v[1].GetLayer())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; w(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::swap(w[0],w[1]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return CanRemove(w,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Assert proper ordering&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v[0].GetLayer() &amp;lt; v[1].GetLayer());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//If the top marble cannot be removed,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//the lower cannot either&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!CanRemove(v[1],player)) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The bottom marble can be removed if above are only empty spots, or only the top marble&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Clone the board, remove the top marble of the clone and test if the bottom marble can be removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = this-&amp;gt;Clone();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanRemove(v[1],player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;b-&amp;gt;Remove(v[1],player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b-&amp;gt;CanRemove(v[0],player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Board::CanRemove(const Coordinat&amp;amp; c, const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot remove an empty spot&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(c)==PositionState::empty) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot remove marble of another player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(c)!=ToPositionState(player)) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot remove from top layer, because then the player at the top has already won&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (c.GetLayer() == 3) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//A marble can be removed if all positions above are empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v = GetAbove(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Count(v,PositionState::empty) == static_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Board::CanTransfer(const Coordinat&amp;amp; c, const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot transfer an empty spot&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(c)==PositionState::empty) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot transfer marble of other color&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(c)!=ToPositionState(player)) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot transfer from top layer, because then the player at the top has already won&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (c.GetLayer() == 3) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//A marble can be transferred if all positions above are empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v = GetAbove(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Count(v,PositionState::empty) == static_cast&amp;lt;int&amp;gt;(v.size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Board::CanTransfer(const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Player player) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The source and target must differ&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (from == to) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The to position must be higher&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (from.GetLayer() &amp;gt;= to.GetLayer()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The from position must be the player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(from) != ToPositionState(player)) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//The to position must be empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(to) != PositionState::empty) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Transfer the marble by cloning the board, removing it and placing it&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = this-&amp;gt;Clone();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(player == ToPlayer(b-&amp;gt;Get(from))); //Added check for line below&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const Player player = ToPlayer(b-&amp;gt;Get(from)); //Removed&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanRemove(from,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;b-&amp;gt;Remove(from,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return b-&amp;gt;CanSet(to,player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifdef NDEBUG&lt;br/&gt;
bool ribi::Pylos::Board::CanSet(const Coordinat&amp;amp; c, const Player) const&lt;br/&gt;
#else&lt;br/&gt;
bool ribi::Pylos::Board::CanSet(const Coordinat&amp;amp; c, const Player player) const&lt;br/&gt;
#endif&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(player == Player::player1 || player == Player::player2); //Prevent compiler from complaining&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(c) != PositionState::empty) return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Player can always place a marble at an empty spot at the bottom&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (c.GetLayer() == 0) return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Player wants to place a marbles at non-bottom layer,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//which is valid if none of the spots below are empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v = GetBelow(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Count(v,PositionState::empty) == 0;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Pylos::Board::Count(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; coordinats, const PositionState state) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::count_if(coordinats.begin(),coordinats.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,state](const Coordinat&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Get(c) == state;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Pylos::Board::Count(const PositionState state) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v = Pylos::GetAllCoordinats();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Count(v,state);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Pylos::Board&amp;gt; ribi::Pylos::Board::CreateAdvancedBoard() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::shared_ptr&amp;lt;Board&amp;gt;(new BoardAdvanced);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const boost::shared_ptr&amp;lt;ribi::Pylos::Board&amp;gt; ribi::Pylos::Board::CreateBasicBoard() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::shared_ptr&amp;lt;Board&amp;gt;(new BoardBasic);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::Pylos::Board::Layer&amp;gt; ribi::Pylos::Board::CreateEmptyBoard() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Layer&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(CreateLayer(4));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(CreateLayer(3));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(CreateLayer(2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(CreateLayer(1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Pylos::Board::Layer ribi::Pylos::Board::CreateLayer(const int sz) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(sz &amp;gt; 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::vector&amp;lt;std::vector&amp;lt;PositionState&amp;gt; &amp;gt; (&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sz,std::vector&amp;lt;PositionState&amp;gt;(sz,PositionState::empty));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Board::Do(const std::string&amp;amp; s, const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Do(Pylos::Move(s),player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Board::Do(const Pylos::Move&amp;amp; m, const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDo(m,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m.m_move.size() == 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;Set(m.m_move[0],player,must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Transfer(m.m_move[0],m.m_move[1],must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!m.m_remove.empty())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(m.m_remove.begin(),m.m_remove.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,&amp;amp;must_remove,player](const Coordinat&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Remove(c,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::PositionState ribi::Pylos::Board::Get(const Coordinat&amp;amp; c) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Just checking, a constructed Coordinat should pass all asserts&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c.IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c.IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c.GetLayer() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_board.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c.GetX() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_board[c.GetLayer()].size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board[c.GetLayer()].empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c.GetY() &amp;lt; static_cast&amp;lt;int&amp;gt;(m_board[c.GetLayer()][c.GetX()].size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board[c.GetLayer()][c.GetX()][c.GetY()];&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::Pylos::Move&amp;gt; ribi::Pylos::Board::GetAllPossibleMoves(const Player&amp;amp; player) const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v = Pylos::GetAllCoordinats();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Move&amp;gt; w;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const auto j = v.end();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (auto i = v.begin(); i!=j; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for set&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (this-&amp;gt;CanSet(*i,player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;Get(*i) == PositionState::empty);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (CanDo(i-&amp;gt;ToStr(),player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for simple set (that is, without removal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Move(i-&amp;gt;ToStr()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check first removal coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (auto r1 = v.begin(); r1!=j; ++r1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check one-marble remove&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (CanDo(Move( {*i}, {*r1} ),player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Move( {*i}, {*r1} ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check two-marble remove&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (auto r2 = r1; r2!=j; ++r2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (r1 == r2) continue; //Checked by CanDo&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (CanDo(Move( {*i}, {*r1,*r2} ),player)) w.push_back(Move( {*i}, {*r1,*r2} ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for transfer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (this-&amp;gt;CanTransfer(*i,player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(this-&amp;gt;Get(*i) == ToPositionState(player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (auto to = i; to!=j; ++to)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (CanDo(Move( {*i,*to}, {} ),player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check for simple transfer (that is, without removal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Move( {*i,*to}, {} ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check first removal coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (auto r1 = v.begin(); r1!=j; ++r1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check one-marble remove&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (CanDo(Move( {*i,*to}, {*r1} ),player))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.push_back(Move( {*i,*to}, {*r1} ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Check two-marble remove&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (auto r2 = r1; r2!=j; ++r2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (r1 == r2) continue; //Checked by CanDo&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (CanDo(Move( {*i,*to}, {*r1,*r2} ),player)) w.push_back(Move( {*i,*to}, {*r1,*r2} ));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return w;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
int ribi::Pylos::Board::GetLayerSize(const int layer) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(layer &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(layer &amp;lt; boost::numeric_cast&amp;lt;int&amp;gt;(m_board.size()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::numeric_cast&amp;lt;int&amp;gt;(m_board[layer].size());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::Board::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "2.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Pylos::Board::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back("2012-05-05: version 2.0: initial release version");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Winner ribi::Pylos::Board::GetWinner() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Get(Coordinat(3,0,0)) != PositionState::empty)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (Get(Coordinat(3,0,0)))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case PositionState::player1: return Winner::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case PositionState::player2: return Winner::player2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Count(PositionState::player1)==15&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; !CanDoSomething(Player::player1)) return Winner::player2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (Count(PositionState::player2)==15&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; !CanDoSomething(Player::player2)) return Winner::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Winner::none;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Winner ribi::Pylos::Board::PlayRandomPylosGame(const boost::shared_ptr&amp;lt;Board&amp;gt;&amp;amp; board_original)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; board;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (board_original)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;board = board_original-&amp;gt;Clone();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((std::rand() &amp;gt;&amp;gt; 4) % 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;board = ribi::Pylos::Board::CreateAdvancedBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;board = ribi::Pylos::Board::CreateBasicBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Player player = Player::player1;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (board-&amp;gt;GetWinner() != Winner::none)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return board-&amp;gt;GetWinner();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Use random move from GetAllPossibleMoves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; v = board-&amp;gt;GetAllPossibleMoves(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int i = std::rand() % v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;board-&amp;gt;Do(v[i],player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Do not always toggle the player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((std::rand() &amp;gt;&amp;gt; 4) % 2) Toggle(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifdef NDEBUG&lt;br/&gt;
void ribi::Pylos::Board::Remove(const Coordinat&amp;amp; c, const Player)&lt;br/&gt;
#else&lt;br/&gt;
void ribi::Pylos::Board::Remove(const Coordinat&amp;amp; c, const Player player)&lt;br/&gt;
#endif&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanRemove(c,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board[c.GetLayer()][c.GetX()][c.GetY()] = PositionState::empty;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Board::Remove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v, const Player player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanRemove(v,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Proper ordering: v[0] must be marble above&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() == 2 &amp;amp;&amp;amp; v[0].GetLayer() &amp;lt; v[1].GetLayer())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; w(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::swap(w[0],w[1]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Remove(w,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Assert proper ordering&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 1 || v[0].GetLayer() &amp;gt;= v[1].GetLayer());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,player](const Coordinat&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Remove(c,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Pylos::Board::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test operator==");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoardBasic a;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoardBasic b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a == b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a == b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test operator==&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoardAdvanced a;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoardAdvanced b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a == b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a == b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoardAdvanced a;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BoardBasic b;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a != b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Game::Clone of GameBasic");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardBasic);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(a-&amp;gt;Clone());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; c(new BoardAdvanced);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Game::Clone of GameAdvanced");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardAdvanced);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(a-&amp;gt;Clone());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; c(new BoardBasic);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Clone of played GameBasic");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardBasic);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(a-&amp;gt;Clone());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Clone of played BoardAdvanced");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardAdvanced);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(a-&amp;gt;Clone());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test conversion of Board to text");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardAdvanced);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(new BoardBasic);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == std::string(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"X . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . ."));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == b-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,1,0)",Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,1,0)",Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == std::string(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"X O . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . ."));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == b-&amp;gt;ToStr());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,1,1)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,1,1)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(a-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == std::string(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"X O . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". X . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . ."));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == b-&amp;gt;ToStr());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,0,1)",Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,0,1)",Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(a-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == std::string(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"X O . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O X . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . ."));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == b-&amp;gt;ToStr());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(1,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(1,0,0)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(a-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == std::string(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"X O . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" X . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O X . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . ."));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == b-&amp;gt;ToStr());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,2,0)",Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,2,0)",Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(a-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == std::string(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"X O O .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" X . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O X . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . ."));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == b-&amp;gt;ToStr());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,2,1)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,2,1)",Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(a-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == std::string(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"X O O .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" X . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"O X X .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . .\n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;" . . . \n"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;". . . ."));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;ToStr() == b-&amp;gt;ToStr());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test horizontal detection of line in both boards");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardAdvanced);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(new BoardBasic);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,3,0)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,3,0)"),Player::player1,must_remove); assert(!must_remove); //Basic does not test for lines&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,1,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,1,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(!must_remove); //Basic does not test for lines&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test horizontal detection of line in both boards");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardAdvanced);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(new BoardBasic);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,1)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,1)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,2)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,2)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,3)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,3)"),Player::player1,must_remove); assert(!must_remove); //Basic does not test for lines&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,0)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,1)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,1)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,3)"),Player::player2,must_remove); assert( must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,3)"),Player::player2,must_remove); assert(!must_remove); //Basic does not test for lines&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test block detection of line in both boards");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; a(new BoardAdvanced);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt; b(new BoardBasic);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,1)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,1)"),Player::player1,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,1,1)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,1,1)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,3,3)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,3,3)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,3)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,3)"),Player::player2,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert( must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert( must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Board test transfer of marbles");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; a = CreateAdvancedBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = CreateBasicBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,0,0)"),Player::player2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,0,0)"),Player::player2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,0,0)-&amp;gt;(0,0,1)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,0,0)-&amp;gt;(0,0,1)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,0,0)-&amp;gt;(0,0,1)"),Player::player2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,0,0)-&amp;gt;(0,0,1)"),Player::player2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Board test stacking by setting");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; a = CreateAdvancedBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = CreateBasicBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(0,0,0)"), Coordinat("(0,1,0)"), Coordinat("(0,2,0)"), Coordinat("(0,3,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(0,3,1)"), Coordinat("(0,2,1)"), Coordinat("(0,1,1)"), Coordinat("(0,0,1)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(0,0,2)"), Coordinat("(0,1,2)"), Coordinat("(0,2,2)"), Coordinat("(0,3,2)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(0,3,3)"), Coordinat("(0,2,3)"), Coordinat("(0,1,3)"), Coordinat("(0,0,3)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(1,0,0)"), Coordinat("(1,1,0)"), Coordinat("(1,2,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(1,0,1)"), Coordinat("(1,1,1)"), Coordinat("(1,2,1)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(1,0,2)"), Coordinat("(1,1,2)"), Coordinat("(1,2,2)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(2,0,0)"), Coordinat("(2,1,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(2,0,1)"), Coordinat("(2,1,1)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Coordinat("(3,0,0)")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Player player = Player::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[a,b,&amp;amp;player](const Coordinat&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanSet(c,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanSet(c,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(c,player,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(c,player,must_remove); assert(!must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Toggle(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetWinner() != Winner::none);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetWinner() != Winner::none);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Board test #2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; a = CreateAdvancedBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = CreateBasicBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,0,0)"), Move("(0,0,1)"), Move("(0,1,1)"), Move("(0,1,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(1,0,0)"), Move("(0,0,2)"), Move("(0,1,2)"), Move("(0,2,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,2,2)"), Move("(0,3,0)")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Player player = Player::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[a,b,&amp;amp;player](const Move&amp;amp; m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!a-&amp;gt;CanDo(m,player)) TRACE(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDo(m,player)) TRACE(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo(m,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDo(m,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(m,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(m,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Toggle(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,2,1)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)"),Player::player1));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,2,1)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)"),Player::player1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Board test #3");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; a = CreateAdvancedBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = CreateBasicBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,0,0)"), Move("(0,1,0)"), Move("(0,0,1)"), Move("(0,1,1)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,0,2)"), Move("(0,1,2)")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Player player = Player::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[a,b,&amp;amp;player](const Move&amp;amp; m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!a-&amp;gt;CanDo(m,player)) TRACE(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDo(m,player)) TRACE(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo(m,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDo(m,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(m,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(m,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Toggle(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,0,2)-&amp;gt;(1,0,0)"),Player::player1)); //1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,0,1)-&amp;gt;(1,0,1)"),Player::player1)); //2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,0,0)-&amp;gt;(0,2,0)"),Player::player1)); //3&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,0,2)-&amp;gt;(1,0,0)"),Player::player1)); //1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,0,1)-&amp;gt;(1,0,1)"),Player::player1)); //2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,0,0)-&amp;gt;(0,2,0)"),Player::player1)); //3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test ribi::Pylos::Board::GetAllPossibleMoves simple transfer");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; a = CreateAdvancedBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = CreateBasicBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 16);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 16);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 16);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 16);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,0)"),Player::player1); //1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 15);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 15);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 15);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 15);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,1)"),Player::player2); //2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,1)"),Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,1,1)"),Player::player1); //3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,1,1)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,1,0)"),Player::player2); //4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,1,0)"),Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;Count(PositionState::player1) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;Count(PositionState::player1) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;Count(PositionState::player2) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;Count(PositionState::player2) == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 13); //13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 13); //12 on bottom layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 13); //1 on one-but-buttom layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 13);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,2,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,2,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,2,1)"),Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,2,1)"),Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;Get(Coordinat(0,2,1)) == PositionState::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;Get(Coordinat(0,2,1)) == PositionState::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 14); //13&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 14); //10 on bottom layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 14); //2 on one-but-buttom layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 14); //2 transfers&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test ribi::Pylos::Board::GetAllPossibleMoves simple remove");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; a = CreateAdvancedBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; b = CreateBasicBoard();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,1)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,1)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,1,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,1,0)"),Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//After placing (0,1,1), there are one (4 ways) or two marbles (6 ways) to be removed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Next to this, there are 12 empty spots&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player1).size() == 22);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 13);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetAllPossibleMoves(Player::player2).size() == 13);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Filling up 5 basic Pylos boards randomly");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=5; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Pylos::Board::PlayRandomPylosGame(Pylos::Board::CreateBasicBoard());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Filling up 5 advanced Pylos boards randomly");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=5; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Pylos::Board::PlayRandomPylosGame(ribi::Pylos::Board::CreateAdvancedBoard());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Filling up 5 Pylos boards randomly");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=5; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Pylos::Board::PlayRandomPylosGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::Board::ToStr() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v = this-&amp;gt;ToText();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),[&amp;amp;s](const std::string&amp;amp; t) { s += t; s += '\n'; } );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s.resize( s.size() - 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Pylos::Board::ToText() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;std::string&amp;gt; v(7,std::string(7,' '));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int layer = 0; layer!=4; ++layer)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int y=0; y!=4-layer; ++y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int x=0; x!=4-layer; ++x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int x_co = layer + (x * 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int y_co = layer + (y * 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c(layer,x,y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.GetX() == x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.GetY() == y);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c.GetLayer() == layer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const char c_old = v[y_co][x_co];&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const char c_new = ToChar(Get(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Higher empty positions must not overwrite occupied lower ones&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (c_new == ToChar(PositionState::empty)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; ( c_old == ToChar(PositionState::player1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| c_old == ToChar(PositionState::player2) ) )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v[y_co][x_co] = c_new;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Board::Transfer(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState&amp;amp; must_remove)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const PositionState state = Get(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(state!=PositionState::empty);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Player player = ToPlayer(state);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanTransfer(from,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanSet(to,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanTransfer(from,to,player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Remove(from,player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Set(to,player,must_remove);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator==(const Board&amp;amp; lhs, const Board&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Determine if types are equal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (typeid(lhs)!=typeid(rhs)) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.m_board == rhs.m_board;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator!=(const Board&amp;amp; lhs, const Board&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs==rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Pylos::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os,const Board&amp;amp; p) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; p.ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::BoardAdvanced::BoardAdvanced() noexcept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Board()&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Pylos::Board&amp;gt; ribi::Pylos::BoardAdvanced::Clone() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoardAdvanced * const p = new BoardAdvanced;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;p-&amp;gt;m_board = m_board;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; sp(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*sp == *this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return sp;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::BoardAdvanced::Set(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Player player,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState&amp;amp; must_remove)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanSet(c,player));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const PositionState state = ToPositionState(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board[c.GetLayer()][c.GetX()][c.GetY()] = state;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Get(c)==state);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;must_remove = MustRemoveState::no;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check for squares&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;Coordinat&amp;gt; Square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Square&amp;gt; v = GetSquares(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() &amp;lt; 5);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool do_return = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,&amp;amp;do_return,state](const Square&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!do_return)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool success = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(s.begin(),s.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,&amp;amp;success,state](const Coordinat&amp;amp; d)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (success) { if (Get(d)!=state) { success = false; } }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (success) { do_return = true; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (do_return) { must_remove = ToMustRemoveState(player); return; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check for lines&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;Coordinat&amp;gt; Line;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Line&amp;gt; v = GetLines(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///There will be zero (layer 2 and 3)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;///or two lines (layer 0 and 1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 0 || v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::find_if(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,state](const Line&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return std::find_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.begin(),s.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,state](const Coordinat&amp;amp; d)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Get(d)!=state;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) == s.end();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) != v.end()) { must_remove = ToMustRemoveState(player); return; }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::BoardBasic::BoardBasic() noexcept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: Board()&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Pylos::Board&amp;gt; ribi::Pylos::BoardBasic::Clone() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoardBasic * const p = new BoardBasic;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;p-&amp;gt;m_board = m_board;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; sp(p);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(*sp == *this);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return sp;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::BoardBasic::Set(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Player player,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState&amp;amp; must_remove)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanSet(c,player));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const PositionState state = ToPositionState(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board[c.GetLayer()][c.GetX()][c.GetY()] = state;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(Get(c)==state);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Check for squares&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;Coordinat&amp;gt; Square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Square&amp;gt; v = GetSquares(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (std::find_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,state](const Square&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return std::find_if(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.begin(),s.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this,state](const Coordinat&amp;amp; d)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Get(d) != state;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) == s.end();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) != v.end())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;must_remove = ToMustRemoveState(player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosboard.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosboard.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Board, class for a Pylos/Phyraos board&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSBOARD_H&lt;br/&gt;
#define PYLOSBOARD_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
#include "pylosfwd.h"&lt;br/&gt;
#include "pylosmove.h"&lt;br/&gt;
#include "pyloswinner.h"&lt;br/&gt;
#include "pylosplayer.h"&lt;br/&gt;
#include "pylospositionstate.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
struct Board&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;std::vector&amp;lt;PositionState&amp;gt; &amp;gt; Layer;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Board() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual ~Board() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanDo determines if a Pylos notation move is valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDo(const std::string&amp;amp; s, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanDo determines if a Pylos move is valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDo(const Move&amp;amp; m, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanDoSomething specifies if there is a possible move to do for a player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDoSomething(const Player&amp;amp; player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanRemove specifies if one or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///two marble(s) can be removed at the requested position(s).&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanRemove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanMove specifies the marble at the specified coordinat can be tranferred&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanTransfer(const Coordinat&amp;amp; c, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanMove specifies if the marble can be tranferred to the new (higher) position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanTransfer(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanSet specifies if a marble can be placed at the coordinat.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///It is chosen to let the client specify a player, to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///emphasise that a player's marble is placed, instead&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///of a PositionState::empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanSet(const Coordinat&amp;amp; c, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone a derived class of Board.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual boost::shared_ptr&amp;lt;Board&amp;gt; Clone() const = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Count counts the requested state at the specified coordinats&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int Count(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; coordinats, const PositionState state) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Count counts the requested state.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Valid states are empty, player1 and player2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int Count(const PositionState state) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a BoardAdvanced&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Board&amp;gt; CreateAdvancedBoard() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a BoardBasic&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const boost::shared_ptr&amp;lt;Board&amp;gt; CreateBasicBoard() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do performs a move in Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Do(const std::string&amp;amp; s, const Player player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do performs a Pylos move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Do(const Move&amp;amp; m, const Player player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Get returns the state of the requested location&lt;br/&gt;
&amp;nbsp;&amp;nbsp;PositionState Get(const Coordinat&amp;amp; c) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetAllPossibleMoves returns all moves valid for the selected player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; GetAllPossibleMoves(const Player&amp;amp; player) const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetLayerSize returns how many marbles this is wide/height.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example; layer 0 has 4x4 marbles, so GetLayerSize&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///will return 4.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetLayerSize(const int layer) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Return the possible winner&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Winner GetWinner() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///PlayRandomPylosGame plays a random Pylos game and returns the winner.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static Winner PlayRandomPylosGame(const boost::shared_ptr&amp;lt;Board&amp;gt;&amp;amp; board_original = boost::shared_ptr&amp;lt;Board&amp;gt;());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Remove removes one or two marbles.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Remove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v, const Player player);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Restart sets the board in its initial position.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Restart();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set sets the state of the given location.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///must_remove is set to the MustRemoveState who must remove one or two marbles.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;virtual void Set(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player player,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState&amp;amp; must_remove) = 0;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Display the board as a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Display the board as a 2D std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; ToText() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Transfer lets current player transfer his marble to a new, higher position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Transfer(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState&amp;amp; must_remove);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;protected:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_board holds the board structure.\n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_board[0]: bottom 4x4 layer\n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_board[1]: 3x3 layer\n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_board[2]: 2x2 layer\n&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_board[3]: top 1x1 layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Layer&amp;gt; m_board;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanRemove specifies if current player can remove&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///the marble at the requested position.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanRemove(const Coordinat&amp;amp; c, const Player player) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///RemoveMarble removes one marble.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Remove(const Coordinat&amp;amp; c, const Player player);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateEmptyBoard created an empty board.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Layer&amp;gt; CreateEmptyBoard() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CreateLayer creates an empty layer.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Layer CreateLayer(const int sz) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Friends&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//friend void boost::checked_delete&amp;lt;&amp;gt;(Board* x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend bool operator==(const Board&amp;amp; lhs, const Board&amp;amp; rhs) noexcept;&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
///A BoardAdvanced lets a player remove one or two marbles when&lt;br/&gt;
///- a player creates a 2x2 square of marbles of his/her color&lt;br/&gt;
///- a player creates a 1x4 (bottom layer) or 1x3 (one-but-bottom layer)&lt;br/&gt;
///&amp;nbsp;&amp;nbsp;line of marbles of his/her color&lt;br/&gt;
struct BoardAdvanced : public Board&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoardAdvanced() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~BoardAdvanced() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone a derived class of Board.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; Clone() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Load loads a game in Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//void Load(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Save saves the current game in Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//void Save(const std::string&amp;amp; s) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///ToStr converts Pylos its contents to a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const std::string ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set sets the state of the given location.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///must_remove is set to true if the current player is allowed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///to remove one or two marbles.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Set(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player state,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState&amp;amp; must_remove);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(BoardAdvanced* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
///A BoardBasic lets a player remove one or two marbles when&lt;br/&gt;
///- a player creates a 2x2 square of marbles of his/her color&lt;br/&gt;
struct BoardBasic : public Board&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BoardBasic() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;~BoardBasic() noexcept {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Clone a derived class of Pylos.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; Clone() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Load loads a game in Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//void Load(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Save saves the current game in Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//void Save(const std::string&amp;amp; s) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///ToStr converts Pylos its contents to a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const std::string ToStr() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set sets the state of the given location.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///must_remove is set to true if the current player is allowed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///to remove one or two marbles.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Set(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player state,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MustRemoveState&amp;amp; must_remove);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend void boost::checked_delete&amp;lt;&amp;gt;(BoardBasic* x);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
///A BoardBeginner lets a player remove one or two marbles when&lt;br/&gt;
///- never&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Board&amp;amp; lhs, const Board&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator!=(const Board&amp;amp; lhs, const Board&amp;amp; rhs) noexcept;&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os,const Board&amp;amp; p) noexcept;&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSBOARD_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pyloscoordinat.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pyloscoordinat.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Coordinat, Pylos/Phyraos coordinat class&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"&lt;br/&gt;
#include "pyloscoordinat.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/numeric/conversion/cast.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Coordinat::Coordinat(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int layer,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_layer(layer),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_x(x),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_y(y)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsValid(layer,x,y));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Coordinat::Coordinat(const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_layer{boost::lexical_cast&amp;lt;int&amp;gt;(s.at(1))},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_x{boost::lexical_cast&amp;lt;int&amp;gt;(s.at(3))},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_y{boost::lexical_cast&amp;lt;int&amp;gt;(s.at(5))}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() == 7);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef DEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!IsValid(m_layer,m_x,m_y)) { TRACE(s); }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsValid(m_layer,m_x,m_y));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Coordinat::IsValid(const int layer, const int x, const int y) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return layer &amp;gt;= 0 &amp;amp;&amp;amp; layer &amp;lt; 4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; 4-layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;lt; 4-layer;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::Pylos::Coordinat&amp;gt; ribi::Pylos::GetAllCoordinats() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int z=0; z!=4; ++z)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int y=0; y!=4-z; ++y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int x=0; x!=4-z; ++x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(Coordinat(z,x,y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 30);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::Coordinat::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "2.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Pylos::Coordinat::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-05-05: version 2.0: initial release version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Coordinat::IsValid() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return IsValid(m_layer,m_x,m_y);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::Coordinat::ToStr() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return std::string("(")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(m_layer)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ std::string(",")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(m_x)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ std::string(",")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ boost::lexical_cast&amp;lt;std::string&amp;gt;(m_y)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ std::string(")");&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::Pylos::Coordinat&amp;gt; ribi::Pylos::GetAbove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int layer = c.GetLayer() + 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x = c.GetX();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y = c.GetY();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Just get all coordinats&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-0,y-0)) v.push_back(Coordinat(layer,x-0,y-0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-0,y-1)) v.push_back(Coordinat(layer,x-0,y-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-1,y-0)) v.push_back(Coordinat(layer,x-1,y-0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-1,y-1)) v.push_back(Coordinat(layer,x-1,y-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::Pylos::Coordinat&amp;gt; ribi::Pylos::GetBelow(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c.IsValid());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(c.GetLayer()!=0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int layer = c.GetLayer() - 1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x = c.GetX();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y = c.GetY();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(Coordinat(layer,x+0,y+0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(Coordinat(layer,x+1,y+0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(Coordinat(layer,x+0,y+1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;v.push_back(Coordinat(layer,x+1,y+1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;ribi::Pylos::Coordinat&amp;gt; &amp;gt; ribi::Pylos::GetLines(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;Coordinat&amp;gt; Line;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Line&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int layer = c.GetLayer();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (layer == 2 || layer == 3) return v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x = c.GetX();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y = c.GetY();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Line horizontal;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Line vertical;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i=0; i!=4-layer; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;horizontal.push_back(Coordinat(layer,i,y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vertical.push_back(Coordinat(layer,x,i));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(boost::numeric_cast&amp;lt;int&amp;gt;(horizontal.size()) == 4-layer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(boost::numeric_cast&amp;lt;int&amp;gt;(vertical.size()) == 4-layer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(horizontal);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(vertical);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const ribi::Pylos::Coordinat ribi::Pylos::GetRandomCoordinat() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int layer = ( std::rand() &amp;gt;&amp;gt; 4) % 4;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x = ( std::rand() &amp;gt;&amp;gt; 4) % (4 - layer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y = ( std::rand() &amp;gt;&amp;gt; 4) % (4 - layer);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(ribi::Pylos::Coordinat::IsValid(layer,x,y));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return Coordinat(layer,x,y);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;ribi::Pylos::Coordinat&amp;gt; &amp;gt; ribi::Pylos::GetSquares(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;typedef std::vector&amp;lt;Coordinat&amp;gt; Square;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Square&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int layer = c.GetLayer();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(layer &amp;gt;= 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(layer &amp;lt; 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int x = c.GetX();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int y = c.GetY();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const int sz = 4 - layer;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (x &amp;gt; 0 &amp;amp;&amp;amp; y &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Square s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-0,y-0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-0,y-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-1,y-0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-1,y-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (x + 1 &amp;lt; sz &amp;amp;&amp;amp; y &amp;gt; 0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Square s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+0,y-0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+0,y-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+1,y-0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+1,y-1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (x &amp;gt; 0 &amp;amp;&amp;amp; y + 1 &amp;lt; sz)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Square s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-0,y+0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-0,y+1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-1,y+0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x-1,y+1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (x + 1 &amp;lt; sz &amp;amp;&amp;amp; y + 1 &amp;lt; sz)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Square s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+0,y+0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+0,y+1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+1,y+0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.push_back(Coordinat(layer,x+1,y+1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Pylos::Coordinat::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test PylosCoordinat operators&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c1(0,2,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c2(0,2,3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c3(0,3,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c1_too(0,2,2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c1 != c2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c1 != c3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c1 == c1_too);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(c2 != c3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Coordinat GetBelow function on (1,0,1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetBelow(Coordinat(1,0,1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Coordinat GetBelow function on (1,0,2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetBelow(Coordinat(1,0,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,3))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,3))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Coordinat GetAbove function on (0,0,0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetAbove(Coordinat(0,0,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,0,0))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Coordinat GetAbove function on (0,1,2)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetAbove(Coordinat(0,1,2));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 4);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,0,1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,0,2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,1,1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,1,2))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Coordinat GetAbove function on (1,2,1)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetAbove(Coordinat(1,2,1));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(2,1,0))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(2,1,1))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Coordinat GetAbove function on (2,0,0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;= GetAbove(Coordinat(2,0,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(v.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(std::find(v.begin(),v.end(),Coordinat(3,0,0))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!= v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator==(const Coordinat&amp;amp; lhs, const Coordinat&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.GetLayer() == rhs.GetLayer()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetX() == rhs.GetX()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetY() == rhs.GetY();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator!=(const Coordinat&amp;amp; lhs, const Coordinat&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Pylos::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os,const Coordinat&amp;amp; c) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; c.ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pyloscoordinat.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pyloscoordinat.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Coordinat, Pylos/Phyraos coordinat class&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSCOORDINAT_H&lt;br/&gt;
#define PYLOSCOORDINAT_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
struct Coordinat&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Coordinat(const int layer, const int x, const int y);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Construct a Coordinat from a std::string.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///For example, (0,1,2) is the coordinat Z=0=bottom,X=1=leftmost-but-one,Y=2=frontmost-but-two&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Coordinat(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the layer or Z-coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///0: bottom 4x4 layer, 3: top 1x1 layer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetLayer() const noexcept { return m_layer; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this coordinat its X coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///0: Left&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetX() const noexcept { return m_x; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this coordinat its Y coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///0: Top&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int GetY() const noexcept { return m_y; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsValid returns if the proposed coordinat is a valid Pylos coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool IsValid(const int layer, const int x, const int y) noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsValid returns if this coordinat is a valid Pylos coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsValid() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///ToStr() converts the coordinat to a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///of the form '(layer,x,y)'.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_layer;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_x;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;int m_y;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Coordinat&amp;amp; lhs, const Coordinat&amp;amp; rhs) noexcept;&lt;br/&gt;
bool operator!=(const Coordinat&amp;amp; lhs, const Coordinat&amp;amp; rhs) noexcept;&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os,const Coordinat&amp;amp; c) noexcept;&lt;br/&gt;
&lt;br/&gt;
///GetAbove returns the coordinats physically&lt;br/&gt;
///above the entered coordinat&lt;br/&gt;
const std::vector&amp;lt;Coordinat&amp;gt; GetAbove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
///GetAllPylosCoordinats returns all possible PylosCoordinats&lt;br/&gt;
const std::vector&amp;lt;Coordinat&amp;gt; GetAllCoordinats() noexcept;&lt;br/&gt;
&lt;br/&gt;
///GetBelow returns the four coordinats physically&lt;br/&gt;
///below the entered coordinat&lt;br/&gt;
const std::vector&amp;lt;Coordinat&amp;gt; GetBelow(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
///GetLines returns the possible 2x2 squares around the coordinat&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;Coordinat&amp;gt; &amp;gt; GetLines(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
///GetRandomPylosCoordinat returns a random valid PylosCoordinat&lt;br/&gt;
const Coordinat GetRandomCoordinat() noexcept;&lt;br/&gt;
&lt;br/&gt;
///GetSquares returns the possible 2x2 squares around the coordinat&lt;br/&gt;
const std::vector&amp;lt;std::vector&amp;lt;Coordinat&amp;gt; &amp;gt; GetSquares(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSCOORDINAT_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pyloscurrentmovestate.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pyloscurrentmovestate.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::CurrentMoveState, Pylos/Phyraos current move state class&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "pyloscurrentmovestate.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::CurrentMoveState::CurrentMoveState() noexcept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_current_move{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_must_remove(MustRemoveState::no)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsMoveUnknown());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//assert(IsRemoveUnknown());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::CurrentMoveState::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "2.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Pylos::CurrentMoveState::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-05-05: version 2.0: initial release version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::CurrentMoveState::IsMoveMove() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move.m_move.size() &amp;lt; 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_current_move.m_move.size() == 2;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::CurrentMoveState::IsMovePlace() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move.m_move.size() &amp;lt; 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_current_move.m_move.size() == 1;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::CurrentMoveState::IsMoveUnknown() const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move.m_move.size() &amp;lt; 3);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_current_move.m_move.size() == 0;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::MustRemoveState ribi::Pylos::CurrentMoveState::GetMustRemove() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_must_remove;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::CurrentMoveState::Restart() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move = Move();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsMoveUnknown());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::CurrentMoveState::SetMove(const Move&amp;amp; move)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move.m_move.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move.m_remove.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move = move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_must_remove = MustRemoveState::no;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::CurrentMoveState::SetMoveTransfer(const Coordinat&amp;amp; from, const Coordinat&amp;amp; to)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsMoveUnknown());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move.m_move.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move.m_move.push_back(from);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move.m_move.push_back(to);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::CurrentMoveState::SetMoveSet(const Coordinat&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(IsMoveUnknown());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move.m_move.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move.m_move.push_back(c);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::CurrentMoveState::SetMustRemove(const MustRemoveState must_remove)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!(must_remove == MustRemoveState::player2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp; m_must_remove == MustRemoveState::player1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Cannot set duty to remove from player 1 to player 2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!(must_remove == MustRemoveState::player1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp; m_must_remove == MustRemoveState::player2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "Cannot set duty to remove from player 2 to player 1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_must_remove = must_remove;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::CurrentMoveState::SetRemove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_must_remove != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move.m_remove = v;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Pylos::CurrentMoveState::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test PylosCurrentMoveState");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c(0,1,1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Pylos::CurrentMoveState s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s.IsMoveUnknown());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!s.GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.SetMoveSet(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!s.IsMoveUnknown());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Pylos::Move m = s.GetMove();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.m_move.size() == 1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.m_move[0] == c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m.m_remove.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.Restart();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Pylos::CurrentMoveState t;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(s == t);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator==(const CurrentMoveState&amp;amp; lhs, const CurrentMoveState&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.GetMustRemove() == rhs.GetMustRemove()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.GetMove() == rhs.GetMove();&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pyloscurrentmovestate.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pyloscurrentmovestate.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::CurrentMoveState, Pylos/Phyraos current move state class&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSCURRENTMOVESTATE_H&lt;br/&gt;
#define PYLOSCURRENTMOVESTATE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
#include "pyloscoordinat.h"&lt;br/&gt;
#include "pylosmove.h"&lt;br/&gt;
#include "pylosmustremovestate.h"&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
///CurrentMoveState contains the state of the current Move.&lt;br/&gt;
///CurrentMoveState is used by Pylos::Game, to incrementally keep track of the&lt;br/&gt;
///ongoing move&lt;br/&gt;
struct CurrentMoveState&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;CurrentMoveState() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the current Move in process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Move&amp;amp; GetMove() const noexcept { return m_current_move; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain if the first part of the move has taken place and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///if the current player must remove one or two marbles&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState GetMustRemove() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Is it unknown what kind of Move this is?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsMoveUnknown() const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsMoveMove() const;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsMovePlace() const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Restart() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set a complete Move directly&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetMove(const Move&amp;amp; move);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the transfer part of a move,enabling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetMoveTransfer(const Coordinat&amp;amp; from, const Coordinat&amp;amp; to);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetMoveSet(const Coordinat&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set the duty of one or none of the players&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetMustRemove(const MustRemoveState must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void SetRemove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Move m_current_move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState m_must_remove;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const CurrentMoveState&amp;amp; lhs, const CurrentMoveState&amp;amp; rhs) noexcept;&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSCURRENTMOVESTATE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosfwd.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosfwd.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
pylosfwd.h, forward declarations of Pylos/Phyraos classes&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSFWD_H&lt;br/&gt;
#define PYLOSFWD_H&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
enum class Player;&lt;br/&gt;
enum class PositionState;&lt;br/&gt;
enum class MustRemoveState;&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSFWD_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosgame.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosgame.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Game, class for a game of Pylos/Phyraos&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#pragma GCC diagnostic push&lt;br/&gt;
#pragma GCC diagnostic ignored "-Weffc++"&lt;br/&gt;
&lt;br/&gt;
#include "pylosgame.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;algorithm&amp;gt;&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/numeric/conversion/cast.hpp&amp;gt;&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pylosboard.h"&lt;br/&gt;
#include "pyloscurrentmovestate.h"&lt;br/&gt;
#include "pylosmove.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
#pragma GCC diagnostic pop&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Game::Game(const Game&amp;amp; rhs)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_board(rhs.m_board-&amp;gt;Clone()),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_current_move(new CurrentMoveState(*rhs.m_current_move)),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_current_player(rhs.m_current_player),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_move_history(rhs.m_move_history)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board != rhs.m_board);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_current_move != rhs.m_current_move);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Game::Game(const boost::shared_ptr&amp;lt;Board&amp;gt; &amp;amp;board)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_board(board),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_current_move(new CurrentMoveState),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_current_player(Player::player1),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_move_history{}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Game::CanDo(const Pylos::Move&amp;amp; m) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanDo(m,m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Game::CanDo(const std::string&amp;amp; s) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanDo(s,m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Game::CanRemove(const Coordinat&amp;amp; c) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_board-&amp;gt;Get(c) != m_current_player) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanRemove( std::vector&amp;lt;Coordinat&amp;gt;(1,c), m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Game::CanRemove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!v.empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (std::count_if(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const Coordinat&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;Get(c) != m_current_player;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;) &amp;gt; 0) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanRemove(v, m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Game::CanSet(const Coordinat&amp;amp; c) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanSet(c,m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Game::CanTransfer(const Coordinat&amp;amp; c) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_board-&amp;gt;Get(c) != GetCurrentTurn()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanTransfer(c,m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Game::CanTransfer(const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to) const&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_board-&amp;gt;Get(from) != GetCurrentTurn()) return false;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;CanTransfer(from,to,m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Game::Do(const std::string&amp;amp; s)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!CanDo(s)) TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDo(s));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Do(Pylos::Move(s));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Game::Do(const Pylos::Move&amp;amp; m)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanDo(m));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board-&amp;gt;Do(m,m_current_player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move-&amp;gt;SetMove(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TogglePlayer();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Pylos::Game&amp;gt; ribi::Pylos::Game::CreateAdvancedGame()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; board(Board::CreateAdvancedBoard());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::shared_ptr&amp;lt;Game&amp;gt;(new Game(board));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
boost::shared_ptr&amp;lt;ribi::Pylos::Game&amp;gt; ribi::Pylos::Game::CreateBasicGame()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; board(Board::CreateBasicBoard());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return boost::shared_ptr&amp;lt;Game&amp;gt;(new Game(board));&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;ribi::Pylos::Move&amp;gt; ribi::Pylos::Game::GetAllPossibleMoves() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;GetAllPossibleMoves(m_current_player);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Player ribi::Pylos::Game::GetCurrentTurn() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_current_player;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::Game::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "2.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Pylos::Game::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2010-09-19: version 0.1: initial version",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2010-09-21: version 0.2: use of Coordinat",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2010-09-21: version 0.3: added Move",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2010-09-22: version 1.0: fixed bug in Coordinat, added move history",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-05-05: version 2.0: major achitectural rewrite"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Winner ribi::Pylos::Game::GetWinner() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_board-&amp;gt;GetWinner();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::MustRemoveState ribi::Pylos::Game::GetMustRemove() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return m_current_move-&amp;gt;GetMustRemove();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Winner ribi::Pylos::Game::PlayRandomGame(const boost::shared_ptr&amp;lt;Board&amp;gt;&amp;amp; board)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; p;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (board)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.reset(new Game(board-&amp;gt;Clone()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((std::rand() &amp;gt;&amp;gt; 4) % 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.reset(new Game(Board::CreateAdvancedBoard()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.reset(new Game(Board::CreateBasicBoard()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;while (1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;GetWinner() != Winner::none)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return p-&amp;gt;GetWinner();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Choose algorithm to draw next move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((std::rand() &amp;gt;&amp;gt; 4) % 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Use random move from GetAllPossibleMoves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; v = p-&amp;gt;GetAllPossibleMoves();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const int i = std::rand() % v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//TRACE(v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p-&amp;gt;Do(v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Use random coordinats and random responses&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c = GetRandomCoordinat();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanTransfer(c))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Pylos::Coordinat&amp;gt; v = Pylos::GetAllCoordinats();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::random_shuffle(v.begin(),v.end());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t sz = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=sz; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanTransfer(c,v[i]))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p-&amp;gt;Transfer(c,v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else if (p-&amp;gt;CanSet(c))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p-&amp;gt;Set(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (p-&amp;gt;GetMustRemove() != MustRemoveState::no)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; v;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v.push_back(GetRandomCoordinat());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((std::rand() &amp;gt;&amp;gt; 4) % 2) v.push_back(GetRandomCoordinat());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (p-&amp;gt;CanRemove(v)) p-&amp;gt;Remove(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Game::Remove(const Coordinat&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetMustRemove() != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board-&amp;gt;Get(c)==m_current_player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board-&amp;gt;CanRemove(std::vector&amp;lt;Coordinat&amp;gt;(1,c),m_current_player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board-&amp;gt;Remove(std::vector&amp;lt;Coordinat&amp;gt;(1,c),m_current_player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///\warning: do not allow these lines: this method&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///is an internal function used by&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///void ribi::Pylos::Game::Remove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v).&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//m_must_remove = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//TogglePlayer();&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Game::Remove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Cannot call RemoveMarbles(c), because this&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//also toggles the player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(GetMustRemove() != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanRemove(v));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 1 || v.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_board-&amp;gt;Get(v[0]) == m_current_player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 1 || m_board-&amp;gt;Get(v[1]) == m_current_player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 1 || v[0] != v[1]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Proper ordering: v[0] must be marble above&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (v.size() == 2 &amp;amp;&amp;amp; v[0].GetLayer() &amp;lt; v[1].GetLayer())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; w(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::swap(w[0],w[1]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Remove(w); //Call the same method with different order&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Assert proper ordering&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(v.size() == 1 || v[0].GetLayer() &amp;gt;= v[1].GetLayer());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[this](const Coordinat&amp;amp; c)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m_board-&amp;gt;Get(c)==m_current_player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this-&amp;gt;Remove(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Three lines below must be executed exactly once per move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move-&amp;gt;SetRemove(v);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move-&amp;gt;SetMustRemove(MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TogglePlayer();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Game::Set(const Coordinat&amp;amp; c)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!CanSet(c)) TRACE(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Set is always done as the first part of a Move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanSet(c));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = GetMustRemove();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!must_remove &amp;amp;&amp;amp; "Player must not remove a marble when placing a new one");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board-&amp;gt;Set(c,m_current_player,must_remove);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (must_remove != MustRemoveState::no) m_current_move-&amp;gt;SetMustRemove(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ToMustRemoveState(m_current_player));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move-&amp;gt;SetMoveSet(c);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (must_remove != MustRemoveState::no)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player player = ToPlayer(m_board-&amp;gt;Get(c));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_current_move-&amp;gt;SetMustRemove(ToMustRemoveState(player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If player must not remove another marble,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//his/her turn is over&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TogglePlayer();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Pylos::Game::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test ribi::Pylos::Game::operator== for different game types");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,0,0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test ribi::Pylos::Game::operator== for same game types");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do("(0,0,0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do("(0,0,0)");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test basic Game dynamics using Set and Remove");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1 22&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1 22&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Only advanced game must detect player 1's line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Both games must detect player 2's square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,3,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,3,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,2,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,2,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//BoardAdvanced responds to the creation of a line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,3)")); //Line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,3)")); //Line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1); //No toggle&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2); //Toggle&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove() != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanRemove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,0,0)"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanRemove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,0,0)"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Remove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2); //Toggle&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//BoardAdvanced and BoardBasic respond to the creation of a square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,3,1)")); //Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,3,1)")); //Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2); //No toggle&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2); //No toggle&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove() != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove() != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanRemove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanRemove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Remove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Remove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test ribi::Pylos::Game::Clone of GameBasic");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b(new Game(*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; c = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*b != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test ribi::Pylos::Game::Clone of GameAdvanced");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b(new Game(*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; c = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Clone of played GameBasic");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Game&amp;gt; b(new Game(*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,1,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Clone of played BoardAdvanced");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Game&amp;gt; b(new Game(*a));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a == *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,1,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test basic Game dynamics using full moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1 22&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1 22&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Only advanced game must detect player 1's line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Both games must detect player 2's square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(*a != *b);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,3,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,3,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,2,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,2,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,2,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,2,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//BoardAdvanced responds to the creation of a line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo("(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDo("(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,0) !(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,1) !(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,2) !(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo("(0,0,3) !(0,0,3) !(0,0,3)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,3) !(0,0,0)")); //Line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,3)")); //Line&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//BoardAdvanced and BoardBasic respond to the creation of a square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Set(Coordinat("(0,3,1)")); //Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Set(Coordinat("(0,3,1)")); //Square&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player2); //No toggle&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player2); //No toggle&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove() != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove() != MustRemoveState::no);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanRemove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanRemove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)"))));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Remove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Remove(std::vector&amp;lt;Coordinat&amp;gt;(1,Coordinat("(0,3,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;GetCurrentMove()-&amp;gt;GetMustRemove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetCurrentTurn() == Player::player1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Game history");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 12..&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 34..&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 56..&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 7...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test that in basic play, no marbles must be removed. Test that in advanced play, marbles must be removed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetMoveHistory().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoveHistory().empty());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,0,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,1,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,0,1)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,1,1)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(1,0,0)")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::size_t j = v.size();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (std::size_t i = 0; i!=j; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetMoveHistory().size() == i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoveHistory().size() == i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;GetMoveHistory()[i] == v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;GetMoveHistory()[i] == v[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Game test #1");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 12..&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 34..&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 56..&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 7...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test that in basic play, no marbles must be removed. Test that in advanced play, marbles must be removed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,0)")); //1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,1,0)")); //2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,1,0)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,1)")); //3&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,1,1)")); //4&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,1,1)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,0,2)")); //5&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,0,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(Move("(0,1,2)")); //6&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(Move("(0,1,2)"));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,0,3)"))); //7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,0,3) !(0,0,3)"))); //7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,0,3)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Game test #2");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// ....&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// ....&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// ....&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// ....&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Test that in basic play, no marbles must be removed. Test that in advanced play, marbles must be removed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; a = CreateAdvancedGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Game&amp;gt; b = CreateBasicGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; v =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,0,0)"), Move("(0,0,1)"), Move("(0,1,1)"), Move("(0,1,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(1,0,0)"), Move("(0,0,2)"), Move("(0,1,2)"), Move("(0,2,0)"),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Move("(0,2,2)"), Move("(0,3,0)")&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[a,b](const Move&amp;amp; m)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!a-&amp;gt;CanDo(m)) TRACE(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!b-&amp;gt;CanDo(m)) TRACE(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(a-&amp;gt;CanDo(m));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(b-&amp;gt;CanDo(m));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a-&amp;gt;Do(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b-&amp;gt;Do(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,2,1)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!a-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( a-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)")));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,2,1)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!b-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert( b-&amp;gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)")));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Playing 5 random basic Pylos games");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=5; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Pylos::Game::PlayRandomGame(Pylos::Board::CreateBasicBoard());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Playing 5 random advanced Pylos games");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=5; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Pylos::Game::PlayRandomGame(Pylos::Board::CreateAdvancedBoard());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Playing 5 random Pylos games");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;for (int i=0; i!=5; ++i)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ribi::Pylos::Game::PlayRandomGame();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Game::TogglePlayer()&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_current_move-&amp;gt;GetMustRemove()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "First the current player must remove one or two marbles");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_move_history.push_back(m_current_move-&amp;gt;GetMove());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move.reset(new CurrentMoveState);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_player = (m_current_player == Player::player1 ? Player::player2 : Player::player1);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Game::Transfer(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(CanTransfer(from,to));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board-&amp;gt;Remove(std::vector&amp;lt;Coordinat&amp;gt;(1,from),m_current_player);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState must_remove = MustRemoveState::no;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_board-&amp;gt;Set(to,m_current_player,must_remove);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;m_current_move-&amp;gt;SetMoveTransfer(from,to);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (must_remove != MustRemoveState::no)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player player = ToPlayer(m_board-&amp;gt;Get(to));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_current_move-&amp;gt;SetMustRemove(ToMustRemoveState(player));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If player must not remove another marble,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//his/her turn is over&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TogglePlayer();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator==(const Game&amp;amp; lhs, const Game&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return *lhs.m_board&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;== *rhs.m_board&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp; *lhs.m_current_move&amp;nbsp;&amp;nbsp; == *rhs.m_current_move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lhs.m_current_player ==&amp;nbsp;&amp;nbsp;rhs.m_current_player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lhs.m_move_history&amp;nbsp;&amp;nbsp; ==&amp;nbsp;&amp;nbsp;rhs.m_move_history;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator!=(const Game&amp;amp; lhs, const Game&amp;amp; rhs)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(lhs == rhs);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosgame.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosgame.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Game, class for a game of Pylos/Phyraos&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSGAME_H&lt;br/&gt;
#define PYLOSGAME_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pylosboard.h"&lt;br/&gt;
#include "pyloscurrentmovestate.h"&lt;br/&gt;
#include "pylosfwd.h"&lt;br/&gt;
#include "pylosplayer.h"&lt;br/&gt;
#include "pylospositionstate.h"&lt;br/&gt;
#include "pyloswinner.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
///Pylos is a class for storing a Pylos game.&lt;br/&gt;
///Games can be player in:\n&lt;br/&gt;
///- Pylos notation: (Can)Do\n&lt;br/&gt;
///- using Coordinats: (Can)Place, (Can)Move, (Can)Remove\n&lt;br/&gt;
///Games can also be saved and loaded.&lt;br/&gt;
struct Game&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Copy constructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Game(const Game&amp;amp; rhs);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create an Pylos game in the starting position.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Game(const boost::shared_ptr&amp;lt;Board&amp;gt;&amp;amp; board);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a mid-game Pylos.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Game(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt;&amp;amp; board,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Player current_player,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pylos::Move&amp;gt;&amp;amp; move_history,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;CurrentMoveState&amp;gt;&amp;amp; current_move);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanDo determines if a Pylos notation move is valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDo(const std::string&amp;amp; s) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanDo determines if a Pylos move is valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanDo(const Pylos::Move&amp;amp; m) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanRemove specifies if current player can remove one or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///two marble(s) at the requested position(s).&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanRemove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanSet tests if the current player can be set at the Coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanSet(const Coordinat&amp;amp; c) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanTransfer specifies if current player can transfer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///the marble at the specified coordinat for movement&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanTransfer(const Coordinat&amp;amp; c) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanTransfer specifies if current player can transfer his marble&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///to a new, higher position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanTransfer(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create an advanced game at its initial position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static boost::shared_ptr&amp;lt;Game&amp;gt; CreateAdvancedGame();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Create a basic game at its initial position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static boost::shared_ptr&amp;lt;Game&amp;gt; CreateBasicGame();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do performs a move in Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Do(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Do performs a Pylos move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Do(const Move&amp;amp; m);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetAllPossibleMoves returns all moves valid for the active player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Move&amp;gt; GetAllPossibleMoves() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetBoard returns the board.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;Board&amp;gt;&amp;amp; GetBoard() const noexcept { return m_board; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain the current move's state&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const boost::shared_ptr&amp;lt;CurrentMoveState&amp;gt; GetCurrentMove() const noexcept { return m_current_move; }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetCurrentTurn returns whose turn it is now&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Player GetCurrentTurn() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Pylos::Move&amp;gt;&amp;amp; GetMoveHistory() const noexcept&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return m_move_history;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///MustRemove returns whether the current player&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///must remove one or two marbles&lt;br/&gt;
&amp;nbsp;&amp;nbsp;MustRemoveState GetMustRemove() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///GetWinner returns the winner.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Winner GetWinner() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///IsValid returns if the current Pylos game is valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//bool IsValid() const; //?Not used?&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Load loads a game in Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//void Load(const std::string&amp;amp; s) = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///PlayRandomPylosGame plays a random Pylos game and returns the winner.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static Winner PlayRandomGame(const boost::shared_ptr&amp;lt;Board&amp;gt;&amp;amp; board = boost::shared_ptr&amp;lt;Board&amp;gt;());&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Remove lets the current player remove one or two marbles&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Remove(const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; v);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Restart sets the game in its initial position.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Restart();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Set makes m_current_players place his marble&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///at the specified position. After Place,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///MustRemoveMarbles must be called to determine if&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///the current player must remove some marbles&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Set(const Coordinat&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///ToStr converts Game its contents to a std::string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//const std::string ToStr() const = 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Transfer lets current player tranfer his marble to a new, higher position&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Transfer(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; from,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat&amp;amp; to);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Game() = delete;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;Board&amp;gt; m_board;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boost::shared_ptr&amp;lt;CurrentMoveState&amp;gt; m_current_move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Player m_current_player;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Pylos::Move&amp;gt; m_move_history;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///CanRemove specifies if current player can remove&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///the marble at the requested position.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool CanRemove(const Coordinat&amp;amp; c) const;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Remove lets the current player remove one marble.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void Remove(const Coordinat&amp;amp; c);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test the Game class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///TogglePlayer toggles between player1 and player2 and saves the current&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///move to the move history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void TogglePlayer();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;friend bool operator==(const Game&amp;amp; lhs, const Game&amp;amp; rhs);&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Game&amp;amp; lhs, const Game&amp;amp; rhs);&lt;br/&gt;
bool operator!=(const Game&amp;amp; lhs, const Game&amp;amp; rhs);&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os,const Game&amp;amp; p);&lt;br/&gt;
&lt;br/&gt;
///CanLoadPylos determines if loading a Pylos game from file&lt;br/&gt;
///will be successfull&lt;br/&gt;
bool CanLoadPylos(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
///LoadPylos loads a Pylos game from file&lt;br/&gt;
boost::shared_ptr&amp;lt;Game&amp;gt; LoadPylos(const std::string&amp;amp; filename);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSGAME_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosmove.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosmove.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Move, class for a Pylos/Phyraos move&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#include "pylosmove.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;iostream&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pyloscoordinat.h"&lt;br/&gt;
#include "trace.h"&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Move::Move()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_move{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_remove{}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Move::Move(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; moving,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; removing)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_move{moving},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_remove{removing}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!m_move.empty()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "In every move a marble must be placed or transferred");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_move.size() &amp;lt;= 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_remove.size() &amp;lt;= 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; "At most two marbles are removed in a move");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Move::Move(const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;: m_move{},&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_remove{}&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Test();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; s.size() == 7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| s.size() == 16&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| s.size() == 25&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| s.size() == 34)) TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Read first coordinat&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; s.size() == 7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| s.size() == 16&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| s.size() == 25&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| s.size() == 34);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c(s.substr(0,7));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_move.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s.size() == 7) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test for transfer with/without removal '(Z,X,Y)-&amp;gt;(Z,X,Y)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s[7] == '-' &amp;amp;&amp;amp; s[8] == '&amp;gt;')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c(s.substr(9,7));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_move.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s.size() == 16) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test for place and single removal '(Z,X,Y) !(Z,X,Y)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (s[7] == ' ' &amp;amp;&amp;amp; s[8] == '!')&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c(s.substr(9,7));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_remove.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s.size() == 16) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test for transfer with single removal '(Z,X,Y)-&amp;gt;(Z,X,Y) !(Z,X,Y)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s[16] == ' ' &amp;amp;&amp;amp; s[17] == '!');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c(s.substr(18,7));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_remove.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (s.size() == 25) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;//Test for transfer with double removal '(Z,X,Y)-&amp;gt;(Z,X,Y) !(Z,X,Y) !(Z,X,Y)'&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s[25] == ' ' &amp;amp;&amp;amp; s[26] == '!');&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Coordinat c(s.substr(27,7));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m_remove.push_back(c);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(s.size() == 34);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::Move::GetVersion() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return "2.0";&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
const std::vector&amp;lt;std::string&amp;gt; ribi::Pylos::Move::GetVersionHistory() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"2012-05-05: version 2.0: initial release version"&lt;br/&gt;
&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::Move::IsValid() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; m_move.size() &amp;gt;= 1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; m_move.size() &amp;lt;= 2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; m_remove.size() &amp;lt;= 2;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
#ifndef NDEBUG&lt;br/&gt;
void ribi::Pylos::Move::Test() noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static bool tested = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (tested) return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;tested = true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TRACE("Test Moves");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Pylos::Move m;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!m.IsValid() &amp;amp;&amp;amp; "An empty move is invalid");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Pylos::Move n;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m == n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m.m_move.push_back(Coordinat(0,0,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n.m_move.push_back(Coordinat(0,0,0));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(m == n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Valid Moves&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;std::string&amp;gt; v&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(0,0,0)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(0,0,0) !(0,0,0)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(0,0,0) !(0,0,0) !(0,0,0)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(0,0,0)-&amp;gt;(0,0,0)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(0,0,0)-&amp;gt;(0,0,0) !(0,0,0)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"(0,0,0)-&amp;gt;(0,0,0) !(0,0,0) !(0,0,0)",&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;std::for_each(v.begin(),v.end(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[](const std::string&amp;amp; s)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const Move m(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//OK&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (std::exception&amp;amp; e)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TRACE(s);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
#endif&lt;br/&gt;
&lt;br/&gt;
const std::string ribi::Pylos::Move::ToStr() const noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (!(m_move.size() == 1 || m_move.size() == 2)) TRACE(m_move.size());&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_move.size() == 1 || m_move.size() == 2);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::string s = m_move[0].ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_move.size() == 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+="-&amp;gt;";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=m_move[1].ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_remove.empty()) return s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(m_remove.size() == 1 || m_remove.size() == 2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s+=" !";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;s+=m_remove[0].ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (m_remove.size() == 2)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=" !";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s+=m_remove[0].ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return s;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator==(const Move&amp;amp; lhs, const Move&amp;amp; rhs) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return lhs.m_move == rhs.m_move&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; lhs.m_remove == rhs.m_remove;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::ostream&amp;amp; ribi::Pylos::operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Move&amp;amp; m) noexcept&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;os &amp;lt;&amp;lt; m.ToStr();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return os;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosmove.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosmove.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Move, class for a Pylos/Phyraos move&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSMOVE_H&lt;br/&gt;
#define PYLOSMOVE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;iosfwd&amp;gt;&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
#include &amp;lt;vector&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pyloscoordinat.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
///PylosMove encapsulates a Pylos move.&lt;br/&gt;
///A Pylos move starts with either&lt;br/&gt;
/// - placing (Set) a new marble or&lt;br/&gt;
/// - moving (Transfer) an existing marble to a higher location&lt;br/&gt;
///Both a Set and a Transfer can results in that the player must&lt;br/&gt;
///remove either one or two marbles.&lt;br/&gt;
struct Move&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Move();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Move is constructed from all the members it will hold&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Move(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; moving,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const std::vector&amp;lt;Coordinat&amp;gt;&amp;amp; removing);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Move is constructed from Pylos notation&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Move(const std::string&amp;amp; s);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::string GetVersion() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Obtain this class its version history&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static const std::vector&amp;lt;std::string&amp;gt; GetVersionHistory() noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test if this Move is valid&lt;br/&gt;
&amp;nbsp;&amp;nbsp;bool IsValid() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;const std::string ToStr() const noexcept;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///What m_move is, depends on its size:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_move.size() == 1: placement at m_move[0]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///m_move.size() == 2: move from m_move[0] to m_move[1]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; m_move;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;std::vector&amp;lt;Coordinat&amp;gt; m_remove;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;private:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#ifndef NDEBUG&lt;br/&gt;
&amp;nbsp;&amp;nbsp;///Test this class&lt;br/&gt;
&amp;nbsp;&amp;nbsp;static void Test() noexcept;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;#endif&lt;br/&gt;
&lt;br/&gt;
};&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Move&amp;amp; lhs, const Move&amp;amp; rhs) noexcept;&lt;br/&gt;
std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Move&amp;amp; m) noexcept;&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSMOVE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosmustremovestate.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosmustremovestate.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::MustRemoveState, Pylos enum class for the state of a removal&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#include "pylosmustremovestate.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pylosplayer.h"&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::MustRemoveState ribi::Pylos::ToMustRemoveState(const Player&amp;amp; player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::player1: return MustRemoveState::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::player2: return MustRemoveState::player2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Unknown value for Player");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Unknown value for Player");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
std::string ribi::Pylos::ToStr(const MustRemoveState state)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (state)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case MustRemoveState::player1: return "player1";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case MustRemoveState::player2: return "player2";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case MustRemoveState::no: return "no";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Unknown value for MustRemoveState");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Unknown value for MustRemoveState");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator!(const MustRemoveState&amp;amp; state)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return state == MustRemoveState::no;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosmustremovestate.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosmustremovestate.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::MustRemoveState, Pylos enum class for the state of a removal&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSMUSTREMOVESTATE_H&lt;br/&gt;
#define PYLOSMUSTREMOVESTATE_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pylosfwd.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
///After placing (Set) or moving (Transfer) a marble, the MustRemoveState&lt;br/&gt;
///will be removed. These are:&lt;br/&gt;
///- no: no marbles need to be removed before next player's move&lt;br/&gt;
///- player1: player1 has to remove one or two marbles. This is determined&lt;br/&gt;
///&amp;nbsp;&amp;nbsp;by the player that places or moves his/her marbles.&lt;br/&gt;
///- player2: player2 has to remove one or two marbles. This is determined&lt;br/&gt;
///&amp;nbsp;&amp;nbsp;by the player that places or moves his/her marbles.&lt;br/&gt;
enum class MustRemoveState { player1, player2, no };&lt;br/&gt;
MustRemoveState ToMustRemoveState(const Player&amp;amp; player);&lt;br/&gt;
std::string ToStr(const MustRemoveState state);&lt;br/&gt;
&lt;br/&gt;
//bool operator==(const MustRemoveState&amp;amp; state, const MustRemoveState&amp;amp; player);&lt;br/&gt;
//bool operator!=(const MustRemoveState&amp;amp; state, const MustRemoveState&amp;amp; player);&lt;br/&gt;
bool operator!(const MustRemoveState&amp;amp; state);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSMUSTREMOVESTATE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosplayer.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosplayer.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Player, Pylos enum class for the players&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#include "pylosplayer.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pylospositionstate.h"&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
void ribi::Pylos::Toggle(Player&amp;amp; player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;player = (player == Player::player1 ? Player::player2 : Player::player1);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::Player ribi::Pylos::ToPlayer(const PositionState&amp;amp; state)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (state)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case PositionState::player1: return Player::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case PositionState::player2: return Player::player2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Cannot convert this PositionState to a Player");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator==(const Player&amp;amp; player, const PositionState&amp;amp; state)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::player1: return state == PositionState::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::player2: return state == PositionState::player2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator!=(const Player&amp;amp; player, const PositionState&amp;amp; state)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return !(player==state);&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylosplayer.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylosplayer.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Player, Pylos enum class for the players&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSPLAYER_H&lt;br/&gt;
#define PYLOSPLAYER_H&lt;br/&gt;
&lt;br/&gt;
#include "pylosfwd.h"&lt;br/&gt;
#include "pylospositionstate.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
enum class Player { player1, player2 };&lt;br/&gt;
///Toggles between the two players&lt;br/&gt;
void Toggle(Player&amp;amp; player);&lt;br/&gt;
///Convert a PositionState to Player&lt;br/&gt;
Player ToPlayer(const PositionState&amp;amp; state);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const Player&amp;amp; player, const PositionState&amp;amp; state);&lt;br/&gt;
bool operator!=(const Player&amp;amp; player, const PositionState&amp;amp; state);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSPLAYER_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylospositionstate.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylospositionstate.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::PositionState, Pylos enum class for the state of a position&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#include "pylospositionstate.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
#include "pylosplayer.h"&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
char ribi::Pylos::ToChar(const PositionState state)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (state)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case PositionState::empty: return '.';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case PositionState::player1: return 'X';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case PositionState::player2: return 'O';&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Unknown PositionState in ToChar");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
ribi::Pylos::PositionState ribi::Pylos::ToPositionState(const Player&amp;amp; player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (player)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::player1: return PositionState::player1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Player::player2: return PositionState::player2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//default: break;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Should not get here");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Cannot convert this Player to a PositionState");&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator==(const PositionState state, const Player&amp;amp; player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return player == state;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
bool ribi::Pylos::operator!=(const PositionState state, const Player&amp;amp; player)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return player != state;&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pylospositionstate.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pylospositionstate.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::PositionState, Pylos enum class for the state of a position&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSPOSITIONSTATE_H&lt;br/&gt;
#define PYLOSPOSITIONSTATE_H&lt;br/&gt;
&lt;br/&gt;
#include "pylosfwd.h"&lt;br/&gt;
//#include "pylosplayer.h"&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
enum class PositionState { player1, player2, empty };&lt;br/&gt;
PositionState ToPositionState(const Player&amp;amp; player);&lt;br/&gt;
char ToChar(const PositionState state);&lt;br/&gt;
&lt;br/&gt;
bool operator==(const PositionState state, const Player&amp;amp; player);&lt;br/&gt;
bool operator!=(const PositionState state, const Player&amp;amp; player);&lt;br/&gt;
//bool operator!(const PositionState&amp;amp; state);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSPOSITIONSTATE_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pyloswinner.cpp&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pyloswinner.cpp" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Winner, Pylos enum class for the winner&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
#include "pyloswinner.h"&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;cassert&amp;gt;&lt;br/&gt;
#include &amp;lt;stdexcept&amp;gt;&lt;br/&gt;
&lt;br/&gt;
std::string ribi::Pylos::ToStr(const Winner winner)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;switch (winner)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Winner::player1: return "player1";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Winner::player2: return "player2";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case Winner::none: return "none";&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;assert(!"Cannot convert this Winner to a std::string");&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw std::logic_error("Cannot convert this Winner to a std::string");&lt;br/&gt;
}&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;./CppPylos/pyloswinner.h&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;!-- start of code --&gt;
&lt;table summary="./CppPylos/pyloswinner.h" border = "1"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
/*&lt;br/&gt;
Pylos::Winner, Pylos enum class for the winner&lt;br/&gt;
Copyright (C) 2010-2012 Richel Bilderbeek&lt;br/&gt;
&lt;br/&gt;
This program is free software: you can redistribute it and/or modify&lt;br/&gt;
it under the terms of the GNU General Public License as published by&lt;br/&gt;
the Free Software Foundation, either version 3 of the License, or&lt;br/&gt;
(at your option) any later version.&lt;br/&gt;
&lt;br/&gt;
This program is distributed in the hope that it will be useful,&lt;br/&gt;
but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;br/&gt;
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the&lt;br/&gt;
GNU General Public License for more details.&lt;br/&gt;
You should have received a copy of the GNU General Public License&lt;br/&gt;
along with this program.If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;br/&gt;
*/&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
//From http://www.richelbilderbeek.nl/CppPylos.htm&lt;br/&gt;
//---------------------------------------------------------------------------&lt;br/&gt;
#ifndef PYLOSWINNER_H&lt;br/&gt;
#define PYLOSWINNER_H&lt;br/&gt;
&lt;br/&gt;
#include &amp;lt;string&amp;gt;&lt;br/&gt;
&lt;br/&gt;
namespace ribi {&lt;br/&gt;
&lt;br/&gt;
namespace Pylos {&lt;br/&gt;
&lt;br/&gt;
enum class Winner { player1, player2, none };&lt;br/&gt;
std::string ToStr(const Winner winner);&lt;br/&gt;
&lt;br/&gt;
} //~namespace Pylos&lt;br/&gt;
&lt;br/&gt;
} //~namespace ribi&lt;br/&gt;
&lt;br/&gt;
#endif // PYLOSWINNER_H&lt;br/&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;!-- end of the code --&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="Cpp.htm"&gt;Go back to Richel Bilderbeek's C++ page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="index.htm"&gt;Go back to Richel Bilderbeek's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://validator.w3.org/check?uri=referer"&gt;&lt;img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This page has been created by the &lt;a href="Tools.htm"&gt;tool&lt;/a&gt; &lt;a href="ToolCodeToHtml.htm"&gt;CodeToHtml&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
