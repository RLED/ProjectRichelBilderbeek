<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Pylos</title>
  <meta name="description" content="C++ Pylos"/>
  <meta name="keywords" content="C++ Pylos "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPylos.htm">Pylos</a></h1>
<p>&nbsp;</p>
<h2>./CppPylos/CppPylos.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/CppPylos.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosboard.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pyloscoordinat.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pyloscurrentmovestate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosgame.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosmove.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosmustremovestate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosplayer.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylospositionstate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pyloswinner.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosboard.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pyloscoordinat.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pyloscurrentmovestate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosfwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosgame.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosmove.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosmustremovestate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylosplayer.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pylospositionstate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/pyloswinner.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppPylos/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/Licence.txt</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/Licence.txt" border = "1"><tr><td><code>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GNU GENERAL PUBLIC LICENSE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Version 3, 29 June 2007<br/>
<br/>
 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br/>
 Everyone is permitted to copy and distribute verbatim copies<br/>
 of this license document, but changing it is not allowed.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preamble<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License is a free, copyleft license for<br/>
software and other kinds of works.<br/>
<br/>
&nbsp;&nbsp;The licenses for most software and other practical works are designed<br/>
to take away your freedom to share and change the works.&nbsp;&nbsp;By contrast,<br/>
the GNU General Public License is intended to guarantee your freedom to<br/>
share and change all versions of a program--to make sure it remains free<br/>
software for all its users.&nbsp;&nbsp;We, the Free Software Foundation, use the<br/>
GNU General Public License for most of our software; it applies also to<br/>
any other work released this way by its authors.&nbsp;&nbsp;You can apply it to<br/>
your programs, too.<br/>
<br/>
&nbsp;&nbsp;When we speak of free software, we are referring to freedom, not<br/>
price.&nbsp;&nbsp;Our General Public Licenses are designed to make sure that you<br/>
have the freedom to distribute copies of free software (and charge for<br/>
them if you wish), that you receive source code or can get it if you<br/>
want it, that you can change the software or use pieces of it in new<br/>
free programs, and that you know you can do these things.<br/>
<br/>
&nbsp;&nbsp;To protect your rights, we need to prevent others from denying you<br/>
these rights or asking you to surrender the rights.&nbsp;&nbsp;Therefore, you have<br/>
certain responsibilities if you distribute copies of the software, or if<br/>
you modify it: responsibilities to respect the freedom of others.<br/>
<br/>
&nbsp;&nbsp;For example, if you distribute copies of such a program, whether<br/>
gratis or for a fee, you must pass on to the recipients the same<br/>
freedoms that you received.&nbsp;&nbsp;You must make sure that they, too, receive<br/>
or can get the source code.&nbsp;&nbsp;And you must show them these terms so they<br/>
know their rights.<br/>
<br/>
&nbsp;&nbsp;Developers that use the GNU GPL protect your rights with two steps:<br/>
(1) assert copyright on the software, and (2) offer you this License<br/>
giving you legal permission to copy, distribute and/or modify it.<br/>
<br/>
&nbsp;&nbsp;For the developers' and authors' protection, the GPL clearly explains<br/>
that there is no warranty for this free software.&nbsp;&nbsp;For both users' and<br/>
authors' sake, the GPL requires that modified versions be marked as<br/>
changed, so that their problems will not be attributed erroneously to<br/>
authors of previous versions.<br/>
<br/>
&nbsp;&nbsp;Some devices are designed to deny users access to install or run<br/>
modified versions of the software inside them, although the manufacturer<br/>
can do so.&nbsp;&nbsp;This is fundamentally incompatible with the aim of<br/>
protecting users' freedom to change the software.&nbsp;&nbsp;The systematic<br/>
pattern of such abuse occurs in the area of products for individuals to<br/>
use, which is precisely where it is most unacceptable.&nbsp;&nbsp;Therefore, we<br/>
have designed this version of the GPL to prohibit the practice for those<br/>
products.&nbsp;&nbsp;If such problems arise substantially in other domains, we<br/>
stand ready to extend this provision to those domains in future versions<br/>
of the GPL, as needed to protect the freedom of users.<br/>
<br/>
&nbsp;&nbsp;Finally, every program is threatened constantly by software patents.<br/>
States should not allow patents to restrict development and use of<br/>
software on general-purpose computers, but in those that do, we wish to<br/>
avoid the special danger that patents applied to a free program could<br/>
make it effectively proprietary.&nbsp;&nbsp;To prevent this, the GPL assures that<br/>
patents cannot be used to render the program non-free.<br/>
<br/>
&nbsp;&nbsp;The precise terms and conditions for copying, distribution and<br/>
modification follow.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;0. Definitions.<br/>
<br/>
&nbsp;&nbsp;"This License" refers to version 3 of the GNU General Public License.<br/>
<br/>
&nbsp;&nbsp;"Copyright" also means copyright-like laws that apply to other kinds of<br/>
works, such as semiconductor masks.<br/>
<br/>
&nbsp;&nbsp;"The Program" refers to any copyrightable work licensed under this<br/>
License.&nbsp;&nbsp;Each licensee is addressed as "you".&nbsp;&nbsp;"Licensees" and<br/>
"recipients" may be individuals or organizations.<br/>
<br/>
&nbsp;&nbsp;To "modify" a work means to copy from or adapt all or part of the work<br/>
in a fashion requiring copyright permission, other than the making of an<br/>
exact copy.&nbsp;&nbsp;The resulting work is called a "modified version" of the<br/>
earlier work or a work "based on" the earlier work.<br/>
<br/>
&nbsp;&nbsp;A "covered work" means either the unmodified Program or a work based<br/>
on the Program.<br/>
<br/>
&nbsp;&nbsp;To "propagate" a work means to do anything with it that, without<br/>
permission, would make you directly or secondarily liable for<br/>
infringement under applicable copyright law, except executing it on a<br/>
computer or modifying a private copy.&nbsp;&nbsp;Propagation includes copying,<br/>
distribution (with or without modification), making available to the<br/>
public, and in some countries other activities as well.<br/>
<br/>
&nbsp;&nbsp;To "convey" a work means any kind of propagation that enables other<br/>
parties to make or receive copies.&nbsp;&nbsp;Mere interaction with a user through<br/>
a computer network, with no transfer of a copy, is not conveying.<br/>
<br/>
&nbsp;&nbsp;An interactive user interface displays "Appropriate Legal Notices"<br/>
to the extent that it includes a convenient and prominently visible<br/>
feature that (1) displays an appropriate copyright notice, and (2)<br/>
tells the user that there is no warranty for the work (except to the<br/>
extent that warranties are provided), that licensees may convey the<br/>
work under this License, and how to view a copy of this License.&nbsp;&nbsp;If<br/>
the interface presents a list of user commands or options, such as a<br/>
menu, a prominent item in the list meets this criterion.<br/>
<br/>
&nbsp;&nbsp;1. Source Code.<br/>
<br/>
&nbsp;&nbsp;The "source code" for a work means the preferred form of the work<br/>
for making modifications to it.&nbsp;&nbsp;"Object code" means any non-source<br/>
form of a work.<br/>
<br/>
&nbsp;&nbsp;A "Standard Interface" means an interface that either is an official<br/>
standard defined by a recognized standards body, or, in the case of<br/>
interfaces specified for a particular programming language, one that<br/>
is widely used among developers working in that language.<br/>
<br/>
&nbsp;&nbsp;The "System Libraries" of an executable work include anything, other<br/>
than the work as a whole, that (a) is included in the normal form of<br/>
packaging a Major Component, but which is not part of that Major<br/>
Component, and (b) serves only to enable use of the work with that<br/>
Major Component, or to implement a Standard Interface for which an<br/>
implementation is available to the public in source code form.&nbsp;&nbsp;A<br/>
"Major Component", in this context, means a major essential component<br/>
(kernel, window system, and so on) of the specific operating system<br/>
(if any) on which the executable work runs, or a compiler used to<br/>
produce the work, or an object code interpreter used to run it.<br/>
<br/>
&nbsp;&nbsp;The "Corresponding Source" for a work in object code form means all<br/>
the source code needed to generate, install, and (for an executable<br/>
work) run the object code and to modify the work, including scripts to<br/>
control those activities.&nbsp;&nbsp;However, it does not include the work's<br/>
System Libraries, or general-purpose tools or generally available free<br/>
programs which are used unmodified in performing those activities but<br/>
which are not part of the work.&nbsp;&nbsp;For example, Corresponding Source<br/>
includes interface definition files associated with source files for<br/>
the work, and the source code for shared libraries and dynamically<br/>
linked subprograms that the work is specifically designed to require,<br/>
such as by intimate data communication or control flow between those<br/>
subprograms and other parts of the work.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source need not include anything that users<br/>
can regenerate automatically from other parts of the Corresponding<br/>
Source.<br/>
<br/>
&nbsp;&nbsp;The Corresponding Source for a work in source code form is that<br/>
same work.<br/>
<br/>
&nbsp;&nbsp;2. Basic Permissions.<br/>
<br/>
&nbsp;&nbsp;All rights granted under this License are granted for the term of<br/>
copyright on the Program, and are irrevocable provided the stated<br/>
conditions are met.&nbsp;&nbsp;This License explicitly affirms your unlimited<br/>
permission to run the unmodified Program.&nbsp;&nbsp;The output from running a<br/>
covered work is covered by this License only if the output, given its<br/>
content, constitutes a covered work.&nbsp;&nbsp;This License acknowledges your<br/>
rights of fair use or other equivalent, as provided by copyright law.<br/>
<br/>
&nbsp;&nbsp;You may make, run and propagate covered works that you do not<br/>
convey, without conditions so long as your license otherwise remains<br/>
in force.&nbsp;&nbsp;You may convey covered works to others for the sole purpose<br/>
of having them make modifications exclusively for you, or provide you<br/>
with facilities for running those works, provided that you comply with<br/>
the terms of this License in conveying all material for which you do<br/>
not control copyright.&nbsp;&nbsp;Those thus making or running the covered works<br/>
for you must do so exclusively on your behalf, under your direction<br/>
and control, on terms that prohibit them from making any copies of<br/>
your copyrighted material outside their relationship with you.<br/>
<br/>
&nbsp;&nbsp;Conveying under any other circumstances is permitted solely under<br/>
the conditions stated below.&nbsp;&nbsp;Sublicensing is not allowed; section 10<br/>
makes it unnecessary.<br/>
<br/>
&nbsp;&nbsp;3. Protecting Users' Legal Rights From Anti-Circumvention Law.<br/>
<br/>
&nbsp;&nbsp;No covered work shall be deemed part of an effective technological<br/>
measure under any applicable law fulfilling obligations under article<br/>
11 of the WIPO copyright treaty adopted on 20 December 1996, or<br/>
similar laws prohibiting or restricting circumvention of such<br/>
measures.<br/>
<br/>
&nbsp;&nbsp;When you convey a covered work, you waive any legal power to forbid<br/>
circumvention of technological measures to the extent such circumvention<br/>
is effected by exercising rights under this License with respect to<br/>
the covered work, and you disclaim any intention to limit operation or<br/>
modification of the work as a means of enforcing, against the work's<br/>
users, your or third parties' legal rights to forbid circumvention of<br/>
technological measures.<br/>
<br/>
&nbsp;&nbsp;4. Conveying Verbatim Copies.<br/>
<br/>
&nbsp;&nbsp;You may convey verbatim copies of the Program's source code as you<br/>
receive it, in any medium, provided that you conspicuously and<br/>
appropriately publish on each copy an appropriate copyright notice;<br/>
keep intact all notices stating that this License and any<br/>
non-permissive terms added in accord with section 7 apply to the code;<br/>
keep intact all notices of the absence of any warranty; and give all<br/>
recipients a copy of this License along with the Program.<br/>
<br/>
&nbsp;&nbsp;You may charge any price or no price for each copy that you convey,<br/>
and you may offer support or warranty protection for a fee.<br/>
<br/>
&nbsp;&nbsp;5. Conveying Modified Source Versions.<br/>
<br/>
&nbsp;&nbsp;You may convey a work based on the Program, or the modifications to<br/>
produce it from the Program, in the form of source code under the<br/>
terms of section 4, provided that you also meet all of these conditions:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) The work must carry prominent notices stating that you modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it, and giving a relevant date.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) The work must carry prominent notices stating that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;released under this License and any conditions added under section<br/>
&nbsp;&nbsp;&nbsp;&nbsp;7.&nbsp;&nbsp;This requirement modifies the requirement in section 4 to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"keep intact all notices".<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) You must license the entire work, as a whole, under this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License to anyone who comes into possession of a copy.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;License will therefore apply, along with any applicable section 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;additional terms, to the whole of the work, and all its parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regardless of how they are packaged.&nbsp;&nbsp;This License gives no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;permission to license the work in any other way, but it does not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;invalidate such permission if you have separately received it.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) If the work has interactive user interfaces, each must display<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Appropriate Legal Notices; however, if the Program has interactive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces that do not display Appropriate Legal Notices, your<br/>
&nbsp;&nbsp;&nbsp;&nbsp;work need not make them do so.<br/>
<br/>
&nbsp;&nbsp;A compilation of a covered work with other separate and independent<br/>
works, which are not by their nature extensions of the covered work,<br/>
and which are not combined with it such as to form a larger program,<br/>
in or on a volume of a storage or distribution medium, is called an<br/>
"aggregate" if the compilation and its resulting copyright are not<br/>
used to limit the access or legal rights of the compilation's users<br/>
beyond what the individual works permit.&nbsp;&nbsp;Inclusion of a covered work<br/>
in an aggregate does not cause this License to apply to the other<br/>
parts of the aggregate.<br/>
<br/>
&nbsp;&nbsp;6. Conveying Non-Source Forms.<br/>
<br/>
&nbsp;&nbsp;You may convey a covered work in object code form under the terms<br/>
of sections 4 and 5, provided that you also convey the<br/>
machine-readable Corresponding Source under the terms of this License,<br/>
in one of these ways:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source fixed on a durable physical medium<br/>
&nbsp;&nbsp;&nbsp;&nbsp;customarily used for software interchange.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Convey the object code in, or embodied in, a physical product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(including a physical distribution medium), accompanied by a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer, valid for at least three years and valid for as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;long as you offer spare parts or customer support for that product<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model, to give anyone who possesses the object code either (1) a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy of the Corresponding Source for all the software in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;product that is covered by this License, on a durable physical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;medium customarily used for software interchange, for a price no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;more than your reasonable cost of physically performing this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conveying of source, or (2) access to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source from a network server at no charge.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Convey individual copies of the object code with a copy of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;written offer to provide the Corresponding Source.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternative is allowed only occasionally and noncommercially, and<br/>
&nbsp;&nbsp;&nbsp;&nbsp;only if you received the object code with such an offer, in accord<br/>
&nbsp;&nbsp;&nbsp;&nbsp;with subsection 6b.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Convey the object code by offering access from a designated<br/>
&nbsp;&nbsp;&nbsp;&nbsp;place (gratis or for a charge), and offer equivalent access to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source in the same way through the same place at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;further charge.&nbsp;&nbsp;You need not require recipients to copy the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source along with the object code.&nbsp;&nbsp;If the place to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;copy the object code is a network server, the Corresponding Source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;may be on a different server (operated by you or a third party)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;that supports equivalent copying facilities, provided you maintain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;clear directions next to the object code saying where to find the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source.&nbsp;&nbsp;Regardless of what server hosts the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Corresponding Source, you remain obligated to ensure that it is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;available for as long as needed to satisfy these requirements.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Convey the object code using peer-to-peer transmission, provided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;you inform other peers where the object code and Corresponding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Source of the work are being offered to the general public at no<br/>
&nbsp;&nbsp;&nbsp;&nbsp;charge under subsection 6d.<br/>
<br/>
&nbsp;&nbsp;A separable portion of the object code, whose source code is excluded<br/>
from the Corresponding Source as a System Library, need not be<br/>
included in conveying the object code work.<br/>
<br/>
&nbsp;&nbsp;A "User Product" is either (1) a "consumer product", which means any<br/>
tangible personal property which is normally used for personal, family,<br/>
or household purposes, or (2) anything designed or sold for incorporation<br/>
into a dwelling.&nbsp;&nbsp;In determining whether a product is a consumer product,<br/>
doubtful cases shall be resolved in favor of coverage.&nbsp;&nbsp;For a particular<br/>
product received by a particular user, "normally used" refers to a<br/>
typical or common use of that class of product, regardless of the status<br/>
of the particular user or of the way in which the particular user<br/>
actually uses, or expects or is expected to use, the product.&nbsp;&nbsp;A product<br/>
is a consumer product regardless of whether the product has substantial<br/>
commercial, industrial or non-consumer uses, unless such uses represent<br/>
the only significant mode of use of the product.<br/>
<br/>
&nbsp;&nbsp;"Installation Information" for a User Product means any methods,<br/>
procedures, authorization keys, or other information required to install<br/>
and execute modified versions of a covered work in that User Product from<br/>
a modified version of its Corresponding Source.&nbsp;&nbsp;The information must<br/>
suffice to ensure that the continued functioning of the modified object<br/>
code is in no case prevented or interfered with solely because<br/>
modification has been made.<br/>
<br/>
&nbsp;&nbsp;If you convey an object code work under this section in, or with, or<br/>
specifically for use in, a User Product, and the conveying occurs as<br/>
part of a transaction in which the right of possession and use of the<br/>
User Product is transferred to the recipient in perpetuity or for a<br/>
fixed term (regardless of how the transaction is characterized), the<br/>
Corresponding Source conveyed under this section must be accompanied<br/>
by the Installation Information.&nbsp;&nbsp;But this requirement does not apply<br/>
if neither you nor any third party retains the ability to install<br/>
modified object code on the User Product (for example, the work has<br/>
been installed in ROM).<br/>
<br/>
&nbsp;&nbsp;The requirement to provide Installation Information does not include a<br/>
requirement to continue to provide support service, warranty, or updates<br/>
for a work that has been modified or installed by the recipient, or for<br/>
the User Product in which it has been modified or installed.&nbsp;&nbsp;Access to a<br/>
network may be denied when the modification itself materially and<br/>
adversely affects the operation of the network or violates the rules and<br/>
protocols for communication across the network.<br/>
<br/>
&nbsp;&nbsp;Corresponding Source conveyed, and Installation Information provided,<br/>
in accord with this section must be in a format that is publicly<br/>
documented (and with an implementation available to the public in<br/>
source code form), and must require no special password or key for<br/>
unpacking, reading or copying.<br/>
<br/>
&nbsp;&nbsp;7. Additional Terms.<br/>
<br/>
&nbsp;&nbsp;"Additional permissions" are terms that supplement the terms of this<br/>
License by making exceptions from one or more of its conditions.<br/>
Additional permissions that are applicable to the entire Program shall<br/>
be treated as though they were included in this License, to the extent<br/>
that they are valid under applicable law.&nbsp;&nbsp;If additional permissions<br/>
apply only to part of the Program, that part may be used separately<br/>
under those permissions, but the entire Program remains governed by<br/>
this License without regard to the additional permissions.<br/>
<br/>
&nbsp;&nbsp;When you convey a copy of a covered work, you may at your option<br/>
remove any additional permissions from that copy, or from any part of<br/>
it.&nbsp;&nbsp;(Additional permissions may be written to require their own<br/>
removal in certain cases when you modify the work.)&nbsp;&nbsp;You may place<br/>
additional permissions on material, added by you to a covered work,<br/>
for which you have or can give appropriate copyright permission.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, for material you<br/>
add to a covered work, you may (if authorized by the copyright holders of<br/>
that material) supplement the terms of this License with terms:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a) Disclaiming warranty or limiting liability differently from the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;terms of sections 15 and 16 of this License; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b) Requiring preservation of specified reasonable legal notices or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;author attributions in that material or in the Appropriate Legal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Notices displayed by works containing it; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c) Prohibiting misrepresentation of the origin of that material, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;requiring that modified versions of such material be marked in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;reasonable ways as different from the original version; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d) Limiting the use for publicity purposes of names of licensors or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;authors of the material; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;e) Declining to grant rights under trademark law for use of some<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trade names, trademarks, or service marks; or<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f) Requiring indemnification of licensors and authors of that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;material by anyone who conveys the material (or modified versions of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it) with contractual assumptions of liability to the recipient, for<br/>
&nbsp;&nbsp;&nbsp;&nbsp;any liability that these contractual assumptions directly impose on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;those licensors and authors.<br/>
<br/>
&nbsp;&nbsp;All other non-permissive additional terms are considered "further<br/>
restrictions" within the meaning of section 10.&nbsp;&nbsp;If the Program as you<br/>
received it, or any part of it, contains a notice stating that it is<br/>
governed by this License along with a term that is a further<br/>
restriction, you may remove that term.&nbsp;&nbsp;If a license document contains<br/>
a further restriction but permits relicensing or conveying under this<br/>
License, you may add to a covered work material governed by the terms<br/>
of that license document, provided that the further restriction does<br/>
not survive such relicensing or conveying.<br/>
<br/>
&nbsp;&nbsp;If you add terms to a covered work in accord with this section, you<br/>
must place, in the relevant source files, a statement of the<br/>
additional terms that apply to those files, or a notice indicating<br/>
where to find the applicable terms.<br/>
<br/>
&nbsp;&nbsp;Additional terms, permissive or non-permissive, may be stated in the<br/>
form of a separately written license, or stated as exceptions;<br/>
the above requirements apply either way.<br/>
<br/>
&nbsp;&nbsp;8. Termination.<br/>
<br/>
&nbsp;&nbsp;You may not propagate or modify a covered work except as expressly<br/>
provided under this License.&nbsp;&nbsp;Any attempt otherwise to propagate or<br/>
modify it is void, and will automatically terminate your rights under<br/>
this License (including any patent licenses granted under the third<br/>
paragraph of section 11).<br/>
<br/>
&nbsp;&nbsp;However, if you cease all violation of this License, then your<br/>
license from a particular copyright holder is reinstated (a)<br/>
provisionally, unless and until the copyright holder explicitly and<br/>
finally terminates your license, and (b) permanently, if the copyright<br/>
holder fails to notify you of the violation by some reasonable means<br/>
prior to 60 days after the cessation.<br/>
<br/>
&nbsp;&nbsp;Moreover, your license from a particular copyright holder is<br/>
reinstated permanently if the copyright holder notifies you of the<br/>
violation by some reasonable means, this is the first time you have<br/>
received notice of violation of this License (for any work) from that<br/>
copyright holder, and you cure the violation prior to 30 days after<br/>
your receipt of the notice.<br/>
<br/>
&nbsp;&nbsp;Termination of your rights under this section does not terminate the<br/>
licenses of parties who have received copies or rights from you under<br/>
this License.&nbsp;&nbsp;If your rights have been terminated and not permanently<br/>
reinstated, you do not qualify to receive new licenses for the same<br/>
material under section 10.<br/>
<br/>
&nbsp;&nbsp;9. Acceptance Not Required for Having Copies.<br/>
<br/>
&nbsp;&nbsp;You are not required to accept this License in order to receive or<br/>
run a copy of the Program.&nbsp;&nbsp;Ancillary propagation of a covered work<br/>
occurring solely as a consequence of using peer-to-peer transmission<br/>
to receive a copy likewise does not require acceptance.&nbsp;&nbsp;However,<br/>
nothing other than this License grants you permission to propagate or<br/>
modify any covered work.&nbsp;&nbsp;These actions infringe copyright if you do<br/>
not accept this License.&nbsp;&nbsp;Therefore, by modifying or propagating a<br/>
covered work, you indicate your acceptance of this License to do so.<br/>
<br/>
&nbsp;&nbsp;10. Automatic Licensing of Downstream Recipients.<br/>
<br/>
&nbsp;&nbsp;Each time you convey a covered work, the recipient automatically<br/>
receives a license from the original licensors, to run, modify and<br/>
propagate that work, subject to this License.&nbsp;&nbsp;You are not responsible<br/>
for enforcing compliance by third parties with this License.<br/>
<br/>
&nbsp;&nbsp;An "entity transaction" is a transaction transferring control of an<br/>
organization, or substantially all assets of one, or subdividing an<br/>
organization, or merging organizations.&nbsp;&nbsp;If propagation of a covered<br/>
work results from an entity transaction, each party to that<br/>
transaction who receives a copy of the work also receives whatever<br/>
licenses to the work the party's predecessor in interest had or could<br/>
give under the previous paragraph, plus a right to possession of the<br/>
Corresponding Source of the work from the predecessor in interest, if<br/>
the predecessor has it or can get it with reasonable efforts.<br/>
<br/>
&nbsp;&nbsp;You may not impose any further restrictions on the exercise of the<br/>
rights granted or affirmed under this License.&nbsp;&nbsp;For example, you may<br/>
not impose a license fee, royalty, or other charge for exercise of<br/>
rights granted under this License, and you may not initiate litigation<br/>
(including a cross-claim or counterclaim in a lawsuit) alleging that<br/>
any patent claim is infringed by making, using, selling, offering for<br/>
sale, or importing the Program or any portion of it.<br/>
<br/>
&nbsp;&nbsp;11. Patents.<br/>
<br/>
&nbsp;&nbsp;A "contributor" is a copyright holder who authorizes use under this<br/>
License of the Program or a work on which the Program is based.&nbsp;&nbsp;The<br/>
work thus licensed is called the contributor's "contributor version".<br/>
<br/>
&nbsp;&nbsp;A contributor's "essential patent claims" are all patent claims<br/>
owned or controlled by the contributor, whether already acquired or<br/>
hereafter acquired, that would be infringed by some manner, permitted<br/>
by this License, of making, using, or selling its contributor version,<br/>
but do not include claims that would be infringed only as a<br/>
consequence of further modification of the contributor version.&nbsp;&nbsp;For<br/>
purposes of this definition, "control" includes the right to grant<br/>
patent sublicenses in a manner consistent with the requirements of<br/>
this License.<br/>
<br/>
&nbsp;&nbsp;Each contributor grants you a non-exclusive, worldwide, royalty-free<br/>
patent license under the contributor's essential patent claims, to<br/>
make, use, sell, offer for sale, import and otherwise run, modify and<br/>
propagate the contents of its contributor version.<br/>
<br/>
&nbsp;&nbsp;In the following three paragraphs, a "patent license" is any express<br/>
agreement or commitment, however denominated, not to enforce a patent<br/>
(such as an express permission to practice a patent or covenant not to<br/>
sue for patent infringement).&nbsp;&nbsp;To "grant" such a patent license to a<br/>
party means to make such an agreement or commitment not to enforce a<br/>
patent against the party.<br/>
<br/>
&nbsp;&nbsp;If you convey a covered work, knowingly relying on a patent license,<br/>
and the Corresponding Source of the work is not available for anyone<br/>
to copy, free of charge and under the terms of this License, through a<br/>
publicly available network server or other readily accessible means,<br/>
then you must either (1) cause the Corresponding Source to be so<br/>
available, or (2) arrange to deprive yourself of the benefit of the<br/>
patent license for this particular work, or (3) arrange, in a manner<br/>
consistent with the requirements of this License, to extend the patent<br/>
license to downstream recipients.&nbsp;&nbsp;"Knowingly relying" means you have<br/>
actual knowledge that, but for the patent license, your conveying the<br/>
covered work in a country, or your recipient's use of the covered work<br/>
in a country, would infringe one or more identifiable patents in that<br/>
country that you have reason to believe are valid.<br/>
<br/>
&nbsp;&nbsp;If, pursuant to or in connection with a single transaction or<br/>
arrangement, you convey, or propagate by procuring conveyance of, a<br/>
covered work, and grant a patent license to some of the parties<br/>
receiving the covered work authorizing them to use, propagate, modify<br/>
or convey a specific copy of the covered work, then the patent license<br/>
you grant is automatically extended to all recipients of the covered<br/>
work and works based on it.<br/>
<br/>
&nbsp;&nbsp;A patent license is "discriminatory" if it does not include within<br/>
the scope of its coverage, prohibits the exercise of, or is<br/>
conditioned on the non-exercise of one or more of the rights that are<br/>
specifically granted under this License.&nbsp;&nbsp;You may not convey a covered<br/>
work if you are a party to an arrangement with a third party that is<br/>
in the business of distributing software, under which you make payment<br/>
to the third party based on the extent of your activity of conveying<br/>
the work, and under which the third party grants, to any of the<br/>
parties who would receive the covered work from you, a discriminatory<br/>
patent license (a) in connection with copies of the covered work<br/>
conveyed by you (or copies made from those copies), or (b) primarily<br/>
for and in connection with specific products or compilations that<br/>
contain the covered work, unless you entered into that arrangement,<br/>
or that patent license was granted, prior to 28 March 2007.<br/>
<br/>
&nbsp;&nbsp;Nothing in this License shall be construed as excluding or limiting<br/>
any implied license or other defenses to infringement that may<br/>
otherwise be available to you under applicable patent law.<br/>
<br/>
&nbsp;&nbsp;12. No Surrender of Others' Freedom.<br/>
<br/>
&nbsp;&nbsp;If conditions are imposed on you (whether by court order, agreement or<br/>
otherwise) that contradict the conditions of this License, they do not<br/>
excuse you from the conditions of this License.&nbsp;&nbsp;If you cannot convey a<br/>
covered work so as to satisfy simultaneously your obligations under this<br/>
License and any other pertinent obligations, then as a consequence you may<br/>
not convey it at all.&nbsp;&nbsp;For example, if you agree to terms that obligate you<br/>
to collect a royalty for further conveying from those to whom you convey<br/>
the Program, the only way you could satisfy both those terms and this<br/>
License would be to refrain entirely from conveying the Program.<br/>
<br/>
&nbsp;&nbsp;13. Use with the GNU Affero General Public License.<br/>
<br/>
&nbsp;&nbsp;Notwithstanding any other provision of this License, you have<br/>
permission to link or combine any covered work with a work licensed<br/>
under version 3 of the GNU Affero General Public License into a single<br/>
combined work, and to convey the resulting work.&nbsp;&nbsp;The terms of this<br/>
License will continue to apply to the part which is the covered work,<br/>
but the special requirements of the GNU Affero General Public License,<br/>
section 13, concerning interaction through a network will apply to the<br/>
combination as such.<br/>
<br/>
&nbsp;&nbsp;14. Revised Versions of this License.<br/>
<br/>
&nbsp;&nbsp;The Free Software Foundation may publish revised and/or new versions of<br/>
the GNU General Public License from time to time.&nbsp;&nbsp;Such new versions will<br/>
be similar in spirit to the present version, but may differ in detail to<br/>
address new problems or concerns.<br/>
<br/>
&nbsp;&nbsp;Each version is given a distinguishing version number.&nbsp;&nbsp;If the<br/>
Program specifies that a certain numbered version of the GNU General<br/>
Public License "or any later version" applies to it, you have the<br/>
option of following the terms and conditions either of that numbered<br/>
version or of any later version published by the Free Software<br/>
Foundation.&nbsp;&nbsp;If the Program does not specify a version number of the<br/>
GNU General Public License, you may choose any version ever published<br/>
by the Free Software Foundation.<br/>
<br/>
&nbsp;&nbsp;If the Program specifies that a proxy can decide which future<br/>
versions of the GNU General Public License can be used, that proxy's<br/>
public statement of acceptance of a version permanently authorizes you<br/>
to choose that version for the Program.<br/>
<br/>
&nbsp;&nbsp;Later license versions may give you additional or different<br/>
permissions.&nbsp;&nbsp;However, no additional obligations are imposed on any<br/>
author or copyright holder as a result of your choosing to follow a<br/>
later version.<br/>
<br/>
&nbsp;&nbsp;15. Disclaimer of Warranty.<br/>
<br/>
&nbsp;&nbsp;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br/>
APPLICABLE LAW.&nbsp;&nbsp;EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br/>
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY<br/>
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br/>
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br/>
PURPOSE.&nbsp;&nbsp;THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br/>
IS WITH YOU.&nbsp;&nbsp;SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br/>
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br/>
<br/>
&nbsp;&nbsp;16. Limitation of Liability.<br/>
<br/>
&nbsp;&nbsp;IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br/>
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br/>
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br/>
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br/>
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br/>
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br/>
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br/>
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br/>
SUCH DAMAGES.<br/>
<br/>
&nbsp;&nbsp;17. Interpretation of Sections 15 and 16.<br/>
<br/>
&nbsp;&nbsp;If the disclaimer of warranty and limitation of liability provided<br/>
above cannot be given local legal effect according to their terms,<br/>
reviewing courts shall apply local law that most closely approximates<br/>
an absolute waiver of all civil liability in connection with the<br/>
Program, unless a warranty or assumption of liability accompanies a<br/>
copy of the Program in return for a fee.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END OF TERMS AND CONDITIONS<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How to Apply These Terms to Your New Programs<br/>
<br/>
&nbsp;&nbsp;If you develop a new program, and you want it to be of the greatest<br/>
possible use to the public, the best way to achieve this is to make it<br/>
free software which everyone can redistribute and change under these terms.<br/>
<br/>
&nbsp;&nbsp;To do so, attach the following notices to the program.&nbsp;&nbsp;It is safest<br/>
to attach them to the start of each source file to most effectively<br/>
state the exclusion of warranty; and each file should have at least<br/>
the "copyright" line and a pointer to where the full notice is found.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;one line to give the program's name and a brief idea of what it does.&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
Also add information on how to contact you by electronic and paper mail.<br/>
<br/>
&nbsp;&nbsp;If the program does terminal interaction, make it output a short<br/>
notice like this when it starts in an interactive mode:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;program&gt;&nbsp;&nbsp;Copyright (C) &lt;year&gt;&nbsp;&nbsp;&lt;name of author&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This is free software, and you are welcome to redistribute it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;under certain conditions; type `show c' for details.<br/>
<br/>
The hypothetical commands `show w' and `show c' should show the appropriate<br/>
parts of the General Public License.&nbsp;&nbsp;Of course, your program's commands<br/>
might be different; for a GUI interface, you would use an "about box".<br/>
<br/>
&nbsp;&nbsp;You should also get your employer (if you work as a programmer) or school,<br/>
if any, to sign a "copyright disclaimer" for the program, if necessary.<br/>
For more information on this, and how to apply and follow the GNU GPL, see<br/>
&lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
&nbsp;&nbsp;The GNU General Public License does not permit incorporating your program<br/>
into proprietary programs.&nbsp;&nbsp;If your program is a subroutine library, you<br/>
may consider it more useful to permit linking proprietary applications with<br/>
the library.&nbsp;&nbsp;If this is what you want to do, use the GNU Lesser General<br/>
Public License instead of this License.&nbsp;&nbsp;But first, please read<br/>
&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosboard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosboard.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Board, class for a Pylos/Phyraos board<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "pylosboard.h"<br/>
<br/>
#include "pyloscoordinat.h"<br/>
#include "pylosmove.h"<br/>
#include "pylosmustremovestate.h"<br/>
#include "pylosplayer.h"<br/>
#include "pylospositionstate.h"<br/>
#include "pyloswinner.h"<br/>
#include "trace.h"<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#ifdef PYLOSGAME_H<br/>
#error Pylos::Game must not be defined for a Pylos::Board<br/>
#endif<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Pylos::Board::Board() noexcept<br/>
&nbsp;&nbsp;: m_board(CreateEmptyBoard())<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Assume correct board sizes<br/>
&nbsp;&nbsp;assert(m_board.size() == 4);<br/>
&nbsp;&nbsp;assert(m_board[0].size() == 4);<br/>
&nbsp;&nbsp;assert(m_board[0][0].size() == 4);<br/>
&nbsp;&nbsp;assert(m_board[0][1].size() == 4);<br/>
&nbsp;&nbsp;assert(m_board[0][2].size() == 4);<br/>
&nbsp;&nbsp;assert(m_board[0][3].size() == 4);<br/>
&nbsp;&nbsp;assert(m_board[1].size() == 3);<br/>
&nbsp;&nbsp;assert(m_board[1][0].size() == 3);<br/>
&nbsp;&nbsp;assert(m_board[1][1].size() == 3);<br/>
&nbsp;&nbsp;assert(m_board[1][2].size() == 3);<br/>
&nbsp;&nbsp;assert(m_board[2].size() == 2);<br/>
&nbsp;&nbsp;assert(m_board[2][0].size() == 2);<br/>
&nbsp;&nbsp;assert(m_board[2][1].size() == 2);<br/>
&nbsp;&nbsp;assert(m_board[3].size() == 1);<br/>
&nbsp;&nbsp;assert(m_board[3][0].size() == 1);<br/>
}<br/>
<br/>
bool ribi::Pylos::Board::CanDo(const Pylos::Move&amp; m, const Player player) const<br/>
{<br/>
&nbsp;&nbsp;assert(m.IsValid());<br/>
&nbsp;&nbsp;if (m.m_move.size()==1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Placement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!CanSet(m.m_move[0],player)) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m.m_move.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!CanTransfer(m.m_move[0],m.m_move[1],player)) return false;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Make a copy Pylos<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; p = Clone();<br/>
&nbsp;&nbsp;assert(p &amp;&amp; "Assume cloning succeeded");<br/>
&nbsp;&nbsp;assert(p.get() != this &amp;&amp; "Assume clone is in different memory location");<br/>
&nbsp;&nbsp;#define DEBUG_TEMP_CHECK_27364864984376597625482762367528<br/>
&nbsp;&nbsp;#ifdef DEBUG_TEMP_CHECK_27364864984376597625482762367528<br/>
&nbsp;&nbsp;if(*p != *this)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(*p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(*this);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(*p == *this &amp;&amp; "Assumes clone is identical");<br/>
&nbsp;&nbsp;//Do the move<br/>
&nbsp;&nbsp;MustRemoveState must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;if (m.m_move.size()==1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Set(m.m_move[0],player,must_remove);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Transfer(m.m_move[0],m.m_move[1],must_remove);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check if marbles need to be removed<br/>
&nbsp;&nbsp;if (must_remove != MustRemoveState::no)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Move must not lack one/two marbles to be removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (m.m_remove.empty()) return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Must remove marbles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return p-&gt;CanRemove(m.m_remove,player);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Must not remove marbles, so the move is valid if<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//m_remove is empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return m.m_remove.empty();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Pylos::Board::CanDo(const std::string&amp; s, const Player player) const<br/>
{<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return CanDo(Pylos::Move(s),player);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Pylos::Board::CanDoSomething(const Player&amp; player) const<br/>
{<br/>
&nbsp;&nbsp;return !GetAllPossibleMoves(player).empty();<br/>
}<br/>
<br/>
bool ribi::Pylos::Board::CanRemove(const std::vector&lt;Coordinat&gt;&amp; v, const Player player) const<br/>
{<br/>
&nbsp;&nbsp;assert(v.size() == 1 || v.size() == 2);<br/>
&nbsp;&nbsp;if (v.size() == 1) return CanRemove(v[0],player);<br/>
&nbsp;&nbsp;assert(v.size() == 2);<br/>
&nbsp;&nbsp;//Disallow selecting the same marble twice<br/>
&nbsp;&nbsp;if (v[0] == v[1]) return false;<br/>
&nbsp;&nbsp;//Disallow selecting empty spots<br/>
&nbsp;&nbsp;if ( Get(v[0]) == PositionState::empty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| Get(v[1]) == PositionState::empty) return false;<br/>
&nbsp;&nbsp;//Disallow selecting marbles of different colors<br/>
&nbsp;&nbsp;if (Get(v[0]) != Get(v[1])) return false;<br/>
&nbsp;&nbsp;//Keep one ordering, c2 must be above c1<br/>
&nbsp;&nbsp;if (v[0].GetLayer() == v[1].GetLayer())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return CanRemove(v[0],player) &amp;&amp; CanRemove(v[1],player);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (v[0].GetLayer() &gt; v[1].GetLayer())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;Coordinat&gt; w(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::swap(w[0],w[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return CanRemove(w,player);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Assert proper ordering<br/>
&nbsp;&nbsp;assert(v[0].GetLayer() &lt; v[1].GetLayer());<br/>
&nbsp;&nbsp;//If the top marble cannot be removed,<br/>
&nbsp;&nbsp;//the lower cannot either<br/>
&nbsp;&nbsp;if (!CanRemove(v[1],player)) return false;<br/>
&nbsp;&nbsp;//The bottom marble can be removed if above are only empty spots, or only the top marble<br/>
&nbsp;&nbsp;//Clone the board, remove the top marble of the clone and test if the bottom marble can be removed<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = this-&gt;Clone();<br/>
&nbsp;&nbsp;assert(b-&gt;CanRemove(v[1],player));<br/>
&nbsp;&nbsp;b-&gt;Remove(v[1],player);<br/>
&nbsp;&nbsp;return b-&gt;CanRemove(v[0],player);<br/>
}<br/>
<br/>
bool ribi::Pylos::Board::CanRemove(const Coordinat&amp; c, const Player player) const<br/>
{<br/>
&nbsp;&nbsp;//Cannot remove an empty spot<br/>
&nbsp;&nbsp;if (Get(c)==PositionState::empty) return false;<br/>
<br/>
&nbsp;&nbsp;//Cannot remove marble of another player<br/>
&nbsp;&nbsp;if (Get(c)!=ToPositionState(player)) return false;<br/>
<br/>
&nbsp;&nbsp;//Cannot remove from top layer, because then the player at the top has already won<br/>
&nbsp;&nbsp;if (c.GetLayer() == 3) return false;<br/>
<br/>
&nbsp;&nbsp;//A marble can be removed if all positions above are empty<br/>
&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v = GetAbove(c);<br/>
&nbsp;&nbsp;return Count(v,PositionState::empty) == static_cast&lt;int&gt;(v.size());<br/>
}<br/>
<br/>
bool ribi::Pylos::Board::CanTransfer(const Coordinat&amp; c, const Player player) const<br/>
{<br/>
&nbsp;&nbsp;//Cannot transfer an empty spot<br/>
&nbsp;&nbsp;if (Get(c)==PositionState::empty) return false;<br/>
<br/>
&nbsp;&nbsp;//Cannot transfer marble of other color<br/>
&nbsp;&nbsp;if (Get(c)!=ToPositionState(player)) return false;<br/>
<br/>
&nbsp;&nbsp;//Cannot transfer from top layer, because then the player at the top has already won<br/>
&nbsp;&nbsp;if (c.GetLayer() == 3) return false;<br/>
<br/>
&nbsp;&nbsp;//A marble can be transferred if all positions above are empty<br/>
&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v = GetAbove(c);<br/>
&nbsp;&nbsp;return Count(v,PositionState::empty) == static_cast&lt;int&gt;(v.size());<br/>
}<br/>
<br/>
bool ribi::Pylos::Board::CanTransfer(const Coordinat&amp; from,<br/>
&nbsp;&nbsp;const Coordinat&amp; to,<br/>
&nbsp;&nbsp;const Player player) const<br/>
{<br/>
&nbsp;&nbsp;//The source and target must differ<br/>
&nbsp;&nbsp;if (from == to) return false;<br/>
<br/>
&nbsp;&nbsp;//The to position must be higher<br/>
&nbsp;&nbsp;if (from.GetLayer() &gt;= to.GetLayer()) return false;<br/>
<br/>
&nbsp;&nbsp;//The from position must be the player<br/>
&nbsp;&nbsp;if (Get(from) != ToPositionState(player)) return false;<br/>
<br/>
&nbsp;&nbsp;//The to position must be empty<br/>
&nbsp;&nbsp;if (Get(to) != PositionState::empty) return false;<br/>
<br/>
&nbsp;&nbsp;//Transfer the marble by cloning the board, removing it and placing it<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = this-&gt;Clone();<br/>
<br/>
&nbsp;&nbsp;assert(player == ToPlayer(b-&gt;Get(from))); //Added check for line below<br/>
&nbsp;&nbsp;//const Player player = ToPlayer(b-&gt;Get(from)); //Removed<br/>
<br/>
&nbsp;&nbsp;assert(b-&gt;CanRemove(from,player));<br/>
&nbsp;&nbsp;b-&gt;Remove(from,player);<br/>
&nbsp;&nbsp;return b-&gt;CanSet(to,player);<br/>
}<br/>
<br/>
#ifdef NDEBUG<br/>
bool ribi::Pylos::Board::CanSet(const Coordinat&amp; c, const Player) const<br/>
#else<br/>
bool ribi::Pylos::Board::CanSet(const Coordinat&amp; c, const Player player) const<br/>
#endif<br/>
{<br/>
&nbsp;&nbsp;assert(player == Player::player1 || player == Player::player2); //Prevent compiler from complaining<br/>
&nbsp;&nbsp;if (Get(c) != PositionState::empty) return false;<br/>
&nbsp;&nbsp;//Player can always place a marble at an empty spot at the bottom<br/>
&nbsp;&nbsp;if (c.GetLayer() == 0) return true;<br/>
&nbsp;&nbsp;//Player wants to place a marbles at non-bottom layer,<br/>
&nbsp;&nbsp;//which is valid if none of the spots below are empty<br/>
&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v = GetBelow(c);<br/>
&nbsp;&nbsp;assert(v.size() == 4);<br/>
&nbsp;&nbsp;return Count(v,PositionState::empty) == 0;<br/>
}<br/>
<br/>
int ribi::Pylos::Board::Count(const std::vector&lt;Coordinat&gt;&amp; coordinats, const PositionState state) const<br/>
{<br/>
&nbsp;&nbsp;return std::count_if(coordinats.begin(),coordinats.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this,state](const Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Get(c) == state;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
int ribi::Pylos::Board::Count(const PositionState state) const<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v = Pylos::GetAllCoordinats();<br/>
&nbsp;&nbsp;return Count(v,state);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Pylos::Board&gt; ribi::Pylos::Board::CreateAdvancedBoard() noexcept<br/>
{<br/>
&nbsp;&nbsp;return boost::shared_ptr&lt;Board&gt;(new BoardAdvanced);<br/>
}<br/>
<br/>
const boost::shared_ptr&lt;ribi::Pylos::Board&gt; ribi::Pylos::Board::CreateBasicBoard() noexcept<br/>
{<br/>
&nbsp;&nbsp;return boost::shared_ptr&lt;Board&gt;(new BoardBasic);<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Board::Layer&gt; ribi::Pylos::Board::CreateEmptyBoard() const noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;Layer&gt; v;<br/>
&nbsp;&nbsp;v.push_back(CreateLayer(4));<br/>
&nbsp;&nbsp;v.push_back(CreateLayer(3));<br/>
&nbsp;&nbsp;v.push_back(CreateLayer(2));<br/>
&nbsp;&nbsp;v.push_back(CreateLayer(1));<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const ribi::Pylos::Board::Layer ribi::Pylos::Board::CreateLayer(const int sz) const<br/>
{<br/>
&nbsp;&nbsp;assert(sz &gt; 1);<br/>
&nbsp;&nbsp;return std::vector&lt;std::vector&lt;PositionState&gt; &gt; (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sz,std::vector&lt;PositionState&gt;(sz,PositionState::empty));<br/>
}<br/>
<br/>
void ribi::Pylos::Board::Do(const std::string&amp; s, const Player player)<br/>
{<br/>
&nbsp;&nbsp;Do(Pylos::Move(s),player);<br/>
}<br/>
<br/>
void ribi::Pylos::Board::Do(const Pylos::Move&amp; m, const Player player)<br/>
{<br/>
&nbsp;&nbsp;assert(CanDo(m,player));<br/>
&nbsp;&nbsp;MustRemoveState must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;if (m.m_move.size() == 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;Set(m.m_move[0],player,must_remove);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Transfer(m.m_move[0],m.m_move[1],must_remove);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (!m.m_remove.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(m.m_remove.begin(),m.m_remove.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,&amp;must_remove,player](const Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove(c,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!must_remove);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
ribi::Pylos::PositionState ribi::Pylos::Board::Get(const Coordinat&amp; c) const noexcept<br/>
{<br/>
&nbsp;&nbsp;//Just checking, a constructed Coordinat should pass all asserts<br/>
&nbsp;&nbsp;assert(c.IsValid());<br/>
&nbsp;&nbsp;assert(c.IsValid());<br/>
&nbsp;&nbsp;assert(c.GetLayer() &lt; static_cast&lt;int&gt;(m_board.size()));<br/>
&nbsp;&nbsp;assert(m_board.empty());<br/>
&nbsp;&nbsp;assert(c.GetX() &lt; static_cast&lt;int&gt;(m_board[c.GetLayer()].size()));<br/>
&nbsp;&nbsp;assert(m_board[c.GetLayer()].empty());<br/>
&nbsp;&nbsp;assert(c.GetY() &lt; static_cast&lt;int&gt;(m_board[c.GetLayer()][c.GetX()].size()));<br/>
&nbsp;&nbsp;return m_board[c.GetLayer()][c.GetX()][c.GetY()];<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Move&gt; ribi::Pylos::Board::GetAllPossibleMoves(const Player&amp; player) const noexcept<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v = Pylos::GetAllCoordinats();<br/>
&nbsp;&nbsp;std::vector&lt;Move&gt; w;<br/>
&nbsp;&nbsp;const auto j = v.end();<br/>
&nbsp;&nbsp;for (auto i = v.begin(); i!=j; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check for set<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (this-&gt;CanSet(*i,player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;Get(*i) == PositionState::empty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CanDo(i-&gt;ToStr(),player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check for simple set (that is, without removal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Move(i-&gt;ToStr()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check first removal coordinat<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (auto r1 = v.begin(); r1!=j; ++r1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check one-marble remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CanDo(Move( {*i}, {*r1} ),player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Move( {*i}, {*r1} ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check two-marble remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (auto r2 = r1; r2!=j; ++r2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r1 == r2) continue; //Checked by CanDo<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CanDo(Move( {*i}, {*r1,*r2} ),player)) w.push_back(Move( {*i}, {*r1,*r2} ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Check for transfer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else if (this-&gt;CanTransfer(*i,player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(this-&gt;Get(*i) == ToPositionState(player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (auto to = i; to!=j; ++to)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CanDo(Move( {*i,*to}, {} ),player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check for simple transfer (that is, without removal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Move( {*i,*to}, {} ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check first removal coordinat<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (auto r1 = v.begin(); r1!=j; ++r1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check one-marble remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CanDo(Move( {*i,*to}, {*r1} ),player))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(Move( {*i,*to}, {*r1} ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check two-marble remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (auto r2 = r1; r2!=j; ++r2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r1 == r2) continue; //Checked by CanDo<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CanDo(Move( {*i,*to}, {*r1,*r2} ),player)) w.push_back(Move( {*i,*to}, {*r1,*r2} ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return w;<br/>
}<br/>
<br/>
int ribi::Pylos::Board::GetLayerSize(const int layer) const<br/>
{<br/>
&nbsp;&nbsp;assert(layer &gt;= 0);<br/>
&nbsp;&nbsp;assert(layer &lt; boost::numeric_cast&lt;int&gt;(m_board.size()));<br/>
&nbsp;&nbsp;return boost::numeric_cast&lt;int&gt;(m_board[layer].size());<br/>
}<br/>
<br/>
const std::string ribi::Pylos::Board::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Pylos::Board::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2012-05-05: version 2.0: initial release version");<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
ribi::Pylos::Winner ribi::Pylos::Board::GetWinner() const noexcept<br/>
{<br/>
&nbsp;&nbsp;if (Get(Coordinat(3,0,0)) != PositionState::empty)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;switch (Get(Coordinat(3,0,0)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PositionState::player1: return Winner::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PositionState::player2: return Winner::player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (Count(PositionState::player1)==15&nbsp;&nbsp;&amp;&amp; !CanDoSomething(Player::player1)) return Winner::player2;<br/>
&nbsp;&nbsp;if (Count(PositionState::player2)==15&nbsp;&nbsp;&amp;&amp; !CanDoSomething(Player::player2)) return Winner::player1;<br/>
&nbsp;&nbsp;return Winner::none;<br/>
}<br/>
<br/>
ribi::Pylos::Winner ribi::Pylos::Board::PlayRandomPylosGame(const boost::shared_ptr&lt;Board&gt;&amp; board_original)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; board;<br/>
&nbsp;&nbsp;if (board_original)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;board = board_original-&gt;Clone();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((std::rand() &gt;&gt; 4) % 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;board = ribi::Pylos::Board::CreateAdvancedBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;board = ribi::Pylos::Board::CreateBasicBoard();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Player player = Player::player1;<br/>
<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (board-&gt;GetWinner() != Winner::none)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return board-&gt;GetWinner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Use random move from GetAllPossibleMoves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Move&gt; v = board-&gt;GetAllPossibleMoves(player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int i = std::rand() % v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;board-&gt;Do(v[i],player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Do not always toggle the player<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((std::rand() &gt;&gt; 4) % 2) Toggle(player);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifdef NDEBUG<br/>
void ribi::Pylos::Board::Remove(const Coordinat&amp; c, const Player)<br/>
#else<br/>
void ribi::Pylos::Board::Remove(const Coordinat&amp; c, const Player player)<br/>
#endif<br/>
{<br/>
&nbsp;&nbsp;assert(CanRemove(c,player));<br/>
&nbsp;&nbsp;m_board[c.GetLayer()][c.GetX()][c.GetY()] = PositionState::empty;<br/>
}<br/>
<br/>
void ribi::Pylos::Board::Remove(const std::vector&lt;Coordinat&gt;&amp; v, const Player player)<br/>
{<br/>
&nbsp;&nbsp;assert(CanRemove(v,player));<br/>
&nbsp;&nbsp;//Proper ordering: v[0] must be marble above<br/>
&nbsp;&nbsp;if (v.size() == 2 &amp;&amp; v[0].GetLayer() &lt; v[1].GetLayer())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;Coordinat&gt; w(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::swap(w[0],w[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Remove(w,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Assert proper ordering<br/>
&nbsp;&nbsp;assert(v.size() == 1 || v[0].GetLayer() &gt;= v[1].GetLayer());<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this,player](const Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove(c,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Pylos::Board::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;tested = true;<br/>
<br/>
&nbsp;&nbsp;TRACE("Test operator==");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoardBasic a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoardBasic b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a == b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a == b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test operator==<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoardAdvanced a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoardAdvanced b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a == b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a == b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoardAdvanced a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoardBasic b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a != b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Game::Clone of GameBasic");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardBasic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(a-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; c(new BoardAdvanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Game::Clone of GameAdvanced");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardAdvanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(a-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; c(new BoardBasic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Clone of played GameBasic");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardBasic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(a-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Clone of played BoardAdvanced");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardAdvanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(a-&gt;Clone());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test conversion of Board to text");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardAdvanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(new BoardBasic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == std::string(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"X . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . ."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == b-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,1,0)",Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,1,0)",Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == std::string(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"X O . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . ."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == b-&gt;ToStr());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,1,1)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,1,1)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(a-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == std::string(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"X O . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". X . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . ."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == b-&gt;ToStr());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,0,1)",Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,0,1)",Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(a-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == std::string(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"X O . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"O X . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . ."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == b-&gt;ToStr());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(1,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(1,0,0)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(a-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == std::string(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"X O . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" X . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"O X . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . ."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == b-&gt;ToStr());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,2,0)",Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,2,0)",Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(a-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == std::string(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"X O O .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" X . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"O X . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . ."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == b-&gt;ToStr());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,2,1)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,2,1)",Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TRACE(a-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == std::string(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"X O O .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" X . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"O X X .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . .\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . . . \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;". . . ."));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;ToStr() == b-&gt;ToStr());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test horizontal detection of line in both boards");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardAdvanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(new BoardBasic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,3,0)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,3,0)"),Player::player1,must_remove); assert(!must_remove); //Basic does not test for lines<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,1,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,1,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(!must_remove); //Basic does not test for lines<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test horizontal detection of line in both boards");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardAdvanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(new BoardBasic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,1)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,1)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,2)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,2)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,3)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,3)"),Player::player1,must_remove); assert(!must_remove); //Basic does not test for lines<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,0)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,1)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,1)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,3)"),Player::player2,must_remove); assert( must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,3)"),Player::player2,must_remove); assert(!must_remove); //Basic does not test for lines<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test block detection of line in both boards");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; a(new BoardAdvanced);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt; b(new BoardBasic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,1,0)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,1)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,1)"),Player::player1,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,1,1)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,1,1)"),Player::player1,must_remove); assert( must_remove != MustRemoveState::no);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,3,3)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,3,3)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,3,2)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,3)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,3)"),Player::player2,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert( must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,2)"),Player::player2,must_remove); assert( must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Board test transfer of marbles");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; a = CreateAdvancedBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = CreateBasicBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,0,0)"),Player::player2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,0,0)"),Player::player2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,0,0)-&gt;(0,0,1)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,0,0)-&gt;(0,0,1)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,0,0)-&gt;(0,0,1)"),Player::player2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,0,0)-&gt;(0,0,1)"),Player::player2));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Board test stacking by setting");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; a = CreateAdvancedBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = CreateBasicBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(0,0,0)"), Coordinat("(0,1,0)"), Coordinat("(0,2,0)"), Coordinat("(0,3,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(0,3,1)"), Coordinat("(0,2,1)"), Coordinat("(0,1,1)"), Coordinat("(0,0,1)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(0,0,2)"), Coordinat("(0,1,2)"), Coordinat("(0,2,2)"), Coordinat("(0,3,2)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(0,3,3)"), Coordinat("(0,2,3)"), Coordinat("(0,1,3)"), Coordinat("(0,0,3)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(1,0,0)"), Coordinat("(1,1,0)"), Coordinat("(1,2,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(1,0,1)"), Coordinat("(1,1,1)"), Coordinat("(1,2,1)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(1,0,2)"), Coordinat("(1,1,2)"), Coordinat("(1,2,2)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(2,0,0)"), Coordinat("(2,1,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(2,0,1)"), Coordinat("(2,1,1)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat("(3,0,0)")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Player player = Player::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[a,b,&amp;player](const Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanSet(c,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanSet(c,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(c,player,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(c,player,must_remove); assert(!must_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toggle(player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetWinner() != Winner::none);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetWinner() != Winner::none);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;TRACE("Board test #2");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; a = CreateAdvancedBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = CreateBasicBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Move&gt; v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,0,0)"), Move("(0,0,1)"), Move("(0,1,1)"), Move("(0,1,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(1,0,0)"), Move("(0,0,2)"), Move("(0,1,2)"), Move("(0,2,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,2,2)"), Move("(0,3,0)")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Player player = Player::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[a,b,&amp;player](const Move&amp; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!a-&gt;CanDo(m,player)) TRACE(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDo(m,player)) TRACE(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo(m,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDo(m,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(m,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(m,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toggle(player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,2,1)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,2,1) !(0,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(1,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,2,1) !(0,1,1)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)"),Player::player1));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,2,1)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,2,1) !(0,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(1,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,2,1) !(0,1,1)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)"),Player::player1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)"),Player::player1));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;TRACE("Board test #3");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; a = CreateAdvancedBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = CreateBasicBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Move&gt; v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,0,0)"), Move("(0,1,0)"), Move("(0,0,1)"), Move("(0,1,1)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,0,2)"), Move("(0,1,2)")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Player player = Player::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[a,b,&amp;player](const Move&amp; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!a-&gt;CanDo(m,player)) TRACE(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDo(m,player)) TRACE(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo(m,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDo(m,player));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(m,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(m,player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toggle(player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,0,2)-&gt;(1,0,0)"),Player::player1)); //1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,0,1)-&gt;(1,0,1)"),Player::player1)); //2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,0,0)-&gt;(0,2,0)"),Player::player1)); //3<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,0,2)-&gt;(1,0,0)"),Player::player1)); //1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,0,1)-&gt;(1,0,1)"),Player::player1)); //2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,0,0)-&gt;(0,2,0)"),Player::player1)); //3<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;TRACE("Test ribi::Pylos::Board::GetAllPossibleMoves simple transfer");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; a = CreateAdvancedBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = CreateBasicBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player1).size() == 16);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player1).size() == 16);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player2).size() == 16);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player2).size() == 16);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,0)"),Player::player1); //1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player1).size() == 15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player1).size() == 15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player2).size() == 15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player2).size() == 15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,1)"),Player::player2); //2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,1)"),Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,1,1)"),Player::player1); //3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,1,1)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,1,0)"),Player::player2); //4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,1,0)"),Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;Count(PositionState::player1) == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;Count(PositionState::player1) == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;Count(PositionState::player2) == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;Count(PositionState::player2) == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player1).size() == 13); //13<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player1).size() == 13); //12 on bottom layer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player2).size() == 13); //1 on one-but-buttom layer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player2).size() == 13);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,2,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,2,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,2,1)"),Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,2,1)"),Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;Get(Coordinat(0,2,1)) == PositionState::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;Get(Coordinat(0,2,1)) == PositionState::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player1).size() == 14); //13<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player1).size() == 14); //10 on bottom layer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player2).size() == 14); //2 on one-but-buttom layer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player2).size() == 14); //2 transfers<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test ribi::Pylos::Board::GetAllPossibleMoves simple remove");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; a = CreateAdvancedBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; b = CreateBasicBoard();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,1)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,1)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,1,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,1,0)"),Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//After placing (0,1,1), there are one (4 ways) or two marbles (6 ways) to be removed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Next to this, there are 12 empty spots<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player1).size() == 22);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player1).size() == 22);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetAllPossibleMoves(Player::player2).size() == 13);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetAllPossibleMoves(Player::player2).size() == 13);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Filling up 5 basic Pylos boards randomly");<br/>
&nbsp;&nbsp;for (int i=0; i!=5; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::Pylos::Board::PlayRandomPylosGame(Pylos::Board::CreateBasicBoard());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Filling up 5 advanced Pylos boards randomly");<br/>
&nbsp;&nbsp;for (int i=0; i!=5; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::Pylos::Board::PlayRandomPylosGame(ribi::Pylos::Board::CreateAdvancedBoard());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Filling up 5 Pylos boards randomly");<br/>
&nbsp;&nbsp;for (int i=0; i!=5; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::Pylos::Board::PlayRandomPylosGame();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::Pylos::Board::ToStr() const<br/>
{<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; v = this-&gt;ToText();<br/>
&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),[&amp;s](const std::string&amp; t) { s += t; s += '\n'; } );<br/>
&nbsp;&nbsp;s.resize( s.size() - 1);<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Pylos::Board::ToText() const<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v(7,std::string(7,' '));<br/>
&nbsp;&nbsp;for (int layer = 0; layer!=4; ++layer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int y=0; y!=4-layer; ++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=4-layer; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int x_co = layer + (x * 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int y_co = layer + (y * 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c(layer,x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.GetX() == x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.GetY() == y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(c.GetLayer() == layer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char c_old = v[y_co][x_co];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char c_new = ToChar(Get(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Higher empty positions must not overwrite occupied lower ones<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c_new == ToChar(PositionState::empty)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; ( c_old == ToChar(PositionState::player1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| c_old == ToChar(PositionState::player2) ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[y_co][x_co] = c_new;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
void ribi::Pylos::Board::Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState&amp; must_remove)<br/>
{<br/>
&nbsp;&nbsp;const PositionState state = Get(from);<br/>
&nbsp;&nbsp;assert(state!=PositionState::empty);<br/>
&nbsp;&nbsp;const Player player = ToPlayer(state);<br/>
&nbsp;&nbsp;assert(CanTransfer(from,player));<br/>
&nbsp;&nbsp;assert(CanSet(to,player));<br/>
&nbsp;&nbsp;assert(CanTransfer(from,to,player));<br/>
&nbsp;&nbsp;Remove(from,player);<br/>
&nbsp;&nbsp;Set(to,player,must_remove);<br/>
}<br/>
<br/>
bool ribi::Pylos::operator==(const Board&amp; lhs, const Board&amp; rhs) noexcept<br/>
{<br/>
&nbsp;&nbsp;//Determine if types are equal<br/>
&nbsp;&nbsp;if (typeid(lhs)!=typeid(rhs)) return false;<br/>
<br/>
&nbsp;&nbsp;return lhs.m_board == rhs.m_board;<br/>
}<br/>
<br/>
bool ribi::Pylos::operator!=(const Board&amp; lhs, const Board&amp; rhs) noexcept<br/>
{<br/>
&nbsp;&nbsp;return !(lhs==rhs);<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Pylos::operator&lt;&lt;(std::ostream&amp; os,const Board&amp; p) noexcept<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; p.ToStr();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
<br/>
ribi::Pylos::BoardAdvanced::BoardAdvanced() noexcept<br/>
&nbsp;&nbsp;: Board()<br/>
{<br/>
<br/>
}<br/>
<br/>
boost::shared_ptr&lt;ribi::Pylos::Board&gt; ribi::Pylos::BoardAdvanced::Clone() const noexcept<br/>
{<br/>
&nbsp;&nbsp;BoardAdvanced * const p = new BoardAdvanced;<br/>
&nbsp;&nbsp;p-&gt;m_board = m_board;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; sp(p);<br/>
&nbsp;&nbsp;assert(*sp == *this);<br/>
&nbsp;&nbsp;return sp;<br/>
}<br/>
<br/>
void ribi::Pylos::BoardAdvanced::Set(<br/>
&nbsp;&nbsp;const Coordinat&amp; c,<br/>
&nbsp;&nbsp;const Player player,<br/>
&nbsp;&nbsp;MustRemoveState&amp; must_remove)<br/>
{<br/>
&nbsp;&nbsp;assert(CanSet(c,player));<br/>
<br/>
&nbsp;&nbsp;const PositionState state = ToPositionState(player);<br/>
&nbsp;&nbsp;m_board[c.GetLayer()][c.GetX()][c.GetY()] = state;<br/>
&nbsp;&nbsp;assert(Get(c)==state);<br/>
<br/>
&nbsp;&nbsp;must_remove = MustRemoveState::no;<br/>
<br/>
&nbsp;&nbsp;//Check for squares<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::vector&lt;Coordinat&gt; Square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Square&gt; v = GetSquares(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() &lt; 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bool do_return = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,&amp;do_return,state](const Square&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!do_return)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool success = true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(s.begin(),s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,&amp;success,state](const Coordinat&amp; d)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (success) { if (Get(d)!=state) { success = false; } }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (success) { do_return = true; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (do_return) { must_remove = ToMustRemoveState(player); return; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Check for lines<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::vector&lt;Coordinat&gt; Line;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Line&gt; v = GetLines(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///There will be zero (layer 2 and 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;///or two lines (layer 0 and 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 0 || v.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::find_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,state](const Line&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return std::find_if(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.begin(),s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,state](const Coordinat&amp; d)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Get(d)!=state;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) == s.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) != v.end()) { must_remove = ToMustRemoveState(player); return; }<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
ribi::Pylos::BoardBasic::BoardBasic() noexcept<br/>
&nbsp;&nbsp;: Board()<br/>
{<br/>
<br/>
}<br/>
<br/>
boost::shared_ptr&lt;ribi::Pylos::Board&gt; ribi::Pylos::BoardBasic::Clone() const noexcept<br/>
{<br/>
&nbsp;&nbsp;BoardBasic * const p = new BoardBasic;<br/>
&nbsp;&nbsp;p-&gt;m_board = m_board;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; sp(p);<br/>
&nbsp;&nbsp;assert(*sp == *this);<br/>
&nbsp;&nbsp;return sp;<br/>
}<br/>
<br/>
void ribi::Pylos::BoardBasic::Set(<br/>
&nbsp;&nbsp;const Coordinat&amp; c,<br/>
&nbsp;&nbsp;const Player player,<br/>
&nbsp;&nbsp;MustRemoveState&amp; must_remove)<br/>
{<br/>
&nbsp;&nbsp;assert(CanSet(c,player));<br/>
<br/>
&nbsp;&nbsp;const PositionState state = ToPositionState(player);<br/>
&nbsp;&nbsp;m_board[c.GetLayer()][c.GetX()][c.GetY()] = state;<br/>
&nbsp;&nbsp;assert(Get(c)==state);<br/>
<br/>
&nbsp;&nbsp;//Check for squares<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;typedef std::vector&lt;Coordinat&gt; Square;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Square&gt; v = GetSquares(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (std::find_if(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,state](const Square&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return std::find_if(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.begin(),s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[this,state](const Coordinat&amp; d)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Get(d) != state;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) == s.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) != v.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;must_remove = ToMustRemoveState(player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;return;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosboard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosboard.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Board, class for a Pylos/Phyraos board<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSBOARD_H<br/>
#define PYLOSBOARD_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
#include "pylosfwd.h"<br/>
#include "pylosmove.h"<br/>
#include "pyloswinner.h"<br/>
#include "pylosplayer.h"<br/>
#include "pylospositionstate.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
namespace Pylos {<br/>
<br/>
struct Board<br/>
{<br/>
&nbsp;&nbsp;typedef std::vector&lt;std::vector&lt;PositionState&gt; &gt; Layer;<br/>
<br/>
&nbsp;&nbsp;Board() noexcept;<br/>
&nbsp;&nbsp;virtual ~Board() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///CanDo determines if a Pylos notation move is valid<br/>
&nbsp;&nbsp;bool CanDo(const std::string&amp; s, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///CanDo determines if a Pylos move is valid<br/>
&nbsp;&nbsp;bool CanDo(const Move&amp; m, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///CanDoSomething specifies if there is a possible move to do for a player<br/>
&nbsp;&nbsp;bool CanDoSomething(const Player&amp; player) const;<br/>
<br/>
&nbsp;&nbsp;///CanRemove specifies if one or<br/>
&nbsp;&nbsp;///two marble(s) can be removed at the requested position(s).<br/>
&nbsp;&nbsp;bool CanRemove(const std::vector&lt;Coordinat&gt;&amp; v, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///CanMove specifies the marble at the specified coordinat can be tranferred<br/>
&nbsp;&nbsp;bool CanTransfer(const Coordinat&amp; c, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///CanMove specifies if the marble can be tranferred to the new (higher) position<br/>
&nbsp;&nbsp;bool CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; to, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///CanSet specifies if a marble can be placed at the coordinat.<br/>
&nbsp;&nbsp;///It is chosen to let the client specify a player, to<br/>
&nbsp;&nbsp;///emphasise that a player's marble is placed, instead<br/>
&nbsp;&nbsp;///of a PositionState::empty<br/>
&nbsp;&nbsp;bool CanSet(const Coordinat&amp; c, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///Clone a derived class of Board.<br/>
&nbsp;&nbsp;virtual boost::shared_ptr&lt;Board&gt; Clone() const = 0;<br/>
<br/>
&nbsp;&nbsp;///Count counts the requested state at the specified coordinats<br/>
&nbsp;&nbsp;int Count(const std::vector&lt;Coordinat&gt;&amp; coordinats, const PositionState state) const;<br/>
<br/>
&nbsp;&nbsp;///Count counts the requested state.<br/>
&nbsp;&nbsp;///Valid states are empty, player1 and player2<br/>
&nbsp;&nbsp;int Count(const PositionState state) const;<br/>
<br/>
&nbsp;&nbsp;///Create a BoardAdvanced<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Board&gt; CreateAdvancedBoard() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Create a BoardBasic<br/>
&nbsp;&nbsp;static const boost::shared_ptr&lt;Board&gt; CreateBasicBoard() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Do performs a move in Pylos notation<br/>
&nbsp;&nbsp;void Do(const std::string&amp; s, const Player player);<br/>
<br/>
&nbsp;&nbsp;///Do performs a Pylos move<br/>
&nbsp;&nbsp;void Do(const Move&amp; m, const Player player);<br/>
<br/>
&nbsp;&nbsp;///Get returns the state of the requested location<br/>
&nbsp;&nbsp;PositionState Get(const Coordinat&amp; c) const noexcept;<br/>
<br/>
&nbsp;&nbsp;///GetAllPossibleMoves returns all moves valid for the selected player<br/>
&nbsp;&nbsp;const std::vector&lt;Move&gt; GetAllPossibleMoves(const Player&amp; player) const noexcept;<br/>
<br/>
&nbsp;&nbsp;///GetLayerSize returns how many marbles this is wide/height.<br/>
&nbsp;&nbsp;///For example; layer 0 has 4x4 marbles, so GetLayerSize<br/>
&nbsp;&nbsp;///will return 4.<br/>
&nbsp;&nbsp;int GetLayerSize(const int layer) const;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Return the possible winner<br/>
&nbsp;&nbsp;Winner GetWinner() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///PlayRandomPylosGame plays a random Pylos game and returns the winner.<br/>
&nbsp;&nbsp;static Winner PlayRandomPylosGame(const boost::shared_ptr&lt;Board&gt;&amp; board_original = boost::shared_ptr&lt;Board&gt;());<br/>
<br/>
&nbsp;&nbsp;///Remove removes one or two marbles.<br/>
&nbsp;&nbsp;void Remove(const std::vector&lt;Coordinat&gt;&amp; v, const Player player);<br/>
<br/>
&nbsp;&nbsp;///Restart sets the board in its initial position.<br/>
&nbsp;&nbsp;void Restart();<br/>
<br/>
&nbsp;&nbsp;///Set sets the state of the given location.<br/>
&nbsp;&nbsp;///must_remove is set to the MustRemoveState who must remove one or two marbles.<br/>
&nbsp;&nbsp;virtual void Set(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player player,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState&amp; must_remove) = 0;<br/>
<br/>
<br/>
&nbsp;&nbsp;///Display the board as a std::string<br/>
&nbsp;&nbsp;const std::string ToStr() const;<br/>
<br/>
&nbsp;&nbsp;///Display the board as a 2D std::string<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; ToText() const;<br/>
<br/>
&nbsp;&nbsp;///Transfer lets current player transfer his marble to a new, higher position<br/>
&nbsp;&nbsp;void Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState&amp; must_remove);<br/>
<br/>
<br/>
&nbsp;&nbsp;protected:<br/>
&nbsp;&nbsp;///m_board holds the board structure.\n<br/>
&nbsp;&nbsp;///m_board[0]: bottom 4x4 layer\n<br/>
&nbsp;&nbsp;///m_board[1]: 3x3 layer\n<br/>
&nbsp;&nbsp;///m_board[2]: 2x2 layer\n<br/>
&nbsp;&nbsp;///m_board[3]: top 1x1 layer<br/>
&nbsp;&nbsp;std::vector&lt;Layer&gt; m_board;<br/>
<br/>
&nbsp;&nbsp;///CanRemove specifies if current player can remove<br/>
&nbsp;&nbsp;///the marble at the requested position.<br/>
&nbsp;&nbsp;bool CanRemove(const Coordinat&amp; c, const Player player) const;<br/>
<br/>
&nbsp;&nbsp;///RemoveMarble removes one marble.<br/>
&nbsp;&nbsp;void Remove(const Coordinat&amp; c, const Player player);<br/>
<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;///CreateEmptyBoard created an empty board.<br/>
&nbsp;&nbsp;const std::vector&lt;Layer&gt; CreateEmptyBoard() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///CreateLayer creates an empty layer.<br/>
&nbsp;&nbsp;const Layer CreateLayer(const int sz) const;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Friends<br/>
&nbsp;&nbsp;//friend void boost::checked_delete&lt;&gt;(Board* x);<br/>
&nbsp;&nbsp;friend bool operator==(const Board&amp; lhs, const Board&amp; rhs) noexcept;<br/>
};<br/>
<br/>
///A BoardAdvanced lets a player remove one or two marbles when<br/>
///- a player creates a 2x2 square of marbles of his/her color<br/>
///- a player creates a 1x4 (bottom layer) or 1x3 (one-but-bottom layer)<br/>
///&nbsp;&nbsp;line of marbles of his/her color<br/>
struct BoardAdvanced : public Board<br/>
{<br/>
&nbsp;&nbsp;BoardAdvanced() noexcept;<br/>
&nbsp;&nbsp;~BoardAdvanced() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///Clone a derived class of Board.<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; Clone() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Load loads a game in Pylos notation<br/>
&nbsp;&nbsp;//void Load(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Save saves the current game in Pylos notation<br/>
&nbsp;&nbsp;//void Save(const std::string&amp; s) const;<br/>
<br/>
&nbsp;&nbsp;///ToStr converts Pylos its contents to a std::string<br/>
&nbsp;&nbsp;//const std::string ToStr() const;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;///Set sets the state of the given location.<br/>
&nbsp;&nbsp;///must_remove is set to true if the current player is allowed<br/>
&nbsp;&nbsp;///to remove one or two marbles.<br/>
&nbsp;&nbsp;void Set(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState&amp; must_remove);<br/>
<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(BoardAdvanced* x);<br/>
};<br/>
<br/>
///A BoardBasic lets a player remove one or two marbles when<br/>
///- a player creates a 2x2 square of marbles of his/her color<br/>
struct BoardBasic : public Board<br/>
{<br/>
&nbsp;&nbsp;BoardBasic() noexcept;<br/>
&nbsp;&nbsp;~BoardBasic() noexcept {}<br/>
<br/>
&nbsp;&nbsp;///Clone a derived class of Pylos.<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; Clone() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Load loads a game in Pylos notation<br/>
&nbsp;&nbsp;//void Load(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Save saves the current game in Pylos notation<br/>
&nbsp;&nbsp;//void Save(const std::string&amp; s) const;<br/>
<br/>
&nbsp;&nbsp;///ToStr converts Pylos its contents to a std::string<br/>
&nbsp;&nbsp;//const std::string ToStr() const;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
<br/>
&nbsp;&nbsp;///Set sets the state of the given location.<br/>
&nbsp;&nbsp;///must_remove is set to true if the current player is allowed<br/>
&nbsp;&nbsp;///to remove one or two marbles.<br/>
&nbsp;&nbsp;void Set(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MustRemoveState&amp; must_remove);<br/>
<br/>
&nbsp;&nbsp;friend void boost::checked_delete&lt;&gt;(BoardBasic* x);<br/>
};<br/>
<br/>
///A BoardBeginner lets a player remove one or two marbles when<br/>
///- never<br/>
<br/>
<br/>
bool operator==(const Board&amp; lhs, const Board&amp; rhs) noexcept;<br/>
bool operator!=(const Board&amp; lhs, const Board&amp; rhs) noexcept;<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os,const Board&amp; p) noexcept;<br/>
<br/>
} //~namespace Pylos<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSBOARD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pyloscoordinat.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pyloscoordinat.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Coordinat, Pylos/Phyraos coordinat class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include "pyloscoordinat.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include &lt;boost/lexical_cast.hpp&gt;<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
<br/>
#include "trace.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Pylos::Coordinat::Coordinat(<br/>
&nbsp;&nbsp;const int layer,<br/>
&nbsp;&nbsp;const int x,<br/>
&nbsp;&nbsp;const int y)<br/>
&nbsp;&nbsp;: m_layer(layer),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(y)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(IsValid(layer,x,y));<br/>
}<br/>
<br/>
ribi::Pylos::Coordinat::Coordinat(const std::string&amp; s)<br/>
&nbsp;&nbsp;: m_layer{boost::lexical_cast&lt;int&gt;(s.at(1))},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x{boost::lexical_cast&lt;int&gt;(s.at(3))},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y{boost::lexical_cast&lt;int&gt;(s.at(5))}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(s.size() == 7);<br/>
&nbsp;&nbsp;#ifndef DEBUG<br/>
&nbsp;&nbsp;if (!IsValid(m_layer,m_x,m_y)) { TRACE(s); }<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(IsValid(m_layer,m_x,m_y));<br/>
}<br/>
<br/>
bool ribi::Pylos::Coordinat::IsValid(const int layer, const int x, const int y) noexcept<br/>
{<br/>
&nbsp;&nbsp;return layer &gt;= 0 &amp;&amp; layer &lt; 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; x &gt;= 0 &amp;&amp; x &lt; 4-layer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; y &gt;= 0 &amp;&amp; y &lt; 4-layer;<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Coordinat&gt; ribi::Pylos::GetAllCoordinats() noexcept<br/>
{<br/>
&nbsp;&nbsp;std::vector&lt;Coordinat&gt; v;<br/>
&nbsp;&nbsp;for (int z=0; z!=4; ++z)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int y=0; y!=4-z; ++y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int x=0; x!=4-z; ++x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Coordinat(z,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(v.size() == 30);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::string ribi::Pylos::Coordinat::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Pylos::Coordinat::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-05-05: version 2.0: initial release version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
bool ribi::Pylos::Coordinat::IsValid() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return IsValid(m_layer,m_x,m_y);<br/>
}<br/>
<br/>
const std::string ribi::Pylos::Coordinat::ToStr() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return std::string("(")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(m_layer)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ std::string(",")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(m_x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ std::string(",")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ boost::lexical_cast&lt;std::string&gt;(m_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;+ std::string(")");<br/>
<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Coordinat&gt; ribi::Pylos::GetAbove(<br/>
&nbsp;&nbsp;const Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;const int layer = c.GetLayer() + 1;<br/>
&nbsp;&nbsp;const int x = c.GetX();<br/>
&nbsp;&nbsp;const int y = c.GetY();<br/>
&nbsp;&nbsp;//Just get all coordinats<br/>
&nbsp;&nbsp;std::vector&lt;Coordinat&gt; v;<br/>
&nbsp;&nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-0,y-0)) v.push_back(Coordinat(layer,x-0,y-0));<br/>
&nbsp;&nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-0,y-1)) v.push_back(Coordinat(layer,x-0,y-1));<br/>
&nbsp;&nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-1,y-0)) v.push_back(Coordinat(layer,x-1,y-0));<br/>
&nbsp;&nbsp;if (ribi::Pylos::Coordinat::IsValid(layer,x-1,y-1)) v.push_back(Coordinat(layer,x-1,y-1));<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Coordinat&gt; ribi::Pylos::GetBelow(<br/>
&nbsp;&nbsp;const Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;assert(c.IsValid());<br/>
&nbsp;&nbsp;assert(c.GetLayer()!=0);<br/>
&nbsp;&nbsp;const int layer = c.GetLayer() - 1;<br/>
&nbsp;&nbsp;const int x = c.GetX();<br/>
&nbsp;&nbsp;const int y = c.GetY();<br/>
&nbsp;&nbsp;std::vector&lt;Coordinat&gt; v;<br/>
&nbsp;&nbsp;v.push_back(Coordinat(layer,x+0,y+0));<br/>
&nbsp;&nbsp;v.push_back(Coordinat(layer,x+1,y+0));<br/>
&nbsp;&nbsp;v.push_back(Coordinat(layer,x+0,y+1));<br/>
&nbsp;&nbsp;v.push_back(Coordinat(layer,x+1,y+1));<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const std::vector&lt;std::vector&lt;ribi::Pylos::Coordinat&gt; &gt; ribi::Pylos::GetLines(<br/>
&nbsp;&nbsp;const Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;typedef std::vector&lt;Coordinat&gt; Line;<br/>
&nbsp;&nbsp;std::vector&lt;Line&gt; v;<br/>
&nbsp;&nbsp;const int layer = c.GetLayer();<br/>
&nbsp;&nbsp;if (layer == 2 || layer == 3) return v;<br/>
&nbsp;&nbsp;const int x = c.GetX();<br/>
&nbsp;&nbsp;const int y = c.GetY();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Line horizontal;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Line vertical;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i!=4-layer; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horizontal.push_back(Coordinat(layer,i,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical.push_back(Coordinat(layer,x,i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(boost::numeric_cast&lt;int&gt;(horizontal.size()) == 4-layer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(boost::numeric_cast&lt;int&gt;(vertical.size()) == 4-layer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(horizontal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(vertical);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(v.size() == 2);<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
const ribi::Pylos::Coordinat ribi::Pylos::GetRandomCoordinat() noexcept<br/>
{<br/>
&nbsp;&nbsp;const int layer = ( std::rand() &gt;&gt; 4) % 4;<br/>
&nbsp;&nbsp;const int x = ( std::rand() &gt;&gt; 4) % (4 - layer);<br/>
&nbsp;&nbsp;const int y = ( std::rand() &gt;&gt; 4) % (4 - layer);<br/>
&nbsp;&nbsp;assert(ribi::Pylos::Coordinat::IsValid(layer,x,y));<br/>
&nbsp;&nbsp;return Coordinat(layer,x,y);<br/>
}<br/>
<br/>
const std::vector&lt;std::vector&lt;ribi::Pylos::Coordinat&gt; &gt; ribi::Pylos::GetSquares(<br/>
&nbsp;&nbsp;const Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;typedef std::vector&lt;Coordinat&gt; Square;<br/>
&nbsp;&nbsp;std::vector&lt;Square&gt; v;<br/>
&nbsp;&nbsp;const int layer = c.GetLayer();<br/>
&nbsp;&nbsp;assert(layer &gt;= 0);<br/>
&nbsp;&nbsp;assert(layer &lt; 4);<br/>
&nbsp;&nbsp;const int x = c.GetX();<br/>
&nbsp;&nbsp;const int y = c.GetY();<br/>
&nbsp;&nbsp;const int sz = 4 - layer;<br/>
<br/>
<br/>
&nbsp;&nbsp;if (x &gt; 0 &amp;&amp; y &gt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-0,y-0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-0,y-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-1,y-0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-1,y-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (x + 1 &lt; sz &amp;&amp; y &gt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+0,y-0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+0,y-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+1,y-0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+1,y-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (x &gt; 0 &amp;&amp; y + 1 &lt; sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-0,y+0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-0,y+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-1,y+0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x-1,y+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (x + 1 &lt; sz &amp;&amp; y + 1 &lt; sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+0,y+0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+0,y+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+1,y+0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.push_back(Coordinat(layer,x+1,y+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Pylos::Coordinat::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;tested = true;<br/>
<br/>
&nbsp;&nbsp;//Test PylosCoordinat operators<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c1(0,2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c2(0,2,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c3(0,3,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c1_too(0,2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(c1 != c2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(c1 != c3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(c1 == c1_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(c2 != c3);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Coordinat GetBelow function on (1,0,1)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetBelow(Coordinat(1,0,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Coordinat GetBelow function on (1,0,2)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetBelow(Coordinat(1,0,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,0,3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(0,1,3))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Coordinat GetAbove function on (0,0,0)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetAbove(Coordinat(0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,0,0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Coordinat GetAbove function on (0,1,2)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetAbove(Coordinat(0,1,2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,0,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,0,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,1,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(1,1,2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Coordinat GetAbove function on (1,2,1)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetAbove(Coordinat(1,2,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(2,1,0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(2,1,1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Coordinat GetAbove function on (2,0,0)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= GetAbove(Coordinat(2,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(v.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(std::find(v.begin(),v.end(),Coordinat(3,0,0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!= v.end());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
#endif<br/>
<br/>
bool ribi::Pylos::operator==(const Coordinat&amp; lhs, const Coordinat&amp; rhs) noexcept<br/>
{<br/>
&nbsp;&nbsp;return lhs.GetLayer() == rhs.GetLayer()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetX() == rhs.GetX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetY() == rhs.GetY();<br/>
}<br/>
<br/>
bool ribi::Pylos::operator!=(const Coordinat&amp; lhs, const Coordinat&amp; rhs) noexcept<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Pylos::operator&lt;&lt;(std::ostream&amp; os,const Coordinat&amp; c) noexcept<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; c.ToStr();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pyloscoordinat.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pyloscoordinat.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Coordinat, Pylos/Phyraos coordinat class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSCOORDINAT_H<br/>
#define PYLOSCOORDINAT_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
struct Coordinat<br/>
{<br/>
&nbsp;&nbsp;Coordinat(const int layer, const int x, const int y);<br/>
<br/>
&nbsp;&nbsp;///Construct a Coordinat from a std::string.<br/>
&nbsp;&nbsp;///For example, (0,1,2) is the coordinat Z=0=bottom,X=1=leftmost-but-one,Y=2=frontmost-but-two<br/>
&nbsp;&nbsp;Coordinat(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain the layer or Z-coordinat<br/>
&nbsp;&nbsp;///0: bottom 4x4 layer, 3: top 1x1 layer<br/>
&nbsp;&nbsp;int GetLayer() const noexcept { return m_layer; }<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this coordinat its X coordinat<br/>
&nbsp;&nbsp;///0: Left<br/>
&nbsp;&nbsp;int GetX() const noexcept { return m_x; }<br/>
<br/>
&nbsp;&nbsp;///Obtain this coordinat its Y coordinat<br/>
&nbsp;&nbsp;///0: Top<br/>
&nbsp;&nbsp;int GetY() const noexcept { return m_y; }<br/>
<br/>
&nbsp;&nbsp;///IsValid returns if the proposed coordinat is a valid Pylos coordinat<br/>
&nbsp;&nbsp;static bool IsValid(const int layer, const int x, const int y) noexcept;<br/>
<br/>
&nbsp;&nbsp;///IsValid returns if this coordinat is a valid Pylos coordinat<br/>
&nbsp;&nbsp;bool IsValid() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///ToStr() converts the coordinat to a std::string<br/>
&nbsp;&nbsp;///of the form '(layer,x,y)'.<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;int m_layer;<br/>
&nbsp;&nbsp;int m_x;<br/>
&nbsp;&nbsp;int m_y;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
};<br/>
<br/>
bool operator==(const Coordinat&amp; lhs, const Coordinat&amp; rhs) noexcept;<br/>
bool operator!=(const Coordinat&amp; lhs, const Coordinat&amp; rhs) noexcept;<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os,const Coordinat&amp; c) noexcept;<br/>
<br/>
///GetAbove returns the coordinats physically<br/>
///above the entered coordinat<br/>
const std::vector&lt;Coordinat&gt; GetAbove(<br/>
&nbsp;&nbsp;const Coordinat&amp; c);<br/>
<br/>
///GetAllPylosCoordinats returns all possible PylosCoordinats<br/>
const std::vector&lt;Coordinat&gt; GetAllCoordinats() noexcept;<br/>
<br/>
///GetBelow returns the four coordinats physically<br/>
///below the entered coordinat<br/>
const std::vector&lt;Coordinat&gt; GetBelow(<br/>
&nbsp;&nbsp;const Coordinat&amp; c);<br/>
<br/>
///GetLines returns the possible 2x2 squares around the coordinat<br/>
const std::vector&lt;std::vector&lt;Coordinat&gt; &gt; GetLines(<br/>
&nbsp;&nbsp;const Coordinat&amp; c);<br/>
<br/>
///GetRandomPylosCoordinat returns a random valid PylosCoordinat<br/>
const Coordinat GetRandomCoordinat() noexcept;<br/>
<br/>
///GetSquares returns the possible 2x2 squares around the coordinat<br/>
const std::vector&lt;std::vector&lt;Coordinat&gt; &gt; GetSquares(<br/>
&nbsp;&nbsp;const Coordinat&amp; c);<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSCOORDINAT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pyloscurrentmovestate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pyloscurrentmovestate.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::CurrentMoveState, Pylos/Phyraos current move state class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "pyloscurrentmovestate.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
<br/>
#include "trace.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Pylos::CurrentMoveState::CurrentMoveState() noexcept<br/>
&nbsp;&nbsp;: m_current_move{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_must_remove(MustRemoveState::no)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;assert(IsMoveUnknown());<br/>
&nbsp;&nbsp;//assert(IsRemoveUnknown());<br/>
}<br/>
<br/>
const std::string ribi::Pylos::CurrentMoveState::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Pylos::CurrentMoveState::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-05-05: version 2.0: initial release version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
bool ribi::Pylos::CurrentMoveState::IsMoveMove() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_current_move.m_move.size() &lt; 3);<br/>
&nbsp;&nbsp;return m_current_move.m_move.size() == 2;<br/>
}<br/>
<br/>
bool ribi::Pylos::CurrentMoveState::IsMovePlace() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_current_move.m_move.size() &lt; 3);<br/>
&nbsp;&nbsp;return m_current_move.m_move.size() == 1;<br/>
}<br/>
<br/>
bool ribi::Pylos::CurrentMoveState::IsMoveUnknown() const<br/>
{<br/>
&nbsp;&nbsp;assert(m_current_move.m_move.size() &lt; 3);<br/>
&nbsp;&nbsp;return m_current_move.m_move.size() == 0;<br/>
}<br/>
<br/>
ribi::Pylos::MustRemoveState ribi::Pylos::CurrentMoveState::GetMustRemove() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_must_remove;<br/>
}<br/>
<br/>
void ribi::Pylos::CurrentMoveState::Restart() noexcept<br/>
{<br/>
&nbsp;&nbsp;m_must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;m_current_move = Move();<br/>
&nbsp;&nbsp;assert(IsMoveUnknown());<br/>
}<br/>
<br/>
void ribi::Pylos::CurrentMoveState::SetMove(const Move&amp; move)<br/>
{<br/>
&nbsp;&nbsp;assert(m_current_move.m_move.empty());<br/>
&nbsp;&nbsp;assert(m_current_move.m_remove.empty());<br/>
&nbsp;&nbsp;m_current_move = move;<br/>
&nbsp;&nbsp;m_must_remove = MustRemoveState::no;<br/>
}<br/>
<br/>
void ribi::Pylos::CurrentMoveState::SetMoveTransfer(const Coordinat&amp; from, const Coordinat&amp; to)<br/>
{<br/>
&nbsp;&nbsp;assert(IsMoveUnknown());<br/>
&nbsp;&nbsp;assert(m_current_move.m_move.empty());<br/>
&nbsp;&nbsp;m_current_move.m_move.push_back(from);<br/>
&nbsp;&nbsp;m_current_move.m_move.push_back(to);<br/>
}<br/>
<br/>
void ribi::Pylos::CurrentMoveState::SetMoveSet(const Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;assert(IsMoveUnknown());<br/>
&nbsp;&nbsp;assert(m_current_move.m_move.empty());<br/>
&nbsp;&nbsp;m_current_move.m_move.push_back(c);<br/>
}<br/>
<br/>
void ribi::Pylos::CurrentMoveState::SetMustRemove(const MustRemoveState must_remove)<br/>
{<br/>
&nbsp;&nbsp;assert(!(must_remove == MustRemoveState::player2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;&nbsp; m_must_remove == MustRemoveState::player1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Cannot set duty to remove from player 1 to player 2");<br/>
&nbsp;&nbsp;assert(!(must_remove == MustRemoveState::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;&nbsp; m_must_remove == MustRemoveState::player2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "Cannot set duty to remove from player 2 to player 1");<br/>
&nbsp;&nbsp;m_must_remove = must_remove;<br/>
}<br/>
<br/>
void ribi::Pylos::CurrentMoveState::SetRemove(const std::vector&lt;Coordinat&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;assert(m_must_remove != MustRemoveState::no);<br/>
&nbsp;&nbsp;m_current_move.m_remove = v;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Pylos::CurrentMoveState::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;tested = true;<br/>
<br/>
&nbsp;&nbsp;TRACE("Test PylosCurrentMoveState");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c(0,1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Pylos::CurrentMoveState s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(s.IsMoveUnknown());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!s.GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.SetMoveSet(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!s.IsMoveUnknown());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Pylos::Move m = s.GetMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m.m_move.size() == 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m.m_move[0] == c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m.m_remove.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.Restart();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Pylos::CurrentMoveState t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(s == t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
#endif<br/>
<br/>
bool ribi::Pylos::operator==(const CurrentMoveState&amp; lhs, const CurrentMoveState&amp; rhs) noexcept<br/>
{<br/>
&nbsp;&nbsp;return lhs.GetMustRemove() == rhs.GetMustRemove()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.GetMove() == rhs.GetMove();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pyloscurrentmovestate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pyloscurrentmovestate.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::CurrentMoveState, Pylos/Phyraos current move state class<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSCURRENTMOVESTATE_H<br/>
#define PYLOSCURRENTMOVESTATE_H<br/>
<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#include "pyloscoordinat.h"<br/>
#include "pylosmove.h"<br/>
#include "pylosmustremovestate.h"<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
///CurrentMoveState contains the state of the current Move.<br/>
///CurrentMoveState is used by Pylos::Game, to incrementally keep track of the<br/>
///ongoing move<br/>
struct CurrentMoveState<br/>
{<br/>
&nbsp;&nbsp;CurrentMoveState() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain the current Move in process<br/>
&nbsp;&nbsp;const Move&amp; GetMove() const noexcept { return m_current_move; }<br/>
<br/>
&nbsp;&nbsp;///Obtain if the first part of the move has taken place and<br/>
&nbsp;&nbsp;///if the current player must remove one or two marbles<br/>
&nbsp;&nbsp;MustRemoveState GetMustRemove() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
<br/>
&nbsp;&nbsp;///Is it unknown what kind of Move this is?<br/>
&nbsp;&nbsp;bool IsMoveUnknown() const;<br/>
&nbsp;&nbsp;bool IsMoveMove() const;<br/>
&nbsp;&nbsp;bool IsMovePlace() const;<br/>
<br/>
&nbsp;&nbsp;void Restart() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Set a complete Move directly<br/>
&nbsp;&nbsp;void SetMove(const Move&amp; move);<br/>
<br/>
&nbsp;&nbsp;///Set the transfer part of a move,enabling<br/>
&nbsp;&nbsp;void SetMoveTransfer(const Coordinat&amp; from, const Coordinat&amp; to);<br/>
<br/>
&nbsp;&nbsp;void SetMoveSet(const Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;///Set the duty of one or none of the players<br/>
&nbsp;&nbsp;void SetMustRemove(const MustRemoveState must_remove);<br/>
&nbsp;&nbsp;void SetRemove(const std::vector&lt;Coordinat&gt;&amp; v);<br/>
<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;Move m_current_move;<br/>
&nbsp;&nbsp;MustRemoveState m_must_remove;<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
};<br/>
<br/>
bool operator==(const CurrentMoveState&amp; lhs, const CurrentMoveState&amp; rhs) noexcept;<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSCURRENTMOVESTATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosfwd.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
pylosfwd.h, forward declarations of Pylos/Phyraos classes<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSFWD_H<br/>
#define PYLOSFWD_H<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
enum class Player;<br/>
enum class PositionState;<br/>
enum class MustRemoveState;<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosgame.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosgame.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Game, class for a game of Pylos/Phyraos<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
<br/>
#include "pylosgame.h"<br/>
<br/>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "pylosboard.h"<br/>
#include "pyloscurrentmovestate.h"<br/>
#include "pylosmove.h"<br/>
#include "trace.h"<br/>
<br/>
#pragma GCC diagnostic pop<br/>
<br/>
ribi::Pylos::Game::Game(const Game&amp; rhs)<br/>
&nbsp;&nbsp;: m_board(rhs.m_board-&gt;Clone()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_move(new CurrentMoveState(*rhs.m_current_move)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_player(rhs.m_current_player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_move_history(rhs.m_move_history)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(m_board != rhs.m_board);<br/>
&nbsp;&nbsp;assert(m_current_move != rhs.m_current_move);<br/>
}<br/>
<br/>
ribi::Pylos::Game::Game(const boost::shared_ptr&lt;Board&gt; &amp;board)<br/>
&nbsp;&nbsp;: m_board(board),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_move(new CurrentMoveState),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_player(Player::player1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_move_history{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(m_board);<br/>
}<br/>
<br/>
bool ribi::Pylos::Game::CanDo(const Pylos::Move&amp; m) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanDo(m,m_current_player);<br/>
}<br/>
<br/>
bool ribi::Pylos::Game::CanDo(const std::string&amp; s) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanDo(s,m_current_player);<br/>
}<br/>
<br/>
bool ribi::Pylos::Game::CanRemove(const Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;if (m_board-&gt;Get(c) != m_current_player) return false;<br/>
<br/>
&nbsp;&nbsp;return m_board-&gt;CanRemove( std::vector&lt;Coordinat&gt;(1,c), m_current_player);<br/>
}<br/>
<br/>
bool ribi::Pylos::Game::CanRemove(const std::vector&lt;Coordinat&gt;&amp; v) const<br/>
{<br/>
&nbsp;&nbsp;assert(!v.empty());<br/>
&nbsp;&nbsp;if (std::count_if(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return m_board-&gt;Get(c) != m_current_player;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;) &gt; 0) return false;<br/>
<br/>
&nbsp;&nbsp;return m_board-&gt;CanRemove(v, m_current_player);<br/>
}<br/>
<br/>
bool ribi::Pylos::Game::CanSet(const Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;CanSet(c,m_current_player);<br/>
}<br/>
<br/>
bool ribi::Pylos::Game::CanTransfer(const Coordinat&amp; c) const<br/>
{<br/>
&nbsp;&nbsp;if (m_board-&gt;Get(c) != GetCurrentTurn()) return false;<br/>
<br/>
&nbsp;&nbsp;return m_board-&gt;CanTransfer(c,m_current_player);<br/>
}<br/>
<br/>
bool ribi::Pylos::Game::CanTransfer(const Coordinat&amp; from,<br/>
&nbsp;&nbsp;const Coordinat&amp; to) const<br/>
{<br/>
&nbsp;&nbsp;if (m_board-&gt;Get(from) != GetCurrentTurn()) return false;<br/>
<br/>
&nbsp;&nbsp;return m_board-&gt;CanTransfer(from,to,m_current_player);<br/>
}<br/>
<br/>
void ribi::Pylos::Game::Do(const std::string&amp; s)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!CanDo(s)) TRACE(s);<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(CanDo(s));<br/>
&nbsp;&nbsp;Do(Pylos::Move(s));<br/>
}<br/>
<br/>
void ribi::Pylos::Game::Do(const Pylos::Move&amp; m)<br/>
{<br/>
&nbsp;&nbsp;assert(CanDo(m));<br/>
&nbsp;&nbsp;m_board-&gt;Do(m,m_current_player);<br/>
&nbsp;&nbsp;m_current_move-&gt;SetMove(m);<br/>
&nbsp;&nbsp;TogglePlayer();<br/>
}<br/>
<br/>
boost::shared_ptr&lt;ribi::Pylos::Game&gt; ribi::Pylos::Game::CreateAdvancedGame()<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; board(Board::CreateAdvancedBoard());<br/>
&nbsp;&nbsp;return boost::shared_ptr&lt;Game&gt;(new Game(board));<br/>
}<br/>
<br/>
boost::shared_ptr&lt;ribi::Pylos::Game&gt; ribi::Pylos::Game::CreateBasicGame()<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; board(Board::CreateBasicBoard());<br/>
&nbsp;&nbsp;return boost::shared_ptr&lt;Game&gt;(new Game(board));<br/>
}<br/>
<br/>
const std::vector&lt;ribi::Pylos::Move&gt; ribi::Pylos::Game::GetAllPossibleMoves() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetAllPossibleMoves(m_current_player);<br/>
}<br/>
<br/>
ribi::Pylos::Player ribi::Pylos::Game::GetCurrentTurn() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_current_player;<br/>
}<br/>
<br/>
const std::string ribi::Pylos::Game::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Pylos::Game::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-09-19: version 0.1: initial version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-09-21: version 0.2: use of Coordinat",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-09-21: version 0.3: added Move",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-09-22: version 1.0: fixed bug in Coordinat, added move history",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-05-05: version 2.0: major achitectural rewrite"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
ribi::Pylos::Winner ribi::Pylos::Game::GetWinner() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_board-&gt;GetWinner();<br/>
}<br/>
<br/>
ribi::Pylos::MustRemoveState ribi::Pylos::Game::GetMustRemove() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return m_current_move-&gt;GetMustRemove();<br/>
}<br/>
<br/>
ribi::Pylos::Winner ribi::Pylos::Game::PlayRandomGame(const boost::shared_ptr&lt;Board&gt;&amp; board)<br/>
{<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; p;<br/>
&nbsp;&nbsp;if (board)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.reset(new Game(board-&gt;Clone()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((std::rand() &gt;&gt; 4) % 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(new Game(Board::CreateAdvancedBoard()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(new Game(Board::CreateBasicBoard()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;while (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;GetWinner() != Winner::none)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p-&gt;GetWinner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Choose algorithm to draw next move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if ((std::rand() &gt;&gt; 4) % 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Use random move from GetAllPossibleMoves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Move&gt; v = p-&gt;GetAllPossibleMoves();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int i = std::rand() % v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//TRACE(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Do(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Use random coordinats and random responses<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c = GetRandomCoordinat();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanTransfer(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;Pylos::Coordinat&gt; v = Pylos::GetAllCoordinats();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::random_shuffle(v.begin(),v.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t sz = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=sz; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanTransfer(c,v[i]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Transfer(c,v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (p-&gt;CanSet(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;Set(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (p-&gt;GetMustRemove() != MustRemoveState::no)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;Coordinat&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(GetRandomCoordinat());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((std::rand() &gt;&gt; 4) % 2) v.push_back(GetRandomCoordinat());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;CanRemove(v)) p-&gt;Remove(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
void ribi::Pylos::Game::Remove(const Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;assert(GetMustRemove() != MustRemoveState::no);<br/>
&nbsp;&nbsp;assert(m_board-&gt;Get(c)==m_current_player);<br/>
&nbsp;&nbsp;assert(m_board-&gt;CanRemove(std::vector&lt;Coordinat&gt;(1,c),m_current_player));<br/>
&nbsp;&nbsp;m_board-&gt;Remove(std::vector&lt;Coordinat&gt;(1,c),m_current_player);<br/>
&nbsp;&nbsp;///\warning: do not allow these lines: this method<br/>
&nbsp;&nbsp;///is an internal function used by<br/>
&nbsp;&nbsp;///void ribi::Pylos::Game::Remove(const std::vector&lt;Coordinat&gt;&amp; v).<br/>
&nbsp;&nbsp;//m_must_remove = false;<br/>
&nbsp;&nbsp;//TogglePlayer();<br/>
<br/>
}<br/>
<br/>
void ribi::Pylos::Game::Remove(const std::vector&lt;Coordinat&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;//Cannot call RemoveMarbles(c), because this<br/>
&nbsp;&nbsp;//also toggles the player<br/>
&nbsp;&nbsp;assert(GetMustRemove() != MustRemoveState::no);<br/>
&nbsp;&nbsp;assert(CanRemove(v));<br/>
&nbsp;&nbsp;assert(v.size() == 1 || v.size() == 2);<br/>
&nbsp;&nbsp;assert(m_board-&gt;Get(v[0]) == m_current_player);<br/>
&nbsp;&nbsp;assert(v.size() == 1 || m_board-&gt;Get(v[1]) == m_current_player);<br/>
&nbsp;&nbsp;assert(v.size() == 1 || v[0] != v[1]);<br/>
&nbsp;&nbsp;//Proper ordering: v[0] must be marble above<br/>
&nbsp;&nbsp;if (v.size() == 2 &amp;&amp; v[0].GetLayer() &lt; v[1].GetLayer())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;Coordinat&gt; w(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::swap(w[0],w[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Remove(w); //Call the same method with different order<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Assert proper ordering<br/>
&nbsp;&nbsp;assert(v.size() == 1 || v[0].GetLayer() &gt;= v[1].GetLayer());<br/>
&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[this](const Coordinat&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(m_board-&gt;Get(c)==m_current_player);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;Remove(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;///Three lines below must be executed exactly once per move<br/>
&nbsp;&nbsp;m_current_move-&gt;SetRemove(v);<br/>
&nbsp;&nbsp;m_current_move-&gt;SetMustRemove(MustRemoveState::no);<br/>
&nbsp;&nbsp;TogglePlayer();<br/>
}<br/>
<br/>
void ribi::Pylos::Game::Set(const Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!CanSet(c)) TRACE(c);<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;//Set is always done as the first part of a Move<br/>
&nbsp;&nbsp;assert(CanSet(c));<br/>
<br/>
&nbsp;&nbsp;MustRemoveState must_remove = GetMustRemove();<br/>
&nbsp;&nbsp;assert(!must_remove &amp;&amp; "Player must not remove a marble when placing a new one");<br/>
&nbsp;&nbsp;m_board-&gt;Set(c,m_current_player,must_remove);<br/>
&nbsp;&nbsp;if (must_remove != MustRemoveState::no) m_current_move-&gt;SetMustRemove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ToMustRemoveState(m_current_player));<br/>
<br/>
&nbsp;&nbsp;m_current_move-&gt;SetMoveSet(c);<br/>
<br/>
&nbsp;&nbsp;if (must_remove != MustRemoveState::no)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player player = ToPlayer(m_board-&gt;Get(c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_move-&gt;SetMustRemove(ToMustRemoveState(player));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//If player must not remove another marble,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//his/her turn is over<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TogglePlayer();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Pylos::Game::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;tested = true;<br/>
<br/>
&nbsp;&nbsp;TRACE("Test ribi::Pylos::Game::operator== for different game types");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,0,0)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test ribi::Pylos::Game::operator== for same game types");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do("(0,0,0)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do("(0,0,0)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test basic Game dynamics using Set and Remove");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1 22<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1 22<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// Only advanced game must detect player 1's line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// Both games must detect player 2's square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,3,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,3,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,2,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,2,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//BoardAdvanced responds to the creation of a line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,3)")); //Line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,3)")); //Line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1); //No toggle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2); //Toggle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;GetCurrentMove()-&gt;GetMustRemove() != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanRemove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,0,0)"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanRemove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,0,0)"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Remove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2); //Toggle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//BoardAdvanced and BoardBasic respond to the creation of a square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,3,1)")); //Square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,3,1)")); //Square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2); //No toggle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2); //No toggle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentMove()-&gt;GetMustRemove() != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentMove()-&gt;GetMustRemove() != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanRemove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanRemove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Remove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Remove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test ribi::Pylos::Game::Clone of GameBasic");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b(new Game(*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; c = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*b != *c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test ribi::Pylos::Game::Clone of GameAdvanced");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b(new Game(*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; c = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Clone of played GameBasic");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Game&gt; b(new Game(*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,1,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test Clone of played BoardAdvanced");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Game&gt; b(new Game(*a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a == *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,1,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Test basic Game dynamics using full moves");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1 22<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 1 22<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// Only advanced game must detect player 1's line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// Both games must detect player 2's square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(*a != *b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,3,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,3,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,2,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,2,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,2,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,2,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//BoardAdvanced responds to the creation of a line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo("(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDo("(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,0) !(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,1) !(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,2) !(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo("(0,0,3) !(0,0,3) !(0,0,3)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,3) !(0,0,0)")); //Line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,3)")); //Line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//BoardAdvanced and BoardBasic respond to the creation of a square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Set(Coordinat("(0,3,1)")); //Square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Set(Coordinat("(0,3,1)")); //Square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player2); //No toggle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player2); //No toggle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentMove()-&gt;GetMustRemove() != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentMove()-&gt;GetMustRemove() != MustRemoveState::no);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanRemove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanRemove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)"))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Remove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Remove(std::vector&lt;Coordinat&gt;(1,Coordinat("(0,3,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;GetCurrentMove()-&gt;GetMustRemove());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetCurrentTurn() == Player::player1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;TRACE("Test Game history");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 12..<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 34..<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 56..<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 7...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test that in basic play, no marbles must be removed. Test that in advanced play, marbles must be removed.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetMoveHistory().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoveHistory().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Move&gt; v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,0,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,1,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,0,1)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,1,1)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(1,0,0)")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::size_t j = v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for (std::size_t i = 0; i!=j; ++i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetMoveHistory().size() == i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoveHistory().size() == i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;GetMoveHistory()[i] == v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;GetMoveHistory()[i] == v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;TRACE("Game test #1");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 12..<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 34..<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 56..<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// 7...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test that in basic play, no marbles must be removed. Test that in advanced play, marbles must be removed.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,0)")); //1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,1,0)")); //2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,1,0)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,1)")); //3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,1,1)")); //4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,1,1)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,0,2)")); //5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,0,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(Move("(0,1,2)")); //6<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(Move("(0,1,2)"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,0,3)"))); //7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,0,3) !(0,0,3)"))); //7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,0,3)")));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Game test #2");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// ....<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// ....<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// ....<br/>
&nbsp;&nbsp;&nbsp;&nbsp;// ....<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Test that in basic play, no marbles must be removed. Test that in advanced play, marbles must be removed.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; a = CreateAdvancedGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boost::shared_ptr&lt;Game&gt; b = CreateBasicGame();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Move&gt; v =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,0,0)"), Move("(0,0,1)"), Move("(0,1,1)"), Move("(0,1,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(1,0,0)"), Move("(0,0,2)"), Move("(0,1,2)"), Move("(0,2,0)"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Move("(0,2,2)"), Move("(0,3,0)")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[a,b](const Move&amp; m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!a-&gt;CanDo(m)) TRACE(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!b-&gt;CanDo(m)) TRACE(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(a-&gt;CanDo(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(b-&gt;CanDo(m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a-&gt;Do(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;Do(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,2,1)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,2,1) !(0,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(1,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!a-&gt;CanDo(Move("(0,2,1) !(0,1,1)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( a-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)")));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,2,1)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,2,1) !(0,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(1,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(0,0,0) !(1,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!b-&gt;CanDo(Move("(0,2,1) !(0,1,1)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(0,1,1) !(1,0,0)")));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert( b-&gt;CanDo(Move("(0,2,1) !(1,0,0) !(0,1,1)")));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Playing 5 random basic Pylos games");<br/>
&nbsp;&nbsp;for (int i=0; i!=5; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::Pylos::Game::PlayRandomGame(Pylos::Board::CreateBasicBoard());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Playing 5 random advanced Pylos games");<br/>
&nbsp;&nbsp;for (int i=0; i!=5; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::Pylos::Game::PlayRandomGame(Pylos::Board::CreateAdvancedBoard());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;TRACE("Playing 5 random Pylos games");<br/>
&nbsp;&nbsp;for (int i=0; i!=5; ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ribi::Pylos::Game::PlayRandomGame();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
#endif<br/>
<br/>
void ribi::Pylos::Game::TogglePlayer()<br/>
{<br/>
&nbsp;&nbsp;assert(!m_current_move-&gt;GetMustRemove()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "First the current player must remove one or two marbles");<br/>
&nbsp;&nbsp;m_move_history.push_back(m_current_move-&gt;GetMove());<br/>
&nbsp;&nbsp;m_current_move.reset(new CurrentMoveState);<br/>
&nbsp;&nbsp;m_current_player = (m_current_player == Player::player1 ? Player::player2 : Player::player1);<br/>
}<br/>
<br/>
void ribi::Pylos::Game::Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; to)<br/>
{<br/>
&nbsp;&nbsp;assert(CanTransfer(from,to));<br/>
<br/>
&nbsp;&nbsp;m_board-&gt;Remove(std::vector&lt;Coordinat&gt;(1,from),m_current_player);<br/>
&nbsp;&nbsp;MustRemoveState must_remove = MustRemoveState::no;<br/>
&nbsp;&nbsp;m_board-&gt;Set(to,m_current_player,must_remove);<br/>
<br/>
&nbsp;&nbsp;m_current_move-&gt;SetMoveTransfer(from,to);<br/>
<br/>
&nbsp;&nbsp;if (must_remove != MustRemoveState::no)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player player = ToPlayer(m_board-&gt;Get(to));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_move-&gt;SetMustRemove(ToMustRemoveState(player));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//If player must not remove another marble,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//his/her turn is over<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TogglePlayer();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool ribi::Pylos::operator==(const Game&amp; lhs, const Game&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return *lhs.m_board&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;== *rhs.m_board<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;&nbsp; *lhs.m_current_move&nbsp;&nbsp; == *rhs.m_current_move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;&nbsp;&nbsp;&nbsp;lhs.m_current_player ==&nbsp;&nbsp;rhs.m_current_player<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;&nbsp;&nbsp;&nbsp;lhs.m_move_history&nbsp;&nbsp; ==&nbsp;&nbsp;rhs.m_move_history;<br/>
}<br/>
<br/>
bool ribi::Pylos::operator!=(const Game&amp; lhs, const Game&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;return !(lhs == rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosgame.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosgame.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Game, class for a game of Pylos/Phyraos<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSGAME_H<br/>
#define PYLOSGAME_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#include &lt;boost/shared_ptr.hpp&gt;<br/>
<br/>
#include "pylosboard.h"<br/>
#include "pyloscurrentmovestate.h"<br/>
#include "pylosfwd.h"<br/>
#include "pylosplayer.h"<br/>
#include "pylospositionstate.h"<br/>
#include "pyloswinner.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
///Pylos is a class for storing a Pylos game.<br/>
///Games can be player in:\n<br/>
///- Pylos notation: (Can)Do\n<br/>
///- using Coordinats: (Can)Place, (Can)Move, (Can)Remove\n<br/>
///Games can also be saved and loaded.<br/>
struct Game<br/>
{<br/>
&nbsp;&nbsp;///Copy constructor<br/>
&nbsp;&nbsp;Game(const Game&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;///Create an Pylos game in the starting position.<br/>
&nbsp;&nbsp;Game(const boost::shared_ptr&lt;Board&gt;&amp; board);<br/>
<br/>
&nbsp;&nbsp;///Create a mid-game Pylos.<br/>
&nbsp;&nbsp;Game(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt;&amp; board,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Player current_player,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Pylos::Move&gt;&amp; move_history,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const boost::shared_ptr&lt;CurrentMoveState&gt;&amp; current_move);<br/>
<br/>
&nbsp;&nbsp;///CanDo determines if a Pylos notation move is valid<br/>
&nbsp;&nbsp;bool CanDo(const std::string&amp; s) const;<br/>
<br/>
&nbsp;&nbsp;///CanDo determines if a Pylos move is valid<br/>
&nbsp;&nbsp;bool CanDo(const Pylos::Move&amp; m) const;<br/>
<br/>
&nbsp;&nbsp;///CanRemove specifies if current player can remove one or<br/>
&nbsp;&nbsp;///two marble(s) at the requested position(s).<br/>
&nbsp;&nbsp;bool CanRemove(const std::vector&lt;Coordinat&gt;&amp; v) const;<br/>
<br/>
&nbsp;&nbsp;///CanSet tests if the current player can be set at the Coordinat<br/>
&nbsp;&nbsp;bool CanSet(const Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer<br/>
&nbsp;&nbsp;///the marble at the specified coordinat for movement<br/>
&nbsp;&nbsp;bool CanTransfer(const Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///CanTransfer specifies if current player can transfer his marble<br/>
&nbsp;&nbsp;///to a new, higher position<br/>
&nbsp;&nbsp;bool CanTransfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; to) const;<br/>
<br/>
&nbsp;&nbsp;///Create an advanced game at its initial position<br/>
&nbsp;&nbsp;static boost::shared_ptr&lt;Game&gt; CreateAdvancedGame();<br/>
<br/>
&nbsp;&nbsp;///Create a basic game at its initial position<br/>
&nbsp;&nbsp;static boost::shared_ptr&lt;Game&gt; CreateBasicGame();<br/>
<br/>
&nbsp;&nbsp;///Do performs a move in Pylos notation<br/>
&nbsp;&nbsp;void Do(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Do performs a Pylos move<br/>
&nbsp;&nbsp;void Do(const Move&amp; m);<br/>
<br/>
&nbsp;&nbsp;///GetAllPossibleMoves returns all moves valid for the active player<br/>
&nbsp;&nbsp;const std::vector&lt;Move&gt; GetAllPossibleMoves() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///GetBoard returns the board.<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;Board&gt;&amp; GetBoard() const noexcept { return m_board; }<br/>
<br/>
&nbsp;&nbsp;///Obtain the current move's state<br/>
&nbsp;&nbsp;const boost::shared_ptr&lt;CurrentMoveState&gt; GetCurrentMove() const noexcept { return m_current_move; }<br/>
<br/>
&nbsp;&nbsp;///GetCurrentTurn returns whose turn it is now<br/>
&nbsp;&nbsp;Player GetCurrentTurn() const noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;Pylos::Move&gt;&amp; GetMoveHistory() const noexcept<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return m_move_history;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;///MustRemove returns whether the current player<br/>
&nbsp;&nbsp;///must remove one or two marbles<br/>
&nbsp;&nbsp;MustRemoveState GetMustRemove() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///GetWinner returns the winner.<br/>
&nbsp;&nbsp;Winner GetWinner() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///IsValid returns if the current Pylos game is valid<br/>
&nbsp;&nbsp;//bool IsValid() const; //?Not used?<br/>
<br/>
&nbsp;&nbsp;///Load loads a game in Pylos notation<br/>
&nbsp;&nbsp;//void Load(const std::string&amp; s) = 0;<br/>
<br/>
&nbsp;&nbsp;///PlayRandomPylosGame plays a random Pylos game and returns the winner.<br/>
&nbsp;&nbsp;static Winner PlayRandomGame(const boost::shared_ptr&lt;Board&gt;&amp; board = boost::shared_ptr&lt;Board&gt;());<br/>
<br/>
<br/>
&nbsp;&nbsp;///Remove lets the current player remove one or two marbles<br/>
&nbsp;&nbsp;void Remove(const std::vector&lt;Coordinat&gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;///Restart sets the game in its initial position.<br/>
&nbsp;&nbsp;void Restart();<br/>
<br/>
&nbsp;&nbsp;///Set makes m_current_players place his marble<br/>
&nbsp;&nbsp;///at the specified position. After Place,<br/>
&nbsp;&nbsp;///MustRemoveMarbles must be called to determine if<br/>
&nbsp;&nbsp;///the current player must remove some marbles<br/>
&nbsp;&nbsp;void Set(const Coordinat&amp; c);<br/>
<br/>
<br/>
&nbsp;&nbsp;///ToStr converts Game its contents to a std::string<br/>
&nbsp;&nbsp;//const std::string ToStr() const = 0;<br/>
<br/>
&nbsp;&nbsp;///Transfer lets current player tranfer his marble to a new, higher position<br/>
&nbsp;&nbsp;void Transfer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat&amp; to);<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;Game() = delete;<br/>
<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;Board&gt; m_board;<br/>
&nbsp;&nbsp;boost::shared_ptr&lt;CurrentMoveState&gt; m_current_move;<br/>
&nbsp;&nbsp;Player m_current_player;<br/>
&nbsp;&nbsp;std::vector&lt;Pylos::Move&gt; m_move_history;<br/>
<br/>
&nbsp;&nbsp;///CanRemove specifies if current player can remove<br/>
&nbsp;&nbsp;///the marble at the requested position.<br/>
&nbsp;&nbsp;bool CanRemove(const Coordinat&amp; c) const;<br/>
<br/>
&nbsp;&nbsp;///Remove lets the current player remove one marble.<br/>
&nbsp;&nbsp;void Remove(const Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test the Game class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;///TogglePlayer toggles between player1 and player2 and saves the current<br/>
&nbsp;&nbsp;///move to the move history<br/>
&nbsp;&nbsp;void TogglePlayer();<br/>
<br/>
&nbsp;&nbsp;friend bool operator==(const Game&amp; lhs, const Game&amp; rhs);<br/>
};<br/>
<br/>
bool operator==(const Game&amp; lhs, const Game&amp; rhs);<br/>
bool operator!=(const Game&amp; lhs, const Game&amp; rhs);<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os,const Game&amp; p);<br/>
<br/>
///CanLoadPylos determines if loading a Pylos game from file<br/>
///will be successfull<br/>
bool CanLoadPylos(const std::string&amp; filename);<br/>
<br/>
///LoadPylos loads a Pylos game from file<br/>
boost::shared_ptr&lt;Game&gt; LoadPylos(const std::string&amp; filename);<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSGAME_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosmove.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosmove.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Move, class for a Pylos/Phyraos move<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
<br/>
<br/>
#include "pylosmove.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
<br/>
#include "pyloscoordinat.h"<br/>
#include "trace.h"<br/>
<br/>
<br/>
ribi::Pylos::Move::Move()<br/>
&nbsp;&nbsp;: m_move{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_remove{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
}<br/>
<br/>
ribi::Pylos::Move::Move(<br/>
&nbsp;&nbsp;const std::vector&lt;Coordinat&gt;&amp; moving,<br/>
&nbsp;&nbsp;const std::vector&lt;Coordinat&gt;&amp; removing)<br/>
&nbsp;&nbsp;: m_move{moving},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_remove{removing}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;assert(!m_move.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "In every move a marble must be placed or transferred");<br/>
&nbsp;&nbsp;assert(m_move.size() &lt;= 2);<br/>
&nbsp;&nbsp;assert(m_remove.size() &lt;= 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "At most two marbles are removed in a move");<br/>
}<br/>
<br/>
ribi::Pylos::Move::Move(const std::string&amp; s)<br/>
&nbsp;&nbsp;: m_move{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_remove{}<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s.size() == 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| s.size() == 16<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| s.size() == 25<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| s.size() == 34)) TRACE(s);<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
&nbsp;&nbsp;//Read first coordinat<br/>
&nbsp;&nbsp;assert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s.size() == 7<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| s.size() == 16<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| s.size() == 25<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|| s.size() == 34);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c(s.substr(0,7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_move.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.size() == 7) return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test for transfer with/without removal '(Z,X,Y)-&gt;(Z,X,Y)'<br/>
&nbsp;&nbsp;if (s[7] == '-' &amp;&amp; s[8] == '&gt;')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c(s.substr(9,7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_move.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.size() == 16) return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test for place and single removal '(Z,X,Y) !(Z,X,Y)'<br/>
&nbsp;&nbsp;if (s[7] == ' ' &amp;&amp; s[8] == '!')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c(s.substr(9,7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_remove.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.size() == 16) return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test for transfer with single removal '(Z,X,Y)-&gt;(Z,X,Y) !(Z,X,Y)'<br/>
&nbsp;&nbsp;assert(s[16] == ' ' &amp;&amp; s[17] == '!');<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c(s.substr(18,7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_remove.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.size() == 25) return;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;//Test for transfer with double removal '(Z,X,Y)-&gt;(Z,X,Y) !(Z,X,Y) !(Z,X,Y)'<br/>
&nbsp;&nbsp;assert(s[25] == ' ' &amp;&amp; s[26] == '!');<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const Coordinat c(s.substr(27,7));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_remove.push_back(c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(s.size() == 34);<br/>
}<br/>
<br/>
const std::string ribi::Pylos::Move::GetVersion() noexcept<br/>
{<br/>
&nbsp;&nbsp;return "2.0";<br/>
}<br/>
<br/>
const std::vector&lt;std::string&gt; ribi::Pylos::Move::GetVersionHistory() noexcept<br/>
{<br/>
&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-05-05: version 2.0: initial release version"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
bool ribi::Pylos::Move::IsValid() const noexcept<br/>
{<br/>
&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_move.size() &gt;= 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_move.size() &lt;= 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; m_remove.size() &lt;= 2;<br/>
}<br/>
<br/>
#ifndef NDEBUG<br/>
void ribi::Pylos::Move::Test() noexcept<br/>
{<br/>
&nbsp;&nbsp;static bool tested = false;<br/>
&nbsp;&nbsp;if (tested) return;<br/>
&nbsp;&nbsp;tested = true;<br/>
<br/>
&nbsp;&nbsp;TRACE("Test Moves");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Pylos::Move m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!m.IsValid() &amp;&amp; "An empty move is invalid");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Pylos::Move n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m == n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.m_move.push_back(Coordinat(0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n.m_move.push_back(Coordinat(0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(m == n);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//Valid Moves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;std::string&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;=<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(0,0,0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(0,0,0) !(0,0,0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(0,0,0) !(0,0,0) !(0,0,0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(0,0,0)-&gt;(0,0,0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(0,0,0)-&gt;(0,0,0) !(0,0,0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"(0,0,0)-&gt;(0,0,0) !(0,0,0) !(0,0,0)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::for_each(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](const std::string&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Move m(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (std::exception&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRACE(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
#endif<br/>
<br/>
const std::string ribi::Pylos::Move::ToStr() const noexcept<br/>
{<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;if (!(m_move.size() == 1 || m_move.size() == 2)) TRACE(m_move.size());<br/>
<br/>
&nbsp;&nbsp;#endif<br/>
&nbsp;&nbsp;assert(m_move.size() == 1 || m_move.size() == 2);<br/>
<br/>
&nbsp;&nbsp;std::string s = m_move[0].ToStr();<br/>
&nbsp;&nbsp;if (m_move.size() == 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s+="-&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s+=m_move[1].ToStr();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;if (m_remove.empty()) return s;<br/>
&nbsp;&nbsp;assert(m_remove.size() == 1 || m_remove.size() == 2);<br/>
&nbsp;&nbsp;s+=" !";<br/>
&nbsp;&nbsp;s+=m_remove[0].ToStr();<br/>
&nbsp;&nbsp;if (m_remove.size() == 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s+=" !";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s+=m_remove[0].ToStr();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return s;<br/>
}<br/>
<br/>
bool ribi::Pylos::operator==(const Move&amp; lhs, const Move&amp; rhs) noexcept<br/>
{<br/>
&nbsp;&nbsp;return lhs.m_move == rhs.m_move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; lhs.m_remove == rhs.m_remove;<br/>
}<br/>
<br/>
std::ostream&amp; ribi::Pylos::operator&lt;&lt;(std::ostream&amp; os, const Move&amp; m) noexcept<br/>
{<br/>
&nbsp;&nbsp;os &lt;&lt; m.ToStr();<br/>
&nbsp;&nbsp;return os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosmove.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosmove.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Move, class for a Pylos/Phyraos move<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSMOVE_H<br/>
#define PYLOSMOVE_H<br/>
<br/>
#include &lt;iosfwd&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#include "pyloscoordinat.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
///PylosMove encapsulates a Pylos move.<br/>
///A Pylos move starts with either<br/>
/// - placing (Set) a new marble or<br/>
/// - moving (Transfer) an existing marble to a higher location<br/>
///Both a Set and a Transfer can results in that the player must<br/>
///remove either one or two marbles.<br/>
struct Move<br/>
{<br/>
&nbsp;&nbsp;Move();<br/>
<br/>
&nbsp;&nbsp;///Move is constructed from all the members it will hold<br/>
&nbsp;&nbsp;Move(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt;&amp; moving,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const std::vector&lt;Coordinat&gt;&amp; removing);<br/>
<br/>
&nbsp;&nbsp;///Move is constructed from Pylos notation<br/>
&nbsp;&nbsp;Move(const std::string&amp; s);<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version<br/>
&nbsp;&nbsp;static const std::string GetVersion() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Obtain this class its version history<br/>
&nbsp;&nbsp;static const std::vector&lt;std::string&gt; GetVersionHistory() noexcept;<br/>
<br/>
&nbsp;&nbsp;///Test if this Move is valid<br/>
&nbsp;&nbsp;bool IsValid() const noexcept;<br/>
<br/>
&nbsp;&nbsp;const std::string ToStr() const noexcept;<br/>
<br/>
&nbsp;&nbsp;///What m_move is, depends on its size:<br/>
&nbsp;&nbsp;///m_move.size() == 1: placement at m_move[0]<br/>
&nbsp;&nbsp;///m_move.size() == 2: move from m_move[0] to m_move[1]<br/>
&nbsp;&nbsp;std::vector&lt;Coordinat&gt; m_move;<br/>
&nbsp;&nbsp;std::vector&lt;Coordinat&gt; m_remove;<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;#ifndef NDEBUG<br/>
&nbsp;&nbsp;///Test this class<br/>
&nbsp;&nbsp;static void Test() noexcept;<br/>
&nbsp;&nbsp;#endif<br/>
<br/>
};<br/>
<br/>
bool operator==(const Move&amp; lhs, const Move&amp; rhs) noexcept;<br/>
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Move&amp; m) noexcept;<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSMOVE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosmustremovestate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosmustremovestate.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::MustRemoveState, Pylos enum class for the state of a removal<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
<br/>
<br/>
#include "pylosmustremovestate.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include "pylosplayer.h"<br/>
<br/>
<br/>
<br/>
ribi::Pylos::MustRemoveState ribi::Pylos::ToMustRemoveState(const Player&amp; player)<br/>
{<br/>
&nbsp;&nbsp;switch (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::player1: return MustRemoveState::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::player2: return MustRemoveState::player2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Unknown value for Player");<br/>
&nbsp;&nbsp;throw std::logic_error("Unknown value for Player");<br/>
}<br/>
<br/>
std::string ribi::Pylos::ToStr(const MustRemoveState state)<br/>
{<br/>
&nbsp;&nbsp;switch (state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case MustRemoveState::player1: return "player1";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case MustRemoveState::player2: return "player2";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case MustRemoveState::no: return "no";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Unknown value for MustRemoveState");<br/>
&nbsp;&nbsp;throw std::logic_error("Unknown value for MustRemoveState");<br/>
}<br/>
<br/>
bool ribi::Pylos::operator!(const MustRemoveState&amp; state)<br/>
{<br/>
&nbsp;&nbsp;return state == MustRemoveState::no;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosmustremovestate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosmustremovestate.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::MustRemoveState, Pylos enum class for the state of a removal<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSMUSTREMOVESTATE_H<br/>
#define PYLOSMUSTREMOVESTATE_H<br/>
<br/>
#include &lt;string&gt;<br/>
<br/>
#include "pylosfwd.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
///After placing (Set) or moving (Transfer) a marble, the MustRemoveState<br/>
///will be removed. These are:<br/>
///- no: no marbles need to be removed before next player's move<br/>
///- player1: player1 has to remove one or two marbles. This is determined<br/>
///&nbsp;&nbsp;by the player that places or moves his/her marbles.<br/>
///- player2: player2 has to remove one or two marbles. This is determined<br/>
///&nbsp;&nbsp;by the player that places or moves his/her marbles.<br/>
enum class MustRemoveState { player1, player2, no };<br/>
MustRemoveState ToMustRemoveState(const Player&amp; player);<br/>
std::string ToStr(const MustRemoveState state);<br/>
<br/>
//bool operator==(const MustRemoveState&amp; state, const MustRemoveState&amp; player);<br/>
//bool operator!=(const MustRemoveState&amp; state, const MustRemoveState&amp; player);<br/>
bool operator!(const MustRemoveState&amp; state);<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSMUSTREMOVESTATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosplayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosplayer.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Player, Pylos enum class for the players<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
<br/>
<br/>
#include "pylosplayer.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include "pylospositionstate.h"<br/>
<br/>
<br/>
<br/>
void ribi::Pylos::Toggle(Player&amp; player)<br/>
{<br/>
&nbsp;&nbsp;player = (player == Player::player1 ? Player::player2 : Player::player1);<br/>
}<br/>
<br/>
ribi::Pylos::Player ribi::Pylos::ToPlayer(const PositionState&amp; state)<br/>
{<br/>
&nbsp;&nbsp;switch (state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case PositionState::player1: return Player::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case PositionState::player2: return Player::player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;default: break;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Cannot convert this PositionState to a Player");<br/>
}<br/>
<br/>
bool ribi::Pylos::operator==(const Player&amp; player, const PositionState&amp; state)<br/>
{<br/>
&nbsp;&nbsp;switch (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::player1: return state == PositionState::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::player2: return state == PositionState::player2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return false;<br/>
}<br/>
<br/>
bool ribi::Pylos::operator!=(const Player&amp; player, const PositionState&amp; state)<br/>
{<br/>
&nbsp;&nbsp;return !(player==state);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylosplayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylosplayer.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Player, Pylos enum class for the players<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSPLAYER_H<br/>
#define PYLOSPLAYER_H<br/>
<br/>
#include "pylosfwd.h"<br/>
#include "pylospositionstate.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
enum class Player { player1, player2 };<br/>
///Toggles between the two players<br/>
void Toggle(Player&amp; player);<br/>
///Convert a PositionState to Player<br/>
Player ToPlayer(const PositionState&amp; state);<br/>
<br/>
bool operator==(const Player&amp; player, const PositionState&amp; state);<br/>
bool operator!=(const Player&amp; player, const PositionState&amp; state);<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSPLAYER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylospositionstate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylospositionstate.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::PositionState, Pylos enum class for the state of a position<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
<br/>
<br/>
#include "pylospositionstate.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include "pylosplayer.h"<br/>
<br/>
<br/>
char ribi::Pylos::ToChar(const PositionState state)<br/>
{<br/>
&nbsp;&nbsp;switch (state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case PositionState::empty: return '.';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case PositionState::player1: return 'X';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case PositionState::player2: return 'O';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Unknown PositionState in ToChar");<br/>
}<br/>
<br/>
ribi::Pylos::PositionState ribi::Pylos::ToPositionState(const Player&amp; player)<br/>
{<br/>
&nbsp;&nbsp;switch (player)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::player1: return PositionState::player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Player::player2: return PositionState::player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;//default: break;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Should not get here");<br/>
&nbsp;&nbsp;throw std::logic_error("Cannot convert this Player to a PositionState");<br/>
}<br/>
<br/>
bool ribi::Pylos::operator==(const PositionState state, const Player&amp; player)<br/>
{<br/>
&nbsp;&nbsp;return player == state;<br/>
}<br/>
<br/>
bool ribi::Pylos::operator!=(const PositionState state, const Player&amp; player)<br/>
{<br/>
&nbsp;&nbsp;return player != state;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pylospositionstate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pylospositionstate.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::PositionState, Pylos enum class for the state of a position<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSPOSITIONSTATE_H<br/>
#define PYLOSPOSITIONSTATE_H<br/>
<br/>
#include "pylosfwd.h"<br/>
//#include "pylosplayer.h"<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
enum class PositionState { player1, player2, empty };<br/>
PositionState ToPositionState(const Player&amp; player);<br/>
char ToChar(const PositionState state);<br/>
<br/>
bool operator==(const PositionState state, const Player&amp; player);<br/>
bool operator!=(const PositionState state, const Player&amp; player);<br/>
//bool operator!(const PositionState&amp; state);<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSPOSITIONSTATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pyloswinner.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pyloswinner.cpp" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Winner, Pylos enum class for the winner<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
<br/>
<br/>
#include "pyloswinner.h"<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
std::string ribi::Pylos::ToStr(const Winner winner)<br/>
{<br/>
&nbsp;&nbsp;switch (winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Winner::player1: return "player1";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Winner::player2: return "player2";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case Winner::none: return "none";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;assert(!"Cannot convert this Winner to a std::string");<br/>
&nbsp;&nbsp;throw std::logic_error("Cannot convert this Winner to a std::string");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPylos/pyloswinner.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPylos/pyloswinner.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
Pylos::Winner, Pylos enum class for the winner<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppPylos.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef PYLOSWINNER_H<br/>
#define PYLOSWINNER_H<br/>
<br/>
#include &lt;string&gt;<br/>
<br/>
namespace ribi {<br/>
<br/>
namespace Pylos {<br/>
<br/>
enum class Winner { player1, player2, none };<br/>
std::string ToStr(const Winner winner);<br/>
<br/>
} //~namespace Pylos<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // PYLOSWINNER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
