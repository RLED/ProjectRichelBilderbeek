<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::weak_ptr</title>
  <meta name="description" content="C++ boost::weak_ptr"/>
  <meta name="keywords" content="C++ boost::weak_ptr Boost weak_ptr weak pointer weak_pointer code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <img src="PicBoost.png" alt="Boost"/> <a href="CppWeak_ptr.htm">boost::weak_ptr</a></h1>
<p>&nbsp;</p>
<p><a href="CppWeak_ptr.htm">boost::weak_ptr</a> is a <a href="CppBoost.htm">Boost</a> 
<a href="CppSmartPointer.htm">smart pointer</a> <a href="CppClass.htm">class</a> that 
'stores a "weak reference" to an object that's already managed by a <a href="CppShared_ptr.htm">shared_ptr</a>..' [1].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppWeak_ptr.htm">Download the Qt Creator project 'CppWeak_ptr' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p><a href="CppWeak_ptr.htm">boost::weak_ptr</a> can be used to obtain a read-only <a href="CppPointer.htm">pointer</a> from
a <a href="CppShared_ptr.htm">boost::shared_ptr</a> that detects if the original <a href="CppShared_ptr.htm">boost::shared_ptr</a>
still exists:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/A person with an ID<br/>
<b><a href="CppStruct.htm">struct</a></b> Person<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Person with an ID<br/>
&nbsp;&nbsp;Person(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id) { SetId(id); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Person his/her ID<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_id; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Person his/her ID<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetId(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id) { m_id <a href="CppOperatorAssign.htm">=</a> id; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only allow a <a href="CppBoost.htm">Boost</a> <a href="CppSmartPointer.htm">smart pointer</a> to <b><a href="CppDelete.htm">delete</a></b> Person,<br/>
&nbsp;&nbsp;~Person() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only allow a <a href="CppBoost.htm">Boost</a> <a href="CppSmartPointer.htm">smart pointer</a> to <b><a href="CppDelete.htm">delete</a></b> Person,<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Person*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Person his/her ID<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_id;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>/A Person database with a single Person<br/>
<b><a href="CppStruct.htm">struct</a></b> Database<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a single Person (but more is possible as well)<br/>
&nbsp;&nbsp;Database()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a single person<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_persons.push_back(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Person&gt;(<b><a href="CppNew.htm">new</a></b> Person(1)));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove all Persons from the Database<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Clear()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_persons.resize(0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the first Person as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Person * GetFirst1()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_persons[0].get(); <a href="CppComment.htm">//</a>Created from a Person*<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the first Person as a read-only <a href="CppWeak_ptr.htm">boost::weak_ptr</a> <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; GetFirst2()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_persons[0]; <a href="CppComment.htm">//</a>Created from a <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Person&gt;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Persons<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Person&gt; &gt; m_persons;<br/>
};<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a database<br/>
&nbsp;&nbsp;Database d;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain <a href="CppPointer.htm">pointer</a>s to the first object<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Person * <b><a href="CppConst.htm">const</a></b> p1 <a href="CppOperatorAssign.htm">=</a> d.GetFirst1();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; p2 <a href="CppOperatorAssign.htm">=</a> d.GetFirst2();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2.use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To read from a <a href="CppWeak_ptr.htm">boost::weak_ptr</a>, a <a href="CppShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>must be created from it<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; r <a href="CppOperatorAssign.htm">=</a> p2.lock())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> r-&gt;GetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> p1; <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> r.get(); <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p1-&gt;SetId(-1); <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>r-&gt;SetId(-1); <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Kill the person in the database,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>possibly resulting in dangling <a href="CppPointer.htm">pointer</a>s!<br/>
&nbsp;&nbsp;d.Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p1-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> 1); <a href="CppComment.htm">//</a>Bad: use of dangling <a href="CppPointer.htm">pointer</a>! Not detectable!<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2.use_count() <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Good: dangling <a href="CppPointer.htm">pointer</a> is detected<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; r <a href="CppOperatorAssign.htm">=</a> p2.lock())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Bad: should not get here! ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !"Bad: use of dangling <a href="CppPointer.htm">pointer</a>!"); <a href="CppComment.htm">//</a>Will not get here!<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Good: dangling <a href="CppPointer.htm">pointer</a> is not used\n";<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www.boost.org/doc/libs/1_42_0/libs/smart_ptr/weak_ptr.htm">Boost boost::weak_ptr documentation</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
