<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GameBillysGardenVcl</title>
  <meta name="description" content="C++ GameBillysGardenVcl"/>
  <meta name="keywords" content="C++ GameBillysGardenVcl code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="GameBillysGardenVcl.htm">GameBillysGardenVcl</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<img src="PicCppBuilder.png" alt="C++ Builder"/><img src="PicWindows.png" alt="Windows"/>
<p>&nbsp;</p>
<p><a href="GameBillysGardenVcl.htm">BillysGardenVcl</a> is an unfinished <a href="Games.htm">game</a> that is a PC clone of the MSX <a href="Games.htm">game</a> 'Athletic Land'.</p>
<p>&nbsp;</p>
<p><a href="GameBillysGarden.htm">BillysGarden</a>, the successor of <a href="GameBillysGardenVcl.htm">BillysGardenVcl</a>, uses the cross-platform <a href="CppQt.htm">Qt</a> <a href="CppLibrary.htm">library</a>.
<p><a href="GameBillysGardenVcl.htm">BillysGardenVcl</a>, the predecessor of <a href="GameBillysGarden.htm">BillysGarden</a>, uses the Windows-only <a href="CppVcl.htm">VCL</a> <a href="CppLibrary.htm">library</a>.
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="GameBillysGarden_0_9.png">View a screenshot of 'Billy's Garden' (version 0.9)(png)</a></li>
  <li><a href="GameBillysGardenExe_0_9.zip">Download a Windows executable of 'Billy's Garden' (version 0.9)(zip)</a></li>
  <li><a href="GameBillysGardenSource_0_9.zip">Download the source code of 'Billy's Garden' (version 0.9)(zip)</a></li>
  <li><a href="GameBillysGardenSprites_0_9.zip">Download the (.bmp) sprites of 'Billy's Garden' (version 0.9)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.youtube.com/watch?v=isjCc7CiSfM">YouTube video of 'Athletic Land'</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>ProjectBillysGarden.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="ProjectBillysGarden.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;vcl<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormGame<a href="CppImplementationFile.html">.cpp</a>", FormGame);<br/>
USEFORM("UnitFormMenu<a href="CppImplementationFile.html">.cpp</a>", FormMenu);<br/>
USEFORM("UnitFormSprites<a href="CppImplementationFile.html">.cpp</a>", FormSprites);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.html">Application</a>-&gt;<a href="CppInitialize.html">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.html">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "De Tuin Van Billy";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.html">Application</a>-&gt;CreateForm(__classid(TFormMenu), &amp;FormMenu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.html">Application</a>-&gt;CreateForm(__classid(TFormSprites), &amp;FormSprites);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.html">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b> (<a href="CppException.html">Exception</a> &amp;<a href="CppException.html">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.html">Application</a>-&gt;Show<a href="CppException.html">Exception</a>(&amp;<a href="CppException.html">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.html">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.html">throw</a></b> <a href="CppException.html">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.html">catch</a></b> (<a href="CppException.html">Exception</a> &amp;<a href="CppException.html">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.html">Application</a>-&gt;Show<a href="CppException.html">Exception</a>(&amp;<a href="CppException.html">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitArea.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitArea.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitAreaH<br/>
<a href="CppDefine.html">#define</a> UnitAreaH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<b><a href="CppStruct.html">struct</a></b> Background;<br/>
<b><a href="CppStruct.html">struct</a></b> Player;<br/>
<b><a href="CppStruct.html">struct</a></b> Sprite;<br/>
<b><a href="CppNamespace.html">namespace</a></b> Extctrls { <b><a href="CppStruct.html">struct</a></b> <a href="CppTImage.html">TImage</a>; }<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Area<br/>
{<br/>
&nbsp;&nbsp;Area(<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Background&gt; m_background);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Start();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> InitBuffer(Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> buffer) <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> buffer) <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasFinished() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_area_finished; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasDied() <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Player();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>Rock();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>RollingBall();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Sprite&gt; &gt; m_sprites;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Player&gt; m_player;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Background&gt; m_background;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_area_finished;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitArea.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitArea.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppAlgorithmH.html">algorithm</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/bind<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/mem_fn<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;ExtCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "UnitArea<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitBackground<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppState.html">State</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitSprite<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Player&gt; Area::m_player;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Area::Area(<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Background&gt; background)<br/>
&nbsp;&nbsp;: m_background(background),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_area_finished(<b><a href="CppFalse.html">false</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAdd.htm">Add</a>Player();<br/>
&nbsp;&nbsp;Start();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::Start()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;SetToStartingPosition(m_background.get());<br/>
&nbsp;&nbsp;m_area_finished <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::Restart()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;SetToStartingPosition(m_background.get());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restart all sprites<br/>
&nbsp;&nbsp;<a href="CppFor_each.html">std::for_each</a>(m_sprites.begin(),m_sprites.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMem_fn.html">boost::mem_fn</a>(&amp;Sprite::Restart));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::<a href="CppAdd.htm">Add</a>Player()<br/>
{<br/>
&nbsp;&nbsp;m_player.reset(<b><a href="CppNew.htm">new</a></b> Player);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> Area::HasDied() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_player-&gt;HasDied();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::Tick()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move all sprites<br/>
&nbsp;&nbsp;<a href="CppFor_each.html">std::for_each</a>(m_sprites.begin(),m_sprites.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMem_fn.html">boost::mem_fn</a>(&amp;Sprite::Move));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> collisions<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.html">typedef</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Sprite&gt; &gt;::<a href="CppIterator.html">iterator</a> <a href="CppIterator.html">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppIterator.html">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> m_sprites.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.html">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_sprites.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i)-&gt;DoesCollide(*m_player.get()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*i)-&gt;OnCollide(*m_player.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_player-&gt;HasDied())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_player-&gt;RespondToBackground(m_background.get());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_player-&gt;GetX() <a href="CppOperatorPlus.htm">+</a> m_player-&gt;GetWidth() &gt; m_background-&gt;m_width)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restart the current area, also sets the player to starting position<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Restart();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set area to be finished<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_area_finished <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_player-&gt;Tick();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::InitBuffer(Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> buffer) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_height;<br/>
&nbsp;&nbsp;buffer-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;buffer-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::Draw(Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> buffer) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background on buffer<br/>
&nbsp;&nbsp;m_background-&gt;Draw(buffer-&gt;Canvas);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw all sprites on buffer<br/>
&nbsp;&nbsp;<a href="CppFor_each.html">std::for_each</a>(m_sprites.begin(),m_sprites.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.html">boost::bind</a>(&amp;Sprite::Draw,_1,buffer-&gt;Canvas));<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw player on buffer<br/>
&nbsp;&nbsp;m_player-&gt;Draw(buffer-&gt;Canvas);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressKeyLeft();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressKeyRight();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressKeyJump();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;m_player-&gt;PressNoKey();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::<a href="CppAdd.htm">Add</a>Rock()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_right_x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_walk_height ;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Sprite&gt; s(<b><a href="CppNew.htm">new</a></b> RockSprite(x,y));<br/>
&nbsp;&nbsp;s.reset(<b><a href="CppNew.htm">new</a></b> RockSprite(x,y <a href="CppOperatorMinus.htm">-</a> s-&gt;m_height)); <a href="CppComment.htm">//</a>Move rock up<br/>
&nbsp;&nbsp;m_sprites.push_back(s);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Area::<a href="CppAdd.htm">Add</a>RollingBall()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_width <a href="CppOperatorPlus.htm">+</a> 50;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> m_background-&gt;m_walk_height;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Sprite&gt; s(<b><a href="CppNew.htm">new</a></b> RollingBallSprite(x,y,-1.0));<br/>
&nbsp;&nbsp;s.reset(<b><a href="CppNew.htm">new</a></b> RollingBallSprite(x,y <a href="CppOperatorMinus.htm">-</a> s-&gt;m_height,-10.0)); <a href="CppComment.htm">//</a>Move roling ball up<br/>
&nbsp;&nbsp;m_sprites.push_back(s);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitBackground.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitBackground.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitBackgroundH<br/>
<a href="CppDefine.html">#define</a> UnitBackgroundH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> "UnitSprite<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Background : <b><a href="CppPublic.html">public</a></b> NonMovingSprite<br/>
{<br/>
&nbsp;&nbsp;Background(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> image,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> walk_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> right_x)<br/>
&nbsp;&nbsp;: NonMovingSprite(0,0,image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_height(walk_height),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_right_x(right_x)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;~Background() {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_walk_height; <a href="CppComment.htm">//</a>Height where feet walk on<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_right_x; <a href="CppComment.htm">//</a>X coordinat of rock or fire<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> BackgroundAlForest : <b><a href="CppPublic.html">public</a></b> Background<br/>
{<br/>
&nbsp;&nbsp;BackgroundAlForest();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Background&gt; CreateBackgroundAlForest();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitBackground.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitBackground.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitBackground<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitFormSprites<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
BackgroundAlForest::BackgroundAlForest()<br/>
&nbsp;&nbsp;: Background(FormSprites-&gt;ImageAlForest,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;256, <a href="CppComment.htm">//</a>walk_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;400&nbsp;&nbsp;<a href="CppComment.htm">//</a>right_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Background&gt; CreateBackgroundAlForest()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Background&gt;(<b><a href="CppNew.htm">new</a></b> BackgroundAlForest);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitCollisionBehaviour.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitCollisionBehaviour.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitCollisionBehaviourH<br/>
<a href="CppDefine.html">#define</a> UnitCollisionBehaviourH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Player;<br/>
<b><a href="CppNamespace.html">namespace</a></b> Types { <b><a href="CppStruct.html">struct</a></b> TRect; }<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> CollisionBehaviour determines what will happen to a player<br/>
<a href="CppComment.htm">//</a> * LethalCollision: kills player<br/>
<a href="CppComment.htm">//</a> * MovePlayerAwayCollision: moves player away from collision zone<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> CollisionBehaviour<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> OnCollision(Player&amp; p) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~CollisionBehaviour() {}<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> LethalCollision : <b><a href="CppPublic.html">public</a></b> CollisionBehaviour<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnCollision(Player&amp; p);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> MovePlayerAwayCollision : <b><a href="CppPublic.html">public</a></b> CollisionBehaviour<br/>
{<br/>
&nbsp;&nbsp;MovePlayerAwayCollision(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x1, <b><a href="CppConst.html">const</a></b> y1, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnCollision(Player&amp; p);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_y1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_y2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x2;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoCollide(<b><a href="CppConst.html">const</a></b> Types::TRect&amp; a, <b><a href="CppConst.html">const</a></b> Types::TRect&amp; b);<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> InRect(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.html">const</a></b> Types::TRect&amp; r);<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> MoveAway(Types::TRect&amp; r1, Types::TRect&amp; r2);<br/>
<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitCollisionBehaviour.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitCollisionBehaviour.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Types<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "UnitCollisionBehaviour<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> LethalCollision::OnCollision(Player&amp; p)<br/>
{<br/>
&nbsp;&nbsp;p.Die();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
MovePlayerAwayCollision::MovePlayerAwayCollision(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x1, <b><a href="CppConst.html">const</a></b> y1, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> height)<br/>
&nbsp;&nbsp;: m_x1(x1), m_y1(y1), m_x2(x1 <a href="CppOperatorPlus.htm">+</a> width), m_y2(y1 <a href="CppOperatorPlus.htm">+</a> height)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(width &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(height &gt; 0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MovePlayerAwayCollision::OnCollision(Player&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Extract player coordinats<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x1 <a href="CppOperatorAssign.htm">=</a> p.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y1 <a href="CppOperatorAssign.htm">=</a> p.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x2 <a href="CppOperatorAssign.htm">=</a> p_x1 <a href="CppOperatorPlus.htm">+</a> p.GetWidth();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y2 <a href="CppOperatorAssign.htm">=</a> p_y1 <a href="CppOperatorPlus.htm">+</a> p.GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> TRect r(m_x1,m_y1,m_x2,m_y2);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the deltas of player (1) and <b><a href="CppThis.htm">this</a></b> sprite (2) to zero<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!( p_x2&nbsp;&nbsp;&lt; m_x1 <a href="CppOperatorLogicalOr.htm">||</a> p_x1 &gt; m_x2 <a href="CppOperatorLogicalOr.htm">||</a> p_y2 &lt; m_y1&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> p_y1&nbsp;&nbsp;&gt; m_y2))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x1,p_y1,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorPlus.htm">+</a>+dx; <a href="CppOperatorPlus.htm">+</a>+dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x2,p_y1,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorMinus.htm">-</a>-dx; <a href="CppOperatorPlus.htm">+</a>+dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x1,p_y2,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorPlus.htm">+</a>+dx; <a href="CppOperatorMinus.htm">-</a>-dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(p_x2,p_y2,r)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorMinus.htm">-</a>-dx; <a href="CppOperatorMinus.htm">-</a>-dy; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If all 4 edges are collision<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dx <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> dy <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;p.Move(dx,dy);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> InRect(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.html">const</a></b> Types::TRect&amp; r)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> (x <a href="CppOperatorGreaterEqual.html">&gt;=</a> r.Left <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> x &lt; r.Right <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> y <a href="CppOperatorGreaterEqual.html">&gt;=</a> r.Top <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> y &lt; r.Bottom);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MoveAway(Types::TRect&amp; r1, Types::TRect&amp; r2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx1 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy1 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx2 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy2 <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No collision<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Left&nbsp;&nbsp; &lt; 0) <a href="CppOperatorPlus.htm">+</a>+dx1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Top&nbsp;&nbsp;&nbsp;&nbsp;&lt; 0) <a href="CppOperatorPlus.htm">+</a>+dy1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Right&nbsp;&nbsp;&gt; ClientWidth ) <a href="CppOperatorMinus.htm">-</a>-dx1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r1.Bottom &gt; ClientHeight) <a href="CppOperatorMinus.htm">-</a>-dy1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Left&nbsp;&nbsp; &lt; 0) <a href="CppOperatorPlus.htm">+</a>+dx2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Top&nbsp;&nbsp;&nbsp;&nbsp;&lt; 0) <a href="CppOperatorPlus.htm">+</a>+dy2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Right&nbsp;&nbsp;&gt; ClientWidth ) <a href="CppOperatorMinus.htm">-</a>-dx2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (r2.Bottom &gt; ClientHeight) <a href="CppOperatorMinus.htm">-</a>-dy2;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!( r1.Right&nbsp;&nbsp;&lt; r2.Left <a href="CppOperatorLogicalOr.htm">||</a> r1.Left &gt; r2.Right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> r1.Bottom &lt; r2.Top&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> r1.Top&nbsp;&nbsp;&gt; r2.Bottom))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Left ,r1.Top&nbsp;&nbsp; ,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorPlus.htm">+</a>+dx1; <a href="CppOperatorPlus.htm">+</a>+dy1; <a href="CppOperatorMinus.htm">-</a>-dx2; <a href="CppOperatorMinus.htm">-</a>-dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Right,r1.Top&nbsp;&nbsp; ,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorMinus.htm">-</a>-dx1; <a href="CppOperatorPlus.htm">+</a>+dy1; <a href="CppOperatorPlus.htm">+</a>+dx2; <a href="CppOperatorMinus.htm">-</a>-dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Left ,r1.Bottom,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorPlus.htm">+</a>+dx1; <a href="CppOperatorMinus.htm">-</a>-dy1; <a href="CppOperatorMinus.htm">-</a>-dx2; <a href="CppOperatorPlus.htm">+</a>+dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (InRect(r1.Right,r1.Bottom,r2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) { <a href="CppOperatorMinus.htm">-</a>-dx1; <a href="CppOperatorMinus.htm">-</a>-dy1; <a href="CppOperatorPlus.htm">+</a>+dx2; <a href="CppOperatorPlus.htm">+</a>+dy2;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If all 4 edges are collision<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dx1 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> dy1 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+dx1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+dy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>-dx2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>-dy2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;r1.Left&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dx1;<br/>
&nbsp;&nbsp;r1.Right&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dx1;<br/>
&nbsp;&nbsp;r1.Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dy1;<br/>
&nbsp;&nbsp;r1.Bottom <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dy1;<br/>
&nbsp;&nbsp;r2.Left&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dx2;<br/>
&nbsp;&nbsp;r2.Right&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dx2;<br/>
&nbsp;&nbsp;r2.Top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dy2;<br/>
&nbsp;&nbsp;r2.Bottom <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> dy2;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoCollide(<b><a href="CppConst.html">const</a></b> Types::TRect&amp; a, <b><a href="CppConst.html">const</a></b> Types::TRect&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x1 <a href="CppOperatorAssign.htm">=</a> a.Left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x2 <a href="CppOperatorAssign.htm">=</a> a.Right;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y1 <a href="CppOperatorAssign.htm">=</a> a.Top;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y2 <a href="CppOperatorAssign.htm">=</a> a.Bottom;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x1 <a href="CppOperatorAssign.htm">=</a> b.Left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x2 <a href="CppOperatorAssign.htm">=</a> b.Right;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y1 <a href="CppOperatorAssign.htm">=</a> b.Top;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y2 <a href="CppOperatorAssign.htm">=</a> b.Bottom;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-left of a in b?<br/>
&nbsp;&nbsp;&nbsp;&nbsp; (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-left of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &lt; b_y2) );<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitCreateAreas.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitCreateAreas.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitCreateAreasH<br/>
<a href="CppDefine.html">#define</a> UnitCreateAreasH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppInclude.html">#include</a> "UnitArea<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;Area&gt; CreateAreas();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitCreateAreas.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitCreateAreas.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitBackground<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitCreateAreas<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitSprite<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;Area&gt; CreateAreas()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;Area&gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Area a(CreateBackgroundAlForest());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a>RollingBall();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Area a(CreateBackgroundAlForest());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a>Rock();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Area a(CreateBackgroundAlForest());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(a);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFormGame.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFormGame.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitFormGameH<br/>
<a href="CppDefine.html">#define</a> UnitFormGameH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppClass.html">Classes</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Controls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;StdCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Forms<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;ExtCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Graphics<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppSetH.html">set</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppScoped_ptr.html">scoped_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "UnitArea<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> "UnitFormArea<a href="CppHeaderFile.htm">.h</a>"<br/>
<b><a href="CppStruct.html">struct</a></b> TFormArea;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.html">class</a></b> TFormGame : <b><a href="CppPublic.html">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.html">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rMain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.html">State</a> Shift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyUp(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.html">State</a> Shift);<br/>
<b><a href="CppPrivate.html">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.html">declaration</a>s<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.html">typedef</a></b> <a href="CppVector.html">std::vector</a>&lt;Area&gt;::<a href="CppIterator.html">iterator</a> Area<a href="CppIterator.html">Iterator</a>;<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;Area&gt; m_areas;<br/>
&nbsp;&nbsp;Area<a href="CppIterator.html">Iterator</a> m_cur_area;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_lives;<br/>
&nbsp;&nbsp;<a href="CppSet.html">std::set</a>&lt;WORD&gt; m_keys;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NewArea();<br/>
<br/>
<b><a href="CppPublic.html">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.html">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormGame(T<a href="CppComponent.html">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.html">extern</a></b> PACKAGE TFormGame *FormGame;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFormGame.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFormGame.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;vcl<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitBackground<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitCreateAreas<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitFormGame<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.html">#pragma</a> resource "*.dfm"<br/>
TFormGame *FormGame;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormGame::TFormGame(T<a href="CppComponent.html">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_areas(CreateAreas()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area(m_areas.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_lives(3)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(&amp;(m_areas[0]) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> &amp;(*m_cur_area));<br/>
&nbsp;&nbsp;NewArea();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormGame::NewArea() <a href="CppComment.htm">//</a>call when m_cur_area has changed<br/>
{<br/>
&nbsp;&nbsp;m_cur_area-&gt;InitBuffer(ImageBuffer);<br/>
&nbsp;&nbsp;m_cur_area-&gt;Start();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormGame::<a href="CppTime.htm">Time</a>rMain<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Press player keys<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>One can move either left or right<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_RIGHT )<a href="CppOperatorEqual.htm">==</a>1) m_cur_area-&gt;PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_LEFT)<a href="CppOperatorEqual.htm">==</a>1) m_cur_area-&gt;PressKeyLeft();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>One can always start jumping<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_SPACE)<a href="CppOperatorEqual.htm">==</a>1) m_cur_area-&gt;PressKeyJump();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>One can always stop pressing keys<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_LEFT )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_keys.count(VK_RIGHT)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_keys.count(VK_SPACE)<a href="CppOperatorEqual.htm">==</a>0) m_cur_area-&gt;PressNoKey();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tick sprites and player<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_form-&gt;Tick();<br/>
&nbsp;&nbsp;m_cur_area-&gt;Tick();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw background, sprites and player<br/>
&nbsp;&nbsp;m_cur_area-&gt;Draw(ImageBuffer);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> game over<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cur_area-&gt;HasDied())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show player suffering or something like...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODO<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>-m_n_lives;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is player game over?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODO<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restart area<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area-&gt;<a href="CppAdd.htm">Add</a>Player();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area-&gt;Restart();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> finishing of game<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cur_area-&gt;HasFinished())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+m_cur_area;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cur_area <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_areas.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowMessage("Game ended");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cur_area <a href="CppOperatorAssign.htm">=</a> m_areas.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NewArea();<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer to screen<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;Canvas-&gt;Draw(0,0,m_form-&gt;ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Canvas-&gt;StretchDraw(ClientRect,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;Canvas-&gt;Draw(0,0,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormGame::FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.html">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;m_keys.insert(Key);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_keys.count(VK_LEFT) <a href="CppOperatorPlus.htm">+</a> m_keys.count(VK_RIGHT) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_keys.erase(VK_LEFT);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_keys.erase(VK_RIGHT);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormGame::FormKeyUp(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.html">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;m_keys.erase(Key);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFormMenu.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFormMenu.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitFormMenuH<br/>
<a href="CppDefine.html">#define</a> UnitFormMenuH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppClass.html">Classes</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Controls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;StdCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Forms<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;ExtCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Graphics<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.html">class</a></b> TFormMenu : <b><a href="CppPublic.html">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.html">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelStart;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageBillyLogo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rAutoStart;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel<a href="CppAbout.html">About</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelQuit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall PanelStartClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rAutoStart<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall PanelQuitClick(TObject *Sender);<br/>
<b><a href="CppPrivate.html">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.html">declaration</a>s<br/>
<b><a href="CppPublic.html">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.html">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormMenu(T<a href="CppComponent.html">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.html">extern</a></b> PACKAGE TFormMenu *FormMenu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFormMenu.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFormMenu.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;vcl<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitFormGame<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitFormMenu<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.html">#pragma</a> resource "*.dfm"<br/>
TFormMenu *FormMenu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMenu::TFormMenu(T<a href="CppComponent.html">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::PanelStartClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.html">boost::scoped_ptr</a>&lt;TFormGame&gt; f(<b><a href="CppNew.htm">new</a></b> TFormGame(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::<a href="CppTime.htm">Time</a>rAutoStart<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rAutoStart-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>;<br/>
&nbsp;&nbsp;PanelStartClick(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMenu::PanelQuitClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFormSprites.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFormSprites.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitFormSpritesH<br/>
<a href="CppDefine.html">#define</a> UnitFormSpritesH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppClass.html">Classes</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Controls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;StdCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Forms<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;ExtCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Graphics<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.html">class</a></b> TFormSprites : <b><a href="CppPublic.html">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.html">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharStandRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharWalkRight1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharWalkRight2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharJumpRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharHangRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageAlForest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImagePuddle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageApple;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageRock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *Image1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageBall;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharStandLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharWalkLeft1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharWalkLeft2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharJumpLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.html">TImage</a> *ImageMainCharHangLeft;<br/>
<b><a href="CppPrivate.html">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.html">declaration</a>s<br/>
<b><a href="CppPublic.html">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.html">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormSprites(T<a href="CppComponent.html">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.html">extern</a></b> PACKAGE TFormSprites *FormSprites;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitFormSprites.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitFormSprites.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;vcl<a href="CppHeaderFile.htm">.h</a>&gt;<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitFormSprites<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.html">#pragma</a> resource "*.dfm"<br/>
TFormSprites *FormSprites;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSprites::TFormSprites(T<a href="CppComponent.html">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitLoopReader.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitLoopReader.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> Unit<a href="CppLoopReader.html">LoopReader</a>H<br/>
<a href="CppDefine.html">#define</a> Unit<a href="CppLoopReader.html">LoopReader</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="CppLoopReader.html">CppLoopReader</a>.html<br/>
<a href="CppComment.htm">//</a> Reads a <a href="CppContainer.html">container</a> in a loop:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; when the end is reached, it starts<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; reading from the beginning again<br/>
<b><a href="CppTemplate.html">template</a></b> &lt;<b><a href="CppClass.html">class</a></b> <a href="CppIterator.html">Iterator</a>&gt;<br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppLoopReader.html">LoopReader</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppLoopReader.html">LoopReader</a>(<b><a href="CppConst.html">const</a></b> <a href="CppIterator.html">Iterator</a> begin, <b><a href="CppConst.html">const</a></b> <a href="CppIterator.html">Iterator</a> end)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: begin_(begin), read_(begin), end_(end)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppIterator.html">Iterator</a> Read() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> read_; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Next()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+read_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (read_ <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> end_) read_ <a href="CppOperatorAssign.htm">=</a> begin_;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppIterator.html">Iterator</a> begin_;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppIterator.html">Iterator</a> end_;<br/>
&nbsp;&nbsp;<a href="CppIterator.html">Iterator</a> read_;<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a><br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitLoopReader.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitLoopReader.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "Unit<a href="CppLoopReader.html">LoopReader</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMain.cpp" border = "1"><tr><td><code>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Types<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "UnitMovement<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitMovementPattern<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TestUnitMovement()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Movement&gt; m;<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test NeverMoment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> NeverMovement);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(y <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m-&gt;IsDone() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.html">false</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test WaitMovement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_wait <a href="CppOperatorAssign.htm">=</a> 100;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> WaitMovement(n_wait));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_wait-1; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.html">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(y <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test TeleportMovement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dest_x <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dest_y <a href="CppOperatorAssign.htm">=</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> TeleportMovement(x,y,dest_x,dest_y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m-&gt;IsDone() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> dest_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(y <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> dest_y);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test StraightLineMovement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 100;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.reset(<b><a href="CppNew.htm">new</a></b> StraightLineMovement(x,y,cnt,dx,dy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>cnt-1; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.html">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m-&gt;IsDone()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(cnt)*dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>( y <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(cnt)*dy);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TestUnitMovementPattern()<br/>
{<br/>
&nbsp;&nbsp;ComplexMovePattern p;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;p.<a href="CppAdd.htm">Add</a>TeleportMovement(x,y,20.0,10.0);<br/>
&nbsp;&nbsp;p.<a href="CppAdd.htm">Add</a>StraightLineMovement(x,y,10,-2.0,-0.5);<br/>
&nbsp;&nbsp;p.<a href="CppAdd.htm">Add</a>WaitMovement(5);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.html">std::cout</a> <a href="CppOperatorStreamOut.html">&lt;&lt;</a> x <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.html">&lt;&lt;</a> y <a href="CppOperatorStreamOut.html">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.Move();<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoCollide(<b><a href="CppConst.html">const</a></b> Types::TRect&amp; a, <b><a href="CppConst.html">const</a></b> Types::TRect&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x1 <a href="CppOperatorAssign.htm">=</a> a.Left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_x2 <a href="CppOperatorAssign.htm">=</a> a.Right;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y1 <a href="CppOperatorAssign.htm">=</a> a.Top;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> a_y2 <a href="CppOperatorAssign.htm">=</a> a.Bottom;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x1 <a href="CppOperatorAssign.htm">=</a> b.Left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_x2 <a href="CppOperatorAssign.htm">=</a> b.Right;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y1 <a href="CppOperatorAssign.htm">=</a> b.Top;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> b_y2 <a href="CppOperatorAssign.htm">=</a> b.Bottom;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-left of a in b?<br/>
&nbsp;&nbsp;&nbsp;&nbsp; (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Top-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y1 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-left of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x1 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x1 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &lt; b_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Bottom-right of a in b?<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (a_x2 &gt; b_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_x2 &lt; b_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &gt; b_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> a_y2 &lt; b_y2) );<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;TestUnitMovement();<br/>
&nbsp;&nbsp;TestUnitMovementPattern();<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMovement.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMovement.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> UnitMovementH<br/>
<a href="CppDefine.html">#define</a> UnitMovementH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> A Movement changes the x and y coordinat or the client<br/>
<a href="CppComment.htm">//</a> * NeverMovement: the client never changes its coordinats<br/>
<a href="CppComment.htm">//</a> * StraightLineMovement: the client moves in a straight line <b><a href="CppFor.htm">for</a></b> some <a href="CppTime.htm">time</a><br/>
<a href="CppComment.htm">//</a> * TeleportMovement: the client teleports once<br/>
<a href="CppComment.htm">//</a> * WaitMovement: the client waits (it does not change its coordinats)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> some <a href="CppTime.htm">time</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~Movement() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Move() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.html">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Restart() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> NeverMovement : <b><a href="CppPublic.html">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> <b><a href="CppFalse.html">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> StraightLineMovement : <b><a href="CppPublic.html">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;StraightLineMovement(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> max_cnt,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_y(y),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cnt(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_max_cnt(max_cnt),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_dx(dx),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_dy(dy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(max_cnt &gt; 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x<a href="CppOperatorPlusAssign.htm">+=</a>m_dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y<a href="CppOperatorPlusAssign.htm">+=</a>m_dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make move end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+m_cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cnt <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_max_cnt) m_cnt <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Movement has ended, prepare <b><a href="CppFor.htm">for</a></b> next <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.html">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> (m_cnt <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; m_x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>x-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; m_y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>y-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cnt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>count of move<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_max_cnt; <a href="CppComment.htm">//</a>maximal count of move<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_dx;&nbsp;&nbsp; <a href="CppComment.htm">//</a>change in x-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_dy;&nbsp;&nbsp; <a href="CppComment.htm">//</a>change in y-coordinat of sprite<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> TeleportMovement : <b><a href="CppPublic.html">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;TeleportMovement(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> target_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> target_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_y(y),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_target_x(target_x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_target_y(target_y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x=m_target_x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y=m_target_y;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.html">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <b><a href="CppTrue.htm">true</a></b>; <a href="CppComment.htm">//</a>Assume only one teleport, so after each Move IsDone <a href="CppReturn.html">returns</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; m_x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>x-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b>&amp; m_y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>y-coordinat of sprite<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_target_x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_target_y;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> WaitMovement : <b><a href="CppPublic.html">public</a></b> Movement<br/>
{<br/>
&nbsp;&nbsp;WaitMovement(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> max_cnt)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_max_cnt(max_cnt),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cnt(0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(max_cnt &gt; 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() <a href="CppComment.htm">//</a>Assumes Move is called before IsDone<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make move end<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+m_cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_cnt <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_max_cnt) m_cnt <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Movement has ended, prepare <b><a href="CppFor.htm">for</a></b> next <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.html">const</a></b> <a href="CppComment.htm">//</a>Assumes Move is called before IsDone<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> (m_cnt <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_max_cnt;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cnt;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMovement.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMovement.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitMovement<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMovementPattern.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMovementPattern.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitMovementPatternH<br/>
<a href="CppDefine.html">#define</a> UnitMovementPatternH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<b><a href="CppStruct.html">struct</a></b> Movement;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> MovementPattern<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Move() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~MovementPattern() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Restart() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> NoMovePattern : <b><a href="CppPublic.html">public</a></b> MovementPattern<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() {}<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> ComplexMovePattern : <b><a href="CppPublic.html">public</a></b> MovementPattern<br/>
{<br/>
&nbsp;&nbsp;ComplexMovePattern() : m_cur_index(0) {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>StraightLineMovement(<b><a href="CppDouble.html">double</a></b>&amp; x,<b><a href="CppDouble.html">double</a></b>&amp; y,<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt,<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>TeleportMovement(<b><a href="CppDouble.html">double</a></b>&amp; x,<b><a href="CppDouble.html">double</a></b>&amp; y,<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dest_x, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dest_y);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>WaitMovement(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() { m_cur_index <a href="CppOperatorAssign.htm">=</a> 0; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Movement&gt; &gt; m_movements;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cur_index;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMovementPattern.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitMovementPattern.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitMovement<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitMovementPattern<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ComplexMovePattern::Move()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_movements <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_movements.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_cur_index &lt; n_movements);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_movements[m_cur_index]);<br/>
<br/>
&nbsp;&nbsp;m_movements[m_cur_index]-&gt;Move();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_movements[m_cur_index]-&gt;IsDone())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reset old move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_movements[m_cur_index]-&gt;Restart();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Go to next move<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_index <a href="CppOperatorAssign.htm">=</a> (m_cur_index <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> n_movements;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ComplexMovePattern::<a href="CppAdd.htm">Add</a>StraightLineMovement(<b><a href="CppDouble.html">double</a></b>&amp; x,<b><a href="CppDouble.html">double</a></b>&amp; y,<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt,<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(cnt &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Movement&gt; m(<b><a href="CppNew.htm">new</a></b> StraightLineMovement(x,y,cnt,dx,dy));<br/>
&nbsp;&nbsp;m_movements.push_back(m);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ComplexMovePattern::<a href="CppAdd.htm">Add</a>TeleportMovement(<b><a href="CppDouble.html">double</a></b>&amp; x,<b><a href="CppDouble.html">double</a></b>&amp; y,<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dest_x, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dest_y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Movement&gt; m(<b><a href="CppNew.htm">new</a></b> TeleportMovement(x,y,dest_x,dest_y));<br/>
&nbsp;&nbsp;m_movements.push_back(m);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> ComplexMovePattern::<a href="CppAdd.htm">Add</a>WaitMovement(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(cnt &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Movement&gt; m(<b><a href="CppNew.htm">new</a></b> WaitMovement(cnt));<br/>
&nbsp;&nbsp;m_movements.push_back(m);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitPlayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitPlayer.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitPlayerH<br/>
<a href="CppDefine.html">#define</a> UnitPlayerH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> "UnitSprite<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<b><a href="CppNamespace.html">namespace</a></b> Extctrls { <b><a href="CppStruct.html">struct</a></b> <a href="CppTImage.html">TImage</a>; }<br/>
<b><a href="CppNamespace.html">namespace</a></b> Graphics { <b><a href="CppStruct.html">struct</a></b> TCanvas; }<br/>
<b><a href="CppStruct.html">struct</a></b> Background;<br/>
<b><a href="CppStruct.html">struct</a></b> Player<a href="CppState.html">State</a>;<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerLeft;<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerRight;<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerJump;<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerStand;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Player<br/>
{<br/>
&nbsp;&nbsp;Player();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(Graphics::TCanvas * <b><a href="CppConst.html">const</a></b> canvas) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetToWalkingHeight(<b><a href="CppConst.html">const</a></b> Background* <b><a href="CppConst.html">const</a></b> background);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetToStartingPosition(<b><a href="CppConst.html">const</a></b> Background* <b><a href="CppConst.html">const</a></b> background);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> RespondToBackground(<b><a href="CppConst.html">const</a></b> Background* <b><a href="CppConst.html">const</a></b> background);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> GetX() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_x); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> GetY() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_y); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> dx, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> dy);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.html">State</a>Left();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.html">State</a>Right();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.html">State</a>Jump(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.html">State</a>Stand(<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> face_right);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Die() { m_has_died <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> HasDied() { <b><a href="CppReturn.html">return</a></b> m_has_died; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;Player<a href="CppState.html">State</a> * m_cur_state;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_x;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_y;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_has_died;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppState.html">State</a>s<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerLeft&gt; m_state_left;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerRight&gt; m_state_right;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerJump&gt; m_state_jump;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerStand&gt; m_state_stand;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitPlayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitPlayer.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;Graphics<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Extctrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "UnitBackground<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppState.html">State</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitFormSprites<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Player::Player()<br/>
&nbsp;&nbsp;: m_x(0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_has_died(<b><a href="CppFalse.html">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cur_state(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_left(<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerLeft&gt;(<b><a href="CppNew.htm">new</a></b> PlayerLeft(*<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_right(<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerRight&gt;(<b><a href="CppNew.htm">new</a></b> PlayerRight(*<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_jump(<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerJump&gt;(<b><a href="CppNew.htm">new</a></b> PlayerJump(*<b><a href="CppThis.htm">this</a></b>))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_stand(<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;PlayerStand&gt;(<b><a href="CppNew.htm">new</a></b> PlayerStand(*<b><a href="CppThis.htm">this</a></b>)))<br/>
{<br/>
&nbsp;&nbsp;Set<a href="CppState.html">State</a>Stand(1.0); <a href="CppComment.htm">//</a>1.0 <a href="CppOperatorAssign.htm">=</a> sprite looks to right<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_cur_state);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::Tick()<br/>
{<br/>
&nbsp;&nbsp;m_cur_state-&gt;Tick(m_x,m_y);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::Draw(Graphics::TCanvas * <b><a href="CppConst.html">const</a></b> canvas) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(canvas);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_cur_state);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_x);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_y);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>canvas-&gt;Draw(x,y,m_image-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;canvas-&gt;Draw(x,y,m_cur_state-&gt;GetSprite()-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> Player::GetHeight() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_cur_state-&gt;GetHeight();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> Player::GetWidth() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_cur_state-&gt;GetWidth();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::Move(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> dx, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> dy)<br/>
{<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorPlus.htm">+</a>=<b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(dx);<br/>
&nbsp;&nbsp;m_y <a href="CppOperatorPlus.htm">+</a>=<b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(dy);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;m_cur_state-&gt;PressKeyLeft();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;m_cur_state-&gt;PressKeyRight();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_cur_state-&gt;PressKeyJump();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;m_cur_state-&gt;PressNoKey();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::SetToWalkingHeight(<b><a href="CppConst.html">const</a></b> Background* <b><a href="CppConst.html">const</a></b> background)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_height <a href="CppOperatorAssign.htm">=</a> m_cur_state-&gt;GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> background-&gt;m_walk_height <a href="CppOperatorMinus.htm">-</a> sprite_height;<br/>
&nbsp;&nbsp;m_y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(y);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::SetToStartingPosition(<b><a href="CppConst.html">const</a></b> Background* <b><a href="CppConst.html">const</a></b> background)<br/>
{<br/>
&nbsp;&nbsp;SetToWalkingHeight(background);<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.html">State</a>Stand(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::RespondToBackground(<b><a href="CppConst.html">const</a></b> Background* <b><a href="CppConst.html">const</a></b> background)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent player from leaving the screen to the left<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_x &lt; 0.0) m_x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prevent player from sinking down the screen after jumping<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite_height <a href="CppOperatorAssign.htm">=</a> m_cur_state-&gt;GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_y);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> max_y <a href="CppOperatorAssign.htm">=</a> background-&gt;m_walk_height <a href="CppOperatorMinus.htm">-</a> sprite_height;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt; max_y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y <a href="CppOperatorAssign.htm">=</a> max_y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlayerJump * <b><a href="CppConst.html">const</a></b> s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.html">dynamic_cast</a></b>&lt;PlayerJump*&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_cur_state);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(s <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Player must have been jumping");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s-&gt;EndJump();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::Set<a href="CppState.html">State</a>Left()<br/>
{<br/>
&nbsp;&nbsp;m_state_left-&gt;StartLeft();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.html">dynamic_cast</a></b>&lt;Player<a href="CppState.html">State</a>*&gt;(m_state_left.get());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::Set<a href="CppState.html">State</a>Right()<br/>
{<br/>
&nbsp;&nbsp;m_state_right-&gt;StartRight();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.html">dynamic_cast</a></b>&lt;Player<a href="CppState.html">State</a>*&gt;(m_state_right.get());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::Set<a href="CppState.html">State</a>Jump(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx)<br/>
{<br/>
&nbsp;&nbsp;m_state_jump-&gt;StartJump(dx);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.html">dynamic_cast</a></b>&lt;Player<a href="CppState.html">State</a>*&gt;(m_state_jump.get());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Player::Set<a href="CppState.html">State</a>Stand(<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> face_right)<br/>
{<br/>
&nbsp;&nbsp;m_state_stand-&gt;StartStand(face_right);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>An upcast, always successful<br/>
&nbsp;&nbsp;m_cur_state <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.html">dynamic_cast</a></b>&lt;Player<a href="CppState.html">State</a>*&gt;(m_state_stand.get());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitPlayerState.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitPlayerState.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitPlayer<a href="CppState.html">State</a>H<br/>
<a href="CppDefine.html">#define</a> UnitPlayer<a href="CppState.html">State</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Player;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Player<a href="CppState.html">State</a><br/>
{<br/>
&nbsp;&nbsp;Player<a href="CppState.html">State</a>(Player&amp; player);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~Player<a href="CppState.html">State</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressKeyLeft()&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressKeyRight() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressKeyJump()&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> PressNoKey()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppDouble.html">double</a></b>&amp; x, <b><a href="CppDouble.html">double</a></b>&amp; y) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> GetSprite() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_sprite; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.html">protected</a></b>:<br/>
&nbsp;&nbsp;Player&amp; m_player;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * m_sprite;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_walk_speed;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_jump_up_speed;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_gravity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_ddx; <a href="CppComment.htm">//</a>Change of dx on key press left and right <br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerJump : <b><a href="CppPublic.html">public</a></b> Player<a href="CppState.html">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerJump(Player&amp; player);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft() { m_dx<a href="CppOperatorMinusAssign.htm">-=</a>m_ddx; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight() { m_dx<a href="CppOperatorPlusAssign.htm">+=</a>m_ddx;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppDouble.html">double</a></b>&amp; x, <b><a href="CppDouble.html">double</a></b>&amp; y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x<a href="CppOperatorPlusAssign.htm">+=</a>m_dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y<a href="CppOperatorPlusAssign.htm">+=</a>m_dy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dy<a href="CppOperatorPlusAssign.htm">+=</a>m_gravity;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartJump(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx) <a href="CppComment.htm">//</a>Is jump forward, backwards or up?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>m_jump_up_speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx <a href="CppOperatorAssign.htm">=</a> dx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> (m_dx <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0.0 ? m_jump_right : m_jump_left);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> EndJump();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_dy;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_dx;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_jump_left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_jump_right;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerLeft : <b><a href="CppPublic.html">public</a></b> Player<a href="CppState.html">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerLeft(Player&amp; player);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartLeft()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> m_walk_left_1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppDouble.html">double</a></b>&amp; x, <b><a href="CppDouble.html">double</a></b>&amp; y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x<a href="CppOperatorMinusAssign.htm">-=</a>m_walk_speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> (m_sprite <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_walk_left_2 ? m_walk_left_1 : m_walk_left_2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_walk_left_1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_walk_left_2;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerRight : <b><a href="CppPublic.html">public</a></b> Player<a href="CppState.html">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerRight(Player&amp; player);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartRight()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> m_walk_right_1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppDouble.html">double</a></b>&amp; x, <b><a href="CppDouble.html">double</a></b>&amp; y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x<a href="CppOperatorPlusAssign.htm">+=</a>m_walk_speed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> (m_sprite <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_walk_right_2 ? m_walk_right_1 : m_walk_right_2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_walk_right_1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_walk_right_2;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> PlayerStand : <b><a href="CppPublic.html">public</a></b> Player<a href="CppState.html">State</a><br/>
{<br/>
&nbsp;&nbsp;PlayerStand(Player&amp; player);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyLeft();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyRight();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressKeyJump();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PressNoKey() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartStand(<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> face_right)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_face_right <a href="CppOperatorAssign.htm">=</a> face_right;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite <a href="CppOperatorAssign.htm">=</a> (m_face_right ? m_stand_right : m_stand_left);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick(<b><a href="CppDouble.html">double</a></b>&amp; x, <b><a href="CppDouble.html">double</a></b>&amp; y) {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_face_right; <a href="CppComment.htm">//</a>Facing right direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_stand_left;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Extctrls::<a href="CppTImage.html">TImage</a> * <b><a href="CppConst.html">const</a></b> m_stand_right;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitPlayerState.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitPlayerState.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> "UnitFormSprites<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppState.html">State</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Player<a href="CppState.html">State</a>::Player<a href="CppState.html">State</a>(Player&amp; player)<br/>
&nbsp;&nbsp;: m_player(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprite(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_speed(7.5),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_jump_up_speed(10.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_gravity(1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ddx(0.25)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> Player<a href="CppState.html">State</a>::GetHeight() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_sprite);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_sprite-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> Player<a href="CppState.html">State</a>::GetWidth() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_sprite);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_sprite-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PlayerJump::PlayerJump(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.html">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_jump_left(FormSprites-&gt;ImageMainCharJumpLeft),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_jump_right(FormSprites-&gt;ImageMainCharJumpRight),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx(0.0), m_dy(0.0)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerJump::EndJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Stand(m_dx <a href="CppOperatorGreaterEqual.html">&gt;=</a> 0.0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PlayerLeft::PlayerLeft(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.html">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_left_1(FormSprites-&gt;ImageMainCharWalkLeft1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_left_2(FormSprites-&gt;ImageMainCharWalkLeft2)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerLeft::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Right();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerLeft::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Jump(-m_walk_speed);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerLeft::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Stand(<b><a href="CppFalse.html">false</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PlayerRight::PlayerRight(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.html">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_right_1(FormSprites-&gt;ImageMainCharWalkRight1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_walk_right_2(FormSprites-&gt;ImageMainCharWalkRight2)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerRight::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Left();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerRight::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Jump(m_walk_speed);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerRight::PressNoKey()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Stand(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PlayerStand::PlayerStand(Player&amp; player)<br/>
&nbsp;&nbsp;: Player<a href="CppState.html">State</a>(player),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_stand_left(FormSprites-&gt;ImageMainCharStandLeft),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_stand_right(FormSprites-&gt;ImageMainCharStandRight)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerStand::PressKeyLeft()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Left();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerStand::PressKeyRight()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Right();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PlayerStand::PressKeyJump()<br/>
{<br/>
&nbsp;&nbsp;m_player.Set<a href="CppState.html">State</a>Jump( m_face_right ? 0.0001 : <a href="CppOperatorMinus.htm">-</a>0.0001);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitSprite.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitSprite.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppIfndef.html">#ifndef</a> UnitSpriteH<br/>
<a href="CppDefine.html">#define</a> UnitSpriteH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppShared_ptr.html">shared_ptr</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<b><a href="CppNamespace.html">namespace</a></b> Extctrls { <b><a href="CppStruct.html">struct</a></b> <a href="CppTImage.html">TImage</a>; }<br/>
<b><a href="CppNamespace.html">namespace</a></b> Graphics { <b><a href="CppStruct.html">struct</a></b> TCanvas; }<br/>
<b><a href="CppNamespace.html">namespace</a></b> Types { <b><a href="CppStruct.html">struct</a></b> TRect; }<br/>
<b><a href="CppStruct.html">struct</a></b> CollisionBehaviour;<br/>
<b><a href="CppStruct.html">struct</a></b> ComplexMovePattern;<br/>
<b><a href="CppStruct.html">struct</a></b> MovementPattern;<br/>
<b><a href="CppStruct.html">struct</a></b> Player;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;Sprite(Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> image);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~Sprite() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Draw(Graphics::TCanvas * <b><a href="CppConst.html">const</a></b> canvas) <b><a href="CppConst.html">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Move() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Restart() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GetX() <b><a href="CppConst.html">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GetY() <b><a href="CppConst.html">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoesCollide(<b><a href="CppConst.html">const</a></b> Player&amp; p) <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnCollide(Player&amp; p);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> InSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> Types::TRect GetRect() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.html">TImage</a> * m_image; <a href="CppComment.htm">//</a><a href="CppTImage.html">TImage</a> to be drawn<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_height;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;CollisionBehaviour&gt; m_collision_behaviour;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> MovingSprite : <b><a href="CppPublic.html">public</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;MovingSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> image)<br/>
&nbsp;&nbsp;: Sprite(image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(<b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(x)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(<b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(y))<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~MovingSprite() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GetX() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_x; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GetY() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_y; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_x;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_y;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(Graphics::TCanvas * <b><a href="CppConst.html">const</a></b> canvas) <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move();<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;ComplexMovePattern&gt; m_movement_pattern;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> NonMovingSprite : <b><a href="CppPublic.html">public</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;NonMovingSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y,Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> image)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: Sprite(image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_y(y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;~NonMovingSprite() {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GetX() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(m_x); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> GetY() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(m_y); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> m_y;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(Graphics::TCanvas * <b><a href="CppConst.html">const</a></b> canvas) <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() {}<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> RockSprite : <b><a href="CppPublic.html">public</a></b> NonMovingSprite<br/>
{<br/>
&nbsp;&nbsp;RockSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.html">struct</a></b> RollingBallSprite : <b><a href="CppPublic.html">public</a></b> MovingSprite<br/>
{<br/>
&nbsp;&nbsp;RollingBallSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> m_dx;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.html">const</a></b> <a href="CppBoostShared_ptr.html">boost::shared_ptr</a>&lt;Sprite&gt; CreateRollingBallSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> speed);<br/>
<br/>
<br/>
<a href="CppEndif.html">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitSprite.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="UnitSprite.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.html">#include</a> &lt;<a href="CppNumericH.html">numeric</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCmathH.html">cmath</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;ExtCtrls<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;Graphics<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppInclude.html">#include</a> "UnitCollisionBehaviour<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitFormSprites<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitMovementPattern<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitPlayer<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "UnitSprite<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Sprite::Sprite(Extctrls::<a href="CppTImage.html">TImage</a>* <b><a href="CppConst.html">const</a></b> image)<br/>
&nbsp;&nbsp;: m_image(image),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_width(image-&gt;Picture-&gt;Bitmap-&gt;Width),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_height(image-&gt;Picture-&gt;Bitmap-&gt;Height)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(image);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_width <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_height <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> <b><a href="CppBool.htm">bool</a></b> Sprite::DoesCollide(<b><a href="CppConst.html">const</a></b> Player&amp; p) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is one of the sprites' corners in Player?<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> s_x1&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetX());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> s_x2 <a href="CppOperatorAssign.htm">=</a> s_x1 <a href="CppOperatorPlus.htm">+</a> m_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> s_y1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetY());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> s_y2 <a href="CppOperatorAssign.htm">=</a> s_y1 <a href="CppOperatorPlus.htm">+</a> m_height;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x1 <a href="CppOperatorAssign.htm">=</a> p.GetX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y1 <a href="CppOperatorAssign.htm">=</a> p.GetY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_x2 <a href="CppOperatorAssign.htm">=</a> p_x1 <a href="CppOperatorPlus.htm">+</a> p.GetWidth();<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> p_y2 <a href="CppOperatorAssign.htm">=</a> p_y1 <a href="CppOperatorPlus.htm">+</a> p.GetHeight();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is top-left pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp; ( (s_x1 &gt; p_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_x1 &lt; p_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y1 &gt; p_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y1 &lt; p_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is top-right pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (s_x2 &gt; p_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_x2 &lt; p_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y1 &gt; p_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y1 &lt; p_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is bottom-left pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (s_x1 &gt; p_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_x1 &lt; p_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y2 &gt; p_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y2 &lt; p_y2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is bottom-right pixel of sprite in player?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (s_x2 &gt; p_x1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_x2 &lt; p_x2 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y2 &gt; p_y1 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> s_y2 &lt; p_y2) );<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sprite::OnCollide(Player&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_collision_behaviour) m_collision_behaviour-&gt;OnCollision(p);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.html">const</a></b> Types::TRect Sprite::GetRect() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetX());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetY());<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> x1 <a href="CppOperatorPlus.htm">+</a> m_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> y1 <a href="CppOperatorPlus.htm">+</a> m_height;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> TRect(x1,y1,x2,y2);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MovingSprite::Draw(Graphics::TCanvas * <b><a href="CppConst.html">const</a></b> canvas) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_x);<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_y);<br/>
&nbsp;&nbsp;canvas-&gt;Draw(x,y,m_image-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MovingSprite::Move()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(m_movement_pattern);<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;Move();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MovingSprite::Restart()<br/>
{<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;Restart();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> NonMovingSprite::Draw(Graphics::TCanvas * <b><a href="CppConst.html">const</a></b> canvas) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;canvas-&gt;Draw(m_x,m_y,m_image-&gt;Picture-&gt;Graphic);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
RockSprite::RockSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
&nbsp;&nbsp;: NonMovingSprite(x,y,FormSprites-&gt;ImageRock)<br/>
{<br/>
&nbsp;&nbsp;m_collision_behaviour.reset(<b><a href="CppNew.htm">new</a></b> LethalCollision);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
RollingBallSprite::RollingBallSprite(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx)<br/>
&nbsp;&nbsp;: MovingSprite(x,y,FormSprites-&gt;ImageBall),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx(dx)<br/>
{<br/>
&nbsp;&nbsp;m_movement_pattern.reset(<b><a href="CppNew.htm">new</a></b> ComplexMovePattern);<br/>
&nbsp;&nbsp;m_collision_behaviour.reset(<b><a href="CppNew.htm">new</a></b> LethalCollision);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> dist_x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_width <a href="CppOperatorPlus.htm">+</a> x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;( <b><a href="CppStatic_cast.html">static_cast</a></b>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(dist_x) <a href="CppOperatorDivide.htm">/</a> <a href="CppFabs.html">std::fabs</a>(dx) );<br/>
<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;<a href="CppAdd.htm">Add</a>StraightLineMovement(m_x,m_y,cnt,dx,0.0);<br/>
&nbsp;&nbsp;m_movement_pattern-&gt;<a href="CppAdd.htm">Add</a>TeleportMovement(m_x,m_y,x,y);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppPragma.html">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
