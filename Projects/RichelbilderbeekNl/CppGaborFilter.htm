<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GaborFilter</title>
  <meta name="description" content="C++ GaborFilter"/>
  <meta name="keywords" content="C++ GaborFilter code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGaborFilter.htm">GaborFilter</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="CppGaborFilter.htm">GaborFilter</a> is a
<a href="CppClass.htm">class</a> for a
Gabor filter.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>gaborfilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="gaborfilter.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
GaborFilter, Gabor filter <b><a href="CppClass.html">class</a></b><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGaborFilter.html">CppGaborFilter</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> GABORFILTER_H<br/>
<a href="CppDefine.html">#define</a> GABORFILTER_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/checked_delete<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppSignals2.html">signals2</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>GaborFilter manages a Gabor filter<br/>
<b><a href="CppStruct.html">struct</a></b> GaborFilter<br/>
{<br/>
&nbsp;&nbsp;GaborFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> frequency <a href="CppOperatorAssign.htm">=</a> 1.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> sigma&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 1.0);<br/>
&nbsp;&nbsp;GaborFilter(<b><a href="CppConst.html">const</a></b> GaborFilter&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
&nbsp;&nbsp;GaborFilter&amp; <b><a href="CppOperator.html">operator</a></b>=(<b><a href="CppConst.html">const</a></b> GaborFilter&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.html">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSignal.html">Signal</a> <a href="CppEmit.html">emitted</a> when a value of the Gabor filter changes<br/>
&nbsp;&nbsp;<b><a href="CppMutable.html">mutable</a></b> <a href="CppBoostSignal.html">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the GaborFilter its angle<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> <a href="CppGetAngle.html">GetAngle</a>()&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_angle;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the GaborFilter its frequency<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> GetFrequency()&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_frequency;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> GetMax() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> 1.0; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the GaborFilter its sigma<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> GetSigma()&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_sigma;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Gabor funtion<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppDouble.html">double</a></b> Gabor<a href="CppFunction.html">Function</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> sigma);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Gabor funtion<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> Gabor<a href="CppFunction.html">Function</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the GaborFilter its angle<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetAngle(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the GaborFilter its frequency<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFrequency(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> frequency);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the GaborFilter its sigma<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSigma(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> sigma);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the GaborFilter its sigma to<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> SuggestSigma(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> width, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> height) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GaborFilter can only be deleted by <a href="CppBoost.html">Boost</a> <a href="CppSmartPointer.html">smart pointer</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.html">virtual</a></b> ~GaborFilter() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GaborFilter can only be deleted by <a href="CppBoost.html">Boost</a> <a href="CppSmartPointer.html">smart pointer</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppHerbSutter.html">Herb Sutter</a>. <a href="CppException.html">Exception</a>al <a href="Cpp.htm">C++</a> style. 2005. ISBN: 0-201-76042-8. Item 8: '<a href="CppFriend.html">Befriending</a> <a href="CppTemplate.html">templates</a>'.<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(GaborFilter*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Angle of the filter in radians<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_angle;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The GaborFilter its frequency<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_frequency;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The GaborFilter its sigma<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> m_sigma;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.html">class</a></b> its <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
};<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> GaborFilter&amp; g);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> GABORFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>gaborfilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="gaborfilter.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
GaborFilter, Gabor filter <b><a href="CppClass.html">class</a></b><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGaborFilter.html">CppGaborFilter</a>.html<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppGaborFilter.html">gaborfilter</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppExercise.html">exercise</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppIostreamH.html">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppLexical_cast.html">lexical_cast</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::GaborFilter::GaborFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> frequency,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> sigma)<br/>
&nbsp;&nbsp;: m_signal_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_angle(angle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_frequency(frequency),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sigma(sigma)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> <a href="CppRibi.htm">ribi</a>::GaborFilter::Gabor<a href="CppFunction.html">Function</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> frequency, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> sigma)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.html">std::sqrt</a>((dx * dx) <a href="CppOperatorPlus.htm">+</a> (dy * dy));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> fx <a href="CppOperatorAssign.htm">=</a> <a href="CppCos.html">std::cos</a>(angle) * frequency;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> fy <a href="CppOperatorAssign.htm">=</a> <a href="CppSin.html">std::sin</a>(angle) * frequency;<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> cosine <a href="CppOperatorAssign.htm">=</a> <a href="CppCos.html">std::cos</a>((dx * fx) <a href="CppOperatorPlus.htm">+</a> (dy * fy));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> gauss <a href="CppOperatorAssign.htm">=</a> <a href="CppExp.html">std::exp</a>( <a href="CppOperatorMinus.htm">-</a>(distance * distance) <a href="CppOperatorDivide.htm">/</a> (2.0 * sigma * sigma));<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> z <a href="CppOperatorAssign.htm">=</a> cosine * gauss;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> z;<br/>
}<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> <a href="CppRibi.htm">ribi</a>::GaborFilter::Gabor<a href="CppFunction.html">Function</a>(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> x, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> y) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> Gabor<a href="CppFunction.html">Function</a>(x,y,m_angle,m_frequency,m_sigma);<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::GaborFilter::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::GaborFilter::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-07-08: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::GaborFilter::SetAngle(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> angle)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (angle <a href="CppOperatorNotEqual.htm">!=</a> m_angle)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_angle <a href="CppOperatorAssign.htm">=</a> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::GaborFilter::SetFrequency(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> frequency)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (frequency <a href="CppOperatorNotEqual.htm">!=</a> m_frequency)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_frequency <a href="CppOperatorAssign.htm">=</a> frequency;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::GaborFilter::SetSigma(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> sigma)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sigma <a href="CppOperatorNotEqual.htm">!=</a> m_sigma)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sigma <a href="CppOperatorAssign.htm">=</a> sigma;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> <a href="CppRibi.htm">ribi</a>::GaborFilter::SuggestSigma(<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> width, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> height) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> s <a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.html">std::sqrt</a>( ((width*0.5)*(width*0.5)) <a href="CppOperatorPlus.htm">+</a> ((height*0.5)*(height*0.5)));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppSqrt.html">std::sqrt</a>(-(s * s) <a href="CppOperatorDivide.htm">/</a> (2.0*<a href="CppLog.html">std::log</a>(1.0/510.0)));<br/>
}<br/>
<br/>
<a href="CppOstream.html">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.html">operator&lt;&lt;</a></b>(<a href="CppOstream.html">std::ostream</a>&amp; os, <b><a href="CppConst.html">const</a></b> GaborFilter&amp; g)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;GaborFilter&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;angle&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> g.<a href="CppGetAngle.html">GetAngle</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/angle&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;frequency&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> g.GetFrequency()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/frequency&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;sigma&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> g.GetSigma()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/sigma&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.html">&lt;&lt;</a> "&lt;/GaborFilter&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
