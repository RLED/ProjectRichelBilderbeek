<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MultipleChoiceQuestion</title>
  <meta name="description" content="C++ MultipleChoiceQuestion"/>
  <meta name="keywords" content="C++ MultipleChoiceQuestion code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> is a <a href="CppClass.htm">class</a> 
for a multiple choice <a href="CppQuestion.htm">question</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>multiplechoicequestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="multiplechoicequestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> a multiple choice <a href="CppQuestion.html">question</a><br/>
Copyright (C) 2011&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="CppMultipleChoiceQuestion.html">CppMultipleChoiceQuestion</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.html">#ifndef</a> MULTIPLECHOICEQUESTION_H<br/>
<a href="CppDefine.html">#define</a> MULTIPLECHOICEQUESTION_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppStringH.html">string</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppVectorH.html">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "<a href="CppQuestion.html">question</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Class <b><a href="CppFor.htm">for</a></b> a multiple choice <a href="CppQuestion.html">question</a><br/>
<b><a href="CppStruct.html">struct</a></b> <a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a> : <b><a href="CppPublic.html">public</a></b> <a href="CppQuestion.html">Question</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws nothing or <a href="CppOut_of_range.html">std::out_of_range</a> or <a href="CppRuntime_error.html">std::runtime_error</a><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; <a href="CppQuestion.html">question</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; <a href="CppQuestion.html">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; answer,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; wrong_answers);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a copy of the <a href="CppQuestion.html">Question</a>, depending on the derived <b><a href="CppClass.html">class</a></b> its type<br/>
&nbsp;&nbsp;<a href="CppQuestion.html">Question</a> * Clone() <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the only correct answer<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; GetAnswer() <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the possible options to be chosen in a random order<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetOptions() <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> Get<a href="CppVersion.html">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.html">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; Get<a href="CppVersion.html">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the wrong answers<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; GetWrongAnswers() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_wrong_answers; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppFriend.html">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.html">boost::checked_delete</a>&lt;&gt;(<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a> *);<br/>
&nbsp;&nbsp;~<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>() {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All the wrong answers<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; m_wrong_answers;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All the options the user can choose from, which equals<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/all wrong answers and the correct answer, shuffled randomly<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; m_options;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the possible options to be chosen in a random order<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; CreateOptions(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; wrong_answers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; answer);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The options (correct <a href="CppOperatorPlus.htm">+</a> wrong answers) are at indices 2 to <a href="CppSeperateString.html">SeperateString</a>(input,',').size()<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; ExtractOptions(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The wrong answers are at indices 3 to <a href="CppSeperateString.html">SeperateString</a>(input,',').size()<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; ExtractWrongAnswers(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Split a string<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.html">SeperateString</a>.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.html">static</a></b> <b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppSeperateString.html">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.html">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> MULTIPLECHOICEQUESTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>multiplechoicequestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="multiplechoicequestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>, <b><a href="CppClass.html">class</a></b> <b><a href="CppFor.htm">for</a></b> a multiple choice <a href="CppQuestion.html">question</a><br/>
Copyright (C) 2011&nbsp;&nbsp;Richl Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="CppMultipleChoiceQuestion.html">CppMultipleChoiceQuestion</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.html">-Weffc++</a>"<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic ignored "-Wunused-local-<b><a href="CppTypedef.html">typedef</a></b>s"<br/>
<a href="CppInclude.html">#include</a> "<a href="CppMultipleChoiceQuestion.html">multiplechoicequestion</a><a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppAlgorithmH.html">algorithm</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppAlgorithm.html">algorithm</a>/string/split<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<a href="CppPragma.html">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; <a href="CppQuestion.html">question</a>)<br/>
&nbsp;&nbsp;: <a href="CppQuestion.html">Question</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSeperateString.html">SeperateString</a>(<a href="CppQuestion.html">question</a>,',').at(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSeperateString.html">SeperateString</a>(<a href="CppQuestion.html">question</a>,',').at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppSeperateString.html">SeperateString</a>(<a href="CppQuestion.html">question</a>,',').at(2) }),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_wrong_answers(ExtractWrongAnswers(<a href="CppQuestion.html">question</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options(ExtractOptions(<a href="CppQuestion.html">question</a>))<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; <a href="CppQuestion.html">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; answer,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; wrong_answers)<br/>
: <a href="CppQuestion.html">Question</a>(filename,<a href="CppQuestion.html">question</a>, {answer} ),<br/>
&nbsp;&nbsp;m_wrong_answers(wrong_answers),<br/>
&nbsp;&nbsp;m_options(CreateOptions(wrong_answers,answer))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(!filename.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Filename must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(<a href="CppFileExists.html">FileExists</a>(filename) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "File must exists");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(!<a href="CppQuestion.html">question</a>.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a> must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.html">assert</a>(!correct_answer.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Correct answer must not be empty");<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!wrong_answers.empty() <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "Wrong answers must not be empty");<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(wrong_answers.size() <a href="CppOperatorLessEqual.html">&lt;=</a> 5 <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a> "There is a maximum of five wrong answers");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQuestion.html">Question</a> * <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::Clone() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetFilename(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.html">Question</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAnswer(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetWrongAnswers());<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::GetAnswer() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(!m_answers.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_answers[0];<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::CreateOptions(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; wrong_answers,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; answer)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> wrong_answers;<br/>
&nbsp;&nbsp;v.push_back(answer);<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.html">std::random_shuffle</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::ExtractOptions(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.html">SeperateString</a>(input,',');<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(v.begin() <a href="CppOperatorPlus.htm">+</a> 2,v.end(),<a href="CppBack_inserter.html">std::back_inserter</a>(w));<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.html">std::random_shuffle</a>(w.begin(),w.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::ExtractWrongAnswers(<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.html">SeperateString</a>(input,',');<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppCopy.html">std::copy</a>(v.begin() <a href="CppOperatorPlus.htm">+</a> 3,v.end(),<a href="CppBack_inserter.html">std::back_inserter</a>(w));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt;&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::GetOptions() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_options;<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::Get<a href="CppVersion.html">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> "1.1";<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::Get<a href="CppVersion.html">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-27: <a href="CppVersion.html">version</a> 1.0: initial <a href="CppVersion.html">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-16: <a href="CppVersion.html">version</a> 1.1: allow parsing from <a href="CppString.html">std::string</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppConst.html">const</a></b> <a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.html">MultipleChoiceQuestion</a>::<a href="CppSeperateString.html">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <a href="CppString.html">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.html">std::vector</a>&lt;<a href="CppString.html">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppSplit.html">boost::algorithm::split</a>(v,input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.html">std::bind2nd</a>(<a href="CppEqual_to.html">std::equal_to</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(),seperator),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.html">boost</a>::<a href="CppAlgorithm.html">algorithm</a>::token_compress_on);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
