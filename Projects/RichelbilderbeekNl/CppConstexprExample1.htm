<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>constexpr example 1: creating a std::array and boost:array</title>
  <meta name="description" content="C++ constexpr example 1: creating a std::array and boost:array"/>
  <meta name="keywords" content="C++ constexpr example 1: creating a std::array and boost:array code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppConstexprExample1.htm">constexpr example 1: creating a std::array and boost:array</a></h1>
<p>&nbsp;</p>
<p><a href="CppConstexprExample1.htm">constexpr example 1: creating a std::array and boost:array</a> is a <a href="CppConstexpr.htm">constexpr</a>
example.</p>
<p>&nbsp;</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppConstexprExample1.zip">Download the Qt Creator project 'CppConstexprExample1' (zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="CppConstexprExample1Exe.zip">Download the Windows executable of 'CppConstexprExample1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 4.8.3 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppConstexprExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppConstexprExample1.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a> <a href="CppWerror.htm">-Werror</a><br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;array&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/array.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<br/>
<b><a href="CppConstexpr.htm">constexpr</a></b> <b><a href="CppInt.htm">int</a></b> GetSize() { <b><a href="CppReturn.htm">return</a></b> 3; }<br/>
<br/>
<a href="CppComment.htm">//</a>Won't <a href="CppCompile.htm">compile</a>: <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; has non-trivial <a href="CppDestructor.htm">destructor</a><br/>
<a href="CppComment.htm">//</a><b><a href="CppConstexpr.htm">constexpr</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; get_vector() { <b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(get_size()); }<br/>
<br/>
<a href="CppComment.htm">//</a>Using <a href="CppStd.htm">std</a>::array will work<br/>
<b><a href="CppConstexpr.htm">constexpr</a></b> <a href="CppStd.htm">std</a>::array&lt;<b><a href="CppInt.htm">int</a></b>,GetSize()&gt; GetStl11Array() { <b><a href="CppReturn.htm">return</a></b> <a href="CppStd.htm">std</a>::array&lt;<b><a href="CppInt.htm">int</a></b>,GetSize()&gt;(); }<br/>
<br/>
<a href="CppComment.htm">//</a>Using <a href="CppBoost.htm">boost</a>::array will work<br/>
<b><a href="CppConstexpr.htm">constexpr</a></b> <a href="CppBoost.htm">boost</a>::array&lt;<b><a href="CppInt.htm">int</a></b>,GetSize()&gt; Get<a href="CppBoost.htm">Boost</a>Array() { <b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::array&lt;<b><a href="CppInt.htm">int</a></b>,GetSize()&gt;(); }<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
T GetFilledArray(<b><a href="CppConst.htm">const</a></b> T&amp; v)<br/>
{<br/>
&nbsp;&nbsp;T w(v);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppGenerate.htm">std::generate</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;<a href="CppCounter.htm">counter</a>]()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppCounter.htm">counter</a><a href="CppOperatorIncrement.htm">++</a>; <a href="CppComment.htm">//</a>Really need old value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStd.htm">std</a>::array&lt;<b><a href="CppInt.htm">int</a></b>,GetSize()&gt;&nbsp;&nbsp; v <a href="CppOperatorAssign.htm">=</a> GetFilledArray(GetStl11Array());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::array&lt;<b><a href="CppInt.htm">int</a></b>,GetSize()&gt; w <a href="CppOperatorAssign.htm">=</a> GetFilledArray(Get<a href="CppBoost.htm">Boost</a>Array());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> w.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppEqual.htm">std::equal</a>(v.begin(),v.end(),w.begin()));<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>crosscompiletowindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="crosscompiletowindows.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#From http://richelbilderbeek.nl/CppQtCrosscompileToWindowsExample15.htm<br/>
<br/>
echo "Cross compiling to Windows: developer version"<br/>
<br/>
echo "1/2: Creating Windows makefile"<br/>
i686-pc-mingw32-qmake CppConstexprExample1.pro<br/>
<br/>
echo "2/2: making makefile"<br/>
<br/>
make<br/>
<br/>
echo "Done"<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

