<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::unique_ptr</title>
  <meta name="description" content="C++ std::unique_ptr"/>
  <meta name="keywords" content="C++ std::unique_ptr code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <img src="PicCpp11.png" alt="C++11"/> <a href="CppUnique_ptr.htm">std::unique_ptr</a></h1>
<p>&nbsp;</p>
<p><a href="CppUnique_ptr.htm">std::unique_ptr</a> is an <a href="Cpp11.htm">C++11</a> <a href="CppStl.htm">STL</a> 
uncopyable <a href="CppSmartPointer.htm">smart pointer</a>.</p>
<p>&nbsp;</p>
<p><a href="CppUnique_ptr.htm">std::unique_ptr</a> is similar to <a href="Cppscoped_ptr.htm">boost::scoped_ptr</a>. </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppUnique_ptr.zip">Download the Qt Creator project 'CppUnique_ptr' (zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="CppUnique_ptrExe.zip">Download a Windows executable of 'CppUnique_ptr' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Test { <b><a href="CppInt.htm">int</a></b> m_x; };<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUnique_ptr.htm">std::unique_ptr</a>&lt;Test&gt; p; <a href="CppComment.htm">//</a>Uninitialized <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p);&nbsp;&nbsp;<a href="CppComment.htm">//</a>Good: uninitialized <a href="CppPointer.htm">pointer</a> is detected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Bad: results in an <a href="CppAccessViolation.htm">access violation</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUnique_ptr.htm">std::unique_ptr</a>&lt;Test&gt; p(<b><a href="CppNew.htm">new</a></b> Test);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>OK<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUnique_ptr.htm">std::unique_ptr</a>&lt;Test&gt; p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> Test);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>OK<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUnique_ptr.htm">std::unique_ptr</a>&lt;Test&gt; p(<b><a href="CppNew.htm">new</a></b> Test);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUnique_ptr.htm">std::unique_ptr</a>&lt;Test&gt; q(p); <a href="CppComment.htm">//</a><a href="CppUnique_ptr.htm">std::unique_ptr</a> cannot be copied<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUnique_ptr.htm">std::unique_ptr</a>&lt;Test&gt; p(<b><a href="CppNew.htm">new</a></b> Test);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppShared_ptr.htm">std::shared_ptr</a>&lt;Test&gt; q(p.release()); <a href="CppComment.htm">//</a>Transfer ownership<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Comparison of <a href="CppUnique_ptr.htm">std::unique_ptr</a> and <a href="Cppscoped_ptr.htm">boost::scoped_ptr</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppScoped_ptr.htm">boost::scoped_ptr</a> can be used from every <a href="Cpp.htm">C++</a> <a href="CppStandard.htm">standard</a>, <a href="CppUnique_ptr.htm">std::unique_ptr</a> from <a href="Cpp11.htm">C++11</a></li>
  <li><a href="CppUnique_ptr.htm">std::unique_ptr</a> is part of the official <a href="Cpp11.htm">C++11</a> <a href="CppStandard.htm">standard</a></li>
  <li><a href="CppUnique_ptr.htm">std::unique_ptr</a> has a 'release' <a href="CppMemberFunction.htm">member function</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
