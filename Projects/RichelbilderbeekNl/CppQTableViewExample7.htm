<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QTableViewExample7</title>
  <meta name="description" content="C++ QTableViewExample7"/>
  <meta name="keywords" content="C++ QTableViewExample7 code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQTableViewExample7.htm">QTableViewExample7</a></h1>
<p>&nbsp;</p>
<!-- This text is generated by CodeToHtml -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppQTableViewExample7.htm">QTableView example 7: two views on one model with a custom data type</a> is a
<a href="CppQTableView.htm">QTableView</a> example.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppQTableViewExample7.png">View a screenshot of 'QTableViewExample7' (png)</a></li>
  <li><a href="CppQTableViewExample7.zip">Download the Qt Creator project 'QTableViewExample7' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> unknown</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.1.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppQTableViewExample7.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppQTableViewExample7.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a><br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a><br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mydata.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mymodel.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= qtdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mydata.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mymodel.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a>&nbsp;&nbsp;&nbsp;&nbsp;+= qtdialog.ui<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>mydata.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="mydata.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> MYDATA_H<br/>
<a href="CppDefine.html">#define</a> MYDATA_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/<a href="CppUblas.html">ublas</a>/<a href="CppMatrix.html">matrix</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Plain <a href="CppInterface.html">interface</a> to a <a href="CppMatrix.html">matrix</a><br/>
<b><a href="CppStruct.html">struct</a></b> MyData<br/>
{<br/>
&nbsp;&nbsp;MyData(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 4, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.html">double</a></b> Get(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> row, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> col) <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetColCount() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRowCount() <b><a href="CppConst.html">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> row, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> col, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> value);<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.html">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt; m_v;<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> MYDATA_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>mydata.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="mydata.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "mydata<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/numeric/con<a href="CppVersion.html">version</a>/cast<a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
MyData::MyData(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols)<br/>
&nbsp;&nbsp;: m_v(n_rows,n_cols)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> denominator <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(row <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> numerator <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppDouble.html">double</a></b>&gt;(col <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v(row,col) <a href="CppOperatorAssign.htm">=</a> numerator <a href="CppOperatorDivide.htm">/</a> denominator;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppDouble.html">double</a></b> MyData::Get(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> row, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> col) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(row &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(col &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size2()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_v(row,col);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> MyData::GetColCount() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size2());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> MyData::GetRowCount() <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size1());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MyData::Set(<b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> row, <b><a href="CppConst.html">const</a></b> <b><a href="CppInt.htm">int</a></b> col, <b><a href="CppConst.html">const</a></b> <b><a href="CppDouble.html">double</a></b> value)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(row &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(col &lt; <a href="CppNumeric_cast.html">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size2()));<br/>
&nbsp;&nbsp;m_v(row,col) <a href="CppOperatorAssign.htm">=</a> value;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>mymodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="mymodel.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> MYMODEL_H<br/>
<a href="CppDefine.html">#define</a> MYMODEL_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppInclude.html">#include</a> "mydata<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppComment.htm">//</a>I did not use <a href="CppQStandardItemModel.html">QStandardItemModel</a> because I did not work with <a href="CppQStandardItem.html">QStandardItem</a><br/>
<br/>
<b><a href="CppStruct.html">struct</a></b> MyModel : <b><a href="CppPublic.html">public</a></b> QAbstractTableModel<br/>
{<br/>
&nbsp;&nbsp;MyModel(<a href="CppQObject.html">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be defined from ABC<br/>
&nbsp;&nbsp;QVariant data(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These flags are needed to allow editing<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemFlags flags(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;index) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Working with the raw data<br/>
&nbsp;&nbsp;MyData&amp; GetData() { <b><a href="CppReturn.html">return</a></b> m_data; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.html">const</a></b> MyData&amp; GetData() <b><a href="CppConst.html">const</a></b> { <b><a href="CppReturn.html">return</a></b> m_data; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Needed <b><a href="CppFor.htm">for</a></b> editable data<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setData(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;index, <b><a href="CppConst.html">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::EditRole);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rowCount(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.html">QModelIndex</a>()) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> columnCount(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.html">QModelIndex</a>()) <b><a href="CppConst.html">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The raw data<br/>
&nbsp;&nbsp;MyData m_data;<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> MYMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>mymodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="mymodel.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "mymodel<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppBoost.html">boost</a>/<a href="CppLexical_cast.html">lexical_cast</a><a href="CppHeaderFile.htm">.h</a>pp&gt;<br/>
<br/>
MyModel::MyModel(<a href="CppQObject.html">QObject</a> *parent)<br/>
&nbsp;&nbsp;: QAbstractTableModel(parent)<br/>
{<br/>
<br/>
}<br/>
<br/>
QVariant MyModel::data(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.html">&amp;&amp;</a>&nbsp;&nbsp;role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.html">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(index.isValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_data.Get(index.row(),index.column());<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>::ItemFlags MyModel::flags(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled;<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> MyModel::rowCount(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_data.GetRowCount();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> MyModel::columnCount(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;) <b><a href="CppConst.html">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> m_data.GetColCount();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> MyModel::setData(<b><a href="CppConst.html">const</a></b> <a href="CppQModelIndex.html">QModelIndex</a> &amp;index, <b><a href="CppConst.html">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppOperatorDivide.htm">/</a>* role <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;m_data.Set(index.row(),index.column(),value.to<a href="CppDouble.html">Double</a>());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let the two views synchronize<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(index,index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.html">#ifndef</a> QTDIALOG_H<br/>
<a href="CppDefine.html">#define</a> QTDIALOG_H<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQDialog.html">QDialog</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.html">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.html">class</a></b> <a href="CppQt.htm">Qt</a>Dialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.html">class</a></b> <a href="CppQt.htm">Qt</a>Dialog : <b><a href="CppPublic.html">public</a></b> <a href="CppQDialog.html">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.html">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.html">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.html">explicit</a></b> <a href="CppQt.htm">Qt</a>Dialog(<a href="CppQWidget.html">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Dialog();<br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPrivate.html">private</a></b> <b><a href="CppSlots.html">slots</a></b>:<br/>
<br/>
<b><a href="CppPrivate.html">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Dialog *ui;<br/>
};<br/>
<br/>
<a href="CppEndif.html">#endif</a> <a href="CppComment.htm">//</a> QTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtdialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> "qtdialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppInclude.html">#include</a> &lt;<a href="CppCassertH.html">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.html">#include</a> "mymodel<a href="CppHeaderFile.htm">.h</a>"<br/>
<a href="CppInclude.html">#include</a> "ui_qtdialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<a href="CppQt.htm">Qt</a>Dialog::<a href="CppQt.htm">Qt</a>Dialog(<a href="CppQWidget.html">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQDialog.html">QDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Dialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;MyModel * <b><a href="CppConst.html">const</a></b> model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> MyModel(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(model);<br/>
&nbsp;&nbsp;ui-&gt;table_left-&gt;setModel(model);<br/>
&nbsp;&nbsp;ui-&gt;table_right-&gt;setModel(model);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;table_left-&gt;model());<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;table_right-&gt;model());<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;table_left-&gt;model() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> model);<br/>
&nbsp;&nbsp;<a href="CppAssert.html">assert</a>(ui-&gt;table_right-&gt;model() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> model);<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>Dialog::~<a href="CppQt.htm">Qt</a>Dialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.html">delete</a></b> ui;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmain.cpp" border = "1"><tr><td><code>
<a href="CppInclude.html">#include</a> &lt;<a href="CppQApplication.html">QApplication</a>&gt;<br/>
<a href="CppInclude.html">#include</a> "qtdialog<a href="CppHeaderFile.htm">.h</a>"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain<a href="CppHeaderFile.htm">.h</a>tm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.html">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Dialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.html">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
