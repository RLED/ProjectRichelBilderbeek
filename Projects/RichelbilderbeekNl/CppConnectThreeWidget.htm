<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ConnectThreeWidget</title>
  <meta name="description" content="C++ ConnectThreeWidget"/>
  <meta name="keywords" content="C++ ConnectThreeWidget code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a></h1>
<p>&nbsp;</p>
<p><a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a> is a <a href="CppWidget.htm">widget</a>
for a <a href="GameConnectThree.htm">ConnectThree game</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>connectthreewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> CONNECTTHREEWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> CONNECTTHREEWIDGET_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBitsetH.htm">bitset</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTuple.htm">tuple</a>/<a href="CppTuple.htm">tuple</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppConnectThree.htm">ConnectThree</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a> embodies the interaction with a user<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBitset.htm">std::bitset</a>&lt;3&gt;&amp; is_player_human <a href="CppOperatorAssign.htm">=</a> <a href="CppBitset.htm">std::bitset</a>&lt;3&gt;(<b><a href="CppTrue.htm">true</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 16,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 12);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppConnectThree.htm">ConnectThree</a> * GetGame() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBitset.htm">std::bitset</a>&lt;3&gt;&amp; GetIsPlayerHuman() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_is_player_human; }<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsComputerTurn() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsHuman(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> player_index) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIsPlayerHuman(<b><a href="CppConst.htm">const</a></b> <a href="CppBitset.htm">std::bitset</a>&lt;3&gt;&amp; is_player_human);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTuple.htm">boost::tuple</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; SuggestMove() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Tick();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~<a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppConnectThree.htm">ConnectThree</a>&gt; m_game;<br/>
&nbsp;&nbsp;<a href="CppBitset.htm">std::bitset</a>&lt;3&gt; m_is_player_human;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> CONNECTTHREEWIDGET_H<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>connectthreewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppConnectThree.htm">connectthree</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppConnectThree.htm">connectthree</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Enable <a href="CppDebug.htm">debugging</a><br/>
<a href="CppUndef.htm">#undef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::<a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBitset.htm">std::bitset</a>&lt;3&gt;&amp; is_player_human,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows)<br/>
&nbsp;&nbsp;: m_game(<b><a href="CppNew.htm">new</a></b> <a href="CppConnectThree.htm">ConnectThree</a>(n_cols,n_rows)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_player_human(is_player_human)<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::DoMove(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;m_game-&gt;DoMove(x,y);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppConnectThree.htm">ConnectThree</a> * <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::GetGame() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_game.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppConnectThree.htm">ConnectThree</a> * <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::GetGame()<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_game.get();<br/>
<a href="CppComment.htm">//</a>}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2011-04-20: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::IsComputerTurn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_game);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !IsHuman(m_game-&gt;GetActivePlayer());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::IsHuman(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> player_index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppConnectThree.htm">ConnectThree</a>::player1 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppConnectThree.htm">ConnectThree</a>::player2 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppConnectThree.htm">ConnectThree</a>::player3 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(player_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(player_index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_is_player_human.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_is_player_human[player_index];<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::Restart()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_game);<br/>
&nbsp;&nbsp;m_game-&gt;Restart();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::SetIsPlayerHuman(<b><a href="CppConst.htm">const</a></b> <a href="CppBitset.htm">std::bitset</a>&lt;3&gt;&amp; is_player_human)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_is_player_human <a href="CppOperatorNotEqual.htm">!=</a> is_player_human)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only restart game <b><a href="CppIf.htm">if</a></b> something changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_player_human <a href="CppOperatorAssign.htm">=</a> is_player_human;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Restart();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppTuple.htm">boost::tuple</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::SuggestMove() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_game-&gt;SuggestMove(<b><a href="CppThis.htm">this</a></b>-&gt;GetIsPlayerHuman());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Tick does either wait <b><a href="CppFor.htm">for</a></b> a human to <a href="CppMake.htm">make</a> his/her move<br/>
<a href="CppComment.htm">///</a>or lets a computer <b><a href="CppDo.htm">do</a></b> its move. Tick must be called by<br/>
<a href="CppComment.htm">///</a><b><a href="CppExtern.htm">extern</a></b>al <a href="CppTime.htm">time</a>rs like <a href="CppWTimer.htm">Wt::WTimer</a> or <a href="CppQTimer.htm">QTimer</a>.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppConnectThreeWidget.htm">ConnectThreeWidget</a>::Tick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsComputerTurn())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTuple.htm">boost::tuple</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> m_game-&gt;SuggestMove(<b><a href="CppThis.htm">this</a></b>-&gt;GetIsPlayerHuman());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_game-&gt;DoMove(m.get&lt;0&gt;(),m.get&lt;1&gt;());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
