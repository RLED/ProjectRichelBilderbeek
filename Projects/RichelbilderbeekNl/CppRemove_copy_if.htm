 
<title>std::remove_copy_if</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Subject>C++ std::remove_copy_if</o:Subject>
  <o:Author>Richel Bilderbeek</o:Author>
  <o:Keywords>C++ Richel Bilderbeek std::remove_copy_if std remove_copy_if copy_if copy_if_not</o:Keywords>
  <o:Description>From http://www.richelbilderbeek.nl</o:Description>
  <o:LastAuthor>Richel Bilderbeek</o:LastAuthor>
  <o:Revision>7</o:Revision>
  <o:TotalTime>129</o:TotalTime>
  <o:Created>2008-05-04T16:12:00Z</o:Created>
  <o:LastSaved>2008-05-04T16:23:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>246</o:Words>
  <o:Characters>1407</o:Characters>
  <o:Category>C++ Richel Bilderbeek std::remove_copy_if</o:Category>
  <o:Manager>Richel Bilderbeek</o:Manager>
  <o:Company>Richel Bilderbeek</o:Company>
  <o:Lines>11</o:Lines>
  <o:Paragraphs>2</o:Paragraphs>
  <o:CharactersWithSpaces>1727</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 
 
 
 
 
 
 
 
 
 
 /* List Definitions */
@list l0
	{mso-list-id:-132;
	mso-list-type:simple;
	mso-list-template-ids:457627192;}
@list l0:level1
	{mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;}
@list l1
	{mso-list-id:-131;
	mso-list-type:simple;
	mso-list-template-ids:264819526;}
@list l1:level1
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;}
@list l2
	{mso-list-id:-130;
	mso-list-type:simple;
	mso-list-template-ids:1180620322;}
@list l2:level1
	{mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;}
@list l3
	{mso-list-id:-129;
	mso-list-type:simple;
	mso-list-template-ids:-1703238722;}
@list l4
	{mso-list-id:-128;
	mso-list-type:simple;
	mso-list-template-ids:1718400216;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l5
	{mso-list-id:-127;
	mso-list-type:simple;
	mso-list-template-ids:-80446496;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l6
	{mso-list-id:-126;
	mso-list-type:simple;
	mso-list-template-ids:-606409688;}
@list l6:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l7
	{mso-list-id:-125;
	mso-list-type:simple;
	mso-list-template-ids:972727674;}
@list l7:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l8
	{mso-list-id:-120;
	mso-list-type:simple;
	mso-list-template-ids:-411536290;}
@list l8:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l9
	{mso-list-id:-119;
	mso-list-type:simple;
	mso-list-template-ids:-203007654;}
@list l9:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Symbol;}
 
-->
</style>
</head>

 

 

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>(<a href="Cpp.htm">C++</a>)
<a href="CppRemove_copy_if.htm">std::remove_copy_if</a></h1>

<p>&nbsp;</p>

<p><a
href="CppAlgorithm.htm">Algorithm</a> that IMHO could have better be called
std::copy_if_not, as it does not remove anything, and only copies the elements
that do <b><i>not</i></b> fulfull the predicate.</p>

<p>&nbsp;</p>

<p>Prefer
<a href="CppAlgorithm.htm">algorithm</a> calls over hand-written loops [1,2].</p>

<p>&nbsp;</p>

<h2>Example</h2>

<p>&nbsp;</p>

<p>&nbsp;</p>

 

<p>#include &lt;algorithm&gt;</p>

<p>#include &lt;list&gt;</p>

<p>#include &lt;iostream&gt;</p>

<p>#include &lt;iterator&gt;</p>

<p>&nbsp;</p>

<p>struct IsEven : public
std::unary_function&lt;bool,int&gt;</p>

<p>{</p>

<p>
 const bool operator()(const int i) { return i % 2 == 0 ; }</p>

<p>};</p>

<p>&nbsp;</p>

<p>int main()</p>

<p>{</p>

<p>
 std::list&lt;int&gt; v;</p>

<p>
 for (int i=0; i!=10; ++i) v.push_back(i);</p>

<p>&nbsp;</p>

<p>
 std::list&lt;int&gt; temp;</p>

<p>
 std::remove_copy_if(v.begin(),v.end(), std::back_inserter(temp),
IsEven() );</p>

<p>&nbsp;</p>

<p>
 std::cout &lt;&lt; &quot;Content of v:&quot; &lt;&lt; std::endl;</p>

<p>
 std::copy(v.begin(), v.end(),
std::ostream_iterator&lt;int&gt;(std::cout,&quot; &quot;));</p>

<p>
 std::cout &lt;&lt; &quot;Content of temp:&quot; &lt;&lt; std::endl;</p>

<p>
 std::copy(temp.begin(), temp.end(),
std::ostream_iterator&lt;int&gt;(std::cout,&quot; &quot;));</p>

<p>&nbsp;</p>

<p>}</p>

<p>&nbsp;</p>

</div>

<p>&nbsp;</p>

<h3>Screen output</h3>

<p>&nbsp;</p>

 

<p>Content of v:</p>

<p>0 1 2 3 4 5 6 7 8 9</p>

<p>Content of temp:</p>

<p>1 3 5 7 9</p>

</div>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>External links</h2>

<p>* <a
href="http://www.sgi.com/tech/stl/remove_copy_if.html">SGI's std:: remove_copy_if page</a></p>

<p>* <a
href="http://www.cppreference.com/cppalgorithm/remove_copy_if.html">C++
Reference's std::remove_copy_if page</a></p>

<p>&nbsp;</p>

<h2><a href="CppReferences.htm">References</a></h2>

<p>[1]
<a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming
Language (3rd edition).</p>

<p>    
 ISBN: 0-201-88954-4. Chapter 18.12.1: 'Prefer algorithms to loops.</p>

<p>[2]
<a href="CppScottMeyers.htm">Scott Meyers</a>. Effective STL. ISBN:
0-201-74962-9.</p>

<p>    
 Item 43: 'Prefer algorithm calls over hand-written loops'</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a
href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>

<p><a
href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
