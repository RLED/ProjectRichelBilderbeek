<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Approximator</title>
  <meta name="description" content="C++ Approximator"/>
  <meta name="keywords" content="C++ Approximator code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppApproximator.htm">Approximator</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppApproximator-->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>approximator.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="approximator.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> APPROXIMATOR_H<br/>
<a href="CppDefine.htm">#define</a> APPROXIMATOR_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Key, <b><a href="CppClass.htm">class</a></b> Value&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> Approximator<br/>
{<br/>
&nbsp;&nbsp;Approximator()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>(<b><a href="CppConst.htm">const</a></b> Key&amp; key, <b><a href="CppConst.htm">const</a></b> Value&amp; value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_m.insert(<a href="CppMake_pair.htm">std::make_pair</a>(key,value));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value Approximate(<b><a href="CppConst.htm">const</a></b> Key&amp; key) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppMap.htm">std::map</a>&lt;Key,Value&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_m.find(key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i<a href="CppOperatorNotEqual.htm">!=</a>m_m.end()) <b><a href="CppReturn.htm">return</a></b> (*i).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> low <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>-m_m.lower_bound(key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> high <a href="CppOperatorAssign.htm">=</a> m_m.lower_bound(key);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (high <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_m.begin() <a href="CppOperatorLogicalOr.htm">||</a> high <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_m.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> Value lowest&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (*m_m.begin()).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> Value highest <a href="CppOperatorAssign.htm">=</a> (*m_m.rbegin()).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppRuntime_error.htm">std::runtime_error</a>("No extrapolation allowed with Approximator <b><a href="CppClass.htm">class</a></b>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(low <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(high <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value d_low <a href="CppOperatorAssign.htm">=</a> (*low).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value d_high <a href="CppOperatorAssign.htm">=</a> (*high).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d_low &lt; key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d_high &gt; key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fraction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (key <a href="CppOperatorMinus.htm">-</a> d_low)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> (d_high <a href="CppOperatorMinus.htm">-</a> d_low);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fraction <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fraction <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_m.find(d_low)&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_m.find(d_high) <a href="CppOperatorNotEqual.htm">!=</a> m_m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value h_low&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (*m_m.find(d_low)).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Value h_high <a href="CppOperatorAssign.htm">=</a> (*m_m.find(d_high)).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ((1.0 <a href="CppOperatorMinus.htm">-</a> fraction)) * h_low <a href="CppOperatorPlus.htm">+</a> ((0.0 <a href="CppOperatorPlus.htm">+</a> fraction) * h_high);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Key GetMax() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> (*m_m.rbegin()).first; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Key GetMin() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> (*m_m.begin()).first; }<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Approximator&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(1.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(2.0,2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.Approximate(1.5) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(4.0,4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.Approximate(3.0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.<a href="CppAdd.htm">Add</a>(3.0,3.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.Approximate(3.0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3.5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMin() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.GetMax() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppMap.htm">std::map</a>&lt;Key,Value&gt; m_m;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> APPROXIMATOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>approximator.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="approximator.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "approximator.h"<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
